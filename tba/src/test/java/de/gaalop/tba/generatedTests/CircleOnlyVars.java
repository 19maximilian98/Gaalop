package de.gaalop.tba.generatedTests;

import java.util.HashMap;

public class CircleOnlyVars implements GAProgram {
	// input variables
	private float y1$0;
	private float y2$0;
	private float y3$0;
	private float x2$0;
	private float x3$0;
	private float x1$0;

	// output variables
	private float m$1;
	private float r$0;
	private float m$2;

	@Override
	public float getValue(String varName) {
		if (varName.equals("m$1")) return m$1;
		if (varName.equals("r$0")) return r$0;
		if (varName.equals("m$2")) return m$2;
		return 0.0f;
	}

	@Override
	public HashMap<String,Float> getValues() {
		HashMap<String,Float> result = new HashMap<String,Float>();
		result.put("m$1",m$1);
		result.put("r$0",r$0);
		result.put("m$2",m$2);
		return result;
	}
	@Override
	public boolean setValue(String varName, float value) {
		if (varName.equals("y1$0")) { y1$0 = value; return true; }
		if (varName.equals("y2$0")) { y2$0 = value; return true; }
		if (varName.equals("y3$0")) { y3$0 = value; return true; }
		if (varName.equals("x2$0")) { x2$0 = value; return true; }
		if (varName.equals("x3$0")) { x3$0 = value; return true; }
		if (varName.equals("x1$0")) { x1$0 = value; return true; }
		return false;
	}
	
	@Override
	public void calculate() {
		m$1 = ((-((((((((((((x1$0 - x2$0)) * y3$0) - (x1$0 * y2$0)) - (x3$0 * ((y1$0 - y2$0)))) + (x2$0 * y1$0))) * (((((-((((y1$0 - y2$0)) * (((0.5f * (y3$0 * y3$0)) + (0.5f * (x3$0 * x3$0))))))) + ((((((-((0.5f * (y2$0 * y2$0)))) + (0.5f * (y1$0 * y1$0))) - (0.5f * (x2$0 * x2$0))) + (0.5f * (x1$0 * x1$0)))) * y3$0)) + (y1$0 * (((0.5f * (y2$0 * y2$0)) + (0.5f * (x2$0 * x2$0)))))) - ((((0.5f * (y1$0 * y1$0)) + (0.5f * (x1$0 * x1$0)))) * y2$0)))) + ((((((-((((x1$0 - x2$0)) * y3$0))) + (x1$0 * y2$0)) + (x3$0 * ((y1$0 - y2$0)))) - (x2$0 * y1$0))) * (((((-((((y1$0 - y2$0)) * (((0.5f * (y3$0 * y3$0)) + (0.5f * (x3$0 * x3$0))))))) + ((((((-((0.5f * (y2$0 * y2$0)))) + (0.5f * (y1$0 * y1$0))) - (0.5f * (x2$0 * x2$0))) + (0.5f * (x1$0 * x1$0)))) * y3$0)) + (y1$0 * (((0.5f * (y2$0 * y2$0)) + (0.5f * (x2$0 * x2$0)))))) - ((((0.5f * (y1$0 * y1$0)) + (0.5f * (x1$0 * x1$0)))) * y2$0)))))) / ((2.0f * (((((-((((x1$0 - x2$0)) * y3$0))) + (x1$0 * y2$0)) + (x3$0 * ((y1$0 - y2$0)))) - (x2$0 * y1$0)))) * (((((((x1$0 - x2$0)) * y3$0) - (x1$0 * y2$0)) - (x3$0 * ((y1$0 - y2$0)))) + (x2$0 * y1$0))))))) - (((((((((((x1$0 - x2$0)) * y3$0) - (x1$0 * y2$0)) - (x3$0 * ((y1$0 - y2$0)))) + (x2$0 * y1$0))) * (((((-((((y1$0 - y2$0)) * (((0.5f * (y3$0 * y3$0)) + (0.5f * (x3$0 * x3$0))))))) + ((((((-((0.5f * (y2$0 * y2$0)))) + (0.5f * (y1$0 * y1$0))) - (0.5f * (x2$0 * x2$0))) + (0.5f * (x1$0 * x1$0)))) * y3$0)) + (y1$0 * (((0.5f * (y2$0 * y2$0)) + (0.5f * (x2$0 * x2$0)))))) - ((((0.5f * (y1$0 * y1$0)) + (0.5f * (x1$0 * x1$0)))) * y2$0)))) - ((((((-((((x1$0 - x2$0)) * y3$0))) + (x1$0 * y2$0)) + (x3$0 * ((y1$0 - y2$0)))) - (x2$0 * y1$0))) * (((((-((((y1$0 - y2$0)) * (((0.5f * (y3$0 * y3$0)) + (0.5f * (x3$0 * x3$0))))))) + ((((((-((0.5f * (y2$0 * y2$0)))) + (0.5f * (y1$0 * y1$0))) - (0.5f * (x2$0 * x2$0))) + (0.5f * (x1$0 * x1$0)))) * y3$0)) + (y1$0 * (((0.5f * (y2$0 * y2$0)) + (0.5f * (x2$0 * x2$0)))))) - ((((0.5f * (y1$0 * y1$0)) + (0.5f * (x1$0 * x1$0)))) * y2$0)))))) / ((2.0f * (((((-((((x1$0 - x2$0)) * y3$0))) + (x1$0 * y2$0)) + (x3$0 * ((y1$0 - y2$0)))) - (x2$0 * y1$0)))) * (((((((x1$0 - x2$0)) * y3$0) - (x1$0 * y2$0)) - (x3$0 * ((y1$0 - y2$0)))) + (x2$0 * y1$0)))))); // e1;
		m$2 = ((-((((((((((((x1$0 - x2$0)) * y3$0) - (x1$0 * y2$0)) - (x3$0 * ((y1$0 - y2$0)))) + (x2$0 * y1$0))) * (((((((x1$0 - x2$0)) * (((0.5f * (y3$0 * y3$0)) + (0.5f * (x3$0 * x3$0))))) - (x1$0 * (((0.5f * (y2$0 * y2$0)) + (0.5f * (x2$0 * x2$0)))))) - (x3$0 * (((((-((0.5f * (y2$0 * y2$0)))) + (0.5f * (y1$0 * y1$0))) - (0.5f * (x2$0 * x2$0))) + (0.5f * (x1$0 * x1$0)))))) + (x2$0 * (((0.5f * (y1$0 * y1$0)) + (0.5f * (x1$0 * x1$0)))))))) + ((((((-((((x1$0 - x2$0)) * y3$0))) + (x1$0 * y2$0)) + (x3$0 * ((y1$0 - y2$0)))) - (x2$0 * y1$0))) * (((((((x1$0 - x2$0)) * (((0.5f * (y3$0 * y3$0)) + (0.5f * (x3$0 * x3$0))))) - (x1$0 * (((0.5f * (y2$0 * y2$0)) + (0.5f * (x2$0 * x2$0)))))) - (x3$0 * (((((-((0.5f * (y2$0 * y2$0)))) + (0.5f * (y1$0 * y1$0))) - (0.5f * (x2$0 * x2$0))) + (0.5f * (x1$0 * x1$0)))))) + (x2$0 * (((0.5f * (y1$0 * y1$0)) + (0.5f * (x1$0 * x1$0)))))))))) / ((2.0f * (((((-((((x1$0 - x2$0)) * y3$0))) + (x1$0 * y2$0)) + (x3$0 * ((y1$0 - y2$0)))) - (x2$0 * y1$0)))) * (((((((x1$0 - x2$0)) * y3$0) - (x1$0 * y2$0)) - (x3$0 * ((y1$0 - y2$0)))) + (x2$0 * y1$0))))))) - (((((((((((x1$0 - x2$0)) * y3$0) - (x1$0 * y2$0)) - (x3$0 * ((y1$0 - y2$0)))) + (x2$0 * y1$0))) * (((((((x1$0 - x2$0)) * (((0.5f * (y3$0 * y3$0)) + (0.5f * (x3$0 * x3$0))))) - (x1$0 * (((0.5f * (y2$0 * y2$0)) + (0.5f * (x2$0 * x2$0)))))) - (x3$0 * (((((-((0.5f * (y2$0 * y2$0)))) + (0.5f * (y1$0 * y1$0))) - (0.5f * (x2$0 * x2$0))) + (0.5f * (x1$0 * x1$0)))))) + (x2$0 * (((0.5f * (y1$0 * y1$0)) + (0.5f * (x1$0 * x1$0)))))))) - ((((((-((((x1$0 - x2$0)) * y3$0))) + (x1$0 * y2$0)) + (x3$0 * ((y1$0 - y2$0)))) - (x2$0 * y1$0))) * (((((((x1$0 - x2$0)) * (((0.5f * (y3$0 * y3$0)) + (0.5f * (x3$0 * x3$0))))) - (x1$0 * (((0.5f * (y2$0 * y2$0)) + (0.5f * (x2$0 * x2$0)))))) - (x3$0 * (((((-((0.5f * (y2$0 * y2$0)))) + (0.5f * (y1$0 * y1$0))) - (0.5f * (x2$0 * x2$0))) + (0.5f * (x1$0 * x1$0)))))) + (x2$0 * (((0.5f * (y1$0 * y1$0)) + (0.5f * (x1$0 * x1$0)))))))))) / ((2.0f * (((((-((((x1$0 - x2$0)) * y3$0))) + (x1$0 * y2$0)) + (x3$0 * ((y1$0 - y2$0)))) - (x2$0 * y1$0)))) * (((((((x1$0 - x2$0)) * y3$0) - (x1$0 * y2$0)) - (x3$0 * ((y1$0 - y2$0)))) + (x2$0 * y1$0)))))); // e2;
		r$0 = ((float) Math.sqrt((float) Math.abs(((((((((-((((y1$0 - y2$0)) * (((0.5f * (y3$0 * y3$0)) + (0.5f * (x3$0 * x3$0))))))) + ((((((-((0.5f * (y2$0 * y2$0)))) + (0.5f * (y1$0 * y1$0))) - (0.5f * (x2$0 * x2$0))) + (0.5f * (x1$0 * x1$0)))) * y3$0)) + (y1$0 * (((0.5f * (y2$0 * y2$0)) + (0.5f * (x2$0 * x2$0)))))) - ((((0.5f * (y1$0 * y1$0)) + (0.5f * (x1$0 * x1$0)))) * y2$0))) * (((((-((((y1$0 - y2$0)) * (((0.5f * (y3$0 * y3$0)) + (0.5f * (x3$0 * x3$0))))))) + ((((((-((0.5f * (y2$0 * y2$0)))) + (0.5f * (y1$0 * y1$0))) - (0.5f * (x2$0 * x2$0))) + (0.5f * (x1$0 * x1$0)))) * y3$0)) + (y1$0 * (((0.5f * (y2$0 * y2$0)) + (0.5f * (x2$0 * x2$0)))))) - ((((0.5f * (y1$0 * y1$0)) + (0.5f * (x1$0 * x1$0)))) * y2$0)))) + ((((((((x1$0 - x2$0)) * (((0.5f * (y3$0 * y3$0)) + (0.5f * (x3$0 * x3$0))))) - (x1$0 * (((0.5f * (y2$0 * y2$0)) + (0.5f * (x2$0 * x2$0)))))) - (x3$0 * (((((-((0.5f * (y2$0 * y2$0)))) + (0.5f * (y1$0 * y1$0))) - (0.5f * (x2$0 * x2$0))) + (0.5f * (x1$0 * x1$0)))))) + (x2$0 * (((0.5f * (y1$0 * y1$0)) + (0.5f * (x1$0 * x1$0))))))) * (((((((x1$0 - x2$0)) * (((0.5f * (y3$0 * y3$0)) + (0.5f * (x3$0 * x3$0))))) - (x1$0 * (((0.5f * (y2$0 * y2$0)) + (0.5f * (x2$0 * x2$0)))))) - (x3$0 * (((((-((0.5f * (y2$0 * y2$0)))) + (0.5f * (y1$0 * y1$0))) - (0.5f * (x2$0 * x2$0))) + (0.5f * (x1$0 * x1$0)))))) + (x2$0 * (((0.5f * (y1$0 * y1$0)) + (0.5f * (x1$0 * x1$0))))))))) - ((2.0f * (((((-((((x1$0 - x2$0)) * y3$0))) + (x1$0 * y2$0)) + (x3$0 * ((y1$0 - y2$0)))) - (x2$0 * y1$0)))) * ((((-(((((x1$0 * y2$0) - (x2$0 * y1$0))) * (((0.5f * (y3$0 * y3$0)) + (0.5f * (x3$0 * x3$0))))))) + ((((x1$0 * (((0.5f * (y2$0 * y2$0)) + (0.5f * (x2$0 * x2$0))))) - (x2$0 * (((0.5f * (y1$0 * y1$0)) + (0.5f * (x1$0 * x1$0))))))) * y3$0)) - (x3$0 * (((y1$0 * (((0.5f * (y2$0 * y2$0)) + (0.5f * (x2$0 * x2$0))))) - ((((0.5f * (y1$0 * y1$0)) + (0.5f * (x1$0 * x1$0)))) * y2$0)))))))))) / (float) Math.abs(((((((x1$0 - x2$0)) * y3$0) - (x1$0 * y2$0)) - (x3$0 * ((y1$0 - y2$0)))) + (x2$0 * y1$0)))); // 1.0;
	}


}
