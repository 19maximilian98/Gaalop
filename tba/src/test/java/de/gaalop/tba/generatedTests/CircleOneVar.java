package de.gaalop.tba.generatedTests;

import java.util.HashMap;

public class CircleOneVar implements GAProgram {
	// input variables
	private float x1_0;

	// output variables
	private float m_1;
	private float r_0;
	private float m_2;

	@Override
	public float getValue(String varName) {
		if (varName.equals("m_1")) return m_1;
		if (varName.equals("r_0")) return r_0;
		if (varName.equals("m_2")) return m_2;
		return 0.0f;
	}

	@Override
	public HashMap<String,Float> getValues() {
		HashMap<String,Float> result = new HashMap<String,Float>();
		result.put("m_1",m_1);
		result.put("r_0",r_0);
		result.put("m_2",m_2);
		return result;
	}
	@Override
	public boolean setValue(String varName, float value) {
		if (varName.equals("x1_0")) { x1_0 = value; return true; }
		return false;
	}
	
	@Override
	public void calculate() {
		float p1_4 = ((0.5f * (x1_0 * x1_0)) + 2.0f);
		float c_7 = (((-((9.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))))) + (4.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) + 272.0f);
		float c_10 = ((((3.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))) - (6.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) - (45.0f * x1_0)) + (26.0f * ((x1_0 - 3.0f))));
		float c_13 = (((4.0f * (((45.0f * x1_0) - (3.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f)))))) - (6.0f * ((90.0f - (9.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))))))) - (26.0f * (((9.0f * x1_0) - 6.0f))));
		float c_14 = (((9.0f * x1_0) - (4.0f * ((x1_0 - 3.0f)))) - 48.0f);
		float mtmp_1 = ((((((9.0f * x1_0) - (4.0f * ((x1_0 - 3.0f)))) - 48.0f)) * ((((-((9.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))))) + (4.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) + 272.0f))) - (((((-((9.0f * x1_0))) + (4.0f * ((x1_0 - 3.0f)))) + 48.0f)) * ((((-((9.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))))) + (4.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) + 272.0f))));
		float mtmp_2 = ((((((9.0f * x1_0) - (4.0f * ((x1_0 - 3.0f)))) - 48.0f)) * (((((3.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))) - (6.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) - (45.0f * x1_0)) + (26.0f * ((x1_0 - 3.0f)))))) - (((((-((9.0f * x1_0))) + (4.0f * ((x1_0 - 3.0f)))) + 48.0f)) * (((((3.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))) - (6.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) - (45.0f * x1_0)) + (26.0f * ((x1_0 - 3.0f)))))));
		float mtmp_5 = ((2.0f * ((((-((9.0f * x1_0))) + (4.0f * ((x1_0 - 3.0f)))) + 48.0f))) * ((((9.0f * x1_0) - (4.0f * ((x1_0 - 3.0f)))) - 48.0f)));
		float mtmp_21 = ((-((((((9.0f * x1_0) - (4.0f * ((x1_0 - 3.0f)))) - 48.0f)) * ((((-((9.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))))) + (4.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) + 272.0f))))) - (((((-((9.0f * x1_0))) + (4.0f * ((x1_0 - 3.0f)))) + 48.0f)) * ((((-((9.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))))) + (4.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) + 272.0f))));
		float mtmp_24 = ((-((((((9.0f * x1_0) - (4.0f * ((x1_0 - 3.0f)))) - 48.0f)) * (((((3.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))) - (6.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) - (45.0f * x1_0)) + (26.0f * ((x1_0 - 3.0f)))))))) - (((((-((9.0f * x1_0))) + (4.0f * ((x1_0 - 3.0f)))) + 48.0f)) * (((((3.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))) - (6.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) - (45.0f * x1_0)) + (26.0f * ((x1_0 - 3.0f)))))));
		m_1 = ((-(((((((((9.0f * x1_0) - (4.0f * ((x1_0 - 3.0f)))) - 48.0f)) * ((((-((9.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))))) + (4.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) + 272.0f))) + (((((-((9.0f * x1_0))) + (4.0f * ((x1_0 - 3.0f)))) + 48.0f)) * ((((-((9.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))))) + (4.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) + 272.0f))))) / ((2.0f * ((((-((9.0f * x1_0))) + (4.0f * ((x1_0 - 3.0f)))) + 48.0f))) * ((((9.0f * x1_0) - (4.0f * ((x1_0 - 3.0f)))) - 48.0f)))))) - ((((((((-((9.0f * x1_0))) + (4.0f * ((x1_0 - 3.0f)))) + 48.0f)) * ((((-((9.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))))) + (4.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) + 272.0f))) - (((((9.0f * x1_0) - (4.0f * ((x1_0 - 3.0f)))) - 48.0f)) * ((((-((9.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))))) + (4.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) + 272.0f))))) / ((2.0f * ((((-((9.0f * x1_0))) + (4.0f * ((x1_0 - 3.0f)))) + 48.0f))) * ((((9.0f * x1_0) - (4.0f * ((x1_0 - 3.0f)))) - 48.0f)))));
		m_2 = ((-(((((((((9.0f * x1_0) - (4.0f * ((x1_0 - 3.0f)))) - 48.0f)) * (((((3.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))) - (6.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) - (45.0f * x1_0)) + (26.0f * ((x1_0 - 3.0f)))))) + (((((-((9.0f * x1_0))) + (4.0f * ((x1_0 - 3.0f)))) + 48.0f)) * (((((3.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))) - (6.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) - (45.0f * x1_0)) + (26.0f * ((x1_0 - 3.0f)))))))) / ((2.0f * ((((-((9.0f * x1_0))) + (4.0f * ((x1_0 - 3.0f)))) + 48.0f))) * ((((9.0f * x1_0) - (4.0f * ((x1_0 - 3.0f)))) - 48.0f)))))) - ((((((((-((9.0f * x1_0))) + (4.0f * ((x1_0 - 3.0f)))) + 48.0f)) * (((((3.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))) - (6.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) - (45.0f * x1_0)) + (26.0f * ((x1_0 - 3.0f)))))) - (((((9.0f * x1_0) - (4.0f * ((x1_0 - 3.0f)))) - 48.0f)) * (((((3.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))) - (6.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) - (45.0f * x1_0)) + (26.0f * ((x1_0 - 3.0f)))))))) / ((2.0f * ((((-((9.0f * x1_0))) + (4.0f * ((x1_0 - 3.0f)))) + 48.0f))) * ((((9.0f * x1_0) - (4.0f * ((x1_0 - 3.0f)))) - 48.0f)))));
		r_0 = ((float) Math.sqrt(Math.abs(((((((((3.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))) - (6.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) - (45.0f * x1_0)) + (26.0f * ((x1_0 - 3.0f))))) * (((((3.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))) - (6.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) - (45.0f * x1_0)) + (26.0f * ((x1_0 - 3.0f)))))) + (((((-((9.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))))) + (4.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) + 272.0f)) * ((((-((9.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))))) + (4.0f * (((0.5f * (x1_0 * x1_0)) - 43.0f)))) + 272.0f)))) - ((2.0f * ((((9.0f * x1_0) - (4.0f * ((x1_0 - 3.0f)))) - 48.0f))) * ((((4.0f * (((45.0f * x1_0) - (3.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f)))))) - (6.0f * ((90.0f - (9.0f * (((0.5f * (x1_0 * x1_0)) + 2.0f))))))) - (26.0f * (((9.0f * x1_0) - 6.0f))))))))) / Math.abs((((9.0f * x1_0) - (4.0f * ((x1_0 - 3.0f)))) - 48.0f)));
	}
}
