#include <math.h>

float computeChainLength(float r1, float r2, float r3,
			float x1, float y1,
			float x2, float y2,
			float x3, float y3,
			float zh, float aufh) {
#pragma gpc begin
#pragma clucalc begin
ExtractFirstPoint = {
    dPP = *(_P(1));
    (dPP+sqrt(abs(_P(1)._P(1))))/(einf.dPP)
}

//Erstelle drei Kugeln, deren Mittelpunkte die Auflager und die
//Radien die Stangenlängen sind. Die Formeln zur Erstellung einer Kugel
//kann man aus der Tabelle der Abbildung 2 entnehmen.
P1 = VecN3(x1,y1,0);
S1 = P1 - 0.5*r1*r1*einf;
P2 = VecN3(x2,y2,0);
S2 = P2 - 0.5*r2*r2*einf;
P3 = VecN3(x3,y3,0);
S3 = P3 - 0.5*r3*r3*einf;

//Die drei Stangen aneinanderlehnen (Kugelschnitt), siehe dazu Abbildung 5
?Pp = S1^S2^S3;
//Bestimme den Aufhängungspunkt durch die
//Extraktion des ersten Punktes aus dem entstandenen Punktpaar
P4 = ExtractFirstPoint(Pp);
//Definiere die xy-Ebene (hat den Normalenvektor e3 in z-Richtung)
PlaneXY = e3;
//Berechne den Abstand zwischen xy-Ebene und Aufhängungspunkt
hoehe = PlaneXY.P4;
//Berechne die Kettenhöhe.
?kette = hoehe-zh-aufh;
#pragma clucalc end

    return mv_get_bladecoeff(kette,1);
#pragma gpc end
}

int main() {
	return !(fabs(computeChainLength(2.0f,2.05f,2.1f,
					0.0f,0.0f,0.85f,0.05f,0.35f,0.8f,
					0.4f,0.2f)
			 - 1.375f) <= 0.01f);
}
