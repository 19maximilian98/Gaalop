#include <iostream>
#include <gcd.h>

int main()
{
#pragma gcd begin
  P = VecN3(1,1,0);
  r = 1;
  S = e0-0.5*r*r*einf;
  C = S^(P+(P.S)*einf);
  ?homogenCenter = C*einf*C;
  ?scale = -homogenCenter.einf;
  ?euclidCenter = homogenCenter / scale;
#pragma gcd end
  /*std::cout << homogenCenter.element<E0>() << std::endl;
  std::cout << euclidCenter.element<E0>() << std::endl;
  std::cout << euclidCenter.element<E1>() << "," << euclidCenter.element<E2>() << "," << euclidCenter.element<E3>() << std::endl;

  std::cout << homogenCenter;

  return !(euclidCenter.element<E1>() == 0.5f && euclidCenter.element<E2>() == 0.5f && euclidCenter.element<E3>() == 0.0f);*/
}
