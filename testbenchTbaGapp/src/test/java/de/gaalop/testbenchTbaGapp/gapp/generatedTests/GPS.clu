
rc2_opt = List(32);
rc1_opt = List(32);
rcPp_opt = List(32);
rcPpDual_opt = List(32);
sph2_opt = List(32);
sph1_opt = List(32);
len_opt = List(32);
nen_opt = List(32);
sat3_opt = List(32);
rc2N_opt = List(32);
z21_opt = List(32);
z32_opt = List(32);
sat2_opt = List(32);
z31_opt = List(32);
z12_opt = List(32);
rc1N_opt = List(32);
z11_opt = List(32);
z22_opt = List(32);
sph3_opt = List(32);
sat1_opt = List(32);

sat1(2) = inputsVector(4); // e1
sat1(3) = inputsVector(5); // e2
sat1(4) = inputsVector(6); // e3
sat1(5) = 0.5 * (inputsVector(4) * inputsVector(4) + inputsVector(5) * inputsVector(5) + inputsVector(6) * inputsVector(6)); // einf
sat1(6) = 1.0; // e0
?sat1;
sat2(2) = inputsVector(7); // e1
sat2(3) = inputsVector(8); // e2
sat2(4) = inputsVector(9); // e3
sat2(5) = 0.5 * (inputsVector(7) * inputsVector(7) + inputsVector(8) * inputsVector(8) + inputsVector(9) * inputsVector(9)); // einf
sat2(6) = 1.0; // e0
?sat2;
sat3(2) = inputsVector(10); // e1
sat3(3) = inputsVector(11); // e2
sat3(4) = inputsVector(12); // e3
sat3(5) = 0.5 * (inputsVector(10) * inputsVector(10) + inputsVector(11) * inputsVector(11) + inputsVector(12) * inputsVector(12)); // einf
sat3(6) = 1.0; // e0
?sat3;
sph1(2) = sat1(2); // e1
sph1(3) = sat1(3); // e2
sph1(4) = sat1(4); // e3
sph1(5) = sat1(5) - 0.5 * inputsVector(1) * inputsVector(1); // einf
sph1(6) = 1.0; // e0
?sph1;
sph2(2) = sat2(2); // e1
sph2(3) = sat2(3); // e2
sph2(4) = sat2(4); // e3
sph2(5) = sat2(5) - 0.5 * inputsVector(2) * inputsVector(2); // einf
sph2(6) = 1.0; // e0
?sph2;
sph3(2) = sat3(2); // e1
sph3(3) = sat3(3); // e2
sph3(4) = sat3(4); // e3
sph3(5) = sat3(5) - 0.5 * inputsVector(3) * inputsVector(3); // einf
sph3(6) = 1.0; // e0
?sph3;
rcPp(17) = (sph1(2) * sph2(3) + (-(sph1(3) * sph2(2)))) * sph3(4) + (-((sph1(2) * sph2(4) + (-(sph1(4) * sph2(2)))) * sph3(3))) + (sph1(3) * sph2(4) + (-(sph1(4) * sph2(3)))) * sph3(2); // e1 ^ (e2 ^ e3)
rcPp(18) = (sph1(2) * sph2(3) + (-(sph1(3) * sph2(2)))) * sph3(5) + (-((sph1(2) * sph2(5) + (-(sph1(5) * sph2(2)))) * sph3(3))) + (sph1(3) * sph2(5) + (-(sph1(5) * sph2(3)))) * sph3(2); // e1 ^ (e2 ^ einf)
rcPp(19) = sph1(2) * sph2(3) + (-(sph1(3) * sph2(2))) + (-((sph1(2) + (-sph2(2))) * sph3(3))) + (sph1(3) + (-sph2(3))) * sph3(2); // e1 ^ (e2 ^ e0)
rcPp(20) = (sph1(2) * sph2(4) + (-(sph1(4) * sph2(2)))) * sph3(5) + (-((sph1(2) * sph2(5) + (-(sph1(5) * sph2(2)))) * sph3(4))) + (sph1(4) * sph2(5) + (-(sph1(5) * sph2(4)))) * sph3(2); // e1 ^ (e3 ^ einf)
rcPp(21) = sph1(2) * sph2(4) + (-(sph1(4) * sph2(2))) + (-((sph1(2) + (-sph2(2))) * sph3(4))) + (sph1(4) + (-sph2(4))) * sph3(2); // e1 ^ (e3 ^ e0)
rcPp(22) = sph1(2) * sph2(5) + (-(sph1(5) * sph2(2))) + (-((sph1(2) + (-sph2(2))) * sph3(5))) + (sph1(5) + (-sph2(5))) * sph3(2); // e1 ^ (einf ^ e0)
rcPp(23) = (sph1(3) * sph2(4) + (-(sph1(4) * sph2(3)))) * sph3(5) + (-((sph1(3) * sph2(5) + (-(sph1(5) * sph2(3)))) * sph3(4))) + (sph1(4) * sph2(5) + (-(sph1(5) * sph2(4)))) * sph3(3); // e2 ^ (e3 ^ einf)
rcPp(24) = sph1(3) * sph2(4) + (-(sph1(4) * sph2(3))) + (-((sph1(3) + (-sph2(3))) * sph3(4))) + (sph1(4) + (-sph2(4))) * sph3(3); // e2 ^ (e3 ^ e0)
rcPp(25) = sph1(3) * sph2(5) + (-(sph1(5) * sph2(3))) + (-((sph1(3) + (-sph2(3))) * sph3(5))) + (sph1(5) + (-sph2(5))) * sph3(3); // e2 ^ (einf ^ e0)
rcPp(26) = sph1(4) * sph2(5) + (-(sph1(5) * sph2(4))) + (-((sph1(4) + (-sph2(4))) * sph3(5))) + (sph1(5) + (-sph2(5))) * sph3(4); // e3 ^ (einf ^ e0)
?rcPp;
len(1) = sqrt(sqrt(abs(((-(rcPp(17) * rcPp(17))) + rcPp(18) * rcPp(19) + rcPp(19) * rcPp(18) + rcPp(20) * rcPp(21) + rcPp(21) * rcPp(20) + rcPp(22) * rcPp(22) + rcPp(23) * rcPp(24) + rcPp(24) * rcPp(23) + rcPp(25) * rcPp(25) + rcPp(26) * rcPp(26)) * ((-(rcPp(17) * rcPp(17))) + rcPp(18) * rcPp(19) + rcPp(19) * rcPp(18) + rcPp(20) * rcPp(21) + rcPp(21) * rcPp(20) + rcPp(22) * rcPp(22) + rcPp(23) * rcPp(24) + rcPp(24) * rcPp(23) + rcPp(25) * rcPp(25) + rcPp(26) * rcPp(26))))); // 1.0
?len;
rcPpDual(7) = (-rcPp(26)); // e1 ^ e2
rcPpDual(8) = rcPp(25); // e1 ^ e3
rcPpDual(9) = (-rcPp(23)); // e1 ^ einf
rcPpDual(10) = rcPp(24); // e1 ^ e0
rcPpDual(11) = (-rcPp(22)); // e2 ^ e3
rcPpDual(12) = rcPp(20); // e2 ^ einf
rcPpDual(13) = (-rcPp(21)); // e2 ^ e0
rcPpDual(14) = (-rcPp(18)); // e3 ^ einf
rcPpDual(15) = rcPp(19); // e3 ^ e0
rcPpDual(16) = rcPp(17); // einf ^ e0
?rcPpDual;
nen(2) = rcPpDual(10); // e1
nen(3) = rcPpDual(13); // e2
nen(4) = rcPpDual(15); // e3
nen(5) = rcPpDual(16); // einf
?nen;
rc1(2) = len(1) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + rcPpDual(7) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + rcPpDual(8) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + (-(rcPpDual(10) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))); // e1
rc1(3) = len(1) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + (-(rcPpDual(7) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(11) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + (-(rcPpDual(13) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))); // e2
rc1(4) = len(1) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + (-(rcPpDual(8) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + (-(rcPpDual(11) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + (-(rcPpDual(15) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))); // e3
rc1(5) = len(1) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + (-(rcPpDual(9) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + (-(rcPpDual(12) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + (-(rcPpDual(14) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + (-(rcPpDual(16) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))); // einf
rc1(6) = (-(rcPpDual(10) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + (-(rcPpDual(13) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + (-(rcPpDual(15) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))); // e0
rc1(17) = rcPpDual(7) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + (-(rcPpDual(8) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(11) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e1 ^ (e2 ^ e3)
rc1(18) = rcPpDual(7) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + (-(rcPpDual(9) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(12) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e1 ^ (e2 ^ einf)
rc1(19) = (-(rcPpDual(10) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(13) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e1 ^ (e2 ^ e0)
rc1(20) = rcPpDual(8) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + (-(rcPpDual(9) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(14) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e1 ^ (e3 ^ einf)
rc1(21) = (-(rcPpDual(10) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(15) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e1 ^ (e3 ^ e0)
rc1(22) = (-(rcPpDual(10) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(16) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e1 ^ (einf ^ e0)
rc1(23) = rcPpDual(11) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + (-(rcPpDual(12) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(14) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e2 ^ (e3 ^ einf)
rc1(24) = (-(rcPpDual(13) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(15) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e2 ^ (e3 ^ e0)
rc1(25) = (-(rcPpDual(13) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(16) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e2 ^ (einf ^ e0)
rc1(26) = (-(rcPpDual(15) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(16) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e3 ^ (einf ^ e0)
?rc1;
rc1N(2) = (-(rc1(2) * (-rc1(6)) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))) + (-(rc1(3) * rc1(19) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))) + (-(rc1(4) * rc1(21) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))) + rc1(6) * rc1(22) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))) + (-(rc1(17) * rc1(24) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))) + rc1(19) * rc1(25) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))) + rc1(21) * rc1(26) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))); // e1
rc1N(3) = (-(rc1(2) * rc1(19) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))) + rc1(3) * (-rc1(6)) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))) + (-(rc1(4) * rc1(24) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))) + rc1(6) * rc1(25) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))) + rc1(17) * rc1(21) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))) + (-(rc1(19) * rc1(22) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))) + rc1(24) * rc1(26) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))); // e2
rc1N(4) = (-(rc1(2) * rc1(21) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))) + rc1(3) * rc1(24) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))) + rc1(4) * (-rc1(6)) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))) + rc1(6) * rc1(26) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))) + (-(rc1(17) * rc1(19) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))) + (-(rc1(21) * rc1(22) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))) + (-(rc1(24) * rc1(25) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))))); // e3
rc1N(5) = (-(rc1(2) * rc1(22) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))) + rc1(3) * rc1(25) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))) + rc1(4) * rc1(26) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))) + rc1(5) * (-rc1(6)) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))) + (-(rc1(18) * rc1(19) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))) + (-(rc1(20) * rc1(21) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))) + (-(rc1(22) * rc1(22) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))) + (-(rc1(23) * rc1(24) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))) + (-(rc1(25) * rc1(25) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))) + (-(rc1(26) * rc1(26) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))))); // einf
rc1N(6) = (-(rc1(6) * (-rc1(6)) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))) + (-(rc1(19) * rc1(19) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))) + (-(rc1(21) * rc1(21) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))) + (-(rc1(24) * rc1(24) / ((-rc1(6)) * (-rc1(6)) + (-((-rc1(19)) * rc1(19))) + (-((-rc1(21)) * rc1(21))) + (-((-rc1(24)) * rc1(24)))))))); // e0
?rc1N;
rc2(2) = (-len(1)) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + rcPpDual(7) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + rcPpDual(8) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + (-(rcPpDual(10) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))); // e1
rc2(3) = (-len(1)) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + (-(rcPpDual(7) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(11) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + (-(rcPpDual(13) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))); // e2
rc2(4) = (-len(1)) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + (-(rcPpDual(8) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + (-(rcPpDual(11) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + (-(rcPpDual(15) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))); // e3
rc2(5) = (-len(1)) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + (-(rcPpDual(9) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + (-(rcPpDual(12) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + (-(rcPpDual(14) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + (-(rcPpDual(16) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))); // einf
rc2(6) = (-(rcPpDual(10) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + (-(rcPpDual(13) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + (-(rcPpDual(15) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))); // e0
rc2(17) = rcPpDual(7) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + (-(rcPpDual(8) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(11) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e1 ^ (e2 ^ e3)
rc2(18) = rcPpDual(7) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + (-(rcPpDual(9) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(12) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e1 ^ (e2 ^ einf)
rc2(19) = (-(rcPpDual(10) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(13) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e1 ^ (e2 ^ e0)
rc2(20) = rcPpDual(8) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + (-(rcPpDual(9) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(14) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e1 ^ (e3 ^ einf)
rc2(21) = (-(rcPpDual(10) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(15) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e1 ^ (e3 ^ e0)
rc2(22) = (-(rcPpDual(10) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(16) * nen(2) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e1 ^ (einf ^ e0)
rc2(23) = rcPpDual(11) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)) + (-(rcPpDual(12) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(14) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e2 ^ (e3 ^ einf)
rc2(24) = (-(rcPpDual(13) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(15) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e2 ^ (e3 ^ e0)
rc2(25) = (-(rcPpDual(13) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(16) * nen(3) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e2 ^ (einf ^ e0)
rc2(26) = (-(rcPpDual(15) * nen(5) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)))) + rcPpDual(16) * nen(4) / (nen(2) * nen(2) + nen(3) * nen(3) + nen(4) * nen(4)); // e3 ^ (einf ^ e0)
?rc2;
rc2N(2) = (-(rc2(2) * (-rc2(6)) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))) + (-(rc2(3) * rc2(19) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))) + (-(rc2(4) * rc2(21) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))) + rc2(6) * rc2(22) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))) + (-(rc2(17) * rc2(24) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))) + rc2(19) * rc2(25) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))) + rc2(21) * rc2(26) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))); // e1
rc2N(3) = (-(rc2(2) * rc2(19) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))) + rc2(3) * (-rc2(6)) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))) + (-(rc2(4) * rc2(24) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))) + rc2(6) * rc2(25) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))) + rc2(17) * rc2(21) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))) + (-(rc2(19) * rc2(22) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))) + rc2(24) * rc2(26) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))); // e2
rc2N(4) = (-(rc2(2) * rc2(21) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))) + rc2(3) * rc2(24) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))) + rc2(4) * (-rc2(6)) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))) + rc2(6) * rc2(26) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))) + (-(rc2(17) * rc2(19) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))) + (-(rc2(21) * rc2(22) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))) + (-(rc2(24) * rc2(25) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))))); // e3
rc2N(5) = (-(rc2(2) * rc2(22) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))) + rc2(3) * rc2(25) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))) + rc2(4) * rc2(26) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))) + rc2(5) * (-rc2(6)) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))) + (-(rc2(18) * rc2(19) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))) + (-(rc2(20) * rc2(21) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))) + (-(rc2(22) * rc2(22) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))) + (-(rc2(23) * rc2(24) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))) + (-(rc2(25) * rc2(25) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))) + (-(rc2(26) * rc2(26) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))))); // einf
rc2N(6) = (-(rc2(6) * (-rc2(6)) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))) + (-(rc2(19) * rc2(19) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))) + (-(rc2(21) * rc2(21) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))) + (-(rc2(24) * rc2(24) / ((-rc2(6)) * (-rc2(6)) + (-((-rc2(19)) * rc2(19))) + (-((-rc2(21)) * rc2(21))) + (-((-rc2(24)) * rc2(24)))))))); // e0
?rc2N;
z11(1) = sqrt((-(2.0 * (rc1N(2) * sat1(2) + rc1N(3) * sat1(3) + rc1N(4) * sat1(4) + (-rc1N(5)) + (-(rc1N(6) * sat1(5))))))) - inputsVector(1); // 1.0
?z11;
z12(1) = sqrt((-(2.0 * (rc2N(2) * sat1(2) + rc2N(3) * sat1(3) + rc2N(4) * sat1(4) + (-rc2N(5)) + (-(rc2N(6) * sat1(5))))))) - inputsVector(1); // 1.0
?z12;
z21(1) = sqrt((-(2.0 * (rc1N(2) * sat2(2) + rc1N(3) * sat2(3) + rc1N(4) * sat2(4) + (-rc1N(5)) + (-(rc1N(6) * sat2(5))))))) - inputsVector(2); // 1.0
?z21;
z22(1) = sqrt((-(2.0 * (rc2N(2) * sat2(2) + rc2N(3) * sat2(3) + rc2N(4) * sat2(4) + (-rc2N(5)) + (-(rc2N(6) * sat2(5))))))) - inputsVector(2); // 1.0
?z22;
z31(1) = sqrt((-(2.0 * (rc1N(2) * sat3(2) + rc1N(3) * sat3(3) + rc1N(4) * sat3(4) + (-rc1N(5)) + (-(rc1N(6) * sat3(5))))))) - inputsVector(3); // 1.0
?z31;
z32(1) = sqrt((-(2.0 * (rc2N(2) * sat3(2) + rc2N(3) * sat3(3) + rc2N(4) * sat3(4) + (-rc2N(5)) + (-(rc2N(6) * sat3(5))))))) - inputsVector(3); // 1.0
?z32;
