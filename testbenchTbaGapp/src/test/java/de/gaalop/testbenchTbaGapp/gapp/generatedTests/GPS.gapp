//sat1[1] = inputsVector[3]
assignVector inputsVector = [d1,d2,d3,sat1x,sat1y,sat1z,sat2x,sat2y,sat2z,sat3x,sat3y,sat3z];
resetMv sat1[32];
setMv sat1[1,2,3] = inputsVector[3,4,5];

//sat1[2] = inputsVector[4]

//sat1[3] = inputsVector[5]

//sat1[4] = 0.5 * (((inputsVector[3] * inputsVector[3]) + (inputsVector[4] * inputsVector[4])) + (inputsVector[5] * inputsVector[5]))
resetMv mv0[1];
setVector ve1 = {inputsVector[3,4,5]};
setVector ve2 = {inputsVector[3,4,5]};
dotVectors mv0[0] = <ve1,ve2>;
resetMv mv4[1];
assignMv mv4[0] = [0.5];
setVector ve3 = {mv4[0]};
setVector ve5 = {mv0[0]};
dotVectors sat1[4] = <ve3,ve5>;

//sat1[5] = 1.0
assignMv sat1[5] = [1.0];

//sat2[1] = inputsVector[6]
resetMv sat2[32];
setMv sat2[1,2,3] = inputsVector[6,7,8];

//sat2[2] = inputsVector[7]

//sat2[3] = inputsVector[8]

//sat2[4] = 0.5 * (((inputsVector[6] * inputsVector[6]) + (inputsVector[7] * inputsVector[7])) + (inputsVector[8] * inputsVector[8]))
resetMv mv6[1];
setVector ve7 = {inputsVector[6,7,8]};
setVector ve8 = {inputsVector[6,7,8]};
dotVectors mv6[0] = <ve7,ve8>;
resetMv mv10[1];
assignMv mv10[0] = [0.5];
setVector ve9 = {mv10[0]};
setVector ve11 = {mv6[0]};
dotVectors sat2[4] = <ve9,ve11>;

//sat2[5] = 1.0
assignMv sat2[5] = [1.0];

//sat3[1] = inputsVector[9]
resetMv sat3[32];
setMv sat3[1,2,3] = inputsVector[9,10,11];

//sat3[2] = inputsVector[10]

//sat3[3] = inputsVector[11]

//sat3[4] = 0.5 * (((inputsVector[9] * inputsVector[9]) + (inputsVector[10] * inputsVector[10])) + (inputsVector[11] * inputsVector[11]))
resetMv mv12[1];
setVector ve13 = {inputsVector[9,10,11]};
setVector ve14 = {inputsVector[9,10,11]};
dotVectors mv12[0] = <ve13,ve14>;
resetMv mv16[1];
assignMv mv16[0] = [0.5];
setVector ve15 = {mv16[0]};
setVector ve17 = {mv12[0]};
dotVectors sat3[4] = <ve15,ve17>;

//sat3[5] = 1.0
assignMv sat3[5] = [1.0];

//sph1[1] = sat1[1]
resetMv sph1[32];
setMv sph1[1,2,3] = sat1[1,2,3];

//sph1[2] = sat1[2]

//sph1[3] = sat1[3]

//sph1[4] = sat1[4] - ((0.5 * inputsVector[0]) * inputsVector[0])
resetMv mv19[2];
setMv mv19[0] = sat1[4];
assignMv mv19[1] = [-0.5];
setVector ve18 = {mv19[0,1]};
resetMv mv21[2];
setMv mv21[1] = inputsVector[0];
assignMv mv21[0] = [1.0];
setVector ve20 = {mv21[0,1]};
resetMv mv23[2];
setMv mv23[1] = inputsVector[0];
assignMv mv23[0] = [1.0];
setVector ve22 = {mv23[0,1]};
dotVectors sph1[4] = <ve18,ve20,ve22>;

//sph1[5] = 1.0
assignMv sph1[5] = [1.0];

//sph2[1] = sat2[1]
resetMv sph2[32];
setMv sph2[1,2,3] = sat2[1,2,3];

//sph2[2] = sat2[2]

//sph2[3] = sat2[3]

//sph2[4] = sat2[4] - ((0.5 * inputsVector[1]) * inputsVector[1])
resetMv mv25[2];
setMv mv25[0] = sat2[4];
assignMv mv25[1] = [-0.5];
setVector ve24 = {mv25[0,1]};
resetMv mv27[2];
setMv mv27[1] = inputsVector[1];
assignMv mv27[0] = [1.0];
setVector ve26 = {mv27[0,1]};
resetMv mv29[2];
setMv mv29[1] = inputsVector[1];
assignMv mv29[0] = [1.0];
setVector ve28 = {mv29[0,1]};
dotVectors sph2[4] = <ve24,ve26,ve28>;

//sph2[5] = 1.0
assignMv sph2[5] = [1.0];

//sph3[1] = sat3[1]
resetMv sph3[32];
setMv sph3[1,2,3] = sat3[1,2,3];

//sph3[2] = sat3[2]

//sph3[3] = sat3[3]

//sph3[4] = sat3[4] - ((0.5 * inputsVector[2]) * inputsVector[2])
resetMv mv31[2];
setMv mv31[0] = sat3[4];
assignMv mv31[1] = [-0.5];
setVector ve30 = {mv31[0,1]};
resetMv mv33[2];
setMv mv33[1] = inputsVector[2];
assignMv mv33[0] = [1.0];
setVector ve32 = {mv33[0,1]};
resetMv mv35[2];
setMv mv35[1] = inputsVector[2];
assignMv mv35[0] = [1.0];
setVector ve34 = {mv35[0,1]};
dotVectors sph3[4] = <ve30,ve32,ve34>;

//sph3[5] = 1.0
assignMv sph3[5] = [1.0];

//rcPp[16] = ((((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) * sph3[3]) + (-(((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) * sph3[2]))) + (((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) * sph3[1])
resetMv rcPp[32];
resetMv mv36[1];
setVector ve37 = {sph1[1,-2]};
setVector ve38 = {sph2[2,1]};
dotVectors mv36[0] = <ve37,ve38>;
resetMv mv39[1];
resetMv mv40[1];
setVector ve41 = {sph1[1,-3]};
setVector ve42 = {sph2[3,1]};
dotVectors mv40[0] = <ve41,ve42>;
setMv mv39[0] = mv40[-0];
resetMv mv43[1];
setVector ve44 = {sph1[2,-3]};
setVector ve45 = {sph2[3,2]};
dotVectors mv43[0] = <ve44,ve45>;
resetMv mv47[3];
setMv mv47[0] = mv36[0];
setMv mv47[1] = mv39[0];
setMv mv47[2] = mv43[0];
setVector ve46 = {mv47[0,1,2]};
setVector ve48 = {sph3[3,2,1]};
dotVectors rcPp[16] = <ve46,ve48>;

//rcPp[17] = ((((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) * sph3[4]) + (-(((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) * sph3[2]))) + (((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) * sph3[1])
resetMv mv49[1];
setVector ve50 = {sph1[1,-2]};
setVector ve51 = {sph2[2,1]};
dotVectors mv49[0] = <ve50,ve51>;
resetMv mv52[1];
resetMv mv53[1];
setVector ve54 = {sph1[1,-4]};
setVector ve55 = {sph2[4,1]};
dotVectors mv53[0] = <ve54,ve55>;
setMv mv52[0] = mv53[-0];
resetMv mv56[1];
setVector ve57 = {sph1[2,-4]};
setVector ve58 = {sph2[4,2]};
dotVectors mv56[0] = <ve57,ve58>;
resetMv mv60[3];
setMv mv60[2] = mv56[0];
setMv mv60[1] = mv52[0];
setMv mv60[0] = mv49[0];
setVector ve59 = {mv60[0,1,2]};
setVector ve61 = {sph3[4,2,1]};
dotVectors rcPp[17] = <ve59,ve61>;

//rcPp[18] = (((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[2]))) + ((sph1[2] + (-(sph2[2]))) * sph3[1])
resetMv mv62[1];
resetMv mv63[1];
resetMv mv65[2];
setMv mv65[0] = sph1[1];
setMv mv65[1] = sph2[-1];
setVector ve64 = {mv65[0,1]};
dotVectors mv63[0] = <ve64>;
setMv mv62[0] = mv63[-0];
resetMv mv66[1];
resetMv mv68[2];
setMv mv68[0] = sph1[2];
setMv mv68[1] = sph2[-2];
setVector ve67 = {mv68[0,1]};
dotVectors mv66[0] = <ve67>;
resetMv mv70[4];
setMv mv70[3] = mv66[0];
setMv mv70[0,1] = sph1[1,-2];
setMv mv70[2] = mv62[0];
setVector ve69 = {mv70[0,1,2,3]};
resetMv mv72[4];
setMv mv72[2,3] = sph3[2,1];
setMv mv72[0,1] = sph2[2,1];
setVector ve71 = {mv72[0,1,2,3]};
dotVectors rcPp[18] = <ve69,ve71>;

//rcPp[19] = ((((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) * sph3[4]) + (-(((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) * sph3[3]))) + (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) * sph3[1])
resetMv mv73[1];
setVector ve74 = {sph1[1,-3]};
setVector ve75 = {sph2[3,1]};
dotVectors mv73[0] = <ve74,ve75>;
resetMv mv76[1];
resetMv mv77[1];
setVector ve78 = {sph1[1,-4]};
setVector ve79 = {sph2[4,1]};
dotVectors mv77[0] = <ve78,ve79>;
setMv mv76[0] = mv77[-0];
resetMv mv80[1];
setVector ve81 = {sph1[3,-4]};
setVector ve82 = {sph2[4,3]};
dotVectors mv80[0] = <ve81,ve82>;
resetMv mv84[3];
setMv mv84[1] = mv76[0];
setMv mv84[2] = mv80[0];
setMv mv84[0] = mv73[0];
setVector ve83 = {mv84[0,1,2]};
setVector ve85 = {sph3[4,3,1]};
dotVectors rcPp[19] = <ve83,ve85>;

//rcPp[20] = (((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[3]))) + ((sph1[3] + (-(sph2[3]))) * sph3[1])
resetMv mv86[1];
resetMv mv87[1];
resetMv mv89[2];
setMv mv89[0] = sph1[1];
setMv mv89[1] = sph2[-1];
setVector ve88 = {mv89[0,1]};
dotVectors mv87[0] = <ve88>;
setMv mv86[0] = mv87[-0];
resetMv mv90[1];
resetMv mv92[2];
setMv mv92[0] = sph1[3];
setMv mv92[1] = sph2[-3];
setVector ve91 = {mv92[0,1]};
dotVectors mv90[0] = <ve91>;
resetMv mv94[4];
setMv mv94[3] = mv90[0];
setMv mv94[0,1] = sph1[1,-3];
setMv mv94[2] = mv86[0];
setVector ve93 = {mv94[0,1,2,3]};
resetMv mv96[4];
setMv mv96[2,3] = sph3[3,1];
setMv mv96[0,1] = sph2[3,1];
setVector ve95 = {mv96[0,1,2,3]};
dotVectors rcPp[20] = <ve93,ve95>;

//rcPp[21] = (((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[1])
resetMv mv97[1];
resetMv mv98[1];
resetMv mv100[2];
setMv mv100[0] = sph1[1];
setMv mv100[1] = sph2[-1];
setVector ve99 = {mv100[0,1]};
dotVectors mv98[0] = <ve99>;
setMv mv97[0] = mv98[-0];
resetMv mv101[1];
resetMv mv103[2];
setMv mv103[0] = sph1[4];
setMv mv103[1] = sph2[-4];
setVector ve102 = {mv103[0,1]};
dotVectors mv101[0] = <ve102>;
resetMv mv105[4];
setMv mv105[2] = mv97[0];
setMv mv105[3] = mv101[0];
setMv mv105[0,1] = sph1[1,-4];
setVector ve104 = {mv105[0,1,2,3]};
resetMv mv107[4];
setMv mv107[2,3] = sph3[4,1];
setMv mv107[0,1] = sph2[4,1];
setVector ve106 = {mv107[0,1,2,3]};
dotVectors rcPp[21] = <ve104,ve106>;

//rcPp[22] = ((((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) * sph3[4]) + (-(((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) * sph3[3]))) + (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) * sph3[2])
resetMv mv108[1];
setVector ve109 = {sph1[2,-3]};
setVector ve110 = {sph2[3,2]};
dotVectors mv108[0] = <ve109,ve110>;
resetMv mv111[1];
resetMv mv112[1];
setVector ve113 = {sph1[2,-4]};
setVector ve114 = {sph2[4,2]};
dotVectors mv112[0] = <ve113,ve114>;
setMv mv111[0] = mv112[-0];
resetMv mv115[1];
setVector ve116 = {sph1[3,-4]};
setVector ve117 = {sph2[4,3]};
dotVectors mv115[0] = <ve116,ve117>;
resetMv mv119[3];
setMv mv119[1] = mv111[0];
setMv mv119[2] = mv115[0];
setMv mv119[0] = mv108[0];
setVector ve118 = {mv119[0,1,2]};
setVector ve120 = {sph3[4,3,2]};
dotVectors rcPp[22] = <ve118,ve120>;

//rcPp[23] = (((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) + (-((sph1[2] + (-(sph2[2]))) * sph3[3]))) + ((sph1[3] + (-(sph2[3]))) * sph3[2])
resetMv mv121[1];
resetMv mv122[1];
resetMv mv124[2];
setMv mv124[0] = sph1[2];
setMv mv124[1] = sph2[-2];
setVector ve123 = {mv124[0,1]};
dotVectors mv122[0] = <ve123>;
setMv mv121[0] = mv122[-0];
resetMv mv125[1];
resetMv mv127[2];
setMv mv127[0] = sph1[3];
setMv mv127[1] = sph2[-3];
setVector ve126 = {mv127[0,1]};
dotVectors mv125[0] = <ve126>;
resetMv mv129[4];
setMv mv129[3] = mv125[0];
setMv mv129[0,1] = sph1[2,-3];
setMv mv129[2] = mv121[0];
setVector ve128 = {mv129[0,1,2,3]};
resetMv mv131[4];
setMv mv131[2,3] = sph3[3,2];
setMv mv131[0,1] = sph2[3,2];
setVector ve130 = {mv131[0,1,2,3]};
dotVectors rcPp[23] = <ve128,ve130>;

//rcPp[24] = (((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) + (-((sph1[2] + (-(sph2[2]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[2])
resetMv mv132[1];
resetMv mv133[1];
resetMv mv135[2];
setMv mv135[0] = sph1[2];
setMv mv135[1] = sph2[-2];
setVector ve134 = {mv135[0,1]};
dotVectors mv133[0] = <ve134>;
setMv mv132[0] = mv133[-0];
resetMv mv136[1];
resetMv mv138[2];
setMv mv138[0] = sph1[4];
setMv mv138[1] = sph2[-4];
setVector ve137 = {mv138[0,1]};
dotVectors mv136[0] = <ve137>;
resetMv mv140[4];
setMv mv140[3] = mv136[0];
setMv mv140[0,1] = sph1[2,-4];
setMv mv140[2] = mv132[0];
setVector ve139 = {mv140[0,1,2,3]};
resetMv mv142[4];
setMv mv142[2,3] = sph3[4,2];
setMv mv142[0,1] = sph2[4,2];
setVector ve141 = {mv142[0,1,2,3]};
dotVectors rcPp[24] = <ve139,ve141>;

//rcPp[25] = (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) + (-((sph1[3] + (-(sph2[3]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[3])
resetMv mv143[1];
resetMv mv144[1];
resetMv mv146[2];
setMv mv146[0] = sph1[3];
setMv mv146[1] = sph2[-3];
setVector ve145 = {mv146[0,1]};
dotVectors mv144[0] = <ve145>;
setMv mv143[0] = mv144[-0];
resetMv mv147[1];
resetMv mv149[2];
setMv mv149[0] = sph1[4];
setMv mv149[1] = sph2[-4];
setVector ve148 = {mv149[0,1]};
dotVectors mv147[0] = <ve148>;
resetMv mv151[4];
setMv mv151[3] = mv147[0];
setMv mv151[0,1] = sph1[3,-4];
setMv mv151[2] = mv143[0];
setVector ve150 = {mv151[0,1,2,3]};
resetMv mv153[4];
setMv mv153[2,3] = sph3[4,3];
setMv mv153[0,1] = sph2[4,3];
setVector ve152 = {mv153[0,1,2,3]};
dotVectors rcPp[25] = <ve150,ve152>;

//temp0[0] = (((((((((-(rcPp[16] * rcPp[16])) + (rcPp[17] * rcPp[18])) + (rcPp[18] * rcPp[17])) + (rcPp[19] * rcPp[20])) + (rcPp[20] * rcPp[19])) + (rcPp[21] * rcPp[21])) + (rcPp[22] * rcPp[23])) + (rcPp[23] * rcPp[22])) + (rcPp[24] * rcPp[24])) + (rcPp[25] * rcPp[25])
resetMv temp0[32];
setVector ve154 = {rcPp[-16,17,18,19,20,21,22,23,24,25]};
setVector ve155 = {rcPp[16,18,17,20,19,21,23,22,24,25]};
dotVectors temp0[0] = <ve154,ve155>;

//temp1 = abs(temp0)
resetMv temp1[32];
calculateMv temp1 = ABS(temp0);

//temp2 = sqrt(temp1)
resetMv temp2[32];
calculateMv temp2 = SQRT(temp1);

//len[0] = temp2[0]
resetMv len[32];
setMv len[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31] = temp2[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];

//len[1] = temp2[1]

//len[2] = temp2[2]

//len[3] = temp2[3]

//len[4] = temp2[4]

//len[5] = temp2[5]

//len[6] = temp2[6]

//len[7] = temp2[7]

//len[8] = temp2[8]

//len[9] = temp2[9]

//len[10] = temp2[10]

//len[11] = temp2[11]

//len[12] = temp2[12]

//len[13] = temp2[13]

//len[14] = temp2[14]

//len[15] = temp2[15]

//len[16] = temp2[16]

//len[17] = temp2[17]

//len[18] = temp2[18]

//len[19] = temp2[19]

//len[20] = temp2[20]

//len[21] = temp2[21]

//len[22] = temp2[22]

//len[23] = temp2[23]

//len[24] = temp2[24]

//len[25] = temp2[25]

//len[26] = temp2[26]

//len[27] = temp2[27]

//len[28] = temp2[28]

//len[29] = temp2[29]

//len[30] = temp2[30]

//len[31] = temp2[31]

//rcPpDual[6] = -(rcPp[25])
resetMv rcPpDual[32];
setMv rcPpDual[6,7,8,9,10,11,12,13,14,15] = rcPp[-25,24,-22,23,-21,19,-20,-17,18,16];

//rcPpDual[7] = rcPp[24]

//rcPpDual[8] = -(rcPp[22])

//rcPpDual[9] = rcPp[23]

//rcPpDual[10] = -(rcPp[21])

//rcPpDual[11] = rcPp[19]

//rcPpDual[12] = -(rcPp[20])

//rcPpDual[13] = -(rcPp[17])

//rcPpDual[14] = rcPp[18]

//rcPpDual[15] = rcPp[16]

//nen[1] = rcPpDual[9]
resetMv nen[32];
setMv nen[1,2,3,4] = rcPpDual[9,12,14,15];

//nen[2] = rcPpDual[12]

//nen[3] = rcPpDual[14]

//nen[4] = rcPpDual[15]

//rc1[0] = (((len[1] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (len[2] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[3] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[5] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv rc1[32];
resetMv mv156[1];
resetMv mv157[1];
setVector ve158 = {nen[1,2,3]};
setVector ve159 = {nen[1,2,3]};
dotVectors mv157[0] = <ve158,ve159>;
resetMv mv160[1];
setMv mv160[0] = nen[1];
resetMv mv161[1];
setMv mv161[0] = mv157[0];
calculateMvCoeff mv156[0] = DIVISION(mv160,mv161);
resetMv mv162[1];
resetMv mv163[1];
setVector ve164 = {nen[1,2,3]};
setVector ve165 = {nen[1,2,3]};
dotVectors mv163[0] = <ve164,ve165>;
resetMv mv166[1];
setMv mv166[0] = nen[2];
resetMv mv167[1];
setMv mv167[0] = mv163[0];
calculateMvCoeff mv162[0] = DIVISION(mv166,mv167);
resetMv mv168[1];
resetMv mv169[1];
setVector ve170 = {nen[1,2,3]};
setVector ve171 = {nen[1,2,3]};
dotVectors mv169[0] = <ve170,ve171>;
resetMv mv172[1];
setMv mv172[0] = nen[3];
resetMv mv173[1];
setMv mv173[0] = mv169[0];
calculateMvCoeff mv168[0] = DIVISION(mv172,mv173);
resetMv mv174[1];
resetMv mv175[1];
setVector ve176 = {nen[1,2,3]};
setVector ve177 = {nen[1,2,3]};
dotVectors mv175[0] = <ve176,ve177>;
resetMv mv178[1];
setMv mv178[0] = nen[4];
resetMv mv179[1];
setMv mv179[0] = mv175[0];
calculateMvCoeff mv174[0] = DIVISION(mv178,mv179);
setVector ve180 = {len[1,2,3,-5]};
resetMv mv182[4];
setMv mv182[0] = mv156[0];
setMv mv182[3] = mv174[0];
setMv mv182[2] = mv168[0];
setMv mv182[1] = mv162[0];
setVector ve181 = {mv182[0,1,2,3]};
dotVectors rc1[0] = <ve180,ve181>;

//rc1[1] = (((len[0] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + ((rcPpDual[6] + len[6]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[7] + len[7]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[9] + len[9]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv183[1];
resetMv mv184[1];
setVector ve185 = {nen[1,2,3]};
setVector ve186 = {nen[1,2,3]};
dotVectors mv184[0] = <ve185,ve186>;
resetMv mv187[1];
setMv mv187[0] = nen[1];
resetMv mv188[1];
setMv mv188[0] = mv184[0];
calculateMvCoeff mv183[0] = DIVISION(mv187,mv188);
resetMv mv189[1];
resetMv mv191[2];
setMv mv191[1] = len[6];
setMv mv191[0] = rcPpDual[6];
setVector ve190 = {mv191[0,1]};
dotVectors mv189[0] = <ve190>;
resetMv mv192[1];
resetMv mv193[1];
setVector ve194 = {nen[1,2,3]};
setVector ve195 = {nen[1,2,3]};
dotVectors mv193[0] = <ve194,ve195>;
resetMv mv196[1];
setMv mv196[0] = nen[2];
resetMv mv197[1];
setMv mv197[0] = mv193[0];
calculateMvCoeff mv192[0] = DIVISION(mv196,mv197);
resetMv mv198[1];
resetMv mv200[2];
setMv mv200[1] = len[7];
setMv mv200[0] = rcPpDual[7];
setVector ve199 = {mv200[0,1]};
dotVectors mv198[0] = <ve199>;
resetMv mv201[1];
resetMv mv202[1];
setVector ve203 = {nen[1,2,3]};
setVector ve204 = {nen[1,2,3]};
dotVectors mv202[0] = <ve203,ve204>;
resetMv mv205[1];
setMv mv205[0] = nen[3];
resetMv mv206[1];
setMv mv206[0] = mv202[0];
calculateMvCoeff mv201[0] = DIVISION(mv205,mv206);
resetMv mv207[1];
resetMv mv208[1];
resetMv mv210[2];
setMv mv210[1] = len[9];
setMv mv210[0] = rcPpDual[9];
setVector ve209 = {mv210[0,1]};
dotVectors mv208[0] = <ve209>;
setMv mv207[0] = mv208[-0];
resetMv mv211[1];
resetMv mv212[1];
setVector ve213 = {nen[1,2,3]};
setVector ve214 = {nen[1,2,3]};
dotVectors mv212[0] = <ve213,ve214>;
resetMv mv215[1];
setMv mv215[0] = nen[4];
resetMv mv216[1];
setMv mv216[0] = mv212[0];
calculateMvCoeff mv211[0] = DIVISION(mv215,mv216);
resetMv mv218[4];
setMv mv218[2] = mv198[0];
setMv mv218[1] = mv189[0];
setMv mv218[3] = mv207[0];
setMv mv218[0] = len[0];
setVector ve217 = {mv218[0,1,2,3]};
resetMv mv220[4];
setMv mv220[2] = mv201[0];
setMv mv220[0] = mv183[0];
setMv mv220[1] = mv192[0];
setMv mv220[3] = mv211[0];
setVector ve219 = {mv220[0,1,2,3]};
dotVectors rc1[1] = <ve217,ve219>;

//rc1[2] = (((len[0] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[6] + len[6]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[10] + len[10]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[12] + len[12]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv221[1];
resetMv mv222[1];
setVector ve223 = {nen[1,2,3]};
setVector ve224 = {nen[1,2,3]};
dotVectors mv222[0] = <ve223,ve224>;
resetMv mv225[1];
setMv mv225[0] = nen[2];
resetMv mv226[1];
setMv mv226[0] = mv222[0];
calculateMvCoeff mv221[0] = DIVISION(mv225,mv226);
resetMv mv227[1];
resetMv mv228[1];
resetMv mv230[2];
setMv mv230[1] = len[6];
setMv mv230[0] = rcPpDual[6];
setVector ve229 = {mv230[0,1]};
dotVectors mv228[0] = <ve229>;
setMv mv227[0] = mv228[-0];
resetMv mv231[1];
resetMv mv232[1];
setVector ve233 = {nen[1,2,3]};
setVector ve234 = {nen[1,2,3]};
dotVectors mv232[0] = <ve233,ve234>;
resetMv mv235[1];
setMv mv235[0] = nen[1];
resetMv mv236[1];
setMv mv236[0] = mv232[0];
calculateMvCoeff mv231[0] = DIVISION(mv235,mv236);
resetMv mv237[1];
resetMv mv239[2];
setMv mv239[1] = len[10];
setMv mv239[0] = rcPpDual[10];
setVector ve238 = {mv239[0,1]};
dotVectors mv237[0] = <ve238>;
resetMv mv240[1];
resetMv mv241[1];
setVector ve242 = {nen[1,2,3]};
setVector ve243 = {nen[1,2,3]};
dotVectors mv241[0] = <ve242,ve243>;
resetMv mv244[1];
setMv mv244[0] = nen[3];
resetMv mv245[1];
setMv mv245[0] = mv241[0];
calculateMvCoeff mv240[0] = DIVISION(mv244,mv245);
resetMv mv246[1];
resetMv mv247[1];
resetMv mv249[2];
setMv mv249[1] = len[12];
setMv mv249[0] = rcPpDual[12];
setVector ve248 = {mv249[0,1]};
dotVectors mv247[0] = <ve248>;
setMv mv246[0] = mv247[-0];
resetMv mv250[1];
resetMv mv251[1];
setVector ve252 = {nen[1,2,3]};
setVector ve253 = {nen[1,2,3]};
dotVectors mv251[0] = <ve252,ve253>;
resetMv mv254[1];
setMv mv254[0] = nen[4];
resetMv mv255[1];
setMv mv255[0] = mv251[0];
calculateMvCoeff mv250[0] = DIVISION(mv254,mv255);
resetMv mv257[4];
setMv mv257[1] = mv227[0];
setMv mv257[3] = mv246[0];
setMv mv257[0] = len[0];
setMv mv257[2] = mv237[0];
setVector ve256 = {mv257[0,1,2,3]};
resetMv mv259[4];
setMv mv259[3] = mv250[0];
setMv mv259[2] = mv240[0];
setMv mv259[1] = mv231[0];
setMv mv259[0] = mv221[0];
setVector ve258 = {mv259[0,1,2,3]};
dotVectors rc1[2] = <ve256,ve258>;

//rc1[3] = (((len[0] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[7] + len[7]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[10] + len[10]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[14] + len[14]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv260[1];
resetMv mv261[1];
setVector ve262 = {nen[1,2,3]};
setVector ve263 = {nen[1,2,3]};
dotVectors mv261[0] = <ve262,ve263>;
resetMv mv264[1];
setMv mv264[0] = nen[3];
resetMv mv265[1];
setMv mv265[0] = mv261[0];
calculateMvCoeff mv260[0] = DIVISION(mv264,mv265);
resetMv mv266[1];
resetMv mv267[1];
resetMv mv269[2];
setMv mv269[1] = len[7];
setMv mv269[0] = rcPpDual[7];
setVector ve268 = {mv269[0,1]};
dotVectors mv267[0] = <ve268>;
setMv mv266[0] = mv267[-0];
resetMv mv270[1];
resetMv mv271[1];
setVector ve272 = {nen[1,2,3]};
setVector ve273 = {nen[1,2,3]};
dotVectors mv271[0] = <ve272,ve273>;
resetMv mv274[1];
setMv mv274[0] = nen[1];
resetMv mv275[1];
setMv mv275[0] = mv271[0];
calculateMvCoeff mv270[0] = DIVISION(mv274,mv275);
resetMv mv276[1];
resetMv mv277[1];
resetMv mv279[2];
setMv mv279[1] = len[10];
setMv mv279[0] = rcPpDual[10];
setVector ve278 = {mv279[0,1]};
dotVectors mv277[0] = <ve278>;
setMv mv276[0] = mv277[-0];
resetMv mv280[1];
resetMv mv281[1];
setVector ve282 = {nen[1,2,3]};
setVector ve283 = {nen[1,2,3]};
dotVectors mv281[0] = <ve282,ve283>;
resetMv mv284[1];
setMv mv284[0] = nen[2];
resetMv mv285[1];
setMv mv285[0] = mv281[0];
calculateMvCoeff mv280[0] = DIVISION(mv284,mv285);
resetMv mv286[1];
resetMv mv287[1];
resetMv mv289[2];
setMv mv289[1] = len[14];
setMv mv289[0] = rcPpDual[14];
setVector ve288 = {mv289[0,1]};
dotVectors mv287[0] = <ve288>;
setMv mv286[0] = mv287[-0];
resetMv mv290[1];
resetMv mv291[1];
setVector ve292 = {nen[1,2,3]};
setVector ve293 = {nen[1,2,3]};
dotVectors mv291[0] = <ve292,ve293>;
resetMv mv294[1];
setMv mv294[0] = nen[4];
resetMv mv295[1];
setMv mv295[0] = mv291[0];
calculateMvCoeff mv290[0] = DIVISION(mv294,mv295);
resetMv mv297[4];
setMv mv297[3] = mv286[0];
setMv mv297[1] = mv266[0];
setMv mv297[0] = len[0];
setMv mv297[2] = mv276[0];
setVector ve296 = {mv297[0,1,2,3]};
resetMv mv299[4];
setMv mv299[0] = mv260[0];
setMv mv299[2] = mv280[0];
setMv mv299[1] = mv270[0];
setMv mv299[3] = mv290[0];
setVector ve298 = {mv299[0,1,2,3]};
dotVectors rc1[3] = <ve296,ve298>;

//rc1[4] = ((((len[0] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] + len[8]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[11] + len[11]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[13] + len[13]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[15] + len[15]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv300[1];
resetMv mv301[1];
setVector ve302 = {nen[1,2,3]};
setVector ve303 = {nen[1,2,3]};
dotVectors mv301[0] = <ve302,ve303>;
resetMv mv304[1];
setMv mv304[0] = nen[4];
resetMv mv305[1];
setMv mv305[0] = mv301[0];
calculateMvCoeff mv300[0] = DIVISION(mv304,mv305);
resetMv mv306[1];
resetMv mv307[1];
resetMv mv309[2];
setMv mv309[1] = len[8];
setMv mv309[0] = rcPpDual[8];
setVector ve308 = {mv309[0,1]};
dotVectors mv307[0] = <ve308>;
setMv mv306[0] = mv307[-0];
resetMv mv310[1];
resetMv mv311[1];
setVector ve312 = {nen[1,2,3]};
setVector ve313 = {nen[1,2,3]};
dotVectors mv311[0] = <ve312,ve313>;
resetMv mv314[1];
setMv mv314[0] = nen[1];
resetMv mv315[1];
setMv mv315[0] = mv311[0];
calculateMvCoeff mv310[0] = DIVISION(mv314,mv315);
resetMv mv316[1];
resetMv mv317[1];
resetMv mv319[2];
setMv mv319[1] = len[11];
setMv mv319[0] = rcPpDual[11];
setVector ve318 = {mv319[0,1]};
dotVectors mv317[0] = <ve318>;
setMv mv316[0] = mv317[-0];
resetMv mv320[1];
resetMv mv321[1];
setVector ve322 = {nen[1,2,3]};
setVector ve323 = {nen[1,2,3]};
dotVectors mv321[0] = <ve322,ve323>;
resetMv mv324[1];
setMv mv324[0] = nen[2];
resetMv mv325[1];
setMv mv325[0] = mv321[0];
calculateMvCoeff mv320[0] = DIVISION(mv324,mv325);
resetMv mv326[1];
resetMv mv327[1];
resetMv mv329[2];
setMv mv329[1] = len[13];
setMv mv329[0] = rcPpDual[13];
setVector ve328 = {mv329[0,1]};
dotVectors mv327[0] = <ve328>;
setMv mv326[0] = mv327[-0];
resetMv mv330[1];
resetMv mv331[1];
setVector ve332 = {nen[1,2,3]};
setVector ve333 = {nen[1,2,3]};
dotVectors mv331[0] = <ve332,ve333>;
resetMv mv334[1];
setMv mv334[0] = nen[3];
resetMv mv335[1];
setMv mv335[0] = mv331[0];
calculateMvCoeff mv330[0] = DIVISION(mv334,mv335);
resetMv mv336[1];
resetMv mv337[1];
resetMv mv339[2];
setMv mv339[1] = len[15];
setMv mv339[0] = rcPpDual[15];
setVector ve338 = {mv339[0,1]};
dotVectors mv337[0] = <ve338>;
setMv mv336[0] = mv337[-0];
resetMv mv340[1];
resetMv mv341[1];
setVector ve342 = {nen[1,2,3]};
setVector ve343 = {nen[1,2,3]};
dotVectors mv341[0] = <ve342,ve343>;
resetMv mv344[1];
setMv mv344[0] = nen[4];
resetMv mv345[1];
setMv mv345[0] = mv341[0];
calculateMvCoeff mv340[0] = DIVISION(mv344,mv345);
resetMv mv347[5];
setMv mv347[4] = mv336[0];
setMv mv347[1] = mv306[0];
setMv mv347[0] = len[0];
setMv mv347[3] = mv326[0];
setMv mv347[2] = mv316[0];
setVector ve346 = {mv347[0,1,2,3,4]};
resetMv mv349[5];
setMv mv349[4] = mv340[0];
setMv mv349[1] = mv310[0];
setMv mv349[3] = mv330[0];
setMv mv349[2] = mv320[0];
setMv mv349[0] = mv300[0];
setVector ve348 = {mv349[0,1,2,3,4]};
dotVectors rc1[4] = <ve346,ve348>;

//rc1[5] = ((-((rcPpDual[9] + len[9]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[12] + len[12]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[14] + len[14]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv350[1];
resetMv mv351[1];
resetMv mv353[2];
setMv mv353[1] = len[9];
setMv mv353[0] = rcPpDual[9];
setVector ve352 = {mv353[0,1]};
dotVectors mv351[0] = <ve352>;
setMv mv350[0] = mv351[-0];
resetMv mv354[1];
resetMv mv355[1];
setVector ve356 = {nen[1,2,3]};
setVector ve357 = {nen[1,2,3]};
dotVectors mv355[0] = <ve356,ve357>;
resetMv mv358[1];
setMv mv358[0] = nen[1];
resetMv mv359[1];
setMv mv359[0] = mv355[0];
calculateMvCoeff mv354[0] = DIVISION(mv358,mv359);
resetMv mv360[1];
resetMv mv361[1];
resetMv mv363[2];
setMv mv363[1] = len[12];
setMv mv363[0] = rcPpDual[12];
setVector ve362 = {mv363[0,1]};
dotVectors mv361[0] = <ve362>;
setMv mv360[0] = mv361[-0];
resetMv mv364[1];
resetMv mv365[1];
setVector ve366 = {nen[1,2,3]};
setVector ve367 = {nen[1,2,3]};
dotVectors mv365[0] = <ve366,ve367>;
resetMv mv368[1];
setMv mv368[0] = nen[2];
resetMv mv369[1];
setMv mv369[0] = mv365[0];
calculateMvCoeff mv364[0] = DIVISION(mv368,mv369);
resetMv mv370[1];
resetMv mv371[1];
resetMv mv373[2];
setMv mv373[1] = len[14];
setMv mv373[0] = rcPpDual[14];
setVector ve372 = {mv373[0,1]};
dotVectors mv371[0] = <ve372>;
setMv mv370[0] = mv371[-0];
resetMv mv374[1];
resetMv mv375[1];
setVector ve376 = {nen[1,2,3]};
setVector ve377 = {nen[1,2,3]};
dotVectors mv375[0] = <ve376,ve377>;
resetMv mv378[1];
setMv mv378[0] = nen[3];
resetMv mv379[1];
setMv mv379[0] = mv375[0];
calculateMvCoeff mv374[0] = DIVISION(mv378,mv379);
resetMv mv381[3];
setMv mv381[2] = mv370[0];
setMv mv381[0] = mv350[0];
setMv mv381[1] = mv360[0];
setVector ve380 = {mv381[0,1,2]};
resetMv mv383[3];
setMv mv383[0] = mv354[0];
setMv mv383[1] = mv364[0];
setMv mv383[2] = mv374[0];
setVector ve382 = {mv383[0,1,2]};
dotVectors rc1[5] = <ve380,ve382>;

//rc1[6] = (((len[1] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[2] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[16] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[18] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv384[1];
resetMv mv385[1];
setVector ve386 = {nen[1,2,3]};
setVector ve387 = {nen[1,2,3]};
dotVectors mv385[0] = <ve386,ve387>;
resetMv mv388[1];
setMv mv388[0] = nen[2];
resetMv mv389[1];
setMv mv389[0] = mv385[0];
calculateMvCoeff mv384[0] = DIVISION(mv388,mv389);
resetMv mv390[1];
resetMv mv391[1];
setVector ve392 = {nen[1,2,3]};
setVector ve393 = {nen[1,2,3]};
dotVectors mv391[0] = <ve392,ve393>;
resetMv mv394[1];
setMv mv394[0] = nen[1];
resetMv mv395[1];
setMv mv395[0] = mv391[0];
calculateMvCoeff mv390[0] = DIVISION(mv394,mv395);
resetMv mv396[1];
resetMv mv397[1];
setVector ve398 = {nen[1,2,3]};
setVector ve399 = {nen[1,2,3]};
dotVectors mv397[0] = <ve398,ve399>;
resetMv mv400[1];
setMv mv400[0] = nen[3];
resetMv mv401[1];
setMv mv401[0] = mv397[0];
calculateMvCoeff mv396[0] = DIVISION(mv400,mv401);
resetMv mv402[1];
resetMv mv403[1];
setVector ve404 = {nen[1,2,3]};
setVector ve405 = {nen[1,2,3]};
dotVectors mv403[0] = <ve404,ve405>;
resetMv mv406[1];
setMv mv406[0] = nen[4];
resetMv mv407[1];
setMv mv407[0] = mv403[0];
calculateMvCoeff mv402[0] = DIVISION(mv406,mv407);
setVector ve408 = {len[1,-2,16,-18]};
resetMv mv410[4];
setMv mv410[2] = mv396[0];
setMv mv410[3] = mv402[0];
setMv mv410[1] = mv390[0];
setMv mv410[0] = mv384[0];
setVector ve409 = {mv410[0,1,2,3]};
dotVectors rc1[6] = <ve408,ve409>;

//rc1[7] = (((len[1] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[3] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[16] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[20] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv411[1];
resetMv mv412[1];
setVector ve413 = {nen[1,2,3]};
setVector ve414 = {nen[1,2,3]};
dotVectors mv412[0] = <ve413,ve414>;
resetMv mv415[1];
setMv mv415[0] = nen[3];
resetMv mv416[1];
setMv mv416[0] = mv412[0];
calculateMvCoeff mv411[0] = DIVISION(mv415,mv416);
resetMv mv417[1];
resetMv mv418[1];
setVector ve419 = {nen[1,2,3]};
setVector ve420 = {nen[1,2,3]};
dotVectors mv418[0] = <ve419,ve420>;
resetMv mv421[1];
setMv mv421[0] = nen[1];
resetMv mv422[1];
setMv mv422[0] = mv418[0];
calculateMvCoeff mv417[0] = DIVISION(mv421,mv422);
resetMv mv423[1];
resetMv mv424[1];
setVector ve425 = {nen[1,2,3]};
setVector ve426 = {nen[1,2,3]};
dotVectors mv424[0] = <ve425,ve426>;
resetMv mv427[1];
setMv mv427[0] = nen[2];
resetMv mv428[1];
setMv mv428[0] = mv424[0];
calculateMvCoeff mv423[0] = DIVISION(mv427,mv428);
resetMv mv429[1];
resetMv mv430[1];
setVector ve431 = {nen[1,2,3]};
setVector ve432 = {nen[1,2,3]};
dotVectors mv430[0] = <ve431,ve432>;
resetMv mv433[1];
setMv mv433[0] = nen[4];
resetMv mv434[1];
setMv mv434[0] = mv430[0];
calculateMvCoeff mv429[0] = DIVISION(mv433,mv434);
setVector ve435 = {len[1,-3,-16,-20]};
resetMv mv437[4];
setMv mv437[2] = mv423[0];
setMv mv437[0] = mv411[0];
setMv mv437[3] = mv429[0];
setMv mv437[1] = mv417[0];
setVector ve436 = {mv437[0,1,2,3]};
dotVectors rc1[7] = <ve435,ve436>;

//rc1[8] = ((((len[1] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[4] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[17] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[19] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[21] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv438[1];
resetMv mv439[1];
setVector ve440 = {nen[1,2,3]};
setVector ve441 = {nen[1,2,3]};
dotVectors mv439[0] = <ve440,ve441>;
resetMv mv442[1];
setMv mv442[0] = nen[4];
resetMv mv443[1];
setMv mv443[0] = mv439[0];
calculateMvCoeff mv438[0] = DIVISION(mv442,mv443);
resetMv mv444[1];
resetMv mv445[1];
setVector ve446 = {nen[1,2,3]};
setVector ve447 = {nen[1,2,3]};
dotVectors mv445[0] = <ve446,ve447>;
resetMv mv448[1];
setMv mv448[0] = nen[1];
resetMv mv449[1];
setMv mv449[0] = mv445[0];
calculateMvCoeff mv444[0] = DIVISION(mv448,mv449);
resetMv mv450[1];
resetMv mv451[1];
setVector ve452 = {nen[1,2,3]};
setVector ve453 = {nen[1,2,3]};
dotVectors mv451[0] = <ve452,ve453>;
resetMv mv454[1];
setMv mv454[0] = nen[2];
resetMv mv455[1];
setMv mv455[0] = mv451[0];
calculateMvCoeff mv450[0] = DIVISION(mv454,mv455);
resetMv mv456[1];
resetMv mv457[1];
setVector ve458 = {nen[1,2,3]};
setVector ve459 = {nen[1,2,3]};
dotVectors mv457[0] = <ve458,ve459>;
resetMv mv460[1];
setMv mv460[0] = nen[3];
resetMv mv461[1];
setMv mv461[0] = mv457[0];
calculateMvCoeff mv456[0] = DIVISION(mv460,mv461);
resetMv mv462[1];
resetMv mv463[1];
setVector ve464 = {nen[1,2,3]};
setVector ve465 = {nen[1,2,3]};
dotVectors mv463[0] = <ve464,ve465>;
resetMv mv466[1];
setMv mv466[0] = nen[4];
resetMv mv467[1];
setMv mv467[0] = mv463[0];
calculateMvCoeff mv462[0] = DIVISION(mv466,mv467);
setVector ve468 = {len[1,-4,-17,-19,-21]};
resetMv mv470[5];
setMv mv470[1] = mv444[0];
setMv mv470[4] = mv462[0];
setMv mv470[2] = mv450[0];
setMv mv470[3] = mv456[0];
setMv mv470[0] = mv438[0];
setVector ve469 = {mv470[0,1,2,3,4]};
dotVectors rc1[8] = <ve468,ve469>;

//rc1[9] = ((-(len[5] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[18] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[20] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv471[1];
resetMv mv472[1];
setVector ve473 = {nen[1,2,3]};
setVector ve474 = {nen[1,2,3]};
dotVectors mv472[0] = <ve473,ve474>;
resetMv mv475[1];
setMv mv475[0] = nen[1];
resetMv mv476[1];
setMv mv476[0] = mv472[0];
calculateMvCoeff mv471[0] = DIVISION(mv475,mv476);
resetMv mv477[1];
resetMv mv478[1];
setVector ve479 = {nen[1,2,3]};
setVector ve480 = {nen[1,2,3]};
dotVectors mv478[0] = <ve479,ve480>;
resetMv mv481[1];
setMv mv481[0] = nen[2];
resetMv mv482[1];
setMv mv482[0] = mv478[0];
calculateMvCoeff mv477[0] = DIVISION(mv481,mv482);
resetMv mv483[1];
resetMv mv484[1];
setVector ve485 = {nen[1,2,3]};
setVector ve486 = {nen[1,2,3]};
dotVectors mv484[0] = <ve485,ve486>;
resetMv mv487[1];
setMv mv487[0] = nen[3];
resetMv mv488[1];
setMv mv488[0] = mv484[0];
calculateMvCoeff mv483[0] = DIVISION(mv487,mv488);
setVector ve489 = {len[-5,-18,-20]};
resetMv mv491[3];
setMv mv491[2] = mv483[0];
setMv mv491[0] = mv471[0];
setMv mv491[1] = mv477[0];
setVector ve490 = {mv491[0,1,2]};
dotVectors rc1[9] = <ve489,ve490>;

//rc1[10] = (((len[2] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[3] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[16] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[23] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv492[1];
resetMv mv493[1];
setVector ve494 = {nen[1,2,3]};
setVector ve495 = {nen[1,2,3]};
dotVectors mv493[0] = <ve494,ve495>;
resetMv mv496[1];
setMv mv496[0] = nen[3];
resetMv mv497[1];
setMv mv497[0] = mv493[0];
calculateMvCoeff mv492[0] = DIVISION(mv496,mv497);
resetMv mv498[1];
resetMv mv499[1];
setVector ve500 = {nen[1,2,3]};
setVector ve501 = {nen[1,2,3]};
dotVectors mv499[0] = <ve500,ve501>;
resetMv mv502[1];
setMv mv502[0] = nen[2];
resetMv mv503[1];
setMv mv503[0] = mv499[0];
calculateMvCoeff mv498[0] = DIVISION(mv502,mv503);
resetMv mv504[1];
resetMv mv505[1];
setVector ve506 = {nen[1,2,3]};
setVector ve507 = {nen[1,2,3]};
dotVectors mv505[0] = <ve506,ve507>;
resetMv mv508[1];
setMv mv508[0] = nen[1];
resetMv mv509[1];
setMv mv509[0] = mv505[0];
calculateMvCoeff mv504[0] = DIVISION(mv508,mv509);
resetMv mv510[1];
resetMv mv511[1];
setVector ve512 = {nen[1,2,3]};
setVector ve513 = {nen[1,2,3]};
dotVectors mv511[0] = <ve512,ve513>;
resetMv mv514[1];
setMv mv514[0] = nen[4];
resetMv mv515[1];
setMv mv515[0] = mv511[0];
calculateMvCoeff mv510[0] = DIVISION(mv514,mv515);
setVector ve516 = {len[2,-3,16,-23]};
resetMv mv518[4];
setMv mv518[3] = mv510[0];
setMv mv518[0] = mv492[0];
setMv mv518[1] = mv498[0];
setMv mv518[2] = mv504[0];
setVector ve517 = {mv518[0,1,2,3]};
dotVectors rc1[10] = <ve516,ve517>;

//rc1[11] = ((((len[2] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[4] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[17] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[22] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[24] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv519[1];
resetMv mv520[1];
setVector ve521 = {nen[1,2,3]};
setVector ve522 = {nen[1,2,3]};
dotVectors mv520[0] = <ve521,ve522>;
resetMv mv523[1];
setMv mv523[0] = nen[4];
resetMv mv524[1];
setMv mv524[0] = mv520[0];
calculateMvCoeff mv519[0] = DIVISION(mv523,mv524);
resetMv mv525[1];
resetMv mv526[1];
setVector ve527 = {nen[1,2,3]};
setVector ve528 = {nen[1,2,3]};
dotVectors mv526[0] = <ve527,ve528>;
resetMv mv529[1];
setMv mv529[0] = nen[2];
resetMv mv530[1];
setMv mv530[0] = mv526[0];
calculateMvCoeff mv525[0] = DIVISION(mv529,mv530);
resetMv mv531[1];
resetMv mv532[1];
setVector ve533 = {nen[1,2,3]};
setVector ve534 = {nen[1,2,3]};
dotVectors mv532[0] = <ve533,ve534>;
resetMv mv535[1];
setMv mv535[0] = nen[1];
resetMv mv536[1];
setMv mv536[0] = mv532[0];
calculateMvCoeff mv531[0] = DIVISION(mv535,mv536);
resetMv mv537[1];
resetMv mv538[1];
setVector ve539 = {nen[1,2,3]};
setVector ve540 = {nen[1,2,3]};
dotVectors mv538[0] = <ve539,ve540>;
resetMv mv541[1];
setMv mv541[0] = nen[3];
resetMv mv542[1];
setMv mv542[0] = mv538[0];
calculateMvCoeff mv537[0] = DIVISION(mv541,mv542);
resetMv mv543[1];
resetMv mv544[1];
setVector ve545 = {nen[1,2,3]};
setVector ve546 = {nen[1,2,3]};
dotVectors mv544[0] = <ve545,ve546>;
resetMv mv547[1];
setMv mv547[0] = nen[4];
resetMv mv548[1];
setMv mv548[0] = mv544[0];
calculateMvCoeff mv543[0] = DIVISION(mv547,mv548);
setVector ve549 = {len[2,-4,17,-22,-24]};
resetMv mv551[5];
setMv mv551[3] = mv537[0];
setMv mv551[1] = mv525[0];
setMv mv551[4] = mv543[0];
setMv mv551[2] = mv531[0];
setMv mv551[0] = mv519[0];
setVector ve550 = {mv551[0,1,2,3,4]};
dotVectors rc1[11] = <ve549,ve550>;

//rc1[12] = ((-(len[5] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[18] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[23] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv552[1];
resetMv mv553[1];
setVector ve554 = {nen[1,2,3]};
setVector ve555 = {nen[1,2,3]};
dotVectors mv553[0] = <ve554,ve555>;
resetMv mv556[1];
setMv mv556[0] = nen[2];
resetMv mv557[1];
setMv mv557[0] = mv553[0];
calculateMvCoeff mv552[0] = DIVISION(mv556,mv557);
resetMv mv558[1];
resetMv mv559[1];
setVector ve560 = {nen[1,2,3]};
setVector ve561 = {nen[1,2,3]};
dotVectors mv559[0] = <ve560,ve561>;
resetMv mv562[1];
setMv mv562[0] = nen[1];
resetMv mv563[1];
setMv mv563[0] = mv559[0];
calculateMvCoeff mv558[0] = DIVISION(mv562,mv563);
resetMv mv564[1];
resetMv mv565[1];
setVector ve566 = {nen[1,2,3]};
setVector ve567 = {nen[1,2,3]};
dotVectors mv565[0] = <ve566,ve567>;
resetMv mv568[1];
setMv mv568[0] = nen[3];
resetMv mv569[1];
setMv mv569[0] = mv565[0];
calculateMvCoeff mv564[0] = DIVISION(mv568,mv569);
setVector ve570 = {len[-5,18,-23]};
resetMv mv572[3];
setMv mv572[2] = mv564[0];
setMv mv572[0] = mv552[0];
setMv mv572[1] = mv558[0];
setVector ve571 = {mv572[0,1,2]};
dotVectors rc1[12] = <ve570,ve571>;

//rc1[13] = ((((len[3] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[4] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[19] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[22] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[25] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv573[1];
resetMv mv574[1];
setVector ve575 = {nen[1,2,3]};
setVector ve576 = {nen[1,2,3]};
dotVectors mv574[0] = <ve575,ve576>;
resetMv mv577[1];
setMv mv577[0] = nen[4];
resetMv mv578[1];
setMv mv578[0] = mv574[0];
calculateMvCoeff mv573[0] = DIVISION(mv577,mv578);
resetMv mv579[1];
resetMv mv580[1];
setVector ve581 = {nen[1,2,3]};
setVector ve582 = {nen[1,2,3]};
dotVectors mv580[0] = <ve581,ve582>;
resetMv mv583[1];
setMv mv583[0] = nen[3];
resetMv mv584[1];
setMv mv584[0] = mv580[0];
calculateMvCoeff mv579[0] = DIVISION(mv583,mv584);
resetMv mv585[1];
resetMv mv586[1];
setVector ve587 = {nen[1,2,3]};
setVector ve588 = {nen[1,2,3]};
dotVectors mv586[0] = <ve587,ve588>;
resetMv mv589[1];
setMv mv589[0] = nen[1];
resetMv mv590[1];
setMv mv590[0] = mv586[0];
calculateMvCoeff mv585[0] = DIVISION(mv589,mv590);
resetMv mv591[1];
resetMv mv592[1];
setVector ve593 = {nen[1,2,3]};
setVector ve594 = {nen[1,2,3]};
dotVectors mv592[0] = <ve593,ve594>;
resetMv mv595[1];
setMv mv595[0] = nen[2];
resetMv mv596[1];
setMv mv596[0] = mv592[0];
calculateMvCoeff mv591[0] = DIVISION(mv595,mv596);
resetMv mv597[1];
resetMv mv598[1];
setVector ve599 = {nen[1,2,3]};
setVector ve600 = {nen[1,2,3]};
dotVectors mv598[0] = <ve599,ve600>;
resetMv mv601[1];
setMv mv601[0] = nen[4];
resetMv mv602[1];
setMv mv602[0] = mv598[0];
calculateMvCoeff mv597[0] = DIVISION(mv601,mv602);
setVector ve603 = {len[3,-4,19,22,-25]};
resetMv mv605[5];
setMv mv605[4] = mv597[0];
setMv mv605[1] = mv579[0];
setMv mv605[0] = mv573[0];
setMv mv605[2] = mv585[0];
setMv mv605[3] = mv591[0];
setVector ve604 = {mv605[0,1,2,3,4]};
dotVectors rc1[13] = <ve603,ve604>;

//rc1[14] = ((-(len[5] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[20] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[23] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv606[1];
resetMv mv607[1];
setVector ve608 = {nen[1,2,3]};
setVector ve609 = {nen[1,2,3]};
dotVectors mv607[0] = <ve608,ve609>;
resetMv mv610[1];
setMv mv610[0] = nen[3];
resetMv mv611[1];
setMv mv611[0] = mv607[0];
calculateMvCoeff mv606[0] = DIVISION(mv610,mv611);
resetMv mv612[1];
resetMv mv613[1];
setVector ve614 = {nen[1,2,3]};
setVector ve615 = {nen[1,2,3]};
dotVectors mv613[0] = <ve614,ve615>;
resetMv mv616[1];
setMv mv616[0] = nen[1];
resetMv mv617[1];
setMv mv617[0] = mv613[0];
calculateMvCoeff mv612[0] = DIVISION(mv616,mv617);
resetMv mv618[1];
resetMv mv619[1];
setVector ve620 = {nen[1,2,3]};
setVector ve621 = {nen[1,2,3]};
dotVectors mv619[0] = <ve620,ve621>;
resetMv mv622[1];
setMv mv622[0] = nen[2];
resetMv mv623[1];
setMv mv623[0] = mv619[0];
calculateMvCoeff mv618[0] = DIVISION(mv622,mv623);
setVector ve624 = {len[-5,20,23]};
resetMv mv626[3];
setMv mv626[2] = mv618[0];
setMv mv626[1] = mv612[0];
setMv mv626[0] = mv606[0];
setVector ve625 = {mv626[0,1,2]};
dotVectors rc1[14] = <ve624,ve625>;

//rc1[15] = (((-(len[5] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[21] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[24] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[25] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv627[1];
resetMv mv628[1];
setVector ve629 = {nen[1,2,3]};
setVector ve630 = {nen[1,2,3]};
dotVectors mv628[0] = <ve629,ve630>;
resetMv mv631[1];
setMv mv631[0] = nen[4];
resetMv mv632[1];
setMv mv632[0] = mv628[0];
calculateMvCoeff mv627[0] = DIVISION(mv631,mv632);
resetMv mv633[1];
resetMv mv634[1];
setVector ve635 = {nen[1,2,3]};
setVector ve636 = {nen[1,2,3]};
dotVectors mv634[0] = <ve635,ve636>;
resetMv mv637[1];
setMv mv637[0] = nen[1];
resetMv mv638[1];
setMv mv638[0] = mv634[0];
calculateMvCoeff mv633[0] = DIVISION(mv637,mv638);
resetMv mv639[1];
resetMv mv640[1];
setVector ve641 = {nen[1,2,3]};
setVector ve642 = {nen[1,2,3]};
dotVectors mv640[0] = <ve641,ve642>;
resetMv mv643[1];
setMv mv643[0] = nen[2];
resetMv mv644[1];
setMv mv644[0] = mv640[0];
calculateMvCoeff mv639[0] = DIVISION(mv643,mv644);
resetMv mv645[1];
resetMv mv646[1];
setVector ve647 = {nen[1,2,3]};
setVector ve648 = {nen[1,2,3]};
dotVectors mv646[0] = <ve647,ve648>;
resetMv mv649[1];
setMv mv649[0] = nen[3];
resetMv mv650[1];
setMv mv650[0] = mv646[0];
calculateMvCoeff mv645[0] = DIVISION(mv649,mv650);
setVector ve651 = {len[-5,21,24,25]};
resetMv mv653[4];
setMv mv653[2] = mv639[0];
setMv mv653[0] = mv627[0];
setMv mv653[1] = mv633[0];
setMv mv653[3] = mv645[0];
setVector ve652 = {mv653[0,1,2,3]};
dotVectors rc1[15] = <ve651,ve652>;

//rc1[16] = ((((rcPpDual[6] + len[6]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[7] + len[7]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[10] + len[10]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[27] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv654[1];
resetMv mv656[2];
setMv mv656[1] = len[6];
setMv mv656[0] = rcPpDual[6];
setVector ve655 = {mv656[0,1]};
dotVectors mv654[0] = <ve655>;
resetMv mv657[1];
resetMv mv658[1];
setVector ve659 = {nen[1,2,3]};
setVector ve660 = {nen[1,2,3]};
dotVectors mv658[0] = <ve659,ve660>;
resetMv mv661[1];
setMv mv661[0] = nen[3];
resetMv mv662[1];
setMv mv662[0] = mv658[0];
calculateMvCoeff mv657[0] = DIVISION(mv661,mv662);
resetMv mv663[1];
resetMv mv664[1];
resetMv mv666[2];
setMv mv666[1] = len[7];
setMv mv666[0] = rcPpDual[7];
setVector ve665 = {mv666[0,1]};
dotVectors mv664[0] = <ve665>;
setMv mv663[0] = mv664[-0];
resetMv mv667[1];
resetMv mv668[1];
setVector ve669 = {nen[1,2,3]};
setVector ve670 = {nen[1,2,3]};
dotVectors mv668[0] = <ve669,ve670>;
resetMv mv671[1];
setMv mv671[0] = nen[2];
resetMv mv672[1];
setMv mv672[0] = mv668[0];
calculateMvCoeff mv667[0] = DIVISION(mv671,mv672);
resetMv mv673[1];
resetMv mv675[2];
setMv mv675[1] = len[10];
setMv mv675[0] = rcPpDual[10];
setVector ve674 = {mv675[0,1]};
dotVectors mv673[0] = <ve674>;
resetMv mv676[1];
resetMv mv677[1];
setVector ve678 = {nen[1,2,3]};
setVector ve679 = {nen[1,2,3]};
dotVectors mv677[0] = <ve678,ve679>;
resetMv mv680[1];
setMv mv680[0] = nen[1];
resetMv mv681[1];
setMv mv681[0] = mv677[0];
calculateMvCoeff mv676[0] = DIVISION(mv680,mv681);
resetMv mv682[1];
resetMv mv683[1];
setVector ve684 = {nen[1,2,3]};
setVector ve685 = {nen[1,2,3]};
dotVectors mv683[0] = <ve684,ve685>;
resetMv mv686[1];
setMv mv686[0] = nen[4];
resetMv mv687[1];
setMv mv687[0] = mv683[0];
calculateMvCoeff mv682[0] = DIVISION(mv686,mv687);
resetMv mv689[4];
setMv mv689[0] = mv654[0];
setMv mv689[2] = mv673[0];
setMv mv689[1] = mv663[0];
setMv mv689[3] = len[-27];
setVector ve688 = {mv689[0,1,2,3]};
resetMv mv691[4];
setMv mv691[1] = mv667[0];
setMv mv691[0] = mv657[0];
setMv mv691[2] = mv676[0];
setMv mv691[3] = mv682[0];
setVector ve690 = {mv691[0,1,2,3]};
dotVectors rc1[16] = <ve688,ve690>;

//rc1[17] = (((((rcPpDual[6] + len[6]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] + len[8]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[11] + len[11]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[26] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[28] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv692[1];
resetMv mv694[2];
setMv mv694[1] = len[6];
setMv mv694[0] = rcPpDual[6];
setVector ve693 = {mv694[0,1]};
dotVectors mv692[0] = <ve693>;
resetMv mv695[1];
resetMv mv696[1];
setVector ve697 = {nen[1,2,3]};
setVector ve698 = {nen[1,2,3]};
dotVectors mv696[0] = <ve697,ve698>;
resetMv mv699[1];
setMv mv699[0] = nen[4];
resetMv mv700[1];
setMv mv700[0] = mv696[0];
calculateMvCoeff mv695[0] = DIVISION(mv699,mv700);
resetMv mv701[1];
resetMv mv702[1];
resetMv mv704[2];
setMv mv704[1] = len[8];
setMv mv704[0] = rcPpDual[8];
setVector ve703 = {mv704[0,1]};
dotVectors mv702[0] = <ve703>;
setMv mv701[0] = mv702[-0];
resetMv mv705[1];
resetMv mv706[1];
setVector ve707 = {nen[1,2,3]};
setVector ve708 = {nen[1,2,3]};
dotVectors mv706[0] = <ve707,ve708>;
resetMv mv709[1];
setMv mv709[0] = nen[2];
resetMv mv710[1];
setMv mv710[0] = mv706[0];
calculateMvCoeff mv705[0] = DIVISION(mv709,mv710);
resetMv mv711[1];
resetMv mv713[2];
setMv mv713[1] = len[11];
setMv mv713[0] = rcPpDual[11];
setVector ve712 = {mv713[0,1]};
dotVectors mv711[0] = <ve712>;
resetMv mv714[1];
resetMv mv715[1];
setVector ve716 = {nen[1,2,3]};
setVector ve717 = {nen[1,2,3]};
dotVectors mv715[0] = <ve716,ve717>;
resetMv mv718[1];
setMv mv718[0] = nen[1];
resetMv mv719[1];
setMv mv719[0] = mv715[0];
calculateMvCoeff mv714[0] = DIVISION(mv718,mv719);
resetMv mv720[1];
resetMv mv721[1];
setVector ve722 = {nen[1,2,3]};
setVector ve723 = {nen[1,2,3]};
dotVectors mv721[0] = <ve722,ve723>;
resetMv mv724[1];
setMv mv724[0] = nen[3];
resetMv mv725[1];
setMv mv725[0] = mv721[0];
calculateMvCoeff mv720[0] = DIVISION(mv724,mv725);
resetMv mv726[1];
resetMv mv727[1];
setVector ve728 = {nen[1,2,3]};
setVector ve729 = {nen[1,2,3]};
dotVectors mv727[0] = <ve728,ve729>;
resetMv mv730[1];
setMv mv730[0] = nen[4];
resetMv mv731[1];
setMv mv731[0] = mv727[0];
calculateMvCoeff mv726[0] = DIVISION(mv730,mv731);
resetMv mv733[5];
setMv mv733[0] = mv692[0];
setMv mv733[3,4] = len[-26,-28];
setMv mv733[1] = mv701[0];
setMv mv733[2] = mv711[0];
setVector ve732 = {mv733[0,1,2,3,4]};
resetMv mv735[5];
setMv mv735[2] = mv714[0];
setMv mv735[4] = mv726[0];
setMv mv735[1] = mv705[0];
setMv mv735[3] = mv720[0];
setMv mv735[0] = mv695[0];
setVector ve734 = {mv735[0,1,2,3,4]};
dotVectors rc1[17] = <ve732,ve734>;

//rc1[18] = ((-((rcPpDual[9] + len[9]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[12] + len[12]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[27] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv736[1];
resetMv mv737[1];
resetMv mv739[2];
setMv mv739[1] = len[9];
setMv mv739[0] = rcPpDual[9];
setVector ve738 = {mv739[0,1]};
dotVectors mv737[0] = <ve738>;
setMv mv736[0] = mv737[-0];
resetMv mv740[1];
resetMv mv741[1];
setVector ve742 = {nen[1,2,3]};
setVector ve743 = {nen[1,2,3]};
dotVectors mv741[0] = <ve742,ve743>;
resetMv mv744[1];
setMv mv744[0] = nen[2];
resetMv mv745[1];
setMv mv745[0] = mv741[0];
calculateMvCoeff mv740[0] = DIVISION(mv744,mv745);
resetMv mv746[1];
resetMv mv748[2];
setMv mv748[1] = len[12];
setMv mv748[0] = rcPpDual[12];
setVector ve747 = {mv748[0,1]};
dotVectors mv746[0] = <ve747>;
resetMv mv749[1];
resetMv mv750[1];
setVector ve751 = {nen[1,2,3]};
setVector ve752 = {nen[1,2,3]};
dotVectors mv750[0] = <ve751,ve752>;
resetMv mv753[1];
setMv mv753[0] = nen[1];
resetMv mv754[1];
setMv mv754[0] = mv750[0];
calculateMvCoeff mv749[0] = DIVISION(mv753,mv754);
resetMv mv755[1];
resetMv mv756[1];
setVector ve757 = {nen[1,2,3]};
setVector ve758 = {nen[1,2,3]};
dotVectors mv756[0] = <ve757,ve758>;
resetMv mv759[1];
setMv mv759[0] = nen[3];
resetMv mv760[1];
setMv mv760[0] = mv756[0];
calculateMvCoeff mv755[0] = DIVISION(mv759,mv760);
resetMv mv762[3];
setMv mv762[2] = len[-27];
setMv mv762[1] = mv746[0];
setMv mv762[0] = mv736[0];
setVector ve761 = {mv762[0,1,2]};
resetMv mv764[3];
setMv mv764[2] = mv755[0];
setMv mv764[0] = mv740[0];
setMv mv764[1] = mv749[0];
setVector ve763 = {mv764[0,1,2]};
dotVectors rc1[18] = <ve761,ve763>;

//rc1[19] = (((((rcPpDual[7] + len[7]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] + len[8]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[13] + len[13]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[26] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[29] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv765[1];
resetMv mv767[2];
setMv mv767[1] = len[7];
setMv mv767[0] = rcPpDual[7];
setVector ve766 = {mv767[0,1]};
dotVectors mv765[0] = <ve766>;
resetMv mv768[1];
resetMv mv769[1];
setVector ve770 = {nen[1,2,3]};
setVector ve771 = {nen[1,2,3]};
dotVectors mv769[0] = <ve770,ve771>;
resetMv mv772[1];
setMv mv772[0] = nen[4];
resetMv mv773[1];
setMv mv773[0] = mv769[0];
calculateMvCoeff mv768[0] = DIVISION(mv772,mv773);
resetMv mv774[1];
resetMv mv775[1];
resetMv mv777[2];
setMv mv777[1] = len[8];
setMv mv777[0] = rcPpDual[8];
setVector ve776 = {mv777[0,1]};
dotVectors mv775[0] = <ve776>;
setMv mv774[0] = mv775[-0];
resetMv mv778[1];
resetMv mv779[1];
setVector ve780 = {nen[1,2,3]};
setVector ve781 = {nen[1,2,3]};
dotVectors mv779[0] = <ve780,ve781>;
resetMv mv782[1];
setMv mv782[0] = nen[3];
resetMv mv783[1];
setMv mv783[0] = mv779[0];
calculateMvCoeff mv778[0] = DIVISION(mv782,mv783);
resetMv mv784[1];
resetMv mv786[2];
setMv mv786[1] = len[13];
setMv mv786[0] = rcPpDual[13];
setVector ve785 = {mv786[0,1]};
dotVectors mv784[0] = <ve785>;
resetMv mv787[1];
resetMv mv788[1];
setVector ve789 = {nen[1,2,3]};
setVector ve790 = {nen[1,2,3]};
dotVectors mv788[0] = <ve789,ve790>;
resetMv mv791[1];
setMv mv791[0] = nen[1];
resetMv mv792[1];
setMv mv792[0] = mv788[0];
calculateMvCoeff mv787[0] = DIVISION(mv791,mv792);
resetMv mv793[1];
resetMv mv794[1];
setVector ve795 = {nen[1,2,3]};
setVector ve796 = {nen[1,2,3]};
dotVectors mv794[0] = <ve795,ve796>;
resetMv mv797[1];
setMv mv797[0] = nen[2];
resetMv mv798[1];
setMv mv798[0] = mv794[0];
calculateMvCoeff mv793[0] = DIVISION(mv797,mv798);
resetMv mv799[1];
resetMv mv800[1];
setVector ve801 = {nen[1,2,3]};
setVector ve802 = {nen[1,2,3]};
dotVectors mv800[0] = <ve801,ve802>;
resetMv mv803[1];
setMv mv803[0] = nen[4];
resetMv mv804[1];
setMv mv804[0] = mv800[0];
calculateMvCoeff mv799[0] = DIVISION(mv803,mv804);
resetMv mv806[5];
setMv mv806[0] = mv765[0];
setMv mv806[3,4] = len[26,-29];
setMv mv806[2] = mv784[0];
setMv mv806[1] = mv774[0];
setVector ve805 = {mv806[0,1,2,3,4]};
resetMv mv808[5];
setMv mv808[3] = mv793[0];
setMv mv808[0] = mv768[0];
setMv mv808[2] = mv787[0];
setMv mv808[1] = mv778[0];
setMv mv808[4] = mv799[0];
setVector ve807 = {mv808[0,1,2,3,4]};
dotVectors rc1[19] = <ve805,ve807>;

//rc1[20] = ((-((rcPpDual[9] + len[9]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[14] + len[14]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[27] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv809[1];
resetMv mv810[1];
resetMv mv812[2];
setMv mv812[1] = len[9];
setMv mv812[0] = rcPpDual[9];
setVector ve811 = {mv812[0,1]};
dotVectors mv810[0] = <ve811>;
setMv mv809[0] = mv810[-0];
resetMv mv813[1];
resetMv mv814[1];
setVector ve815 = {nen[1,2,3]};
setVector ve816 = {nen[1,2,3]};
dotVectors mv814[0] = <ve815,ve816>;
resetMv mv817[1];
setMv mv817[0] = nen[3];
resetMv mv818[1];
setMv mv818[0] = mv814[0];
calculateMvCoeff mv813[0] = DIVISION(mv817,mv818);
resetMv mv819[1];
resetMv mv821[2];
setMv mv821[1] = len[14];
setMv mv821[0] = rcPpDual[14];
setVector ve820 = {mv821[0,1]};
dotVectors mv819[0] = <ve820>;
resetMv mv822[1];
resetMv mv823[1];
setVector ve824 = {nen[1,2,3]};
setVector ve825 = {nen[1,2,3]};
dotVectors mv823[0] = <ve824,ve825>;
resetMv mv826[1];
setMv mv826[0] = nen[1];
resetMv mv827[1];
setMv mv827[0] = mv823[0];
calculateMvCoeff mv822[0] = DIVISION(mv826,mv827);
resetMv mv828[1];
resetMv mv829[1];
setVector ve830 = {nen[1,2,3]};
setVector ve831 = {nen[1,2,3]};
dotVectors mv829[0] = <ve830,ve831>;
resetMv mv832[1];
setMv mv832[0] = nen[2];
resetMv mv833[1];
setMv mv833[0] = mv829[0];
calculateMvCoeff mv828[0] = DIVISION(mv832,mv833);
resetMv mv835[3];
setMv mv835[1] = mv819[0];
setMv mv835[2] = len[27];
setMv mv835[0] = mv809[0];
setVector ve834 = {mv835[0,1,2]};
resetMv mv837[3];
setMv mv837[1] = mv822[0];
setMv mv837[2] = mv828[0];
setMv mv837[0] = mv813[0];
setVector ve836 = {mv837[0,1,2]};
dotVectors rc1[20] = <ve834,ve836>;

//rc1[21] = (((-((rcPpDual[9] + len[9]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] + len[15]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[28] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[29] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv838[1];
resetMv mv839[1];
resetMv mv841[2];
setMv mv841[1] = len[9];
setMv mv841[0] = rcPpDual[9];
setVector ve840 = {mv841[0,1]};
dotVectors mv839[0] = <ve840>;
setMv mv838[0] = mv839[-0];
resetMv mv842[1];
resetMv mv843[1];
setVector ve844 = {nen[1,2,3]};
setVector ve845 = {nen[1,2,3]};
dotVectors mv843[0] = <ve844,ve845>;
resetMv mv846[1];
setMv mv846[0] = nen[4];
resetMv mv847[1];
setMv mv847[0] = mv843[0];
calculateMvCoeff mv842[0] = DIVISION(mv846,mv847);
resetMv mv848[1];
resetMv mv850[2];
setMv mv850[1] = len[15];
setMv mv850[0] = rcPpDual[15];
setVector ve849 = {mv850[0,1]};
dotVectors mv848[0] = <ve849>;
resetMv mv851[1];
resetMv mv852[1];
setVector ve853 = {nen[1,2,3]};
setVector ve854 = {nen[1,2,3]};
dotVectors mv852[0] = <ve853,ve854>;
resetMv mv855[1];
setMv mv855[0] = nen[1];
resetMv mv856[1];
setMv mv856[0] = mv852[0];
calculateMvCoeff mv851[0] = DIVISION(mv855,mv856);
resetMv mv857[1];
resetMv mv858[1];
setVector ve859 = {nen[1,2,3]};
setVector ve860 = {nen[1,2,3]};
dotVectors mv858[0] = <ve859,ve860>;
resetMv mv861[1];
setMv mv861[0] = nen[2];
resetMv mv862[1];
setMv mv862[0] = mv858[0];
calculateMvCoeff mv857[0] = DIVISION(mv861,mv862);
resetMv mv863[1];
resetMv mv864[1];
setVector ve865 = {nen[1,2,3]};
setVector ve866 = {nen[1,2,3]};
dotVectors mv864[0] = <ve865,ve866>;
resetMv mv867[1];
setMv mv867[0] = nen[3];
resetMv mv868[1];
setMv mv868[0] = mv864[0];
calculateMvCoeff mv863[0] = DIVISION(mv867,mv868);
resetMv mv870[4];
setMv mv870[1] = mv848[0];
setMv mv870[2,3] = len[28,29];
setMv mv870[0] = mv838[0];
setVector ve869 = {mv870[0,1,2,3]};
resetMv mv872[4];
setMv mv872[0] = mv842[0];
setMv mv872[2] = mv857[0];
setMv mv872[3] = mv863[0];
setMv mv872[1] = mv851[0];
setVector ve871 = {mv872[0,1,2,3]};
dotVectors rc1[21] = <ve869,ve871>;

//rc1[22] = (((((rcPpDual[10] + len[10]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[11] + len[11]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[13] + len[13]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[26] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[30] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv873[1];
resetMv mv875[2];
setMv mv875[1] = len[10];
setMv mv875[0] = rcPpDual[10];
setVector ve874 = {mv875[0,1]};
dotVectors mv873[0] = <ve874>;
resetMv mv876[1];
resetMv mv877[1];
setVector ve878 = {nen[1,2,3]};
setVector ve879 = {nen[1,2,3]};
dotVectors mv877[0] = <ve878,ve879>;
resetMv mv880[1];
setMv mv880[0] = nen[4];
resetMv mv881[1];
setMv mv881[0] = mv877[0];
calculateMvCoeff mv876[0] = DIVISION(mv880,mv881);
resetMv mv882[1];
resetMv mv883[1];
resetMv mv885[2];
setMv mv885[1] = len[11];
setMv mv885[0] = rcPpDual[11];
setVector ve884 = {mv885[0,1]};
dotVectors mv883[0] = <ve884>;
setMv mv882[0] = mv883[-0];
resetMv mv886[1];
resetMv mv887[1];
setVector ve888 = {nen[1,2,3]};
setVector ve889 = {nen[1,2,3]};
dotVectors mv887[0] = <ve888,ve889>;
resetMv mv890[1];
setMv mv890[0] = nen[3];
resetMv mv891[1];
setMv mv891[0] = mv887[0];
calculateMvCoeff mv886[0] = DIVISION(mv890,mv891);
resetMv mv892[1];
resetMv mv894[2];
setMv mv894[1] = len[13];
setMv mv894[0] = rcPpDual[13];
setVector ve893 = {mv894[0,1]};
dotVectors mv892[0] = <ve893>;
resetMv mv895[1];
resetMv mv896[1];
setVector ve897 = {nen[1,2,3]};
setVector ve898 = {nen[1,2,3]};
dotVectors mv896[0] = <ve897,ve898>;
resetMv mv899[1];
setMv mv899[0] = nen[2];
resetMv mv900[1];
setMv mv900[0] = mv896[0];
calculateMvCoeff mv895[0] = DIVISION(mv899,mv900);
resetMv mv901[1];
resetMv mv902[1];
setVector ve903 = {nen[1,2,3]};
setVector ve904 = {nen[1,2,3]};
dotVectors mv902[0] = <ve903,ve904>;
resetMv mv905[1];
setMv mv905[0] = nen[1];
resetMv mv906[1];
setMv mv906[0] = mv902[0];
calculateMvCoeff mv901[0] = DIVISION(mv905,mv906);
resetMv mv907[1];
resetMv mv908[1];
setVector ve909 = {nen[1,2,3]};
setVector ve910 = {nen[1,2,3]};
dotVectors mv908[0] = <ve909,ve910>;
resetMv mv911[1];
setMv mv911[0] = nen[4];
resetMv mv912[1];
setMv mv912[0] = mv908[0];
calculateMvCoeff mv907[0] = DIVISION(mv911,mv912);
resetMv mv914[5];
setMv mv914[2] = mv892[0];
setMv mv914[1] = mv882[0];
setMv mv914[0] = mv873[0];
setMv mv914[3,4] = len[-26,-30];
setVector ve913 = {mv914[0,1,2,3,4]};
resetMv mv916[5];
setMv mv916[4] = mv907[0];
setMv mv916[3] = mv901[0];
setMv mv916[2] = mv895[0];
setMv mv916[1] = mv886[0];
setMv mv916[0] = mv876[0];
setVector ve915 = {mv916[0,1,2,3,4]};
dotVectors rc1[22] = <ve913,ve915>;

//rc1[23] = ((-((rcPpDual[12] + len[12]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[14] + len[14]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[27] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv917[1];
resetMv mv918[1];
resetMv mv920[2];
setMv mv920[1] = len[12];
setMv mv920[0] = rcPpDual[12];
setVector ve919 = {mv920[0,1]};
dotVectors mv918[0] = <ve919>;
setMv mv917[0] = mv918[-0];
resetMv mv921[1];
resetMv mv922[1];
setVector ve923 = {nen[1,2,3]};
setVector ve924 = {nen[1,2,3]};
dotVectors mv922[0] = <ve923,ve924>;
resetMv mv925[1];
setMv mv925[0] = nen[3];
resetMv mv926[1];
setMv mv926[0] = mv922[0];
calculateMvCoeff mv921[0] = DIVISION(mv925,mv926);
resetMv mv927[1];
resetMv mv929[2];
setMv mv929[1] = len[14];
setMv mv929[0] = rcPpDual[14];
setVector ve928 = {mv929[0,1]};
dotVectors mv927[0] = <ve928>;
resetMv mv930[1];
resetMv mv931[1];
setVector ve932 = {nen[1,2,3]};
setVector ve933 = {nen[1,2,3]};
dotVectors mv931[0] = <ve932,ve933>;
resetMv mv934[1];
setMv mv934[0] = nen[2];
resetMv mv935[1];
setMv mv935[0] = mv931[0];
calculateMvCoeff mv930[0] = DIVISION(mv934,mv935);
resetMv mv936[1];
resetMv mv937[1];
setVector ve938 = {nen[1,2,3]};
setVector ve939 = {nen[1,2,3]};
dotVectors mv937[0] = <ve938,ve939>;
resetMv mv940[1];
setMv mv940[0] = nen[1];
resetMv mv941[1];
setMv mv941[0] = mv937[0];
calculateMvCoeff mv936[0] = DIVISION(mv940,mv941);
resetMv mv943[3];
setMv mv943[1] = mv927[0];
setMv mv943[0] = mv917[0];
setMv mv943[2] = len[-27];
setVector ve942 = {mv943[0,1,2]};
resetMv mv945[3];
setMv mv945[1] = mv930[0];
setMv mv945[2] = mv936[0];
setMv mv945[0] = mv921[0];
setVector ve944 = {mv945[0,1,2]};
dotVectors rc1[23] = <ve942,ve944>;

//rc1[24] = (((-((rcPpDual[12] + len[12]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] + len[15]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[28] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[30] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv946[1];
resetMv mv947[1];
resetMv mv949[2];
setMv mv949[1] = len[12];
setMv mv949[0] = rcPpDual[12];
setVector ve948 = {mv949[0,1]};
dotVectors mv947[0] = <ve948>;
setMv mv946[0] = mv947[-0];
resetMv mv950[1];
resetMv mv951[1];
setVector ve952 = {nen[1,2,3]};
setVector ve953 = {nen[1,2,3]};
dotVectors mv951[0] = <ve952,ve953>;
resetMv mv954[1];
setMv mv954[0] = nen[4];
resetMv mv955[1];
setMv mv955[0] = mv951[0];
calculateMvCoeff mv950[0] = DIVISION(mv954,mv955);
resetMv mv956[1];
resetMv mv958[2];
setMv mv958[1] = len[15];
setMv mv958[0] = rcPpDual[15];
setVector ve957 = {mv958[0,1]};
dotVectors mv956[0] = <ve957>;
resetMv mv959[1];
resetMv mv960[1];
setVector ve961 = {nen[1,2,3]};
setVector ve962 = {nen[1,2,3]};
dotVectors mv960[0] = <ve961,ve962>;
resetMv mv963[1];
setMv mv963[0] = nen[2];
resetMv mv964[1];
setMv mv964[0] = mv960[0];
calculateMvCoeff mv959[0] = DIVISION(mv963,mv964);
resetMv mv965[1];
resetMv mv966[1];
setVector ve967 = {nen[1,2,3]};
setVector ve968 = {nen[1,2,3]};
dotVectors mv966[0] = <ve967,ve968>;
resetMv mv969[1];
setMv mv969[0] = nen[1];
resetMv mv970[1];
setMv mv970[0] = mv966[0];
calculateMvCoeff mv965[0] = DIVISION(mv969,mv970);
resetMv mv971[1];
resetMv mv972[1];
setVector ve973 = {nen[1,2,3]};
setVector ve974 = {nen[1,2,3]};
dotVectors mv972[0] = <ve973,ve974>;
resetMv mv975[1];
setMv mv975[0] = nen[3];
resetMv mv976[1];
setMv mv976[0] = mv972[0];
calculateMvCoeff mv971[0] = DIVISION(mv975,mv976);
resetMv mv978[4];
setMv mv978[0] = mv946[0];
setMv mv978[2,3] = len[-28,30];
setMv mv978[1] = mv956[0];
setVector ve977 = {mv978[0,1,2,3]};
resetMv mv980[4];
setMv mv980[2] = mv965[0];
setMv mv980[0] = mv950[0];
setMv mv980[1] = mv959[0];
setMv mv980[3] = mv971[0];
setVector ve979 = {mv980[0,1,2,3]};
dotVectors rc1[24] = <ve977,ve979>;

//rc1[25] = (((-((rcPpDual[14] + len[14]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] + len[15]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[29] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[30] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv981[1];
resetMv mv982[1];
resetMv mv984[2];
setMv mv984[1] = len[14];
setMv mv984[0] = rcPpDual[14];
setVector ve983 = {mv984[0,1]};
dotVectors mv982[0] = <ve983>;
setMv mv981[0] = mv982[-0];
resetMv mv985[1];
resetMv mv986[1];
setVector ve987 = {nen[1,2,3]};
setVector ve988 = {nen[1,2,3]};
dotVectors mv986[0] = <ve987,ve988>;
resetMv mv989[1];
setMv mv989[0] = nen[4];
resetMv mv990[1];
setMv mv990[0] = mv986[0];
calculateMvCoeff mv985[0] = DIVISION(mv989,mv990);
resetMv mv991[1];
resetMv mv993[2];
setMv mv993[1] = len[15];
setMv mv993[0] = rcPpDual[15];
setVector ve992 = {mv993[0,1]};
dotVectors mv991[0] = <ve992>;
resetMv mv994[1];
resetMv mv995[1];
setVector ve996 = {nen[1,2,3]};
setVector ve997 = {nen[1,2,3]};
dotVectors mv995[0] = <ve996,ve997>;
resetMv mv998[1];
setMv mv998[0] = nen[3];
resetMv mv999[1];
setMv mv999[0] = mv995[0];
calculateMvCoeff mv994[0] = DIVISION(mv998,mv999);
resetMv mv1000[1];
resetMv mv1001[1];
setVector ve1002 = {nen[1,2,3]};
setVector ve1003 = {nen[1,2,3]};
dotVectors mv1001[0] = <ve1002,ve1003>;
resetMv mv1004[1];
setMv mv1004[0] = nen[1];
resetMv mv1005[1];
setMv mv1005[0] = mv1001[0];
calculateMvCoeff mv1000[0] = DIVISION(mv1004,mv1005);
resetMv mv1006[1];
resetMv mv1007[1];
setVector ve1008 = {nen[1,2,3]};
setVector ve1009 = {nen[1,2,3]};
dotVectors mv1007[0] = <ve1008,ve1009>;
resetMv mv1010[1];
setMv mv1010[0] = nen[2];
resetMv mv1011[1];
setMv mv1011[0] = mv1007[0];
calculateMvCoeff mv1006[0] = DIVISION(mv1010,mv1011);
resetMv mv1013[4];
setMv mv1013[2,3] = len[-29,-30];
setMv mv1013[0] = mv981[0];
setMv mv1013[1] = mv991[0];
setVector ve1012 = {mv1013[0,1,2,3]};
resetMv mv1015[4];
setMv mv1015[3] = mv1006[0];
setMv mv1015[2] = mv1000[0];
setMv mv1015[1] = mv994[0];
setMv mv1015[0] = mv985[0];
setVector ve1014 = {mv1015[0,1,2,3]};
dotVectors rc1[25] = <ve1012,ve1014>;

//rc1[26] = ((((len[16] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[17] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[19] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[22] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[31] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1016[1];
resetMv mv1017[1];
setVector ve1018 = {nen[1,2,3]};
setVector ve1019 = {nen[1,2,3]};
dotVectors mv1017[0] = <ve1018,ve1019>;
resetMv mv1020[1];
setMv mv1020[0] = nen[4];
resetMv mv1021[1];
setMv mv1021[0] = mv1017[0];
calculateMvCoeff mv1016[0] = DIVISION(mv1020,mv1021);
resetMv mv1022[1];
resetMv mv1023[1];
setVector ve1024 = {nen[1,2,3]};
setVector ve1025 = {nen[1,2,3]};
dotVectors mv1023[0] = <ve1024,ve1025>;
resetMv mv1026[1];
setMv mv1026[0] = nen[3];
resetMv mv1027[1];
setMv mv1027[0] = mv1023[0];
calculateMvCoeff mv1022[0] = DIVISION(mv1026,mv1027);
resetMv mv1028[1];
resetMv mv1029[1];
setVector ve1030 = {nen[1,2,3]};
setVector ve1031 = {nen[1,2,3]};
dotVectors mv1029[0] = <ve1030,ve1031>;
resetMv mv1032[1];
setMv mv1032[0] = nen[2];
resetMv mv1033[1];
setMv mv1033[0] = mv1029[0];
calculateMvCoeff mv1028[0] = DIVISION(mv1032,mv1033);
resetMv mv1034[1];
resetMv mv1035[1];
setVector ve1036 = {nen[1,2,3]};
setVector ve1037 = {nen[1,2,3]};
dotVectors mv1035[0] = <ve1036,ve1037>;
resetMv mv1038[1];
setMv mv1038[0] = nen[1];
resetMv mv1039[1];
setMv mv1039[0] = mv1035[0];
calculateMvCoeff mv1034[0] = DIVISION(mv1038,mv1039);
resetMv mv1040[1];
resetMv mv1041[1];
setVector ve1042 = {nen[1,2,3]};
setVector ve1043 = {nen[1,2,3]};
dotVectors mv1041[0] = <ve1042,ve1043>;
resetMv mv1044[1];
setMv mv1044[0] = nen[4];
resetMv mv1045[1];
setMv mv1045[0] = mv1041[0];
calculateMvCoeff mv1040[0] = DIVISION(mv1044,mv1045);
setVector ve1046 = {len[16,-17,19,-22,-31]};
resetMv mv1048[5];
setMv mv1048[3] = mv1034[0];
setMv mv1048[0] = mv1016[0];
setMv mv1048[1] = mv1022[0];
setMv mv1048[4] = mv1040[0];
setMv mv1048[2] = mv1028[0];
setVector ve1047 = {mv1048[0,1,2,3,4]};
dotVectors rc1[26] = <ve1046,ve1047>;

//rc1[27] = ((-(len[18] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[20] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[23] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1049[1];
resetMv mv1050[1];
setVector ve1051 = {nen[1,2,3]};
setVector ve1052 = {nen[1,2,3]};
dotVectors mv1050[0] = <ve1051,ve1052>;
resetMv mv1053[1];
setMv mv1053[0] = nen[3];
resetMv mv1054[1];
setMv mv1054[0] = mv1050[0];
calculateMvCoeff mv1049[0] = DIVISION(mv1053,mv1054);
resetMv mv1055[1];
resetMv mv1056[1];
setVector ve1057 = {nen[1,2,3]};
setVector ve1058 = {nen[1,2,3]};
dotVectors mv1056[0] = <ve1057,ve1058>;
resetMv mv1059[1];
setMv mv1059[0] = nen[2];
resetMv mv1060[1];
setMv mv1060[0] = mv1056[0];
calculateMvCoeff mv1055[0] = DIVISION(mv1059,mv1060);
resetMv mv1061[1];
resetMv mv1062[1];
setVector ve1063 = {nen[1,2,3]};
setVector ve1064 = {nen[1,2,3]};
dotVectors mv1062[0] = <ve1063,ve1064>;
resetMv mv1065[1];
setMv mv1065[0] = nen[1];
resetMv mv1066[1];
setMv mv1066[0] = mv1062[0];
calculateMvCoeff mv1061[0] = DIVISION(mv1065,mv1066);
setVector ve1067 = {len[-18,20,-23]};
resetMv mv1069[3];
setMv mv1069[2] = mv1061[0];
setMv mv1069[1] = mv1055[0];
setMv mv1069[0] = mv1049[0];
setVector ve1068 = {mv1069[0,1,2]};
dotVectors rc1[27] = <ve1067,ve1068>;

//rc1[28] = (((-(len[18] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[21] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[24] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[31] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv1070[1];
resetMv mv1071[1];
setVector ve1072 = {nen[1,2,3]};
setVector ve1073 = {nen[1,2,3]};
dotVectors mv1071[0] = <ve1072,ve1073>;
resetMv mv1074[1];
setMv mv1074[0] = nen[4];
resetMv mv1075[1];
setMv mv1075[0] = mv1071[0];
calculateMvCoeff mv1070[0] = DIVISION(mv1074,mv1075);
resetMv mv1076[1];
resetMv mv1077[1];
setVector ve1078 = {nen[1,2,3]};
setVector ve1079 = {nen[1,2,3]};
dotVectors mv1077[0] = <ve1078,ve1079>;
resetMv mv1080[1];
setMv mv1080[0] = nen[2];
resetMv mv1081[1];
setMv mv1081[0] = mv1077[0];
calculateMvCoeff mv1076[0] = DIVISION(mv1080,mv1081);
resetMv mv1082[1];
resetMv mv1083[1];
setVector ve1084 = {nen[1,2,3]};
setVector ve1085 = {nen[1,2,3]};
dotVectors mv1083[0] = <ve1084,ve1085>;
resetMv mv1086[1];
setMv mv1086[0] = nen[1];
resetMv mv1087[1];
setMv mv1087[0] = mv1083[0];
calculateMvCoeff mv1082[0] = DIVISION(mv1086,mv1087);
resetMv mv1088[1];
resetMv mv1089[1];
setVector ve1090 = {nen[1,2,3]};
setVector ve1091 = {nen[1,2,3]};
dotVectors mv1089[0] = <ve1090,ve1091>;
resetMv mv1092[1];
setMv mv1092[0] = nen[3];
resetMv mv1093[1];
setMv mv1093[0] = mv1089[0];
calculateMvCoeff mv1088[0] = DIVISION(mv1092,mv1093);
setVector ve1094 = {len[-18,21,-24,31]};
resetMv mv1096[4];
setMv mv1096[3] = mv1088[0];
setMv mv1096[1] = mv1076[0];
setMv mv1096[0] = mv1070[0];
setMv mv1096[2] = mv1082[0];
setVector ve1095 = {mv1096[0,1,2,3]};
dotVectors rc1[28] = <ve1094,ve1095>;

//rc1[29] = (((-(len[20] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[21] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[25] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[31] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1097[1];
resetMv mv1098[1];
setVector ve1099 = {nen[1,2,3]};
setVector ve1100 = {nen[1,2,3]};
dotVectors mv1098[0] = <ve1099,ve1100>;
resetMv mv1101[1];
setMv mv1101[0] = nen[4];
resetMv mv1102[1];
setMv mv1102[0] = mv1098[0];
calculateMvCoeff mv1097[0] = DIVISION(mv1101,mv1102);
resetMv mv1103[1];
resetMv mv1104[1];
setVector ve1105 = {nen[1,2,3]};
setVector ve1106 = {nen[1,2,3]};
dotVectors mv1104[0] = <ve1105,ve1106>;
resetMv mv1107[1];
setMv mv1107[0] = nen[3];
resetMv mv1108[1];
setMv mv1108[0] = mv1104[0];
calculateMvCoeff mv1103[0] = DIVISION(mv1107,mv1108);
resetMv mv1109[1];
resetMv mv1110[1];
setVector ve1111 = {nen[1,2,3]};
setVector ve1112 = {nen[1,2,3]};
dotVectors mv1110[0] = <ve1111,ve1112>;
resetMv mv1113[1];
setMv mv1113[0] = nen[1];
resetMv mv1114[1];
setMv mv1114[0] = mv1110[0];
calculateMvCoeff mv1109[0] = DIVISION(mv1113,mv1114);
resetMv mv1115[1];
resetMv mv1116[1];
setVector ve1117 = {nen[1,2,3]};
setVector ve1118 = {nen[1,2,3]};
dotVectors mv1116[0] = <ve1117,ve1118>;
resetMv mv1119[1];
setMv mv1119[0] = nen[2];
resetMv mv1120[1];
setMv mv1120[0] = mv1116[0];
calculateMvCoeff mv1115[0] = DIVISION(mv1119,mv1120);
setVector ve1121 = {len[-20,21,-25,-31]};
resetMv mv1123[4];
setMv mv1123[3] = mv1115[0];
setMv mv1123[1] = mv1103[0];
setMv mv1123[2] = mv1109[0];
setMv mv1123[0] = mv1097[0];
setVector ve1122 = {mv1123[0,1,2,3]};
dotVectors rc1[29] = <ve1121,ve1122>;

//rc1[30] = (((-(len[23] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[24] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[25] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[31] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv1124[1];
resetMv mv1125[1];
setVector ve1126 = {nen[1,2,3]};
setVector ve1127 = {nen[1,2,3]};
dotVectors mv1125[0] = <ve1126,ve1127>;
resetMv mv1128[1];
setMv mv1128[0] = nen[4];
resetMv mv1129[1];
setMv mv1129[0] = mv1125[0];
calculateMvCoeff mv1124[0] = DIVISION(mv1128,mv1129);
resetMv mv1130[1];
resetMv mv1131[1];
setVector ve1132 = {nen[1,2,3]};
setVector ve1133 = {nen[1,2,3]};
dotVectors mv1131[0] = <ve1132,ve1133>;
resetMv mv1134[1];
setMv mv1134[0] = nen[3];
resetMv mv1135[1];
setMv mv1135[0] = mv1131[0];
calculateMvCoeff mv1130[0] = DIVISION(mv1134,mv1135);
resetMv mv1136[1];
resetMv mv1137[1];
setVector ve1138 = {nen[1,2,3]};
setVector ve1139 = {nen[1,2,3]};
dotVectors mv1137[0] = <ve1138,ve1139>;
resetMv mv1140[1];
setMv mv1140[0] = nen[2];
resetMv mv1141[1];
setMv mv1141[0] = mv1137[0];
calculateMvCoeff mv1136[0] = DIVISION(mv1140,mv1141);
resetMv mv1142[1];
resetMv mv1143[1];
setVector ve1144 = {nen[1,2,3]};
setVector ve1145 = {nen[1,2,3]};
dotVectors mv1143[0] = <ve1144,ve1145>;
resetMv mv1146[1];
setMv mv1146[0] = nen[1];
resetMv mv1147[1];
setMv mv1147[0] = mv1143[0];
calculateMvCoeff mv1142[0] = DIVISION(mv1146,mv1147);
setVector ve1148 = {len[-23,24,-25,31]};
resetMv mv1150[4];
setMv mv1150[1] = mv1130[0];
setMv mv1150[3] = mv1142[0];
setMv mv1150[2] = mv1136[0];
setMv mv1150[0] = mv1124[0];
setVector ve1149 = {mv1150[0,1,2,3]};
dotVectors rc1[30] = <ve1148,ve1149>;

//rc1[31] = (((-(len[27] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[28] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[29] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[30] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv1151[1];
resetMv mv1152[1];
setVector ve1153 = {nen[1,2,3]};
setVector ve1154 = {nen[1,2,3]};
dotVectors mv1152[0] = <ve1153,ve1154>;
resetMv mv1155[1];
setMv mv1155[0] = nen[4];
resetMv mv1156[1];
setMv mv1156[0] = mv1152[0];
calculateMvCoeff mv1151[0] = DIVISION(mv1155,mv1156);
resetMv mv1157[1];
resetMv mv1158[1];
setVector ve1159 = {nen[1,2,3]};
setVector ve1160 = {nen[1,2,3]};
dotVectors mv1158[0] = <ve1159,ve1160>;
resetMv mv1161[1];
setMv mv1161[0] = nen[3];
resetMv mv1162[1];
setMv mv1162[0] = mv1158[0];
calculateMvCoeff mv1157[0] = DIVISION(mv1161,mv1162);
resetMv mv1163[1];
resetMv mv1164[1];
setVector ve1165 = {nen[1,2,3]};
setVector ve1166 = {nen[1,2,3]};
dotVectors mv1164[0] = <ve1165,ve1166>;
resetMv mv1167[1];
setMv mv1167[0] = nen[2];
resetMv mv1168[1];
setMv mv1168[0] = mv1164[0];
calculateMvCoeff mv1163[0] = DIVISION(mv1167,mv1168);
resetMv mv1169[1];
resetMv mv1170[1];
setVector ve1171 = {nen[1,2,3]};
setVector ve1172 = {nen[1,2,3]};
dotVectors mv1170[0] = <ve1171,ve1172>;
resetMv mv1173[1];
setMv mv1173[0] = nen[1];
resetMv mv1174[1];
setMv mv1174[0] = mv1170[0];
calculateMvCoeff mv1169[0] = DIVISION(mv1173,mv1174);
setVector ve1175 = {len[-27,28,-29,30]};
resetMv mv1177[4];
setMv mv1177[3] = mv1169[0];
setMv mv1177[0] = mv1151[0];
setMv mv1177[1] = mv1157[0];
setMv mv1177[2] = mv1163[0];
setVector ve1176 = {mv1177[0,1,2,3]};
dotVectors rc1[31] = <ve1175,ve1176>;

//rc1N[1] = ((((((((((((((((-(rc1[0])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[2])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[3])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[5])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[6])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[7])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[9])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[10])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[12])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[14])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[16])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[18])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[20])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[23])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[27])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv rc1N[32];
resetMv mv1178[1];
resetMv mv1179[1];
setVector ve1180 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1181 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1179[0] = <ve1180,ve1181>;
resetMv mv1182[1];
setMv mv1182[0] = rc1[-9];
resetMv mv1183[1];
setMv mv1183[0] = mv1179[0];
calculateMvCoeff mv1178[0] = DIVISION(mv1182,mv1183);
resetMv mv1184[1];
resetMv mv1185[1];
setVector ve1186 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1187 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1185[0] = <ve1186,ve1187>;
resetMv mv1188[1];
setMv mv1188[0] = rc1[-5];
resetMv mv1189[1];
setMv mv1189[0] = mv1185[0];
calculateMvCoeff mv1184[0] = DIVISION(mv1188,mv1189);
resetMv mv1190[1];
resetMv mv1191[1];
setVector ve1192 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1193 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1191[0] = <ve1192,ve1193>;
resetMv mv1194[1];
setMv mv1194[0] = rc1[18];
resetMv mv1195[1];
setMv mv1195[0] = mv1191[0];
calculateMvCoeff mv1190[0] = DIVISION(mv1194,mv1195);
resetMv mv1196[1];
resetMv mv1197[1];
setVector ve1198 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1199 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1197[0] = <ve1198,ve1199>;
resetMv mv1200[1];
setMv mv1200[0] = rc1[20];
resetMv mv1201[1];
setMv mv1201[0] = mv1197[0];
calculateMvCoeff mv1196[0] = DIVISION(mv1200,mv1201);
resetMv mv1202[1];
resetMv mv1203[1];
setVector ve1204 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1205 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1203[0] = <ve1204,ve1205>;
resetMv mv1206[1];
setMv mv1206[0] = rc1[21];
resetMv mv1207[1];
setMv mv1207[0] = mv1203[0];
calculateMvCoeff mv1202[0] = DIVISION(mv1206,mv1207);
resetMv mv1208[1];
resetMv mv1209[1];
setVector ve1210 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1211 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1209[0] = <ve1210,ve1211>;
resetMv mv1212[1];
setMv mv1212[0] = rc1[-12];
resetMv mv1213[1];
setMv mv1213[0] = mv1209[0];
calculateMvCoeff mv1208[0] = DIVISION(mv1212,mv1213);
resetMv mv1214[1];
resetMv mv1215[1];
setVector ve1216 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1217 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1215[0] = <ve1216,ve1217>;
resetMv mv1218[1];
setMv mv1218[0] = rc1[-14];
resetMv mv1219[1];
setMv mv1219[0] = mv1215[0];
calculateMvCoeff mv1214[0] = DIVISION(mv1218,mv1219);
resetMv mv1220[1];
resetMv mv1221[1];
setVector ve1222 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1223 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1221[0] = <ve1222,ve1223>;
resetMv mv1224[1];
setMv mv1224[0] = rc1[-15];
resetMv mv1225[1];
setMv mv1225[0] = mv1221[0];
calculateMvCoeff mv1220[0] = DIVISION(mv1224,mv1225);
resetMv mv1226[1];
resetMv mv1227[1];
setVector ve1228 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1229 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1227[0] = <ve1228,ve1229>;
resetMv mv1230[1];
setMv mv1230[0] = rc1[27];
resetMv mv1231[1];
setMv mv1231[0] = mv1227[0];
calculateMvCoeff mv1226[0] = DIVISION(mv1230,mv1231);
resetMv mv1232[1];
resetMv mv1233[1];
setVector ve1234 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1235 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1233[0] = <ve1234,ve1235>;
resetMv mv1236[1];
setMv mv1236[0] = rc1[28];
resetMv mv1237[1];
setMv mv1237[0] = mv1233[0];
calculateMvCoeff mv1232[0] = DIVISION(mv1236,mv1237);
resetMv mv1238[1];
resetMv mv1239[1];
setVector ve1240 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1241 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1239[0] = <ve1240,ve1241>;
resetMv mv1242[1];
setMv mv1242[0] = rc1[29];
resetMv mv1243[1];
setMv mv1243[0] = mv1239[0];
calculateMvCoeff mv1238[0] = DIVISION(mv1242,mv1243);
resetMv mv1244[1];
resetMv mv1245[1];
setVector ve1246 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1247 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1245[0] = <ve1246,ve1247>;
resetMv mv1248[1];
setMv mv1248[0] = rc1[23];
resetMv mv1249[1];
setMv mv1249[0] = mv1245[0];
calculateMvCoeff mv1244[0] = DIVISION(mv1248,mv1249);
resetMv mv1250[1];
resetMv mv1251[1];
setVector ve1252 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1253 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1251[0] = <ve1252,ve1253>;
resetMv mv1254[1];
setMv mv1254[0] = rc1[24];
resetMv mv1255[1];
setMv mv1255[0] = mv1251[0];
calculateMvCoeff mv1250[0] = DIVISION(mv1254,mv1255);
resetMv mv1256[1];
resetMv mv1257[1];
setVector ve1258 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1259 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1257[0] = <ve1258,ve1259>;
resetMv mv1260[1];
setMv mv1260[0] = rc1[25];
resetMv mv1261[1];
setMv mv1261[0] = mv1257[0];
calculateMvCoeff mv1256[0] = DIVISION(mv1260,mv1261);
resetMv mv1262[1];
resetMv mv1263[1];
setVector ve1264 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1265 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1263[0] = <ve1264,ve1265>;
resetMv mv1266[1];
setMv mv1266[0] = rc1[-31];
resetMv mv1267[1];
setMv mv1267[0] = mv1263[0];
calculateMvCoeff mv1262[0] = DIVISION(mv1266,mv1267);
resetMv mv1268[1];
resetMv mv1269[1];
setVector ve1270 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1271 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1269[0] = <ve1270,ve1271>;
resetMv mv1272[1];
setMv mv1272[0] = rc1[30];
resetMv mv1273[1];
setMv mv1273[0] = mv1269[0];
calculateMvCoeff mv1268[0] = DIVISION(mv1272,mv1273);
setVector ve1274 = {rc1[-0,-1,2,3,-5,-6,-7,9,10,-12,-14,16,-18,-20,23,-27]};
resetMv mv1276[16];
setMv mv1276[5] = mv1208[0];
setMv mv1276[0] = mv1178[0];
setMv mv1276[11] = mv1244[0];
setMv mv1276[13] = mv1256[0];
setMv mv1276[15] = mv1268[0];
setMv mv1276[3] = mv1196[0];
setMv mv1276[12] = mv1250[0];
setMv mv1276[1] = mv1184[0];
setMv mv1276[6] = mv1214[0];
setMv mv1276[9] = mv1232[0];
setMv mv1276[4] = mv1202[0];
setMv mv1276[7] = mv1220[0];
setMv mv1276[8] = mv1226[0];
setMv mv1276[14] = mv1262[0];
setMv mv1276[2] = mv1190[0];
setMv mv1276[10] = mv1238[0];
setVector ve1275 = {mv1276[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]};
dotVectors rc1N[1] = <ve1274,ve1275>;

//rc1N[2] = ((((((((((((((((-(rc1[0])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[2])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[3])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[5])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[6])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[7])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[9])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[10])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[12])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[14])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[16])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[18])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[20])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[23])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[27])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))
resetMv mv1277[1];
resetMv mv1278[1];
setVector ve1279 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1280 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1278[0] = <ve1279,ve1280>;
resetMv mv1281[1];
setMv mv1281[0] = rc1[-12];
resetMv mv1282[1];
setMv mv1282[0] = mv1278[0];
calculateMvCoeff mv1277[0] = DIVISION(mv1281,mv1282);
resetMv mv1283[1];
resetMv mv1284[1];
setVector ve1285 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1286 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1284[0] = <ve1285,ve1286>;
resetMv mv1287[1];
setMv mv1287[0] = rc1[18];
resetMv mv1288[1];
setMv mv1288[0] = mv1284[0];
calculateMvCoeff mv1283[0] = DIVISION(mv1287,mv1288);
resetMv mv1289[1];
resetMv mv1290[1];
setVector ve1291 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1292 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1290[0] = <ve1291,ve1292>;
resetMv mv1293[1];
setMv mv1293[0] = rc1[-5];
resetMv mv1294[1];
setMv mv1294[0] = mv1290[0];
calculateMvCoeff mv1289[0] = DIVISION(mv1293,mv1294);
resetMv mv1295[1];
resetMv mv1296[1];
setVector ve1297 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1298 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1296[0] = <ve1297,ve1298>;
resetMv mv1299[1];
setMv mv1299[0] = rc1[23];
resetMv mv1300[1];
setMv mv1300[0] = mv1296[0];
calculateMvCoeff mv1295[0] = DIVISION(mv1299,mv1300);
resetMv mv1301[1];
resetMv mv1302[1];
setVector ve1303 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1304 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1302[0] = <ve1303,ve1304>;
resetMv mv1305[1];
setMv mv1305[0] = rc1[24];
resetMv mv1306[1];
setMv mv1306[0] = mv1302[0];
calculateMvCoeff mv1301[0] = DIVISION(mv1305,mv1306);
resetMv mv1307[1];
resetMv mv1308[1];
setVector ve1309 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1310 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1308[0] = <ve1309,ve1310>;
resetMv mv1311[1];
setMv mv1311[0] = rc1[-9];
resetMv mv1312[1];
setMv mv1312[0] = mv1308[0];
calculateMvCoeff mv1307[0] = DIVISION(mv1311,mv1312);
resetMv mv1313[1];
resetMv mv1314[1];
setVector ve1315 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1316 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1314[0] = <ve1315,ve1316>;
resetMv mv1317[1];
setMv mv1317[0] = rc1[27];
resetMv mv1318[1];
setMv mv1318[0] = mv1314[0];
calculateMvCoeff mv1313[0] = DIVISION(mv1317,mv1318);
resetMv mv1319[1];
resetMv mv1320[1];
setVector ve1321 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1322 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1320[0] = <ve1321,ve1322>;
resetMv mv1323[1];
setMv mv1323[0] = rc1[28];
resetMv mv1324[1];
setMv mv1324[0] = mv1320[0];
calculateMvCoeff mv1319[0] = DIVISION(mv1323,mv1324);
resetMv mv1325[1];
resetMv mv1326[1];
setVector ve1327 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1328 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1326[0] = <ve1327,ve1328>;
resetMv mv1329[1];
setMv mv1329[0] = rc1[-14];
resetMv mv1330[1];
setMv mv1330[0] = mv1326[0];
calculateMvCoeff mv1325[0] = DIVISION(mv1329,mv1330);
resetMv mv1331[1];
resetMv mv1332[1];
setVector ve1333 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1334 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1332[0] = <ve1333,ve1334>;
resetMv mv1335[1];
setMv mv1335[0] = rc1[-15];
resetMv mv1336[1];
setMv mv1336[0] = mv1332[0];
calculateMvCoeff mv1331[0] = DIVISION(mv1335,mv1336);
resetMv mv1337[1];
resetMv mv1338[1];
setVector ve1339 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1340 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1338[0] = <ve1339,ve1340>;
resetMv mv1341[1];
setMv mv1341[0] = rc1[30];
resetMv mv1342[1];
setMv mv1342[0] = mv1338[0];
calculateMvCoeff mv1337[0] = DIVISION(mv1341,mv1342);
resetMv mv1343[1];
resetMv mv1344[1];
setVector ve1345 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1346 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1344[0] = <ve1345,ve1346>;
resetMv mv1347[1];
setMv mv1347[0] = rc1[20];
resetMv mv1348[1];
setMv mv1348[0] = mv1344[0];
calculateMvCoeff mv1343[0] = DIVISION(mv1347,mv1348);
resetMv mv1349[1];
resetMv mv1350[1];
setVector ve1351 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1352 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1350[0] = <ve1351,ve1352>;
resetMv mv1353[1];
setMv mv1353[0] = rc1[21];
resetMv mv1354[1];
setMv mv1354[0] = mv1350[0];
calculateMvCoeff mv1349[0] = DIVISION(mv1353,mv1354);
resetMv mv1355[1];
resetMv mv1356[1];
setVector ve1357 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1358 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1356[0] = <ve1357,ve1358>;
resetMv mv1359[1];
setMv mv1359[0] = rc1[-31];
resetMv mv1360[1];
setMv mv1360[0] = mv1356[0];
calculateMvCoeff mv1355[0] = DIVISION(mv1359,mv1360);
resetMv mv1361[1];
resetMv mv1362[1];
setVector ve1363 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1364 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1362[0] = <ve1363,ve1364>;
resetMv mv1365[1];
setMv mv1365[0] = rc1[25];
resetMv mv1366[1];
setMv mv1366[0] = mv1362[0];
calculateMvCoeff mv1361[0] = DIVISION(mv1365,mv1366);
resetMv mv1367[1];
resetMv mv1368[1];
setVector ve1369 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1370 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1368[0] = <ve1369,ve1370>;
resetMv mv1371[1];
setMv mv1371[0] = rc1[29];
resetMv mv1372[1];
setMv mv1372[0] = mv1368[0];
calculateMvCoeff mv1367[0] = DIVISION(mv1371,mv1372);
setVector ve1373 = {rc1[-0,-1,-2,3,-5,6,-7,9,-10,12,-14,-16,18,-20,-23,27]};
resetMv mv1375[16];
setMv mv1375[3] = mv1295[0];
setMv mv1375[1] = mv1283[0];
setMv mv1375[2] = mv1289[0];
setMv mv1375[12] = mv1349[0];
setMv mv1375[4] = mv1301[0];
setMv mv1375[6] = mv1313[0];
setMv mv1375[8] = mv1325[0];
setMv mv1375[11] = mv1343[0];
setMv mv1375[14] = mv1361[0];
setMv mv1375[7] = mv1319[0];
setMv mv1375[5] = mv1307[0];
setMv mv1375[13] = mv1355[0];
setMv mv1375[0] = mv1277[0];
setMv mv1375[10] = mv1337[0];
setMv mv1375[9] = mv1331[0];
setMv mv1375[15] = mv1367[0];
setVector ve1374 = {mv1375[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]};
dotVectors rc1N[2] = <ve1373,ve1374>;

//rc1N[3] = ((((((((((((((((-(rc1[0])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[2])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[3])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[5])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[6])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[7])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[9])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[10])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[12])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[14])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[16])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[18])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[20])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[23])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[27])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv mv1376[1];
resetMv mv1377[1];
setVector ve1378 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1379 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1377[0] = <ve1378,ve1379>;
resetMv mv1380[1];
setMv mv1380[0] = rc1[-14];
resetMv mv1381[1];
setMv mv1381[0] = mv1377[0];
calculateMvCoeff mv1376[0] = DIVISION(mv1380,mv1381);
resetMv mv1382[1];
resetMv mv1383[1];
setVector ve1384 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1385 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1383[0] = <ve1384,ve1385>;
resetMv mv1386[1];
setMv mv1386[0] = rc1[20];
resetMv mv1387[1];
setMv mv1387[0] = mv1383[0];
calculateMvCoeff mv1382[0] = DIVISION(mv1386,mv1387);
resetMv mv1388[1];
resetMv mv1389[1];
setVector ve1390 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1391 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1389[0] = <ve1390,ve1391>;
resetMv mv1392[1];
setMv mv1392[0] = rc1[23];
resetMv mv1393[1];
setMv mv1393[0] = mv1389[0];
calculateMvCoeff mv1388[0] = DIVISION(mv1392,mv1393);
resetMv mv1394[1];
resetMv mv1395[1];
setVector ve1396 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1397 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1395[0] = <ve1396,ve1397>;
resetMv mv1398[1];
setMv mv1398[0] = rc1[-5];
resetMv mv1399[1];
setMv mv1399[0] = mv1395[0];
calculateMvCoeff mv1394[0] = DIVISION(mv1398,mv1399);
resetMv mv1400[1];
resetMv mv1401[1];
setVector ve1402 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1403 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1401[0] = <ve1402,ve1403>;
resetMv mv1404[1];
setMv mv1404[0] = rc1[25];
resetMv mv1405[1];
setMv mv1405[0] = mv1401[0];
calculateMvCoeff mv1400[0] = DIVISION(mv1404,mv1405);
resetMv mv1406[1];
resetMv mv1407[1];
setVector ve1408 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1409 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1407[0] = <ve1408,ve1409>;
resetMv mv1410[1];
setMv mv1410[0] = rc1[27];
resetMv mv1411[1];
setMv mv1411[0] = mv1407[0];
calculateMvCoeff mv1406[0] = DIVISION(mv1410,mv1411);
resetMv mv1412[1];
resetMv mv1413[1];
setVector ve1414 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1415 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1413[0] = <ve1414,ve1415>;
resetMv mv1416[1];
setMv mv1416[0] = rc1[-9];
resetMv mv1417[1];
setMv mv1417[0] = mv1413[0];
calculateMvCoeff mv1412[0] = DIVISION(mv1416,mv1417);
resetMv mv1418[1];
resetMv mv1419[1];
setVector ve1420 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1421 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1419[0] = <ve1420,ve1421>;
resetMv mv1422[1];
setMv mv1422[0] = rc1[29];
resetMv mv1423[1];
setMv mv1423[0] = mv1419[0];
calculateMvCoeff mv1418[0] = DIVISION(mv1422,mv1423);
resetMv mv1424[1];
resetMv mv1425[1];
setVector ve1426 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1427 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1425[0] = <ve1426,ve1427>;
resetMv mv1428[1];
setMv mv1428[0] = rc1[-12];
resetMv mv1429[1];
setMv mv1429[0] = mv1425[0];
calculateMvCoeff mv1424[0] = DIVISION(mv1428,mv1429);
resetMv mv1430[1];
resetMv mv1431[1];
setVector ve1432 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1433 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1431[0] = <ve1432,ve1433>;
resetMv mv1434[1];
setMv mv1434[0] = rc1[30];
resetMv mv1435[1];
setMv mv1435[0] = mv1431[0];
calculateMvCoeff mv1430[0] = DIVISION(mv1434,mv1435);
resetMv mv1436[1];
resetMv mv1437[1];
setVector ve1438 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1439 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1437[0] = <ve1438,ve1439>;
resetMv mv1440[1];
setMv mv1440[0] = rc1[-15];
resetMv mv1441[1];
setMv mv1441[0] = mv1437[0];
calculateMvCoeff mv1436[0] = DIVISION(mv1440,mv1441);
resetMv mv1442[1];
resetMv mv1443[1];
setVector ve1444 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1445 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1443[0] = <ve1444,ve1445>;
resetMv mv1446[1];
setMv mv1446[0] = rc1[18];
resetMv mv1447[1];
setMv mv1447[0] = mv1443[0];
calculateMvCoeff mv1442[0] = DIVISION(mv1446,mv1447);
resetMv mv1448[1];
resetMv mv1449[1];
setVector ve1450 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1451 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1449[0] = <ve1450,ve1451>;
resetMv mv1452[1];
setMv mv1452[0] = rc1[-31];
resetMv mv1453[1];
setMv mv1453[0] = mv1449[0];
calculateMvCoeff mv1448[0] = DIVISION(mv1452,mv1453);
resetMv mv1454[1];
resetMv mv1455[1];
setVector ve1456 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1457 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1455[0] = <ve1456,ve1457>;
resetMv mv1458[1];
setMv mv1458[0] = rc1[21];
resetMv mv1459[1];
setMv mv1459[0] = mv1455[0];
calculateMvCoeff mv1454[0] = DIVISION(mv1458,mv1459);
resetMv mv1460[1];
resetMv mv1461[1];
setVector ve1462 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1463 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1461[0] = <ve1462,ve1463>;
resetMv mv1464[1];
setMv mv1464[0] = rc1[24];
resetMv mv1465[1];
setMv mv1465[0] = mv1461[0];
calculateMvCoeff mv1460[0] = DIVISION(mv1464,mv1465);
resetMv mv1466[1];
resetMv mv1467[1];
setVector ve1468 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1469 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1467[0] = <ve1468,ve1469>;
resetMv mv1470[1];
setMv mv1470[0] = rc1[28];
resetMv mv1471[1];
setMv mv1471[0] = mv1467[0];
calculateMvCoeff mv1466[0] = DIVISION(mv1470,mv1471);
setVector ve1472 = {rc1[-0,-1,-2,-3,-5,6,7,9,10,12,14,16,18,20,23,-27]};
resetMv mv1474[16];
setMv mv1474[14] = mv1460[0];
setMv mv1474[13] = mv1454[0];
setMv mv1474[15] = mv1466[0];
setMv mv1474[5] = mv1406[0];
setMv mv1474[7] = mv1418[0];
setMv mv1474[11] = mv1442[0];
setMv mv1474[6] = mv1412[0];
setMv mv1474[9] = mv1430[0];
setMv mv1474[4] = mv1400[0];
setMv mv1474[8] = mv1424[0];
setMv mv1474[12] = mv1448[0];
setMv mv1474[1] = mv1382[0];
setMv mv1474[3] = mv1394[0];
setMv mv1474[10] = mv1436[0];
setMv mv1474[2] = mv1388[0];
setMv mv1474[0] = mv1376[0];
setVector ve1473 = {mv1474[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]};
dotVectors rc1N[3] = <ve1472,ve1473>;

//rc1N[4] = ((((((((((((((((((((((((-(rc1[0])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[2])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[3])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[4])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[6])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[7])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[8])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[10])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[11])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[13])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[15])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[16])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[17])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[19])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[21])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[22])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[24])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[25])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[26])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[28])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[29])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[30])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[31])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv mv1475[1];
resetMv mv1476[1];
setVector ve1477 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1478 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1476[0] = <ve1477,ve1478>;
resetMv mv1479[1];
setMv mv1479[0] = rc1[-15];
resetMv mv1480[1];
setMv mv1480[0] = mv1476[0];
calculateMvCoeff mv1475[0] = DIVISION(mv1479,mv1480);
resetMv mv1481[1];
resetMv mv1482[1];
setVector ve1483 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1484 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1482[0] = <ve1483,ve1484>;
resetMv mv1485[1];
setMv mv1485[0] = rc1[21];
resetMv mv1486[1];
setMv mv1486[0] = mv1482[0];
calculateMvCoeff mv1481[0] = DIVISION(mv1485,mv1486);
resetMv mv1487[1];
resetMv mv1488[1];
setVector ve1489 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1490 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1488[0] = <ve1489,ve1490>;
resetMv mv1491[1];
setMv mv1491[0] = rc1[24];
resetMv mv1492[1];
setMv mv1492[0] = mv1488[0];
calculateMvCoeff mv1487[0] = DIVISION(mv1491,mv1492);
resetMv mv1493[1];
resetMv mv1494[1];
setVector ve1495 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1496 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1494[0] = <ve1495,ve1496>;
resetMv mv1497[1];
setMv mv1497[0] = rc1[25];
resetMv mv1498[1];
setMv mv1498[0] = mv1494[0];
calculateMvCoeff mv1493[0] = DIVISION(mv1497,mv1498);
resetMv mv1499[1];
resetMv mv1500[1];
setVector ve1501 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1502 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1500[0] = <ve1501,ve1502>;
resetMv mv1503[1];
setMv mv1503[0] = rc1[-5];
resetMv mv1504[1];
setMv mv1504[0] = mv1500[0];
calculateMvCoeff mv1499[0] = DIVISION(mv1503,mv1504);
resetMv mv1505[1];
resetMv mv1506[1];
setVector ve1507 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1508 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1506[0] = <ve1507,ve1508>;
resetMv mv1509[1];
setMv mv1509[0] = rc1[28];
resetMv mv1510[1];
setMv mv1510[0] = mv1506[0];
calculateMvCoeff mv1505[0] = DIVISION(mv1509,mv1510);
resetMv mv1511[1];
resetMv mv1512[1];
setVector ve1513 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1514 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1512[0] = <ve1513,ve1514>;
resetMv mv1515[1];
setMv mv1515[0] = rc1[29];
resetMv mv1516[1];
setMv mv1516[0] = mv1512[0];
calculateMvCoeff mv1511[0] = DIVISION(mv1515,mv1516);
resetMv mv1517[1];
resetMv mv1518[1];
setVector ve1519 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1520 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1518[0] = <ve1519,ve1520>;
resetMv mv1521[1];
setMv mv1521[0] = rc1[-9];
resetMv mv1522[1];
setMv mv1522[0] = mv1518[0];
calculateMvCoeff mv1517[0] = DIVISION(mv1521,mv1522);
resetMv mv1523[1];
resetMv mv1524[1];
setVector ve1525 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1526 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1524[0] = <ve1525,ve1526>;
resetMv mv1527[1];
setMv mv1527[0] = rc1[30];
resetMv mv1528[1];
setMv mv1528[0] = mv1524[0];
calculateMvCoeff mv1523[0] = DIVISION(mv1527,mv1528);
resetMv mv1529[1];
resetMv mv1530[1];
setVector ve1531 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1532 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1530[0] = <ve1531,ve1532>;
resetMv mv1533[1];
setMv mv1533[0] = rc1[-12];
resetMv mv1534[1];
setMv mv1534[0] = mv1530[0];
calculateMvCoeff mv1529[0] = DIVISION(mv1533,mv1534);
resetMv mv1535[1];
resetMv mv1536[1];
setVector ve1537 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1538 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1536[0] = <ve1537,ve1538>;
resetMv mv1539[1];
setMv mv1539[0] = rc1[-14];
resetMv mv1540[1];
setMv mv1540[0] = mv1536[0];
calculateMvCoeff mv1535[0] = DIVISION(mv1539,mv1540);
resetMv mv1541[1];
resetMv mv1542[1];
setVector ve1543 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1544 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1542[0] = <ve1543,ve1544>;
resetMv mv1545[1];
setMv mv1545[0] = rc1[-15];
resetMv mv1546[1];
setMv mv1546[0] = mv1542[0];
calculateMvCoeff mv1541[0] = DIVISION(mv1545,mv1546);
resetMv mv1547[1];
resetMv mv1548[1];
setVector ve1549 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1550 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1548[0] = <ve1549,ve1550>;
resetMv mv1551[1];
setMv mv1551[0] = rc1[-31];
resetMv mv1552[1];
setMv mv1552[0] = mv1548[0];
calculateMvCoeff mv1547[0] = DIVISION(mv1551,mv1552);
resetMv mv1553[1];
resetMv mv1554[1];
setVector ve1555 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1556 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1554[0] = <ve1555,ve1556>;
resetMv mv1557[1];
setMv mv1557[0] = rc1[18];
resetMv mv1558[1];
setMv mv1558[0] = mv1554[0];
calculateMvCoeff mv1553[0] = DIVISION(mv1557,mv1558);
resetMv mv1559[1];
resetMv mv1560[1];
setVector ve1561 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1562 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1560[0] = <ve1561,ve1562>;
resetMv mv1563[1];
setMv mv1563[0] = rc1[20];
resetMv mv1564[1];
setMv mv1564[0] = mv1560[0];
calculateMvCoeff mv1559[0] = DIVISION(mv1563,mv1564);
resetMv mv1565[1];
resetMv mv1566[1];
setVector ve1567 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1568 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1566[0] = <ve1567,ve1568>;
resetMv mv1569[1];
setMv mv1569[0] = rc1[21];
resetMv mv1570[1];
setMv mv1570[0] = mv1566[0];
calculateMvCoeff mv1565[0] = DIVISION(mv1569,mv1570);
resetMv mv1571[1];
resetMv mv1572[1];
setVector ve1573 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1574 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1572[0] = <ve1573,ve1574>;
resetMv mv1575[1];
setMv mv1575[0] = rc1[23];
resetMv mv1576[1];
setMv mv1576[0] = mv1572[0];
calculateMvCoeff mv1571[0] = DIVISION(mv1575,mv1576);
resetMv mv1577[1];
resetMv mv1578[1];
setVector ve1579 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1580 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1578[0] = <ve1579,ve1580>;
resetMv mv1581[1];
setMv mv1581[0] = rc1[24];
resetMv mv1582[1];
setMv mv1582[0] = mv1578[0];
calculateMvCoeff mv1577[0] = DIVISION(mv1581,mv1582);
resetMv mv1583[1];
resetMv mv1584[1];
setVector ve1585 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1586 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1584[0] = <ve1585,ve1586>;
resetMv mv1587[1];
setMv mv1587[0] = rc1[25];
resetMv mv1588[1];
setMv mv1588[0] = mv1584[0];
calculateMvCoeff mv1583[0] = DIVISION(mv1587,mv1588);
resetMv mv1589[1];
resetMv mv1590[1];
setVector ve1591 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1592 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1590[0] = <ve1591,ve1592>;
resetMv mv1593[1];
setMv mv1593[0] = rc1[27];
resetMv mv1594[1];
setMv mv1594[0] = mv1590[0];
calculateMvCoeff mv1589[0] = DIVISION(mv1593,mv1594);
resetMv mv1595[1];
resetMv mv1596[1];
setVector ve1597 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1598 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1596[0] = <ve1597,ve1598>;
resetMv mv1599[1];
setMv mv1599[0] = rc1[28];
resetMv mv1600[1];
setMv mv1600[0] = mv1596[0];
calculateMvCoeff mv1595[0] = DIVISION(mv1599,mv1600);
resetMv mv1601[1];
resetMv mv1602[1];
setVector ve1603 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1604 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1602[0] = <ve1603,ve1604>;
resetMv mv1605[1];
setMv mv1605[0] = rc1[29];
resetMv mv1606[1];
setMv mv1606[0] = mv1602[0];
calculateMvCoeff mv1601[0] = DIVISION(mv1605,mv1606);
resetMv mv1607[1];
resetMv mv1608[1];
setVector ve1609 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1610 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1608[0] = <ve1609,ve1610>;
resetMv mv1611[1];
setMv mv1611[0] = rc1[30];
resetMv mv1612[1];
setMv mv1612[0] = mv1608[0];
calculateMvCoeff mv1607[0] = DIVISION(mv1611,mv1612);
resetMv mv1613[1];
resetMv mv1614[1];
setVector ve1615 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1616 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1614[0] = <ve1615,ve1616>;
resetMv mv1617[1];
setMv mv1617[0] = rc1[-31];
resetMv mv1618[1];
setMv mv1618[0] = mv1614[0];
calculateMvCoeff mv1613[0] = DIVISION(mv1617,mv1618);
setVector ve1619 = {rc1[-0,-1,-2,-3,-4,6,7,8,10,11,13,15,16,17,19,21,22,24,25,-26,-28,-29,-30,-31]};
resetMv mv1621[24];
setMv mv1621[14] = mv1559[0];
setMv mv1621[18] = mv1583[0];
setMv mv1621[15] = mv1565[0];
setMv mv1621[20] = mv1595[0];
setMv mv1621[17] = mv1577[0];
setMv mv1621[4] = mv1499[0];
setMv mv1621[9] = mv1529[0];
setMv mv1621[12] = mv1547[0];
setMv mv1621[19] = mv1589[0];
setMv mv1621[2] = mv1487[0];
setMv mv1621[21] = mv1601[0];
setMv mv1621[16] = mv1571[0];
setMv mv1621[3] = mv1493[0];
setMv mv1621[5] = mv1505[0];
setMv mv1621[0] = mv1475[0];
setMv mv1621[1] = mv1481[0];
setMv mv1621[7] = mv1517[0];
setMv mv1621[22] = mv1607[0];
setMv mv1621[23] = mv1613[0];
setMv mv1621[6] = mv1511[0];
setMv mv1621[8] = mv1523[0];
setMv mv1621[11] = mv1541[0];
setMv mv1621[13] = mv1553[0];
setMv mv1621[10] = mv1535[0];
setVector ve1620 = {mv1621[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]};
dotVectors rc1N[4] = <ve1619,ve1620>;

//rc1N[5] = ((((((((-(rc1[5])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + (-((-(rc1[9])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[12])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[14])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[18])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[20])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[23])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[27])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv mv1622[1];
resetMv mv1623[1];
setVector ve1624 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1625 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1623[0] = <ve1624,ve1625>;
resetMv mv1626[1];
setMv mv1626[0] = rc1[-5];
resetMv mv1627[1];
setMv mv1627[0] = mv1623[0];
calculateMvCoeff mv1622[0] = DIVISION(mv1626,mv1627);
resetMv mv1628[1];
resetMv mv1629[1];
setVector ve1630 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1631 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1629[0] = <ve1630,ve1631>;
resetMv mv1632[1];
setMv mv1632[0] = rc1[-9];
resetMv mv1633[1];
setMv mv1633[0] = mv1629[0];
calculateMvCoeff mv1628[0] = DIVISION(mv1632,mv1633);
resetMv mv1634[1];
resetMv mv1635[1];
setVector ve1636 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1637 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1635[0] = <ve1636,ve1637>;
resetMv mv1638[1];
setMv mv1638[0] = rc1[-12];
resetMv mv1639[1];
setMv mv1639[0] = mv1635[0];
calculateMvCoeff mv1634[0] = DIVISION(mv1638,mv1639);
resetMv mv1640[1];
resetMv mv1641[1];
setVector ve1642 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1643 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1641[0] = <ve1642,ve1643>;
resetMv mv1644[1];
setMv mv1644[0] = rc1[-14];
resetMv mv1645[1];
setMv mv1645[0] = mv1641[0];
calculateMvCoeff mv1640[0] = DIVISION(mv1644,mv1645);
resetMv mv1646[1];
resetMv mv1647[1];
setVector ve1648 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1649 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1647[0] = <ve1648,ve1649>;
resetMv mv1650[1];
setMv mv1650[0] = rc1[18];
resetMv mv1651[1];
setMv mv1651[0] = mv1647[0];
calculateMvCoeff mv1646[0] = DIVISION(mv1650,mv1651);
resetMv mv1652[1];
resetMv mv1653[1];
setVector ve1654 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1655 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1653[0] = <ve1654,ve1655>;
resetMv mv1656[1];
setMv mv1656[0] = rc1[20];
resetMv mv1657[1];
setMv mv1657[0] = mv1653[0];
calculateMvCoeff mv1652[0] = DIVISION(mv1656,mv1657);
resetMv mv1658[1];
resetMv mv1659[1];
setVector ve1660 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1661 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1659[0] = <ve1660,ve1661>;
resetMv mv1662[1];
setMv mv1662[0] = rc1[23];
resetMv mv1663[1];
setMv mv1663[0] = mv1659[0];
calculateMvCoeff mv1658[0] = DIVISION(mv1662,mv1663);
resetMv mv1664[1];
resetMv mv1665[1];
setVector ve1666 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1667 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1665[0] = <ve1666,ve1667>;
resetMv mv1668[1];
setMv mv1668[0] = rc1[27];
resetMv mv1669[1];
setMv mv1669[0] = mv1665[0];
calculateMvCoeff mv1664[0] = DIVISION(mv1668,mv1669);
setVector ve1670 = {rc1[-5,9,12,14,18,20,23,-27]};
resetMv mv1672[8];
setMv mv1672[3] = mv1640[0];
setMv mv1672[7] = mv1664[0];
setMv mv1672[1] = mv1628[0];
setMv mv1672[5] = mv1652[0];
setMv mv1672[6] = mv1658[0];
setMv mv1672[0] = mv1622[0];
setMv mv1672[2] = mv1634[0];
setMv mv1672[4] = mv1646[0];
setVector ve1671 = {mv1672[0,1,2,3,4,5,6,7]};
dotVectors rc1N[5] = <ve1670,ve1671>;

//rc2[0] = ((((-(len[1])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + ((-(len[2])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[3])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[5])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv rc2[32];
resetMv mv1673[1];
resetMv mv1674[1];
setVector ve1675 = {nen[1,2,3]};
setVector ve1676 = {nen[1,2,3]};
dotVectors mv1674[0] = <ve1675,ve1676>;
resetMv mv1677[1];
setMv mv1677[0] = nen[1];
resetMv mv1678[1];
setMv mv1678[0] = mv1674[0];
calculateMvCoeff mv1673[0] = DIVISION(mv1677,mv1678);
resetMv mv1679[1];
resetMv mv1680[1];
setVector ve1681 = {nen[1,2,3]};
setVector ve1682 = {nen[1,2,3]};
dotVectors mv1680[0] = <ve1681,ve1682>;
resetMv mv1683[1];
setMv mv1683[0] = nen[2];
resetMv mv1684[1];
setMv mv1684[0] = mv1680[0];
calculateMvCoeff mv1679[0] = DIVISION(mv1683,mv1684);
resetMv mv1685[1];
resetMv mv1686[1];
setVector ve1687 = {nen[1,2,3]};
setVector ve1688 = {nen[1,2,3]};
dotVectors mv1686[0] = <ve1687,ve1688>;
resetMv mv1689[1];
setMv mv1689[0] = nen[3];
resetMv mv1690[1];
setMv mv1690[0] = mv1686[0];
calculateMvCoeff mv1685[0] = DIVISION(mv1689,mv1690);
resetMv mv1691[1];
resetMv mv1692[1];
setVector ve1693 = {nen[1,2,3]};
setVector ve1694 = {nen[1,2,3]};
dotVectors mv1692[0] = <ve1693,ve1694>;
resetMv mv1695[1];
setMv mv1695[0] = nen[4];
resetMv mv1696[1];
setMv mv1696[0] = mv1692[0];
calculateMvCoeff mv1691[0] = DIVISION(mv1695,mv1696);
setVector ve1697 = {len[-1,-2,-3,5]};
resetMv mv1699[4];
setMv mv1699[3] = mv1691[0];
setMv mv1699[0] = mv1673[0];
setMv mv1699[1] = mv1679[0];
setMv mv1699[2] = mv1685[0];
setVector ve1698 = {mv1699[0,1,2,3]};
dotVectors rc2[0] = <ve1697,ve1698>;

//rc2[1] = ((((-(len[0])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + ((rcPpDual[6] - len[6]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[7] - len[7]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[9] - len[9]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1700[1];
resetMv mv1701[1];
setVector ve1702 = {nen[1,2,3]};
setVector ve1703 = {nen[1,2,3]};
dotVectors mv1701[0] = <ve1702,ve1703>;
resetMv mv1704[1];
setMv mv1704[0] = nen[1];
resetMv mv1705[1];
setMv mv1705[0] = mv1701[0];
calculateMvCoeff mv1700[0] = DIVISION(mv1704,mv1705);
resetMv mv1706[1];
resetMv mv1708[2];
setMv mv1708[1] = len[-6];
setMv mv1708[0] = rcPpDual[6];
setVector ve1707 = {mv1708[0,1]};
dotVectors mv1706[0] = <ve1707>;
resetMv mv1709[1];
resetMv mv1710[1];
setVector ve1711 = {nen[1,2,3]};
setVector ve1712 = {nen[1,2,3]};
dotVectors mv1710[0] = <ve1711,ve1712>;
resetMv mv1713[1];
setMv mv1713[0] = nen[2];
resetMv mv1714[1];
setMv mv1714[0] = mv1710[0];
calculateMvCoeff mv1709[0] = DIVISION(mv1713,mv1714);
resetMv mv1715[1];
resetMv mv1717[2];
setMv mv1717[1] = len[-7];
setMv mv1717[0] = rcPpDual[7];
setVector ve1716 = {mv1717[0,1]};
dotVectors mv1715[0] = <ve1716>;
resetMv mv1718[1];
resetMv mv1719[1];
setVector ve1720 = {nen[1,2,3]};
setVector ve1721 = {nen[1,2,3]};
dotVectors mv1719[0] = <ve1720,ve1721>;
resetMv mv1722[1];
setMv mv1722[0] = nen[3];
resetMv mv1723[1];
setMv mv1723[0] = mv1719[0];
calculateMvCoeff mv1718[0] = DIVISION(mv1722,mv1723);
resetMv mv1724[1];
resetMv mv1725[1];
resetMv mv1727[2];
setMv mv1727[1] = len[-9];
setMv mv1727[0] = rcPpDual[9];
setVector ve1726 = {mv1727[0,1]};
dotVectors mv1725[0] = <ve1726>;
setMv mv1724[0] = mv1725[-0];
resetMv mv1728[1];
resetMv mv1729[1];
setVector ve1730 = {nen[1,2,3]};
setVector ve1731 = {nen[1,2,3]};
dotVectors mv1729[0] = <ve1730,ve1731>;
resetMv mv1732[1];
setMv mv1732[0] = nen[4];
resetMv mv1733[1];
setMv mv1733[0] = mv1729[0];
calculateMvCoeff mv1728[0] = DIVISION(mv1732,mv1733);
resetMv mv1735[4];
setMv mv1735[1] = mv1706[0];
setMv mv1735[0] = len[-0];
setMv mv1735[2] = mv1715[0];
setMv mv1735[3] = mv1724[0];
setVector ve1734 = {mv1735[0,1,2,3]};
resetMv mv1737[4];
setMv mv1737[0] = mv1700[0];
setMv mv1737[1] = mv1709[0];
setMv mv1737[2] = mv1718[0];
setMv mv1737[3] = mv1728[0];
setVector ve1736 = {mv1737[0,1,2,3]};
dotVectors rc2[1] = <ve1734,ve1736>;

//rc2[2] = ((((-(len[0])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[6] - len[6]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[10] - len[10]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[12] - len[12]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1738[1];
resetMv mv1739[1];
setVector ve1740 = {nen[1,2,3]};
setVector ve1741 = {nen[1,2,3]};
dotVectors mv1739[0] = <ve1740,ve1741>;
resetMv mv1742[1];
setMv mv1742[0] = nen[2];
resetMv mv1743[1];
setMv mv1743[0] = mv1739[0];
calculateMvCoeff mv1738[0] = DIVISION(mv1742,mv1743);
resetMv mv1744[1];
resetMv mv1745[1];
resetMv mv1747[2];
setMv mv1747[1] = len[-6];
setMv mv1747[0] = rcPpDual[6];
setVector ve1746 = {mv1747[0,1]};
dotVectors mv1745[0] = <ve1746>;
setMv mv1744[0] = mv1745[-0];
resetMv mv1748[1];
resetMv mv1749[1];
setVector ve1750 = {nen[1,2,3]};
setVector ve1751 = {nen[1,2,3]};
dotVectors mv1749[0] = <ve1750,ve1751>;
resetMv mv1752[1];
setMv mv1752[0] = nen[1];
resetMv mv1753[1];
setMv mv1753[0] = mv1749[0];
calculateMvCoeff mv1748[0] = DIVISION(mv1752,mv1753);
resetMv mv1754[1];
resetMv mv1756[2];
setMv mv1756[1] = len[-10];
setMv mv1756[0] = rcPpDual[10];
setVector ve1755 = {mv1756[0,1]};
dotVectors mv1754[0] = <ve1755>;
resetMv mv1757[1];
resetMv mv1758[1];
setVector ve1759 = {nen[1,2,3]};
setVector ve1760 = {nen[1,2,3]};
dotVectors mv1758[0] = <ve1759,ve1760>;
resetMv mv1761[1];
setMv mv1761[0] = nen[3];
resetMv mv1762[1];
setMv mv1762[0] = mv1758[0];
calculateMvCoeff mv1757[0] = DIVISION(mv1761,mv1762);
resetMv mv1763[1];
resetMv mv1764[1];
resetMv mv1766[2];
setMv mv1766[1] = len[-12];
setMv mv1766[0] = rcPpDual[12];
setVector ve1765 = {mv1766[0,1]};
dotVectors mv1764[0] = <ve1765>;
setMv mv1763[0] = mv1764[-0];
resetMv mv1767[1];
resetMv mv1768[1];
setVector ve1769 = {nen[1,2,3]};
setVector ve1770 = {nen[1,2,3]};
dotVectors mv1768[0] = <ve1769,ve1770>;
resetMv mv1771[1];
setMv mv1771[0] = nen[4];
resetMv mv1772[1];
setMv mv1772[0] = mv1768[0];
calculateMvCoeff mv1767[0] = DIVISION(mv1771,mv1772);
resetMv mv1774[4];
setMv mv1774[1] = mv1744[0];
setMv mv1774[2] = mv1754[0];
setMv mv1774[3] = mv1763[0];
setMv mv1774[0] = len[-0];
setVector ve1773 = {mv1774[0,1,2,3]};
resetMv mv1776[4];
setMv mv1776[3] = mv1767[0];
setMv mv1776[0] = mv1738[0];
setMv mv1776[2] = mv1757[0];
setMv mv1776[1] = mv1748[0];
setVector ve1775 = {mv1776[0,1,2,3]};
dotVectors rc2[2] = <ve1773,ve1775>;

//rc2[3] = ((((-(len[0])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[7] - len[7]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[10] - len[10]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[14] - len[14]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1777[1];
resetMv mv1778[1];
setVector ve1779 = {nen[1,2,3]};
setVector ve1780 = {nen[1,2,3]};
dotVectors mv1778[0] = <ve1779,ve1780>;
resetMv mv1781[1];
setMv mv1781[0] = nen[3];
resetMv mv1782[1];
setMv mv1782[0] = mv1778[0];
calculateMvCoeff mv1777[0] = DIVISION(mv1781,mv1782);
resetMv mv1783[1];
resetMv mv1784[1];
resetMv mv1786[2];
setMv mv1786[1] = len[-7];
setMv mv1786[0] = rcPpDual[7];
setVector ve1785 = {mv1786[0,1]};
dotVectors mv1784[0] = <ve1785>;
setMv mv1783[0] = mv1784[-0];
resetMv mv1787[1];
resetMv mv1788[1];
setVector ve1789 = {nen[1,2,3]};
setVector ve1790 = {nen[1,2,3]};
dotVectors mv1788[0] = <ve1789,ve1790>;
resetMv mv1791[1];
setMv mv1791[0] = nen[1];
resetMv mv1792[1];
setMv mv1792[0] = mv1788[0];
calculateMvCoeff mv1787[0] = DIVISION(mv1791,mv1792);
resetMv mv1793[1];
resetMv mv1794[1];
resetMv mv1796[2];
setMv mv1796[1] = len[-10];
setMv mv1796[0] = rcPpDual[10];
setVector ve1795 = {mv1796[0,1]};
dotVectors mv1794[0] = <ve1795>;
setMv mv1793[0] = mv1794[-0];
resetMv mv1797[1];
resetMv mv1798[1];
setVector ve1799 = {nen[1,2,3]};
setVector ve1800 = {nen[1,2,3]};
dotVectors mv1798[0] = <ve1799,ve1800>;
resetMv mv1801[1];
setMv mv1801[0] = nen[2];
resetMv mv1802[1];
setMv mv1802[0] = mv1798[0];
calculateMvCoeff mv1797[0] = DIVISION(mv1801,mv1802);
resetMv mv1803[1];
resetMv mv1804[1];
resetMv mv1806[2];
setMv mv1806[1] = len[-14];
setMv mv1806[0] = rcPpDual[14];
setVector ve1805 = {mv1806[0,1]};
dotVectors mv1804[0] = <ve1805>;
setMv mv1803[0] = mv1804[-0];
resetMv mv1807[1];
resetMv mv1808[1];
setVector ve1809 = {nen[1,2,3]};
setVector ve1810 = {nen[1,2,3]};
dotVectors mv1808[0] = <ve1809,ve1810>;
resetMv mv1811[1];
setMv mv1811[0] = nen[4];
resetMv mv1812[1];
setMv mv1812[0] = mv1808[0];
calculateMvCoeff mv1807[0] = DIVISION(mv1811,mv1812);
resetMv mv1814[4];
setMv mv1814[3] = mv1803[0];
setMv mv1814[1] = mv1783[0];
setMv mv1814[2] = mv1793[0];
setMv mv1814[0] = len[-0];
setVector ve1813 = {mv1814[0,1,2,3]};
resetMv mv1816[4];
setMv mv1816[3] = mv1807[0];
setMv mv1816[0] = mv1777[0];
setMv mv1816[1] = mv1787[0];
setMv mv1816[2] = mv1797[0];
setVector ve1815 = {mv1816[0,1,2,3]};
dotVectors rc2[3] = <ve1813,ve1815>;

//rc2[4] = (((((-(len[0])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] - len[8]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[11] - len[11]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[13] - len[13]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[15] - len[15]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1817[1];
resetMv mv1818[1];
setVector ve1819 = {nen[1,2,3]};
setVector ve1820 = {nen[1,2,3]};
dotVectors mv1818[0] = <ve1819,ve1820>;
resetMv mv1821[1];
setMv mv1821[0] = nen[4];
resetMv mv1822[1];
setMv mv1822[0] = mv1818[0];
calculateMvCoeff mv1817[0] = DIVISION(mv1821,mv1822);
resetMv mv1823[1];
resetMv mv1824[1];
resetMv mv1826[2];
setMv mv1826[1] = len[-8];
setMv mv1826[0] = rcPpDual[8];
setVector ve1825 = {mv1826[0,1]};
dotVectors mv1824[0] = <ve1825>;
setMv mv1823[0] = mv1824[-0];
resetMv mv1827[1];
resetMv mv1828[1];
setVector ve1829 = {nen[1,2,3]};
setVector ve1830 = {nen[1,2,3]};
dotVectors mv1828[0] = <ve1829,ve1830>;
resetMv mv1831[1];
setMv mv1831[0] = nen[1];
resetMv mv1832[1];
setMv mv1832[0] = mv1828[0];
calculateMvCoeff mv1827[0] = DIVISION(mv1831,mv1832);
resetMv mv1833[1];
resetMv mv1834[1];
resetMv mv1836[2];
setMv mv1836[1] = len[-11];
setMv mv1836[0] = rcPpDual[11];
setVector ve1835 = {mv1836[0,1]};
dotVectors mv1834[0] = <ve1835>;
setMv mv1833[0] = mv1834[-0];
resetMv mv1837[1];
resetMv mv1838[1];
setVector ve1839 = {nen[1,2,3]};
setVector ve1840 = {nen[1,2,3]};
dotVectors mv1838[0] = <ve1839,ve1840>;
resetMv mv1841[1];
setMv mv1841[0] = nen[2];
resetMv mv1842[1];
setMv mv1842[0] = mv1838[0];
calculateMvCoeff mv1837[0] = DIVISION(mv1841,mv1842);
resetMv mv1843[1];
resetMv mv1844[1];
resetMv mv1846[2];
setMv mv1846[1] = len[-13];
setMv mv1846[0] = rcPpDual[13];
setVector ve1845 = {mv1846[0,1]};
dotVectors mv1844[0] = <ve1845>;
setMv mv1843[0] = mv1844[-0];
resetMv mv1847[1];
resetMv mv1848[1];
setVector ve1849 = {nen[1,2,3]};
setVector ve1850 = {nen[1,2,3]};
dotVectors mv1848[0] = <ve1849,ve1850>;
resetMv mv1851[1];
setMv mv1851[0] = nen[3];
resetMv mv1852[1];
setMv mv1852[0] = mv1848[0];
calculateMvCoeff mv1847[0] = DIVISION(mv1851,mv1852);
resetMv mv1853[1];
resetMv mv1854[1];
resetMv mv1856[2];
setMv mv1856[1] = len[-15];
setMv mv1856[0] = rcPpDual[15];
setVector ve1855 = {mv1856[0,1]};
dotVectors mv1854[0] = <ve1855>;
setMv mv1853[0] = mv1854[-0];
resetMv mv1857[1];
resetMv mv1858[1];
setVector ve1859 = {nen[1,2,3]};
setVector ve1860 = {nen[1,2,3]};
dotVectors mv1858[0] = <ve1859,ve1860>;
resetMv mv1861[1];
setMv mv1861[0] = nen[4];
resetMv mv1862[1];
setMv mv1862[0] = mv1858[0];
calculateMvCoeff mv1857[0] = DIVISION(mv1861,mv1862);
resetMv mv1864[5];
setMv mv1864[1] = mv1823[0];
setMv mv1864[2] = mv1833[0];
setMv mv1864[3] = mv1843[0];
setMv mv1864[4] = mv1853[0];
setMv mv1864[0] = len[-0];
setVector ve1863 = {mv1864[0,1,2,3,4]};
resetMv mv1866[5];
setMv mv1866[1] = mv1827[0];
setMv mv1866[2] = mv1837[0];
setMv mv1866[3] = mv1847[0];
setMv mv1866[0] = mv1817[0];
setMv mv1866[4] = mv1857[0];
setVector ve1865 = {mv1866[0,1,2,3,4]};
dotVectors rc2[4] = <ve1863,ve1865>;

//rc2[5] = ((-((rcPpDual[9] - len[9]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[12] - len[12]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[14] - len[14]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1867[1];
resetMv mv1868[1];
resetMv mv1870[2];
setMv mv1870[1] = len[-9];
setMv mv1870[0] = rcPpDual[9];
setVector ve1869 = {mv1870[0,1]};
dotVectors mv1868[0] = <ve1869>;
setMv mv1867[0] = mv1868[-0];
resetMv mv1871[1];
resetMv mv1872[1];
setVector ve1873 = {nen[1,2,3]};
setVector ve1874 = {nen[1,2,3]};
dotVectors mv1872[0] = <ve1873,ve1874>;
resetMv mv1875[1];
setMv mv1875[0] = nen[1];
resetMv mv1876[1];
setMv mv1876[0] = mv1872[0];
calculateMvCoeff mv1871[0] = DIVISION(mv1875,mv1876);
resetMv mv1877[1];
resetMv mv1878[1];
resetMv mv1880[2];
setMv mv1880[1] = len[-12];
setMv mv1880[0] = rcPpDual[12];
setVector ve1879 = {mv1880[0,1]};
dotVectors mv1878[0] = <ve1879>;
setMv mv1877[0] = mv1878[-0];
resetMv mv1881[1];
resetMv mv1882[1];
setVector ve1883 = {nen[1,2,3]};
setVector ve1884 = {nen[1,2,3]};
dotVectors mv1882[0] = <ve1883,ve1884>;
resetMv mv1885[1];
setMv mv1885[0] = nen[2];
resetMv mv1886[1];
setMv mv1886[0] = mv1882[0];
calculateMvCoeff mv1881[0] = DIVISION(mv1885,mv1886);
resetMv mv1887[1];
resetMv mv1888[1];
resetMv mv1890[2];
setMv mv1890[1] = len[-14];
setMv mv1890[0] = rcPpDual[14];
setVector ve1889 = {mv1890[0,1]};
dotVectors mv1888[0] = <ve1889>;
setMv mv1887[0] = mv1888[-0];
resetMv mv1891[1];
resetMv mv1892[1];
setVector ve1893 = {nen[1,2,3]};
setVector ve1894 = {nen[1,2,3]};
dotVectors mv1892[0] = <ve1893,ve1894>;
resetMv mv1895[1];
setMv mv1895[0] = nen[3];
resetMv mv1896[1];
setMv mv1896[0] = mv1892[0];
calculateMvCoeff mv1891[0] = DIVISION(mv1895,mv1896);
resetMv mv1898[3];
setMv mv1898[2] = mv1887[0];
setMv mv1898[1] = mv1877[0];
setMv mv1898[0] = mv1867[0];
setVector ve1897 = {mv1898[0,1,2]};
resetMv mv1900[3];
setMv mv1900[2] = mv1891[0];
setMv mv1900[1] = mv1881[0];
setMv mv1900[0] = mv1871[0];
setVector ve1899 = {mv1900[0,1,2]};
dotVectors rc2[5] = <ve1897,ve1899>;

//rc2[6] = ((((-(len[1])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[2])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[16])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[18])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1901[1];
resetMv mv1902[1];
setVector ve1903 = {nen[1,2,3]};
setVector ve1904 = {nen[1,2,3]};
dotVectors mv1902[0] = <ve1903,ve1904>;
resetMv mv1905[1];
setMv mv1905[0] = nen[2];
resetMv mv1906[1];
setMv mv1906[0] = mv1902[0];
calculateMvCoeff mv1901[0] = DIVISION(mv1905,mv1906);
resetMv mv1907[1];
resetMv mv1908[1];
setVector ve1909 = {nen[1,2,3]};
setVector ve1910 = {nen[1,2,3]};
dotVectors mv1908[0] = <ve1909,ve1910>;
resetMv mv1911[1];
setMv mv1911[0] = nen[1];
resetMv mv1912[1];
setMv mv1912[0] = mv1908[0];
calculateMvCoeff mv1907[0] = DIVISION(mv1911,mv1912);
resetMv mv1913[1];
resetMv mv1914[1];
setVector ve1915 = {nen[1,2,3]};
setVector ve1916 = {nen[1,2,3]};
dotVectors mv1914[0] = <ve1915,ve1916>;
resetMv mv1917[1];
setMv mv1917[0] = nen[3];
resetMv mv1918[1];
setMv mv1918[0] = mv1914[0];
calculateMvCoeff mv1913[0] = DIVISION(mv1917,mv1918);
resetMv mv1919[1];
resetMv mv1920[1];
setVector ve1921 = {nen[1,2,3]};
setVector ve1922 = {nen[1,2,3]};
dotVectors mv1920[0] = <ve1921,ve1922>;
resetMv mv1923[1];
setMv mv1923[0] = nen[4];
resetMv mv1924[1];
setMv mv1924[0] = mv1920[0];
calculateMvCoeff mv1919[0] = DIVISION(mv1923,mv1924);
setVector ve1925 = {len[-1,2,-16,18]};
resetMv mv1927[4];
setMv mv1927[2] = mv1913[0];
setMv mv1927[0] = mv1901[0];
setMv mv1927[1] = mv1907[0];
setMv mv1927[3] = mv1919[0];
setVector ve1926 = {mv1927[0,1,2,3]};
dotVectors rc2[6] = <ve1925,ve1926>;

//rc2[7] = ((((-(len[1])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[3])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[16])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[20])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1928[1];
resetMv mv1929[1];
setVector ve1930 = {nen[1,2,3]};
setVector ve1931 = {nen[1,2,3]};
dotVectors mv1929[0] = <ve1930,ve1931>;
resetMv mv1932[1];
setMv mv1932[0] = nen[3];
resetMv mv1933[1];
setMv mv1933[0] = mv1929[0];
calculateMvCoeff mv1928[0] = DIVISION(mv1932,mv1933);
resetMv mv1934[1];
resetMv mv1935[1];
setVector ve1936 = {nen[1,2,3]};
setVector ve1937 = {nen[1,2,3]};
dotVectors mv1935[0] = <ve1936,ve1937>;
resetMv mv1938[1];
setMv mv1938[0] = nen[1];
resetMv mv1939[1];
setMv mv1939[0] = mv1935[0];
calculateMvCoeff mv1934[0] = DIVISION(mv1938,mv1939);
resetMv mv1940[1];
resetMv mv1941[1];
setVector ve1942 = {nen[1,2,3]};
setVector ve1943 = {nen[1,2,3]};
dotVectors mv1941[0] = <ve1942,ve1943>;
resetMv mv1944[1];
setMv mv1944[0] = nen[2];
resetMv mv1945[1];
setMv mv1945[0] = mv1941[0];
calculateMvCoeff mv1940[0] = DIVISION(mv1944,mv1945);
resetMv mv1946[1];
resetMv mv1947[1];
setVector ve1948 = {nen[1,2,3]};
setVector ve1949 = {nen[1,2,3]};
dotVectors mv1947[0] = <ve1948,ve1949>;
resetMv mv1950[1];
setMv mv1950[0] = nen[4];
resetMv mv1951[1];
setMv mv1951[0] = mv1947[0];
calculateMvCoeff mv1946[0] = DIVISION(mv1950,mv1951);
setVector ve1952 = {len[-1,3,16,20]};
resetMv mv1954[4];
setMv mv1954[2] = mv1940[0];
setMv mv1954[1] = mv1934[0];
setMv mv1954[3] = mv1946[0];
setMv mv1954[0] = mv1928[0];
setVector ve1953 = {mv1954[0,1,2,3]};
dotVectors rc2[7] = <ve1952,ve1953>;

//rc2[8] = (((((-(len[1])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[4])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[17])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[19])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[21])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1955[1];
resetMv mv1956[1];
setVector ve1957 = {nen[1,2,3]};
setVector ve1958 = {nen[1,2,3]};
dotVectors mv1956[0] = <ve1957,ve1958>;
resetMv mv1959[1];
setMv mv1959[0] = nen[4];
resetMv mv1960[1];
setMv mv1960[0] = mv1956[0];
calculateMvCoeff mv1955[0] = DIVISION(mv1959,mv1960);
resetMv mv1961[1];
resetMv mv1962[1];
setVector ve1963 = {nen[1,2,3]};
setVector ve1964 = {nen[1,2,3]};
dotVectors mv1962[0] = <ve1963,ve1964>;
resetMv mv1965[1];
setMv mv1965[0] = nen[1];
resetMv mv1966[1];
setMv mv1966[0] = mv1962[0];
calculateMvCoeff mv1961[0] = DIVISION(mv1965,mv1966);
resetMv mv1967[1];
resetMv mv1968[1];
setVector ve1969 = {nen[1,2,3]};
setVector ve1970 = {nen[1,2,3]};
dotVectors mv1968[0] = <ve1969,ve1970>;
resetMv mv1971[1];
setMv mv1971[0] = nen[2];
resetMv mv1972[1];
setMv mv1972[0] = mv1968[0];
calculateMvCoeff mv1967[0] = DIVISION(mv1971,mv1972);
resetMv mv1973[1];
resetMv mv1974[1];
setVector ve1975 = {nen[1,2,3]};
setVector ve1976 = {nen[1,2,3]};
dotVectors mv1974[0] = <ve1975,ve1976>;
resetMv mv1977[1];
setMv mv1977[0] = nen[3];
resetMv mv1978[1];
setMv mv1978[0] = mv1974[0];
calculateMvCoeff mv1973[0] = DIVISION(mv1977,mv1978);
resetMv mv1979[1];
resetMv mv1980[1];
setVector ve1981 = {nen[1,2,3]};
setVector ve1982 = {nen[1,2,3]};
dotVectors mv1980[0] = <ve1981,ve1982>;
resetMv mv1983[1];
setMv mv1983[0] = nen[4];
resetMv mv1984[1];
setMv mv1984[0] = mv1980[0];
calculateMvCoeff mv1979[0] = DIVISION(mv1983,mv1984);
setVector ve1985 = {len[-1,4,17,19,21]};
resetMv mv1987[5];
setMv mv1987[3] = mv1973[0];
setMv mv1987[1] = mv1961[0];
setMv mv1987[2] = mv1967[0];
setMv mv1987[4] = mv1979[0];
setMv mv1987[0] = mv1955[0];
setVector ve1986 = {mv1987[0,1,2,3,4]};
dotVectors rc2[8] = <ve1985,ve1986>;

//rc2[9] = ((-((-(len[5])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[18])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[20])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1988[1];
resetMv mv1989[1];
setVector ve1990 = {nen[1,2,3]};
setVector ve1991 = {nen[1,2,3]};
dotVectors mv1989[0] = <ve1990,ve1991>;
resetMv mv1992[1];
setMv mv1992[0] = nen[1];
resetMv mv1993[1];
setMv mv1993[0] = mv1989[0];
calculateMvCoeff mv1988[0] = DIVISION(mv1992,mv1993);
resetMv mv1994[1];
resetMv mv1995[1];
setVector ve1996 = {nen[1,2,3]};
setVector ve1997 = {nen[1,2,3]};
dotVectors mv1995[0] = <ve1996,ve1997>;
resetMv mv1998[1];
setMv mv1998[0] = nen[2];
resetMv mv1999[1];
setMv mv1999[0] = mv1995[0];
calculateMvCoeff mv1994[0] = DIVISION(mv1998,mv1999);
resetMv mv2000[1];
resetMv mv2001[1];
setVector ve2002 = {nen[1,2,3]};
setVector ve2003 = {nen[1,2,3]};
dotVectors mv2001[0] = <ve2002,ve2003>;
resetMv mv2004[1];
setMv mv2004[0] = nen[3];
resetMv mv2005[1];
setMv mv2005[0] = mv2001[0];
calculateMvCoeff mv2000[0] = DIVISION(mv2004,mv2005);
setVector ve2006 = {len[5,18,20]};
resetMv mv2008[3];
setMv mv2008[1] = mv1994[0];
setMv mv2008[0] = mv1988[0];
setMv mv2008[2] = mv2000[0];
setVector ve2007 = {mv2008[0,1,2]};
dotVectors rc2[9] = <ve2006,ve2007>;

//rc2[10] = ((((-(len[2])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[3])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[16])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[23])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2009[1];
resetMv mv2010[1];
setVector ve2011 = {nen[1,2,3]};
setVector ve2012 = {nen[1,2,3]};
dotVectors mv2010[0] = <ve2011,ve2012>;
resetMv mv2013[1];
setMv mv2013[0] = nen[3];
resetMv mv2014[1];
setMv mv2014[0] = mv2010[0];
calculateMvCoeff mv2009[0] = DIVISION(mv2013,mv2014);
resetMv mv2015[1];
resetMv mv2016[1];
setVector ve2017 = {nen[1,2,3]};
setVector ve2018 = {nen[1,2,3]};
dotVectors mv2016[0] = <ve2017,ve2018>;
resetMv mv2019[1];
setMv mv2019[0] = nen[2];
resetMv mv2020[1];
setMv mv2020[0] = mv2016[0];
calculateMvCoeff mv2015[0] = DIVISION(mv2019,mv2020);
resetMv mv2021[1];
resetMv mv2022[1];
setVector ve2023 = {nen[1,2,3]};
setVector ve2024 = {nen[1,2,3]};
dotVectors mv2022[0] = <ve2023,ve2024>;
resetMv mv2025[1];
setMv mv2025[0] = nen[1];
resetMv mv2026[1];
setMv mv2026[0] = mv2022[0];
calculateMvCoeff mv2021[0] = DIVISION(mv2025,mv2026);
resetMv mv2027[1];
resetMv mv2028[1];
setVector ve2029 = {nen[1,2,3]};
setVector ve2030 = {nen[1,2,3]};
dotVectors mv2028[0] = <ve2029,ve2030>;
resetMv mv2031[1];
setMv mv2031[0] = nen[4];
resetMv mv2032[1];
setMv mv2032[0] = mv2028[0];
calculateMvCoeff mv2027[0] = DIVISION(mv2031,mv2032);
setVector ve2033 = {len[-2,3,-16,23]};
resetMv mv2035[4];
setMv mv2035[2] = mv2021[0];
setMv mv2035[0] = mv2009[0];
setMv mv2035[1] = mv2015[0];
setMv mv2035[3] = mv2027[0];
setVector ve2034 = {mv2035[0,1,2,3]};
dotVectors rc2[10] = <ve2033,ve2034>;

//rc2[11] = (((((-(len[2])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[4])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[17])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[22])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[24])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2036[1];
resetMv mv2037[1];
setVector ve2038 = {nen[1,2,3]};
setVector ve2039 = {nen[1,2,3]};
dotVectors mv2037[0] = <ve2038,ve2039>;
resetMv mv2040[1];
setMv mv2040[0] = nen[4];
resetMv mv2041[1];
setMv mv2041[0] = mv2037[0];
calculateMvCoeff mv2036[0] = DIVISION(mv2040,mv2041);
resetMv mv2042[1];
resetMv mv2043[1];
setVector ve2044 = {nen[1,2,3]};
setVector ve2045 = {nen[1,2,3]};
dotVectors mv2043[0] = <ve2044,ve2045>;
resetMv mv2046[1];
setMv mv2046[0] = nen[2];
resetMv mv2047[1];
setMv mv2047[0] = mv2043[0];
calculateMvCoeff mv2042[0] = DIVISION(mv2046,mv2047);
resetMv mv2048[1];
resetMv mv2049[1];
setVector ve2050 = {nen[1,2,3]};
setVector ve2051 = {nen[1,2,3]};
dotVectors mv2049[0] = <ve2050,ve2051>;
resetMv mv2052[1];
setMv mv2052[0] = nen[1];
resetMv mv2053[1];
setMv mv2053[0] = mv2049[0];
calculateMvCoeff mv2048[0] = DIVISION(mv2052,mv2053);
resetMv mv2054[1];
resetMv mv2055[1];
setVector ve2056 = {nen[1,2,3]};
setVector ve2057 = {nen[1,2,3]};
dotVectors mv2055[0] = <ve2056,ve2057>;
resetMv mv2058[1];
setMv mv2058[0] = nen[3];
resetMv mv2059[1];
setMv mv2059[0] = mv2055[0];
calculateMvCoeff mv2054[0] = DIVISION(mv2058,mv2059);
resetMv mv2060[1];
resetMv mv2061[1];
setVector ve2062 = {nen[1,2,3]};
setVector ve2063 = {nen[1,2,3]};
dotVectors mv2061[0] = <ve2062,ve2063>;
resetMv mv2064[1];
setMv mv2064[0] = nen[4];
resetMv mv2065[1];
setMv mv2065[0] = mv2061[0];
calculateMvCoeff mv2060[0] = DIVISION(mv2064,mv2065);
setVector ve2066 = {len[-2,4,-17,22,24]};
resetMv mv2068[5];
setMv mv2068[1] = mv2042[0];
setMv mv2068[4] = mv2060[0];
setMv mv2068[2] = mv2048[0];
setMv mv2068[3] = mv2054[0];
setMv mv2068[0] = mv2036[0];
setVector ve2067 = {mv2068[0,1,2,3,4]};
dotVectors rc2[11] = <ve2066,ve2067>;

//rc2[12] = ((-((-(len[5])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[18])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[23])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2069[1];
resetMv mv2070[1];
setVector ve2071 = {nen[1,2,3]};
setVector ve2072 = {nen[1,2,3]};
dotVectors mv2070[0] = <ve2071,ve2072>;
resetMv mv2073[1];
setMv mv2073[0] = nen[2];
resetMv mv2074[1];
setMv mv2074[0] = mv2070[0];
calculateMvCoeff mv2069[0] = DIVISION(mv2073,mv2074);
resetMv mv2075[1];
resetMv mv2076[1];
setVector ve2077 = {nen[1,2,3]};
setVector ve2078 = {nen[1,2,3]};
dotVectors mv2076[0] = <ve2077,ve2078>;
resetMv mv2079[1];
setMv mv2079[0] = nen[1];
resetMv mv2080[1];
setMv mv2080[0] = mv2076[0];
calculateMvCoeff mv2075[0] = DIVISION(mv2079,mv2080);
resetMv mv2081[1];
resetMv mv2082[1];
setVector ve2083 = {nen[1,2,3]};
setVector ve2084 = {nen[1,2,3]};
dotVectors mv2082[0] = <ve2083,ve2084>;
resetMv mv2085[1];
setMv mv2085[0] = nen[3];
resetMv mv2086[1];
setMv mv2086[0] = mv2082[0];
calculateMvCoeff mv2081[0] = DIVISION(mv2085,mv2086);
setVector ve2087 = {len[5,-18,23]};
resetMv mv2089[3];
setMv mv2089[0] = mv2069[0];
setMv mv2089[1] = mv2075[0];
setMv mv2089[2] = mv2081[0];
setVector ve2088 = {mv2089[0,1,2]};
dotVectors rc2[12] = <ve2087,ve2088>;

//rc2[13] = (((((-(len[3])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[4])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[19])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[22])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[25])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2090[1];
resetMv mv2091[1];
setVector ve2092 = {nen[1,2,3]};
setVector ve2093 = {nen[1,2,3]};
dotVectors mv2091[0] = <ve2092,ve2093>;
resetMv mv2094[1];
setMv mv2094[0] = nen[4];
resetMv mv2095[1];
setMv mv2095[0] = mv2091[0];
calculateMvCoeff mv2090[0] = DIVISION(mv2094,mv2095);
resetMv mv2096[1];
resetMv mv2097[1];
setVector ve2098 = {nen[1,2,3]};
setVector ve2099 = {nen[1,2,3]};
dotVectors mv2097[0] = <ve2098,ve2099>;
resetMv mv2100[1];
setMv mv2100[0] = nen[3];
resetMv mv2101[1];
setMv mv2101[0] = mv2097[0];
calculateMvCoeff mv2096[0] = DIVISION(mv2100,mv2101);
resetMv mv2102[1];
resetMv mv2103[1];
setVector ve2104 = {nen[1,2,3]};
setVector ve2105 = {nen[1,2,3]};
dotVectors mv2103[0] = <ve2104,ve2105>;
resetMv mv2106[1];
setMv mv2106[0] = nen[1];
resetMv mv2107[1];
setMv mv2107[0] = mv2103[0];
calculateMvCoeff mv2102[0] = DIVISION(mv2106,mv2107);
resetMv mv2108[1];
resetMv mv2109[1];
setVector ve2110 = {nen[1,2,3]};
setVector ve2111 = {nen[1,2,3]};
dotVectors mv2109[0] = <ve2110,ve2111>;
resetMv mv2112[1];
setMv mv2112[0] = nen[2];
resetMv mv2113[1];
setMv mv2113[0] = mv2109[0];
calculateMvCoeff mv2108[0] = DIVISION(mv2112,mv2113);
resetMv mv2114[1];
resetMv mv2115[1];
setVector ve2116 = {nen[1,2,3]};
setVector ve2117 = {nen[1,2,3]};
dotVectors mv2115[0] = <ve2116,ve2117>;
resetMv mv2118[1];
setMv mv2118[0] = nen[4];
resetMv mv2119[1];
setMv mv2119[0] = mv2115[0];
calculateMvCoeff mv2114[0] = DIVISION(mv2118,mv2119);
setVector ve2120 = {len[-3,4,-19,-22,25]};
resetMv mv2122[5];
setMv mv2122[0] = mv2090[0];
setMv mv2122[3] = mv2108[0];
setMv mv2122[1] = mv2096[0];
setMv mv2122[4] = mv2114[0];
setMv mv2122[2] = mv2102[0];
setVector ve2121 = {mv2122[0,1,2,3,4]};
dotVectors rc2[13] = <ve2120,ve2121>;

//rc2[14] = ((-((-(len[5])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[20])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[23])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2123[1];
resetMv mv2124[1];
setVector ve2125 = {nen[1,2,3]};
setVector ve2126 = {nen[1,2,3]};
dotVectors mv2124[0] = <ve2125,ve2126>;
resetMv mv2127[1];
setMv mv2127[0] = nen[3];
resetMv mv2128[1];
setMv mv2128[0] = mv2124[0];
calculateMvCoeff mv2123[0] = DIVISION(mv2127,mv2128);
resetMv mv2129[1];
resetMv mv2130[1];
setVector ve2131 = {nen[1,2,3]};
setVector ve2132 = {nen[1,2,3]};
dotVectors mv2130[0] = <ve2131,ve2132>;
resetMv mv2133[1];
setMv mv2133[0] = nen[1];
resetMv mv2134[1];
setMv mv2134[0] = mv2130[0];
calculateMvCoeff mv2129[0] = DIVISION(mv2133,mv2134);
resetMv mv2135[1];
resetMv mv2136[1];
setVector ve2137 = {nen[1,2,3]};
setVector ve2138 = {nen[1,2,3]};
dotVectors mv2136[0] = <ve2137,ve2138>;
resetMv mv2139[1];
setMv mv2139[0] = nen[2];
resetMv mv2140[1];
setMv mv2140[0] = mv2136[0];
calculateMvCoeff mv2135[0] = DIVISION(mv2139,mv2140);
setVector ve2141 = {len[5,-20,-23]};
resetMv mv2143[3];
setMv mv2143[2] = mv2135[0];
setMv mv2143[0] = mv2123[0];
setMv mv2143[1] = mv2129[0];
setVector ve2142 = {mv2143[0,1,2]};
dotVectors rc2[14] = <ve2141,ve2142>;

//rc2[15] = (((-((-(len[5])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[21])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[24])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[25])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2144[1];
resetMv mv2145[1];
setVector ve2146 = {nen[1,2,3]};
setVector ve2147 = {nen[1,2,3]};
dotVectors mv2145[0] = <ve2146,ve2147>;
resetMv mv2148[1];
setMv mv2148[0] = nen[4];
resetMv mv2149[1];
setMv mv2149[0] = mv2145[0];
calculateMvCoeff mv2144[0] = DIVISION(mv2148,mv2149);
resetMv mv2150[1];
resetMv mv2151[1];
setVector ve2152 = {nen[1,2,3]};
setVector ve2153 = {nen[1,2,3]};
dotVectors mv2151[0] = <ve2152,ve2153>;
resetMv mv2154[1];
setMv mv2154[0] = nen[1];
resetMv mv2155[1];
setMv mv2155[0] = mv2151[0];
calculateMvCoeff mv2150[0] = DIVISION(mv2154,mv2155);
resetMv mv2156[1];
resetMv mv2157[1];
setVector ve2158 = {nen[1,2,3]};
setVector ve2159 = {nen[1,2,3]};
dotVectors mv2157[0] = <ve2158,ve2159>;
resetMv mv2160[1];
setMv mv2160[0] = nen[2];
resetMv mv2161[1];
setMv mv2161[0] = mv2157[0];
calculateMvCoeff mv2156[0] = DIVISION(mv2160,mv2161);
resetMv mv2162[1];
resetMv mv2163[1];
setVector ve2164 = {nen[1,2,3]};
setVector ve2165 = {nen[1,2,3]};
dotVectors mv2163[0] = <ve2164,ve2165>;
resetMv mv2166[1];
setMv mv2166[0] = nen[3];
resetMv mv2167[1];
setMv mv2167[0] = mv2163[0];
calculateMvCoeff mv2162[0] = DIVISION(mv2166,mv2167);
setVector ve2168 = {len[5,-21,-24,-25]};
resetMv mv2170[4];
setMv mv2170[0] = mv2144[0];
setMv mv2170[2] = mv2156[0];
setMv mv2170[3] = mv2162[0];
setMv mv2170[1] = mv2150[0];
setVector ve2169 = {mv2170[0,1,2,3]};
dotVectors rc2[15] = <ve2168,ve2169>;

//rc2[16] = ((((rcPpDual[6] - len[6]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[7] - len[7]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[10] - len[10]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[27])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2171[1];
resetMv mv2173[2];
setMv mv2173[1] = len[-6];
setMv mv2173[0] = rcPpDual[6];
setVector ve2172 = {mv2173[0,1]};
dotVectors mv2171[0] = <ve2172>;
resetMv mv2174[1];
resetMv mv2175[1];
setVector ve2176 = {nen[1,2,3]};
setVector ve2177 = {nen[1,2,3]};
dotVectors mv2175[0] = <ve2176,ve2177>;
resetMv mv2178[1];
setMv mv2178[0] = nen[3];
resetMv mv2179[1];
setMv mv2179[0] = mv2175[0];
calculateMvCoeff mv2174[0] = DIVISION(mv2178,mv2179);
resetMv mv2180[1];
resetMv mv2181[1];
resetMv mv2183[2];
setMv mv2183[1] = len[-7];
setMv mv2183[0] = rcPpDual[7];
setVector ve2182 = {mv2183[0,1]};
dotVectors mv2181[0] = <ve2182>;
setMv mv2180[0] = mv2181[-0];
resetMv mv2184[1];
resetMv mv2185[1];
setVector ve2186 = {nen[1,2,3]};
setVector ve2187 = {nen[1,2,3]};
dotVectors mv2185[0] = <ve2186,ve2187>;
resetMv mv2188[1];
setMv mv2188[0] = nen[2];
resetMv mv2189[1];
setMv mv2189[0] = mv2185[0];
calculateMvCoeff mv2184[0] = DIVISION(mv2188,mv2189);
resetMv mv2190[1];
resetMv mv2192[2];
setMv mv2192[1] = len[-10];
setMv mv2192[0] = rcPpDual[10];
setVector ve2191 = {mv2192[0,1]};
dotVectors mv2190[0] = <ve2191>;
resetMv mv2193[1];
resetMv mv2194[1];
setVector ve2195 = {nen[1,2,3]};
setVector ve2196 = {nen[1,2,3]};
dotVectors mv2194[0] = <ve2195,ve2196>;
resetMv mv2197[1];
setMv mv2197[0] = nen[1];
resetMv mv2198[1];
setMv mv2198[0] = mv2194[0];
calculateMvCoeff mv2193[0] = DIVISION(mv2197,mv2198);
resetMv mv2199[1];
resetMv mv2200[1];
setVector ve2201 = {nen[1,2,3]};
setVector ve2202 = {nen[1,2,3]};
dotVectors mv2200[0] = <ve2201,ve2202>;
resetMv mv2203[1];
setMv mv2203[0] = nen[4];
resetMv mv2204[1];
setMv mv2204[0] = mv2200[0];
calculateMvCoeff mv2199[0] = DIVISION(mv2203,mv2204);
resetMv mv2206[4];
setMv mv2206[1] = mv2180[0];
setMv mv2206[0] = mv2171[0];
setMv mv2206[3] = len[27];
setMv mv2206[2] = mv2190[0];
setVector ve2205 = {mv2206[0,1,2,3]};
resetMv mv2208[4];
setMv mv2208[0] = mv2174[0];
setMv mv2208[2] = mv2193[0];
setMv mv2208[1] = mv2184[0];
setMv mv2208[3] = mv2199[0];
setVector ve2207 = {mv2208[0,1,2,3]};
dotVectors rc2[16] = <ve2205,ve2207>;

//rc2[17] = (((((rcPpDual[6] - len[6]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] - len[8]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[11] - len[11]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[26])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[28])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2209[1];
resetMv mv2211[2];
setMv mv2211[1] = len[-6];
setMv mv2211[0] = rcPpDual[6];
setVector ve2210 = {mv2211[0,1]};
dotVectors mv2209[0] = <ve2210>;
resetMv mv2212[1];
resetMv mv2213[1];
setVector ve2214 = {nen[1,2,3]};
setVector ve2215 = {nen[1,2,3]};
dotVectors mv2213[0] = <ve2214,ve2215>;
resetMv mv2216[1];
setMv mv2216[0] = nen[4];
resetMv mv2217[1];
setMv mv2217[0] = mv2213[0];
calculateMvCoeff mv2212[0] = DIVISION(mv2216,mv2217);
resetMv mv2218[1];
resetMv mv2219[1];
resetMv mv2221[2];
setMv mv2221[1] = len[-8];
setMv mv2221[0] = rcPpDual[8];
setVector ve2220 = {mv2221[0,1]};
dotVectors mv2219[0] = <ve2220>;
setMv mv2218[0] = mv2219[-0];
resetMv mv2222[1];
resetMv mv2223[1];
setVector ve2224 = {nen[1,2,3]};
setVector ve2225 = {nen[1,2,3]};
dotVectors mv2223[0] = <ve2224,ve2225>;
resetMv mv2226[1];
setMv mv2226[0] = nen[2];
resetMv mv2227[1];
setMv mv2227[0] = mv2223[0];
calculateMvCoeff mv2222[0] = DIVISION(mv2226,mv2227);
resetMv mv2228[1];
resetMv mv2230[2];
setMv mv2230[1] = len[-11];
setMv mv2230[0] = rcPpDual[11];
setVector ve2229 = {mv2230[0,1]};
dotVectors mv2228[0] = <ve2229>;
resetMv mv2231[1];
resetMv mv2232[1];
setVector ve2233 = {nen[1,2,3]};
setVector ve2234 = {nen[1,2,3]};
dotVectors mv2232[0] = <ve2233,ve2234>;
resetMv mv2235[1];
setMv mv2235[0] = nen[1];
resetMv mv2236[1];
setMv mv2236[0] = mv2232[0];
calculateMvCoeff mv2231[0] = DIVISION(mv2235,mv2236);
resetMv mv2237[1];
resetMv mv2238[1];
setVector ve2239 = {nen[1,2,3]};
setVector ve2240 = {nen[1,2,3]};
dotVectors mv2238[0] = <ve2239,ve2240>;
resetMv mv2241[1];
setMv mv2241[0] = nen[3];
resetMv mv2242[1];
setMv mv2242[0] = mv2238[0];
calculateMvCoeff mv2237[0] = DIVISION(mv2241,mv2242);
resetMv mv2243[1];
resetMv mv2244[1];
setVector ve2245 = {nen[1,2,3]};
setVector ve2246 = {nen[1,2,3]};
dotVectors mv2244[0] = <ve2245,ve2246>;
resetMv mv2247[1];
setMv mv2247[0] = nen[4];
resetMv mv2248[1];
setMv mv2248[0] = mv2244[0];
calculateMvCoeff mv2243[0] = DIVISION(mv2247,mv2248);
resetMv mv2250[5];
setMv mv2250[0] = mv2209[0];
setMv mv2250[2] = mv2228[0];
setMv mv2250[3,4] = len[26,28];
setMv mv2250[1] = mv2218[0];
setVector ve2249 = {mv2250[0,1,2,3,4]};
resetMv mv2252[5];
setMv mv2252[4] = mv2243[0];
setMv mv2252[0] = mv2212[0];
setMv mv2252[1] = mv2222[0];
setMv mv2252[3] = mv2237[0];
setMv mv2252[2] = mv2231[0];
setVector ve2251 = {mv2252[0,1,2,3,4]};
dotVectors rc2[17] = <ve2249,ve2251>;

//rc2[18] = ((-((rcPpDual[9] - len[9]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[12] - len[12]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[27])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2253[1];
resetMv mv2254[1];
resetMv mv2256[2];
setMv mv2256[1] = len[-9];
setMv mv2256[0] = rcPpDual[9];
setVector ve2255 = {mv2256[0,1]};
dotVectors mv2254[0] = <ve2255>;
setMv mv2253[0] = mv2254[-0];
resetMv mv2257[1];
resetMv mv2258[1];
setVector ve2259 = {nen[1,2,3]};
setVector ve2260 = {nen[1,2,3]};
dotVectors mv2258[0] = <ve2259,ve2260>;
resetMv mv2261[1];
setMv mv2261[0] = nen[2];
resetMv mv2262[1];
setMv mv2262[0] = mv2258[0];
calculateMvCoeff mv2257[0] = DIVISION(mv2261,mv2262);
resetMv mv2263[1];
resetMv mv2265[2];
setMv mv2265[1] = len[-12];
setMv mv2265[0] = rcPpDual[12];
setVector ve2264 = {mv2265[0,1]};
dotVectors mv2263[0] = <ve2264>;
resetMv mv2266[1];
resetMv mv2267[1];
setVector ve2268 = {nen[1,2,3]};
setVector ve2269 = {nen[1,2,3]};
dotVectors mv2267[0] = <ve2268,ve2269>;
resetMv mv2270[1];
setMv mv2270[0] = nen[1];
resetMv mv2271[1];
setMv mv2271[0] = mv2267[0];
calculateMvCoeff mv2266[0] = DIVISION(mv2270,mv2271);
resetMv mv2272[1];
resetMv mv2273[1];
setVector ve2274 = {nen[1,2,3]};
setVector ve2275 = {nen[1,2,3]};
dotVectors mv2273[0] = <ve2274,ve2275>;
resetMv mv2276[1];
setMv mv2276[0] = nen[3];
resetMv mv2277[1];
setMv mv2277[0] = mv2273[0];
calculateMvCoeff mv2272[0] = DIVISION(mv2276,mv2277);
resetMv mv2279[3];
setMv mv2279[1] = mv2263[0];
setMv mv2279[0] = mv2253[0];
setMv mv2279[2] = len[27];
setVector ve2278 = {mv2279[0,1,2]};
resetMv mv2281[3];
setMv mv2281[2] = mv2272[0];
setMv mv2281[1] = mv2266[0];
setMv mv2281[0] = mv2257[0];
setVector ve2280 = {mv2281[0,1,2]};
dotVectors rc2[18] = <ve2278,ve2280>;

//rc2[19] = (((((rcPpDual[7] - len[7]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] - len[8]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[13] - len[13]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[26])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[29])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2282[1];
resetMv mv2284[2];
setMv mv2284[1] = len[-7];
setMv mv2284[0] = rcPpDual[7];
setVector ve2283 = {mv2284[0,1]};
dotVectors mv2282[0] = <ve2283>;
resetMv mv2285[1];
resetMv mv2286[1];
setVector ve2287 = {nen[1,2,3]};
setVector ve2288 = {nen[1,2,3]};
dotVectors mv2286[0] = <ve2287,ve2288>;
resetMv mv2289[1];
setMv mv2289[0] = nen[4];
resetMv mv2290[1];
setMv mv2290[0] = mv2286[0];
calculateMvCoeff mv2285[0] = DIVISION(mv2289,mv2290);
resetMv mv2291[1];
resetMv mv2292[1];
resetMv mv2294[2];
setMv mv2294[1] = len[-8];
setMv mv2294[0] = rcPpDual[8];
setVector ve2293 = {mv2294[0,1]};
dotVectors mv2292[0] = <ve2293>;
setMv mv2291[0] = mv2292[-0];
resetMv mv2295[1];
resetMv mv2296[1];
setVector ve2297 = {nen[1,2,3]};
setVector ve2298 = {nen[1,2,3]};
dotVectors mv2296[0] = <ve2297,ve2298>;
resetMv mv2299[1];
setMv mv2299[0] = nen[3];
resetMv mv2300[1];
setMv mv2300[0] = mv2296[0];
calculateMvCoeff mv2295[0] = DIVISION(mv2299,mv2300);
resetMv mv2301[1];
resetMv mv2303[2];
setMv mv2303[1] = len[-13];
setMv mv2303[0] = rcPpDual[13];
setVector ve2302 = {mv2303[0,1]};
dotVectors mv2301[0] = <ve2302>;
resetMv mv2304[1];
resetMv mv2305[1];
setVector ve2306 = {nen[1,2,3]};
setVector ve2307 = {nen[1,2,3]};
dotVectors mv2305[0] = <ve2306,ve2307>;
resetMv mv2308[1];
setMv mv2308[0] = nen[1];
resetMv mv2309[1];
setMv mv2309[0] = mv2305[0];
calculateMvCoeff mv2304[0] = DIVISION(mv2308,mv2309);
resetMv mv2310[1];
resetMv mv2311[1];
setVector ve2312 = {nen[1,2,3]};
setVector ve2313 = {nen[1,2,3]};
dotVectors mv2311[0] = <ve2312,ve2313>;
resetMv mv2314[1];
setMv mv2314[0] = nen[2];
resetMv mv2315[1];
setMv mv2315[0] = mv2311[0];
calculateMvCoeff mv2310[0] = DIVISION(mv2314,mv2315);
resetMv mv2316[1];
resetMv mv2317[1];
setVector ve2318 = {nen[1,2,3]};
setVector ve2319 = {nen[1,2,3]};
dotVectors mv2317[0] = <ve2318,ve2319>;
resetMv mv2320[1];
setMv mv2320[0] = nen[4];
resetMv mv2321[1];
setMv mv2321[0] = mv2317[0];
calculateMvCoeff mv2316[0] = DIVISION(mv2320,mv2321);
resetMv mv2323[5];
setMv mv2323[0] = mv2282[0];
setMv mv2323[2] = mv2301[0];
setMv mv2323[1] = mv2291[0];
setMv mv2323[3,4] = len[-26,29];
setVector ve2322 = {mv2323[0,1,2,3,4]};
resetMv mv2325[5];
setMv mv2325[0] = mv2285[0];
setMv mv2325[2] = mv2304[0];
setMv mv2325[3] = mv2310[0];
setMv mv2325[4] = mv2316[0];
setMv mv2325[1] = mv2295[0];
setVector ve2324 = {mv2325[0,1,2,3,4]};
dotVectors rc2[19] = <ve2322,ve2324>;

//rc2[20] = ((-((rcPpDual[9] - len[9]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[14] - len[14]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[27])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2326[1];
resetMv mv2327[1];
resetMv mv2329[2];
setMv mv2329[1] = len[-9];
setMv mv2329[0] = rcPpDual[9];
setVector ve2328 = {mv2329[0,1]};
dotVectors mv2327[0] = <ve2328>;
setMv mv2326[0] = mv2327[-0];
resetMv mv2330[1];
resetMv mv2331[1];
setVector ve2332 = {nen[1,2,3]};
setVector ve2333 = {nen[1,2,3]};
dotVectors mv2331[0] = <ve2332,ve2333>;
resetMv mv2334[1];
setMv mv2334[0] = nen[3];
resetMv mv2335[1];
setMv mv2335[0] = mv2331[0];
calculateMvCoeff mv2330[0] = DIVISION(mv2334,mv2335);
resetMv mv2336[1];
resetMv mv2338[2];
setMv mv2338[1] = len[-14];
setMv mv2338[0] = rcPpDual[14];
setVector ve2337 = {mv2338[0,1]};
dotVectors mv2336[0] = <ve2337>;
resetMv mv2339[1];
resetMv mv2340[1];
setVector ve2341 = {nen[1,2,3]};
setVector ve2342 = {nen[1,2,3]};
dotVectors mv2340[0] = <ve2341,ve2342>;
resetMv mv2343[1];
setMv mv2343[0] = nen[1];
resetMv mv2344[1];
setMv mv2344[0] = mv2340[0];
calculateMvCoeff mv2339[0] = DIVISION(mv2343,mv2344);
resetMv mv2345[1];
resetMv mv2346[1];
setVector ve2347 = {nen[1,2,3]};
setVector ve2348 = {nen[1,2,3]};
dotVectors mv2346[0] = <ve2347,ve2348>;
resetMv mv2349[1];
setMv mv2349[0] = nen[2];
resetMv mv2350[1];
setMv mv2350[0] = mv2346[0];
calculateMvCoeff mv2345[0] = DIVISION(mv2349,mv2350);
resetMv mv2352[3];
setMv mv2352[0] = mv2326[0];
setMv mv2352[1] = mv2336[0];
setMv mv2352[2] = len[-27];
setVector ve2351 = {mv2352[0,1,2]};
resetMv mv2354[3];
setMv mv2354[0] = mv2330[0];
setMv mv2354[1] = mv2339[0];
setMv mv2354[2] = mv2345[0];
setVector ve2353 = {mv2354[0,1,2]};
dotVectors rc2[20] = <ve2351,ve2353>;

//rc2[21] = (((-((rcPpDual[9] - len[9]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] - len[15]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[28])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[29])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2355[1];
resetMv mv2356[1];
resetMv mv2358[2];
setMv mv2358[1] = len[-9];
setMv mv2358[0] = rcPpDual[9];
setVector ve2357 = {mv2358[0,1]};
dotVectors mv2356[0] = <ve2357>;
setMv mv2355[0] = mv2356[-0];
resetMv mv2359[1];
resetMv mv2360[1];
setVector ve2361 = {nen[1,2,3]};
setVector ve2362 = {nen[1,2,3]};
dotVectors mv2360[0] = <ve2361,ve2362>;
resetMv mv2363[1];
setMv mv2363[0] = nen[4];
resetMv mv2364[1];
setMv mv2364[0] = mv2360[0];
calculateMvCoeff mv2359[0] = DIVISION(mv2363,mv2364);
resetMv mv2365[1];
resetMv mv2367[2];
setMv mv2367[1] = len[-15];
setMv mv2367[0] = rcPpDual[15];
setVector ve2366 = {mv2367[0,1]};
dotVectors mv2365[0] = <ve2366>;
resetMv mv2368[1];
resetMv mv2369[1];
setVector ve2370 = {nen[1,2,3]};
setVector ve2371 = {nen[1,2,3]};
dotVectors mv2369[0] = <ve2370,ve2371>;
resetMv mv2372[1];
setMv mv2372[0] = nen[1];
resetMv mv2373[1];
setMv mv2373[0] = mv2369[0];
calculateMvCoeff mv2368[0] = DIVISION(mv2372,mv2373);
resetMv mv2374[1];
resetMv mv2375[1];
setVector ve2376 = {nen[1,2,3]};
setVector ve2377 = {nen[1,2,3]};
dotVectors mv2375[0] = <ve2376,ve2377>;
resetMv mv2378[1];
setMv mv2378[0] = nen[2];
resetMv mv2379[1];
setMv mv2379[0] = mv2375[0];
calculateMvCoeff mv2374[0] = DIVISION(mv2378,mv2379);
resetMv mv2380[1];
resetMv mv2381[1];
setVector ve2382 = {nen[1,2,3]};
setVector ve2383 = {nen[1,2,3]};
dotVectors mv2381[0] = <ve2382,ve2383>;
resetMv mv2384[1];
setMv mv2384[0] = nen[3];
resetMv mv2385[1];
setMv mv2385[0] = mv2381[0];
calculateMvCoeff mv2380[0] = DIVISION(mv2384,mv2385);
resetMv mv2387[4];
setMv mv2387[1] = mv2365[0];
setMv mv2387[0] = mv2355[0];
setMv mv2387[2,3] = len[-28,-29];
setVector ve2386 = {mv2387[0,1,2,3]};
resetMv mv2389[4];
setMv mv2389[3] = mv2380[0];
setMv mv2389[1] = mv2368[0];
setMv mv2389[0] = mv2359[0];
setMv mv2389[2] = mv2374[0];
setVector ve2388 = {mv2389[0,1,2,3]};
dotVectors rc2[21] = <ve2386,ve2388>;

//rc2[22] = (((((rcPpDual[10] - len[10]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[11] - len[11]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[13] - len[13]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[26])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[30])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2390[1];
resetMv mv2392[2];
setMv mv2392[1] = len[-10];
setMv mv2392[0] = rcPpDual[10];
setVector ve2391 = {mv2392[0,1]};
dotVectors mv2390[0] = <ve2391>;
resetMv mv2393[1];
resetMv mv2394[1];
setVector ve2395 = {nen[1,2,3]};
setVector ve2396 = {nen[1,2,3]};
dotVectors mv2394[0] = <ve2395,ve2396>;
resetMv mv2397[1];
setMv mv2397[0] = nen[4];
resetMv mv2398[1];
setMv mv2398[0] = mv2394[0];
calculateMvCoeff mv2393[0] = DIVISION(mv2397,mv2398);
resetMv mv2399[1];
resetMv mv2400[1];
resetMv mv2402[2];
setMv mv2402[1] = len[-11];
setMv mv2402[0] = rcPpDual[11];
setVector ve2401 = {mv2402[0,1]};
dotVectors mv2400[0] = <ve2401>;
setMv mv2399[0] = mv2400[-0];
resetMv mv2403[1];
resetMv mv2404[1];
setVector ve2405 = {nen[1,2,3]};
setVector ve2406 = {nen[1,2,3]};
dotVectors mv2404[0] = <ve2405,ve2406>;
resetMv mv2407[1];
setMv mv2407[0] = nen[3];
resetMv mv2408[1];
setMv mv2408[0] = mv2404[0];
calculateMvCoeff mv2403[0] = DIVISION(mv2407,mv2408);
resetMv mv2409[1];
resetMv mv2411[2];
setMv mv2411[1] = len[-13];
setMv mv2411[0] = rcPpDual[13];
setVector ve2410 = {mv2411[0,1]};
dotVectors mv2409[0] = <ve2410>;
resetMv mv2412[1];
resetMv mv2413[1];
setVector ve2414 = {nen[1,2,3]};
setVector ve2415 = {nen[1,2,3]};
dotVectors mv2413[0] = <ve2414,ve2415>;
resetMv mv2416[1];
setMv mv2416[0] = nen[2];
resetMv mv2417[1];
setMv mv2417[0] = mv2413[0];
calculateMvCoeff mv2412[0] = DIVISION(mv2416,mv2417);
resetMv mv2418[1];
resetMv mv2419[1];
setVector ve2420 = {nen[1,2,3]};
setVector ve2421 = {nen[1,2,3]};
dotVectors mv2419[0] = <ve2420,ve2421>;
resetMv mv2422[1];
setMv mv2422[0] = nen[1];
resetMv mv2423[1];
setMv mv2423[0] = mv2419[0];
calculateMvCoeff mv2418[0] = DIVISION(mv2422,mv2423);
resetMv mv2424[1];
resetMv mv2425[1];
setVector ve2426 = {nen[1,2,3]};
setVector ve2427 = {nen[1,2,3]};
dotVectors mv2425[0] = <ve2426,ve2427>;
resetMv mv2428[1];
setMv mv2428[0] = nen[4];
resetMv mv2429[1];
setMv mv2429[0] = mv2425[0];
calculateMvCoeff mv2424[0] = DIVISION(mv2428,mv2429);
resetMv mv2431[5];
setMv mv2431[1] = mv2399[0];
setMv mv2431[3,4] = len[26,30];
setMv mv2431[0] = mv2390[0];
setMv mv2431[2] = mv2409[0];
setVector ve2430 = {mv2431[0,1,2,3,4]};
resetMv mv2433[5];
setMv mv2433[3] = mv2418[0];
setMv mv2433[1] = mv2403[0];
setMv mv2433[0] = mv2393[0];
setMv mv2433[4] = mv2424[0];
setMv mv2433[2] = mv2412[0];
setVector ve2432 = {mv2433[0,1,2,3,4]};
dotVectors rc2[22] = <ve2430,ve2432>;

//rc2[23] = ((-((rcPpDual[12] - len[12]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[14] - len[14]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[27])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2434[1];
resetMv mv2435[1];
resetMv mv2437[2];
setMv mv2437[1] = len[-12];
setMv mv2437[0] = rcPpDual[12];
setVector ve2436 = {mv2437[0,1]};
dotVectors mv2435[0] = <ve2436>;
setMv mv2434[0] = mv2435[-0];
resetMv mv2438[1];
resetMv mv2439[1];
setVector ve2440 = {nen[1,2,3]};
setVector ve2441 = {nen[1,2,3]};
dotVectors mv2439[0] = <ve2440,ve2441>;
resetMv mv2442[1];
setMv mv2442[0] = nen[3];
resetMv mv2443[1];
setMv mv2443[0] = mv2439[0];
calculateMvCoeff mv2438[0] = DIVISION(mv2442,mv2443);
resetMv mv2444[1];
resetMv mv2446[2];
setMv mv2446[1] = len[-14];
setMv mv2446[0] = rcPpDual[14];
setVector ve2445 = {mv2446[0,1]};
dotVectors mv2444[0] = <ve2445>;
resetMv mv2447[1];
resetMv mv2448[1];
setVector ve2449 = {nen[1,2,3]};
setVector ve2450 = {nen[1,2,3]};
dotVectors mv2448[0] = <ve2449,ve2450>;
resetMv mv2451[1];
setMv mv2451[0] = nen[2];
resetMv mv2452[1];
setMv mv2452[0] = mv2448[0];
calculateMvCoeff mv2447[0] = DIVISION(mv2451,mv2452);
resetMv mv2453[1];
resetMv mv2454[1];
setVector ve2455 = {nen[1,2,3]};
setVector ve2456 = {nen[1,2,3]};
dotVectors mv2454[0] = <ve2455,ve2456>;
resetMv mv2457[1];
setMv mv2457[0] = nen[1];
resetMv mv2458[1];
setMv mv2458[0] = mv2454[0];
calculateMvCoeff mv2453[0] = DIVISION(mv2457,mv2458);
resetMv mv2460[3];
setMv mv2460[2] = len[27];
setMv mv2460[1] = mv2444[0];
setMv mv2460[0] = mv2434[0];
setVector ve2459 = {mv2460[0,1,2]};
resetMv mv2462[3];
setMv mv2462[0] = mv2438[0];
setMv mv2462[2] = mv2453[0];
setMv mv2462[1] = mv2447[0];
setVector ve2461 = {mv2462[0,1,2]};
dotVectors rc2[23] = <ve2459,ve2461>;

//rc2[24] = (((-((rcPpDual[12] - len[12]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] - len[15]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[28])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[30])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2463[1];
resetMv mv2464[1];
resetMv mv2466[2];
setMv mv2466[1] = len[-12];
setMv mv2466[0] = rcPpDual[12];
setVector ve2465 = {mv2466[0,1]};
dotVectors mv2464[0] = <ve2465>;
setMv mv2463[0] = mv2464[-0];
resetMv mv2467[1];
resetMv mv2468[1];
setVector ve2469 = {nen[1,2,3]};
setVector ve2470 = {nen[1,2,3]};
dotVectors mv2468[0] = <ve2469,ve2470>;
resetMv mv2471[1];
setMv mv2471[0] = nen[4];
resetMv mv2472[1];
setMv mv2472[0] = mv2468[0];
calculateMvCoeff mv2467[0] = DIVISION(mv2471,mv2472);
resetMv mv2473[1];
resetMv mv2475[2];
setMv mv2475[1] = len[-15];
setMv mv2475[0] = rcPpDual[15];
setVector ve2474 = {mv2475[0,1]};
dotVectors mv2473[0] = <ve2474>;
resetMv mv2476[1];
resetMv mv2477[1];
setVector ve2478 = {nen[1,2,3]};
setVector ve2479 = {nen[1,2,3]};
dotVectors mv2477[0] = <ve2478,ve2479>;
resetMv mv2480[1];
setMv mv2480[0] = nen[2];
resetMv mv2481[1];
setMv mv2481[0] = mv2477[0];
calculateMvCoeff mv2476[0] = DIVISION(mv2480,mv2481);
resetMv mv2482[1];
resetMv mv2483[1];
setVector ve2484 = {nen[1,2,3]};
setVector ve2485 = {nen[1,2,3]};
dotVectors mv2483[0] = <ve2484,ve2485>;
resetMv mv2486[1];
setMv mv2486[0] = nen[1];
resetMv mv2487[1];
setMv mv2487[0] = mv2483[0];
calculateMvCoeff mv2482[0] = DIVISION(mv2486,mv2487);
resetMv mv2488[1];
resetMv mv2489[1];
setVector ve2490 = {nen[1,2,3]};
setVector ve2491 = {nen[1,2,3]};
dotVectors mv2489[0] = <ve2490,ve2491>;
resetMv mv2492[1];
setMv mv2492[0] = nen[3];
resetMv mv2493[1];
setMv mv2493[0] = mv2489[0];
calculateMvCoeff mv2488[0] = DIVISION(mv2492,mv2493);
resetMv mv2495[4];
setMv mv2495[0] = mv2463[0];
setMv mv2495[2,3] = len[28,-30];
setMv mv2495[1] = mv2473[0];
setVector ve2494 = {mv2495[0,1,2,3]};
resetMv mv2497[4];
setMv mv2497[1] = mv2476[0];
setMv mv2497[0] = mv2467[0];
setMv mv2497[3] = mv2488[0];
setMv mv2497[2] = mv2482[0];
setVector ve2496 = {mv2497[0,1,2,3]};
dotVectors rc2[24] = <ve2494,ve2496>;

//rc2[25] = (((-((rcPpDual[14] - len[14]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] - len[15]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[29])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[30])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2498[1];
resetMv mv2499[1];
resetMv mv2501[2];
setMv mv2501[1] = len[-14];
setMv mv2501[0] = rcPpDual[14];
setVector ve2500 = {mv2501[0,1]};
dotVectors mv2499[0] = <ve2500>;
setMv mv2498[0] = mv2499[-0];
resetMv mv2502[1];
resetMv mv2503[1];
setVector ve2504 = {nen[1,2,3]};
setVector ve2505 = {nen[1,2,3]};
dotVectors mv2503[0] = <ve2504,ve2505>;
resetMv mv2506[1];
setMv mv2506[0] = nen[4];
resetMv mv2507[1];
setMv mv2507[0] = mv2503[0];
calculateMvCoeff mv2502[0] = DIVISION(mv2506,mv2507);
resetMv mv2508[1];
resetMv mv2510[2];
setMv mv2510[1] = len[-15];
setMv mv2510[0] = rcPpDual[15];
setVector ve2509 = {mv2510[0,1]};
dotVectors mv2508[0] = <ve2509>;
resetMv mv2511[1];
resetMv mv2512[1];
setVector ve2513 = {nen[1,2,3]};
setVector ve2514 = {nen[1,2,3]};
dotVectors mv2512[0] = <ve2513,ve2514>;
resetMv mv2515[1];
setMv mv2515[0] = nen[3];
resetMv mv2516[1];
setMv mv2516[0] = mv2512[0];
calculateMvCoeff mv2511[0] = DIVISION(mv2515,mv2516);
resetMv mv2517[1];
resetMv mv2518[1];
setVector ve2519 = {nen[1,2,3]};
setVector ve2520 = {nen[1,2,3]};
dotVectors mv2518[0] = <ve2519,ve2520>;
resetMv mv2521[1];
setMv mv2521[0] = nen[1];
resetMv mv2522[1];
setMv mv2522[0] = mv2518[0];
calculateMvCoeff mv2517[0] = DIVISION(mv2521,mv2522);
resetMv mv2523[1];
resetMv mv2524[1];
setVector ve2525 = {nen[1,2,3]};
setVector ve2526 = {nen[1,2,3]};
dotVectors mv2524[0] = <ve2525,ve2526>;
resetMv mv2527[1];
setMv mv2527[0] = nen[2];
resetMv mv2528[1];
setMv mv2528[0] = mv2524[0];
calculateMvCoeff mv2523[0] = DIVISION(mv2527,mv2528);
resetMv mv2530[4];
setMv mv2530[1] = mv2508[0];
setMv mv2530[0] = mv2498[0];
setMv mv2530[2,3] = len[29,30];
setVector ve2529 = {mv2530[0,1,2,3]};
resetMv mv2532[4];
setMv mv2532[2] = mv2517[0];
setMv mv2532[0] = mv2502[0];
setMv mv2532[1] = mv2511[0];
setMv mv2532[3] = mv2523[0];
setVector ve2531 = {mv2532[0,1,2,3]};
dotVectors rc2[25] = <ve2529,ve2531>;

//rc2[26] = (((((-(len[16])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[17])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[19])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[22])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[31])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2533[1];
resetMv mv2534[1];
setVector ve2535 = {nen[1,2,3]};
setVector ve2536 = {nen[1,2,3]};
dotVectors mv2534[0] = <ve2535,ve2536>;
resetMv mv2537[1];
setMv mv2537[0] = nen[4];
resetMv mv2538[1];
setMv mv2538[0] = mv2534[0];
calculateMvCoeff mv2533[0] = DIVISION(mv2537,mv2538);
resetMv mv2539[1];
resetMv mv2540[1];
setVector ve2541 = {nen[1,2,3]};
setVector ve2542 = {nen[1,2,3]};
dotVectors mv2540[0] = <ve2541,ve2542>;
resetMv mv2543[1];
setMv mv2543[0] = nen[3];
resetMv mv2544[1];
setMv mv2544[0] = mv2540[0];
calculateMvCoeff mv2539[0] = DIVISION(mv2543,mv2544);
resetMv mv2545[1];
resetMv mv2546[1];
setVector ve2547 = {nen[1,2,3]};
setVector ve2548 = {nen[1,2,3]};
dotVectors mv2546[0] = <ve2547,ve2548>;
resetMv mv2549[1];
setMv mv2549[0] = nen[2];
resetMv mv2550[1];
setMv mv2550[0] = mv2546[0];
calculateMvCoeff mv2545[0] = DIVISION(mv2549,mv2550);
resetMv mv2551[1];
resetMv mv2552[1];
setVector ve2553 = {nen[1,2,3]};
setVector ve2554 = {nen[1,2,3]};
dotVectors mv2552[0] = <ve2553,ve2554>;
resetMv mv2555[1];
setMv mv2555[0] = nen[1];
resetMv mv2556[1];
setMv mv2556[0] = mv2552[0];
calculateMvCoeff mv2551[0] = DIVISION(mv2555,mv2556);
resetMv mv2557[1];
resetMv mv2558[1];
setVector ve2559 = {nen[1,2,3]};
setVector ve2560 = {nen[1,2,3]};
dotVectors mv2558[0] = <ve2559,ve2560>;
resetMv mv2561[1];
setMv mv2561[0] = nen[4];
resetMv mv2562[1];
setMv mv2562[0] = mv2558[0];
calculateMvCoeff mv2557[0] = DIVISION(mv2561,mv2562);
setVector ve2563 = {len[-16,17,-19,22,31]};
resetMv mv2565[5];
setMv mv2565[2] = mv2545[0];
setMv mv2565[3] = mv2551[0];
setMv mv2565[0] = mv2533[0];
setMv mv2565[4] = mv2557[0];
setMv mv2565[1] = mv2539[0];
setVector ve2564 = {mv2565[0,1,2,3,4]};
dotVectors rc2[26] = <ve2563,ve2564>;

//rc2[27] = ((-((-(len[18])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[20])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[23])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2566[1];
resetMv mv2567[1];
setVector ve2568 = {nen[1,2,3]};
setVector ve2569 = {nen[1,2,3]};
dotVectors mv2567[0] = <ve2568,ve2569>;
resetMv mv2570[1];
setMv mv2570[0] = nen[3];
resetMv mv2571[1];
setMv mv2571[0] = mv2567[0];
calculateMvCoeff mv2566[0] = DIVISION(mv2570,mv2571);
resetMv mv2572[1];
resetMv mv2573[1];
setVector ve2574 = {nen[1,2,3]};
setVector ve2575 = {nen[1,2,3]};
dotVectors mv2573[0] = <ve2574,ve2575>;
resetMv mv2576[1];
setMv mv2576[0] = nen[2];
resetMv mv2577[1];
setMv mv2577[0] = mv2573[0];
calculateMvCoeff mv2572[0] = DIVISION(mv2576,mv2577);
resetMv mv2578[1];
resetMv mv2579[1];
setVector ve2580 = {nen[1,2,3]};
setVector ve2581 = {nen[1,2,3]};
dotVectors mv2579[0] = <ve2580,ve2581>;
resetMv mv2582[1];
setMv mv2582[0] = nen[1];
resetMv mv2583[1];
setMv mv2583[0] = mv2579[0];
calculateMvCoeff mv2578[0] = DIVISION(mv2582,mv2583);
setVector ve2584 = {len[18,-20,23]};
resetMv mv2586[3];
setMv mv2586[1] = mv2572[0];
setMv mv2586[0] = mv2566[0];
setMv mv2586[2] = mv2578[0];
setVector ve2585 = {mv2586[0,1,2]};
dotVectors rc2[27] = <ve2584,ve2585>;

//rc2[28] = (((-((-(len[18])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[21])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[24])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[31])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2587[1];
resetMv mv2588[1];
setVector ve2589 = {nen[1,2,3]};
setVector ve2590 = {nen[1,2,3]};
dotVectors mv2588[0] = <ve2589,ve2590>;
resetMv mv2591[1];
setMv mv2591[0] = nen[4];
resetMv mv2592[1];
setMv mv2592[0] = mv2588[0];
calculateMvCoeff mv2587[0] = DIVISION(mv2591,mv2592);
resetMv mv2593[1];
resetMv mv2594[1];
setVector ve2595 = {nen[1,2,3]};
setVector ve2596 = {nen[1,2,3]};
dotVectors mv2594[0] = <ve2595,ve2596>;
resetMv mv2597[1];
setMv mv2597[0] = nen[2];
resetMv mv2598[1];
setMv mv2598[0] = mv2594[0];
calculateMvCoeff mv2593[0] = DIVISION(mv2597,mv2598);
resetMv mv2599[1];
resetMv mv2600[1];
setVector ve2601 = {nen[1,2,3]};
setVector ve2602 = {nen[1,2,3]};
dotVectors mv2600[0] = <ve2601,ve2602>;
resetMv mv2603[1];
setMv mv2603[0] = nen[1];
resetMv mv2604[1];
setMv mv2604[0] = mv2600[0];
calculateMvCoeff mv2599[0] = DIVISION(mv2603,mv2604);
resetMv mv2605[1];
resetMv mv2606[1];
setVector ve2607 = {nen[1,2,3]};
setVector ve2608 = {nen[1,2,3]};
dotVectors mv2606[0] = <ve2607,ve2608>;
resetMv mv2609[1];
setMv mv2609[0] = nen[3];
resetMv mv2610[1];
setMv mv2610[0] = mv2606[0];
calculateMvCoeff mv2605[0] = DIVISION(mv2609,mv2610);
setVector ve2611 = {len[18,-21,24,-31]};
resetMv mv2613[4];
setMv mv2613[3] = mv2605[0];
setMv mv2613[1] = mv2593[0];
setMv mv2613[0] = mv2587[0];
setMv mv2613[2] = mv2599[0];
setVector ve2612 = {mv2613[0,1,2,3]};
dotVectors rc2[28] = <ve2611,ve2612>;

//rc2[29] = (((-((-(len[20])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[21])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[25])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[31])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2614[1];
resetMv mv2615[1];
setVector ve2616 = {nen[1,2,3]};
setVector ve2617 = {nen[1,2,3]};
dotVectors mv2615[0] = <ve2616,ve2617>;
resetMv mv2618[1];
setMv mv2618[0] = nen[4];
resetMv mv2619[1];
setMv mv2619[0] = mv2615[0];
calculateMvCoeff mv2614[0] = DIVISION(mv2618,mv2619);
resetMv mv2620[1];
resetMv mv2621[1];
setVector ve2622 = {nen[1,2,3]};
setVector ve2623 = {nen[1,2,3]};
dotVectors mv2621[0] = <ve2622,ve2623>;
resetMv mv2624[1];
setMv mv2624[0] = nen[3];
resetMv mv2625[1];
setMv mv2625[0] = mv2621[0];
calculateMvCoeff mv2620[0] = DIVISION(mv2624,mv2625);
resetMv mv2626[1];
resetMv mv2627[1];
setVector ve2628 = {nen[1,2,3]};
setVector ve2629 = {nen[1,2,3]};
dotVectors mv2627[0] = <ve2628,ve2629>;
resetMv mv2630[1];
setMv mv2630[0] = nen[1];
resetMv mv2631[1];
setMv mv2631[0] = mv2627[0];
calculateMvCoeff mv2626[0] = DIVISION(mv2630,mv2631);
resetMv mv2632[1];
resetMv mv2633[1];
setVector ve2634 = {nen[1,2,3]};
setVector ve2635 = {nen[1,2,3]};
dotVectors mv2633[0] = <ve2634,ve2635>;
resetMv mv2636[1];
setMv mv2636[0] = nen[2];
resetMv mv2637[1];
setMv mv2637[0] = mv2633[0];
calculateMvCoeff mv2632[0] = DIVISION(mv2636,mv2637);
setVector ve2638 = {len[20,-21,25,31]};
resetMv mv2640[4];
setMv mv2640[1] = mv2620[0];
setMv mv2640[3] = mv2632[0];
setMv mv2640[0] = mv2614[0];
setMv mv2640[2] = mv2626[0];
setVector ve2639 = {mv2640[0,1,2,3]};
dotVectors rc2[29] = <ve2638,ve2639>;

//rc2[30] = (((-((-(len[23])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[24])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[25])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[31])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2641[1];
resetMv mv2642[1];
setVector ve2643 = {nen[1,2,3]};
setVector ve2644 = {nen[1,2,3]};
dotVectors mv2642[0] = <ve2643,ve2644>;
resetMv mv2645[1];
setMv mv2645[0] = nen[4];
resetMv mv2646[1];
setMv mv2646[0] = mv2642[0];
calculateMvCoeff mv2641[0] = DIVISION(mv2645,mv2646);
resetMv mv2647[1];
resetMv mv2648[1];
setVector ve2649 = {nen[1,2,3]};
setVector ve2650 = {nen[1,2,3]};
dotVectors mv2648[0] = <ve2649,ve2650>;
resetMv mv2651[1];
setMv mv2651[0] = nen[3];
resetMv mv2652[1];
setMv mv2652[0] = mv2648[0];
calculateMvCoeff mv2647[0] = DIVISION(mv2651,mv2652);
resetMv mv2653[1];
resetMv mv2654[1];
setVector ve2655 = {nen[1,2,3]};
setVector ve2656 = {nen[1,2,3]};
dotVectors mv2654[0] = <ve2655,ve2656>;
resetMv mv2657[1];
setMv mv2657[0] = nen[2];
resetMv mv2658[1];
setMv mv2658[0] = mv2654[0];
calculateMvCoeff mv2653[0] = DIVISION(mv2657,mv2658);
resetMv mv2659[1];
resetMv mv2660[1];
setVector ve2661 = {nen[1,2,3]};
setVector ve2662 = {nen[1,2,3]};
dotVectors mv2660[0] = <ve2661,ve2662>;
resetMv mv2663[1];
setMv mv2663[0] = nen[1];
resetMv mv2664[1];
setMv mv2664[0] = mv2660[0];
calculateMvCoeff mv2659[0] = DIVISION(mv2663,mv2664);
setVector ve2665 = {len[23,-24,25,-31]};
resetMv mv2667[4];
setMv mv2667[0] = mv2641[0];
setMv mv2667[3] = mv2659[0];
setMv mv2667[1] = mv2647[0];
setMv mv2667[2] = mv2653[0];
setVector ve2666 = {mv2667[0,1,2,3]};
dotVectors rc2[30] = <ve2665,ve2666>;

//rc2[31] = (((-((-(len[27])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[28])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[29])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[30])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2668[1];
resetMv mv2669[1];
setVector ve2670 = {nen[1,2,3]};
setVector ve2671 = {nen[1,2,3]};
dotVectors mv2669[0] = <ve2670,ve2671>;
resetMv mv2672[1];
setMv mv2672[0] = nen[4];
resetMv mv2673[1];
setMv mv2673[0] = mv2669[0];
calculateMvCoeff mv2668[0] = DIVISION(mv2672,mv2673);
resetMv mv2674[1];
resetMv mv2675[1];
setVector ve2676 = {nen[1,2,3]};
setVector ve2677 = {nen[1,2,3]};
dotVectors mv2675[0] = <ve2676,ve2677>;
resetMv mv2678[1];
setMv mv2678[0] = nen[3];
resetMv mv2679[1];
setMv mv2679[0] = mv2675[0];
calculateMvCoeff mv2674[0] = DIVISION(mv2678,mv2679);
resetMv mv2680[1];
resetMv mv2681[1];
setVector ve2682 = {nen[1,2,3]};
setVector ve2683 = {nen[1,2,3]};
dotVectors mv2681[0] = <ve2682,ve2683>;
resetMv mv2684[1];
setMv mv2684[0] = nen[2];
resetMv mv2685[1];
setMv mv2685[0] = mv2681[0];
calculateMvCoeff mv2680[0] = DIVISION(mv2684,mv2685);
resetMv mv2686[1];
resetMv mv2687[1];
setVector ve2688 = {nen[1,2,3]};
setVector ve2689 = {nen[1,2,3]};
dotVectors mv2687[0] = <ve2688,ve2689>;
resetMv mv2690[1];
setMv mv2690[0] = nen[1];
resetMv mv2691[1];
setMv mv2691[0] = mv2687[0];
calculateMvCoeff mv2686[0] = DIVISION(mv2690,mv2691);
setVector ve2692 = {len[27,-28,29,-30]};
resetMv mv2694[4];
setMv mv2694[2] = mv2680[0];
setMv mv2694[1] = mv2674[0];
setMv mv2694[3] = mv2686[0];
setMv mv2694[0] = mv2668[0];
setVector ve2693 = {mv2694[0,1,2,3]};
dotVectors rc2[31] = <ve2692,ve2693>;

//rc2N[1] = ((((((((((((((((-(rc2[0])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[2])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[3])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[5])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[6])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[7])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[9])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[10])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[12])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[14])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[16])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[18])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[20])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[23])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[27])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv rc2N[32];
resetMv mv2695[1];
resetMv mv2696[1];
setVector ve2697 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2698 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2696[0] = <ve2697,ve2698>;
resetMv mv2699[1];
setMv mv2699[0] = rc2[-9];
resetMv mv2700[1];
setMv mv2700[0] = mv2696[0];
calculateMvCoeff mv2695[0] = DIVISION(mv2699,mv2700);
resetMv mv2701[1];
resetMv mv2702[1];
setVector ve2703 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2704 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2702[0] = <ve2703,ve2704>;
resetMv mv2705[1];
setMv mv2705[0] = rc2[-5];
resetMv mv2706[1];
setMv mv2706[0] = mv2702[0];
calculateMvCoeff mv2701[0] = DIVISION(mv2705,mv2706);
resetMv mv2707[1];
resetMv mv2708[1];
setVector ve2709 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2710 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2708[0] = <ve2709,ve2710>;
resetMv mv2711[1];
setMv mv2711[0] = rc2[18];
resetMv mv2712[1];
setMv mv2712[0] = mv2708[0];
calculateMvCoeff mv2707[0] = DIVISION(mv2711,mv2712);
resetMv mv2713[1];
resetMv mv2714[1];
setVector ve2715 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2716 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2714[0] = <ve2715,ve2716>;
resetMv mv2717[1];
setMv mv2717[0] = rc2[20];
resetMv mv2718[1];
setMv mv2718[0] = mv2714[0];
calculateMvCoeff mv2713[0] = DIVISION(mv2717,mv2718);
resetMv mv2719[1];
resetMv mv2720[1];
setVector ve2721 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2722 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2720[0] = <ve2721,ve2722>;
resetMv mv2723[1];
setMv mv2723[0] = rc2[21];
resetMv mv2724[1];
setMv mv2724[0] = mv2720[0];
calculateMvCoeff mv2719[0] = DIVISION(mv2723,mv2724);
resetMv mv2725[1];
resetMv mv2726[1];
setVector ve2727 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2728 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2726[0] = <ve2727,ve2728>;
resetMv mv2729[1];
setMv mv2729[0] = rc2[-12];
resetMv mv2730[1];
setMv mv2730[0] = mv2726[0];
calculateMvCoeff mv2725[0] = DIVISION(mv2729,mv2730);
resetMv mv2731[1];
resetMv mv2732[1];
setVector ve2733 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2734 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2732[0] = <ve2733,ve2734>;
resetMv mv2735[1];
setMv mv2735[0] = rc2[-14];
resetMv mv2736[1];
setMv mv2736[0] = mv2732[0];
calculateMvCoeff mv2731[0] = DIVISION(mv2735,mv2736);
resetMv mv2737[1];
resetMv mv2738[1];
setVector ve2739 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2740 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2738[0] = <ve2739,ve2740>;
resetMv mv2741[1];
setMv mv2741[0] = rc2[-15];
resetMv mv2742[1];
setMv mv2742[0] = mv2738[0];
calculateMvCoeff mv2737[0] = DIVISION(mv2741,mv2742);
resetMv mv2743[1];
resetMv mv2744[1];
setVector ve2745 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2746 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2744[0] = <ve2745,ve2746>;
resetMv mv2747[1];
setMv mv2747[0] = rc2[27];
resetMv mv2748[1];
setMv mv2748[0] = mv2744[0];
calculateMvCoeff mv2743[0] = DIVISION(mv2747,mv2748);
resetMv mv2749[1];
resetMv mv2750[1];
setVector ve2751 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2752 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2750[0] = <ve2751,ve2752>;
resetMv mv2753[1];
setMv mv2753[0] = rc2[28];
resetMv mv2754[1];
setMv mv2754[0] = mv2750[0];
calculateMvCoeff mv2749[0] = DIVISION(mv2753,mv2754);
resetMv mv2755[1];
resetMv mv2756[1];
setVector ve2757 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2758 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2756[0] = <ve2757,ve2758>;
resetMv mv2759[1];
setMv mv2759[0] = rc2[29];
resetMv mv2760[1];
setMv mv2760[0] = mv2756[0];
calculateMvCoeff mv2755[0] = DIVISION(mv2759,mv2760);
resetMv mv2761[1];
resetMv mv2762[1];
setVector ve2763 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2764 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2762[0] = <ve2763,ve2764>;
resetMv mv2765[1];
setMv mv2765[0] = rc2[23];
resetMv mv2766[1];
setMv mv2766[0] = mv2762[0];
calculateMvCoeff mv2761[0] = DIVISION(mv2765,mv2766);
resetMv mv2767[1];
resetMv mv2768[1];
setVector ve2769 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2770 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2768[0] = <ve2769,ve2770>;
resetMv mv2771[1];
setMv mv2771[0] = rc2[24];
resetMv mv2772[1];
setMv mv2772[0] = mv2768[0];
calculateMvCoeff mv2767[0] = DIVISION(mv2771,mv2772);
resetMv mv2773[1];
resetMv mv2774[1];
setVector ve2775 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2776 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2774[0] = <ve2775,ve2776>;
resetMv mv2777[1];
setMv mv2777[0] = rc2[25];
resetMv mv2778[1];
setMv mv2778[0] = mv2774[0];
calculateMvCoeff mv2773[0] = DIVISION(mv2777,mv2778);
resetMv mv2779[1];
resetMv mv2780[1];
setVector ve2781 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2782 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2780[0] = <ve2781,ve2782>;
resetMv mv2783[1];
setMv mv2783[0] = rc2[-31];
resetMv mv2784[1];
setMv mv2784[0] = mv2780[0];
calculateMvCoeff mv2779[0] = DIVISION(mv2783,mv2784);
resetMv mv2785[1];
resetMv mv2786[1];
setVector ve2787 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2788 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2786[0] = <ve2787,ve2788>;
resetMv mv2789[1];
setMv mv2789[0] = rc2[30];
resetMv mv2790[1];
setMv mv2790[0] = mv2786[0];
calculateMvCoeff mv2785[0] = DIVISION(mv2789,mv2790);
setVector ve2791 = {rc2[-0,-1,2,3,-5,-6,-7,9,10,-12,-14,16,-18,-20,23,-27]};
resetMv mv2793[16];
setMv mv2793[15] = mv2785[0];
setMv mv2793[7] = mv2737[0];
setMv mv2793[9] = mv2749[0];
setMv mv2793[13] = mv2773[0];
setMv mv2793[2] = mv2707[0];
setMv mv2793[5] = mv2725[0];
setMv mv2793[3] = mv2713[0];
setMv mv2793[4] = mv2719[0];
setMv mv2793[1] = mv2701[0];
setMv mv2793[0] = mv2695[0];
setMv mv2793[8] = mv2743[0];
setMv mv2793[11] = mv2761[0];
setMv mv2793[6] = mv2731[0];
setMv mv2793[14] = mv2779[0];
setMv mv2793[10] = mv2755[0];
setMv mv2793[12] = mv2767[0];
setVector ve2792 = {mv2793[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]};
dotVectors rc2N[1] = <ve2791,ve2792>;

//rc2N[2] = ((((((((((((((((-(rc2[0])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[2])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[3])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[5])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[6])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[7])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[9])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[10])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[12])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[14])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[16])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[18])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[20])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[23])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[27])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))
resetMv mv2794[1];
resetMv mv2795[1];
setVector ve2796 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2797 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2795[0] = <ve2796,ve2797>;
resetMv mv2798[1];
setMv mv2798[0] = rc2[-12];
resetMv mv2799[1];
setMv mv2799[0] = mv2795[0];
calculateMvCoeff mv2794[0] = DIVISION(mv2798,mv2799);
resetMv mv2800[1];
resetMv mv2801[1];
setVector ve2802 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2803 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2801[0] = <ve2802,ve2803>;
resetMv mv2804[1];
setMv mv2804[0] = rc2[18];
resetMv mv2805[1];
setMv mv2805[0] = mv2801[0];
calculateMvCoeff mv2800[0] = DIVISION(mv2804,mv2805);
resetMv mv2806[1];
resetMv mv2807[1];
setVector ve2808 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2809 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2807[0] = <ve2808,ve2809>;
resetMv mv2810[1];
setMv mv2810[0] = rc2[-5];
resetMv mv2811[1];
setMv mv2811[0] = mv2807[0];
calculateMvCoeff mv2806[0] = DIVISION(mv2810,mv2811);
resetMv mv2812[1];
resetMv mv2813[1];
setVector ve2814 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2815 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2813[0] = <ve2814,ve2815>;
resetMv mv2816[1];
setMv mv2816[0] = rc2[23];
resetMv mv2817[1];
setMv mv2817[0] = mv2813[0];
calculateMvCoeff mv2812[0] = DIVISION(mv2816,mv2817);
resetMv mv2818[1];
resetMv mv2819[1];
setVector ve2820 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2821 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2819[0] = <ve2820,ve2821>;
resetMv mv2822[1];
setMv mv2822[0] = rc2[24];
resetMv mv2823[1];
setMv mv2823[0] = mv2819[0];
calculateMvCoeff mv2818[0] = DIVISION(mv2822,mv2823);
resetMv mv2824[1];
resetMv mv2825[1];
setVector ve2826 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2827 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2825[0] = <ve2826,ve2827>;
resetMv mv2828[1];
setMv mv2828[0] = rc2[-9];
resetMv mv2829[1];
setMv mv2829[0] = mv2825[0];
calculateMvCoeff mv2824[0] = DIVISION(mv2828,mv2829);
resetMv mv2830[1];
resetMv mv2831[1];
setVector ve2832 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2833 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2831[0] = <ve2832,ve2833>;
resetMv mv2834[1];
setMv mv2834[0] = rc2[27];
resetMv mv2835[1];
setMv mv2835[0] = mv2831[0];
calculateMvCoeff mv2830[0] = DIVISION(mv2834,mv2835);
resetMv mv2836[1];
resetMv mv2837[1];
setVector ve2838 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2839 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2837[0] = <ve2838,ve2839>;
resetMv mv2840[1];
setMv mv2840[0] = rc2[28];
resetMv mv2841[1];
setMv mv2841[0] = mv2837[0];
calculateMvCoeff mv2836[0] = DIVISION(mv2840,mv2841);
resetMv mv2842[1];
resetMv mv2843[1];
setVector ve2844 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2845 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2843[0] = <ve2844,ve2845>;
resetMv mv2846[1];
setMv mv2846[0] = rc2[-14];
resetMv mv2847[1];
setMv mv2847[0] = mv2843[0];
calculateMvCoeff mv2842[0] = DIVISION(mv2846,mv2847);
resetMv mv2848[1];
resetMv mv2849[1];
setVector ve2850 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2851 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2849[0] = <ve2850,ve2851>;
resetMv mv2852[1];
setMv mv2852[0] = rc2[-15];
resetMv mv2853[1];
setMv mv2853[0] = mv2849[0];
calculateMvCoeff mv2848[0] = DIVISION(mv2852,mv2853);
resetMv mv2854[1];
resetMv mv2855[1];
setVector ve2856 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2857 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2855[0] = <ve2856,ve2857>;
resetMv mv2858[1];
setMv mv2858[0] = rc2[30];
resetMv mv2859[1];
setMv mv2859[0] = mv2855[0];
calculateMvCoeff mv2854[0] = DIVISION(mv2858,mv2859);
resetMv mv2860[1];
resetMv mv2861[1];
setVector ve2862 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2863 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2861[0] = <ve2862,ve2863>;
resetMv mv2864[1];
setMv mv2864[0] = rc2[20];
resetMv mv2865[1];
setMv mv2865[0] = mv2861[0];
calculateMvCoeff mv2860[0] = DIVISION(mv2864,mv2865);
resetMv mv2866[1];
resetMv mv2867[1];
setVector ve2868 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2869 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2867[0] = <ve2868,ve2869>;
resetMv mv2870[1];
setMv mv2870[0] = rc2[21];
resetMv mv2871[1];
setMv mv2871[0] = mv2867[0];
calculateMvCoeff mv2866[0] = DIVISION(mv2870,mv2871);
resetMv mv2872[1];
resetMv mv2873[1];
setVector ve2874 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2875 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2873[0] = <ve2874,ve2875>;
resetMv mv2876[1];
setMv mv2876[0] = rc2[-31];
resetMv mv2877[1];
setMv mv2877[0] = mv2873[0];
calculateMvCoeff mv2872[0] = DIVISION(mv2876,mv2877);
resetMv mv2878[1];
resetMv mv2879[1];
setVector ve2880 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2881 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2879[0] = <ve2880,ve2881>;
resetMv mv2882[1];
setMv mv2882[0] = rc2[25];
resetMv mv2883[1];
setMv mv2883[0] = mv2879[0];
calculateMvCoeff mv2878[0] = DIVISION(mv2882,mv2883);
resetMv mv2884[1];
resetMv mv2885[1];
setVector ve2886 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2887 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2885[0] = <ve2886,ve2887>;
resetMv mv2888[1];
setMv mv2888[0] = rc2[29];
resetMv mv2889[1];
setMv mv2889[0] = mv2885[0];
calculateMvCoeff mv2884[0] = DIVISION(mv2888,mv2889);
setVector ve2890 = {rc2[-0,-1,-2,3,-5,6,-7,9,-10,12,-14,-16,18,-20,-23,27]};
resetMv mv2892[16];
setMv mv2892[0] = mv2794[0];
setMv mv2892[4] = mv2818[0];
setMv mv2892[7] = mv2836[0];
setMv mv2892[9] = mv2848[0];
setMv mv2892[5] = mv2824[0];
setMv mv2892[3] = mv2812[0];
setMv mv2892[1] = mv2800[0];
setMv mv2892[14] = mv2878[0];
setMv mv2892[13] = mv2872[0];
setMv mv2892[10] = mv2854[0];
setMv mv2892[2] = mv2806[0];
setMv mv2892[15] = mv2884[0];
setMv mv2892[12] = mv2866[0];
setMv mv2892[11] = mv2860[0];
setMv mv2892[8] = mv2842[0];
setMv mv2892[6] = mv2830[0];
setVector ve2891 = {mv2892[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]};
dotVectors rc2N[2] = <ve2890,ve2891>;

//rc2N[3] = ((((((((((((((((-(rc2[0])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[2])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[3])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[5])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[6])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[7])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[9])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[10])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[12])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[14])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[16])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[18])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[20])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[23])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[27])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv mv2893[1];
resetMv mv2894[1];
setVector ve2895 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2896 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2894[0] = <ve2895,ve2896>;
resetMv mv2897[1];
setMv mv2897[0] = rc2[-14];
resetMv mv2898[1];
setMv mv2898[0] = mv2894[0];
calculateMvCoeff mv2893[0] = DIVISION(mv2897,mv2898);
resetMv mv2899[1];
resetMv mv2900[1];
setVector ve2901 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2902 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2900[0] = <ve2901,ve2902>;
resetMv mv2903[1];
setMv mv2903[0] = rc2[20];
resetMv mv2904[1];
setMv mv2904[0] = mv2900[0];
calculateMvCoeff mv2899[0] = DIVISION(mv2903,mv2904);
resetMv mv2905[1];
resetMv mv2906[1];
setVector ve2907 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2908 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2906[0] = <ve2907,ve2908>;
resetMv mv2909[1];
setMv mv2909[0] = rc2[23];
resetMv mv2910[1];
setMv mv2910[0] = mv2906[0];
calculateMvCoeff mv2905[0] = DIVISION(mv2909,mv2910);
resetMv mv2911[1];
resetMv mv2912[1];
setVector ve2913 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2914 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2912[0] = <ve2913,ve2914>;
resetMv mv2915[1];
setMv mv2915[0] = rc2[-5];
resetMv mv2916[1];
setMv mv2916[0] = mv2912[0];
calculateMvCoeff mv2911[0] = DIVISION(mv2915,mv2916);
resetMv mv2917[1];
resetMv mv2918[1];
setVector ve2919 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2920 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2918[0] = <ve2919,ve2920>;
resetMv mv2921[1];
setMv mv2921[0] = rc2[25];
resetMv mv2922[1];
setMv mv2922[0] = mv2918[0];
calculateMvCoeff mv2917[0] = DIVISION(mv2921,mv2922);
resetMv mv2923[1];
resetMv mv2924[1];
setVector ve2925 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2926 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2924[0] = <ve2925,ve2926>;
resetMv mv2927[1];
setMv mv2927[0] = rc2[27];
resetMv mv2928[1];
setMv mv2928[0] = mv2924[0];
calculateMvCoeff mv2923[0] = DIVISION(mv2927,mv2928);
resetMv mv2929[1];
resetMv mv2930[1];
setVector ve2931 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2932 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2930[0] = <ve2931,ve2932>;
resetMv mv2933[1];
setMv mv2933[0] = rc2[-9];
resetMv mv2934[1];
setMv mv2934[0] = mv2930[0];
calculateMvCoeff mv2929[0] = DIVISION(mv2933,mv2934);
resetMv mv2935[1];
resetMv mv2936[1];
setVector ve2937 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2938 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2936[0] = <ve2937,ve2938>;
resetMv mv2939[1];
setMv mv2939[0] = rc2[29];
resetMv mv2940[1];
setMv mv2940[0] = mv2936[0];
calculateMvCoeff mv2935[0] = DIVISION(mv2939,mv2940);
resetMv mv2941[1];
resetMv mv2942[1];
setVector ve2943 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2944 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2942[0] = <ve2943,ve2944>;
resetMv mv2945[1];
setMv mv2945[0] = rc2[-12];
resetMv mv2946[1];
setMv mv2946[0] = mv2942[0];
calculateMvCoeff mv2941[0] = DIVISION(mv2945,mv2946);
resetMv mv2947[1];
resetMv mv2948[1];
setVector ve2949 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2950 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2948[0] = <ve2949,ve2950>;
resetMv mv2951[1];
setMv mv2951[0] = rc2[30];
resetMv mv2952[1];
setMv mv2952[0] = mv2948[0];
calculateMvCoeff mv2947[0] = DIVISION(mv2951,mv2952);
resetMv mv2953[1];
resetMv mv2954[1];
setVector ve2955 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2956 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2954[0] = <ve2955,ve2956>;
resetMv mv2957[1];
setMv mv2957[0] = rc2[-15];
resetMv mv2958[1];
setMv mv2958[0] = mv2954[0];
calculateMvCoeff mv2953[0] = DIVISION(mv2957,mv2958);
resetMv mv2959[1];
resetMv mv2960[1];
setVector ve2961 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2962 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2960[0] = <ve2961,ve2962>;
resetMv mv2963[1];
setMv mv2963[0] = rc2[18];
resetMv mv2964[1];
setMv mv2964[0] = mv2960[0];
calculateMvCoeff mv2959[0] = DIVISION(mv2963,mv2964);
resetMv mv2965[1];
resetMv mv2966[1];
setVector ve2967 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2968 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2966[0] = <ve2967,ve2968>;
resetMv mv2969[1];
setMv mv2969[0] = rc2[-31];
resetMv mv2970[1];
setMv mv2970[0] = mv2966[0];
calculateMvCoeff mv2965[0] = DIVISION(mv2969,mv2970);
resetMv mv2971[1];
resetMv mv2972[1];
setVector ve2973 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2974 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2972[0] = <ve2973,ve2974>;
resetMv mv2975[1];
setMv mv2975[0] = rc2[21];
resetMv mv2976[1];
setMv mv2976[0] = mv2972[0];
calculateMvCoeff mv2971[0] = DIVISION(mv2975,mv2976);
resetMv mv2977[1];
resetMv mv2978[1];
setVector ve2979 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2980 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2978[0] = <ve2979,ve2980>;
resetMv mv2981[1];
setMv mv2981[0] = rc2[24];
resetMv mv2982[1];
setMv mv2982[0] = mv2978[0];
calculateMvCoeff mv2977[0] = DIVISION(mv2981,mv2982);
resetMv mv2983[1];
resetMv mv2984[1];
setVector ve2985 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2986 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2984[0] = <ve2985,ve2986>;
resetMv mv2987[1];
setMv mv2987[0] = rc2[28];
resetMv mv2988[1];
setMv mv2988[0] = mv2984[0];
calculateMvCoeff mv2983[0] = DIVISION(mv2987,mv2988);
setVector ve2989 = {rc2[-0,-1,-2,-3,-5,6,7,9,10,12,14,16,18,20,23,-27]};
resetMv mv2991[16];
setMv mv2991[8] = mv2941[0];
setMv mv2991[10] = mv2953[0];
setMv mv2991[12] = mv2965[0];
setMv mv2991[1] = mv2899[0];
setMv mv2991[13] = mv2971[0];
setMv mv2991[0] = mv2893[0];
setMv mv2991[15] = mv2983[0];
setMv mv2991[14] = mv2977[0];
setMv mv2991[6] = mv2929[0];
setMv mv2991[4] = mv2917[0];
setMv mv2991[7] = mv2935[0];
setMv mv2991[3] = mv2911[0];
setMv mv2991[2] = mv2905[0];
setMv mv2991[5] = mv2923[0];
setMv mv2991[11] = mv2959[0];
setMv mv2991[9] = mv2947[0];
setVector ve2990 = {mv2991[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]};
dotVectors rc2N[3] = <ve2989,ve2990>;

//rc2N[4] = ((((((((((((((((((((((((-(rc2[0])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[2])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[3])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[4])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[6])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[7])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[8])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[10])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[11])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[13])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[15])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[16])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[17])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[19])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[21])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[22])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[24])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[25])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[26])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[28])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[29])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[30])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[31])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv mv2992[1];
resetMv mv2993[1];
setVector ve2994 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2995 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2993[0] = <ve2994,ve2995>;
resetMv mv2996[1];
setMv mv2996[0] = rc2[-15];
resetMv mv2997[1];
setMv mv2997[0] = mv2993[0];
calculateMvCoeff mv2992[0] = DIVISION(mv2996,mv2997);
resetMv mv2998[1];
resetMv mv2999[1];
setVector ve3000 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3001 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2999[0] = <ve3000,ve3001>;
resetMv mv3002[1];
setMv mv3002[0] = rc2[21];
resetMv mv3003[1];
setMv mv3003[0] = mv2999[0];
calculateMvCoeff mv2998[0] = DIVISION(mv3002,mv3003);
resetMv mv3004[1];
resetMv mv3005[1];
setVector ve3006 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3007 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3005[0] = <ve3006,ve3007>;
resetMv mv3008[1];
setMv mv3008[0] = rc2[24];
resetMv mv3009[1];
setMv mv3009[0] = mv3005[0];
calculateMvCoeff mv3004[0] = DIVISION(mv3008,mv3009);
resetMv mv3010[1];
resetMv mv3011[1];
setVector ve3012 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3013 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3011[0] = <ve3012,ve3013>;
resetMv mv3014[1];
setMv mv3014[0] = rc2[25];
resetMv mv3015[1];
setMv mv3015[0] = mv3011[0];
calculateMvCoeff mv3010[0] = DIVISION(mv3014,mv3015);
resetMv mv3016[1];
resetMv mv3017[1];
setVector ve3018 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3019 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3017[0] = <ve3018,ve3019>;
resetMv mv3020[1];
setMv mv3020[0] = rc2[-5];
resetMv mv3021[1];
setMv mv3021[0] = mv3017[0];
calculateMvCoeff mv3016[0] = DIVISION(mv3020,mv3021);
resetMv mv3022[1];
resetMv mv3023[1];
setVector ve3024 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3025 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3023[0] = <ve3024,ve3025>;
resetMv mv3026[1];
setMv mv3026[0] = rc2[28];
resetMv mv3027[1];
setMv mv3027[0] = mv3023[0];
calculateMvCoeff mv3022[0] = DIVISION(mv3026,mv3027);
resetMv mv3028[1];
resetMv mv3029[1];
setVector ve3030 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3031 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3029[0] = <ve3030,ve3031>;
resetMv mv3032[1];
setMv mv3032[0] = rc2[29];
resetMv mv3033[1];
setMv mv3033[0] = mv3029[0];
calculateMvCoeff mv3028[0] = DIVISION(mv3032,mv3033);
resetMv mv3034[1];
resetMv mv3035[1];
setVector ve3036 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3037 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3035[0] = <ve3036,ve3037>;
resetMv mv3038[1];
setMv mv3038[0] = rc2[-9];
resetMv mv3039[1];
setMv mv3039[0] = mv3035[0];
calculateMvCoeff mv3034[0] = DIVISION(mv3038,mv3039);
resetMv mv3040[1];
resetMv mv3041[1];
setVector ve3042 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3043 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3041[0] = <ve3042,ve3043>;
resetMv mv3044[1];
setMv mv3044[0] = rc2[30];
resetMv mv3045[1];
setMv mv3045[0] = mv3041[0];
calculateMvCoeff mv3040[0] = DIVISION(mv3044,mv3045);
resetMv mv3046[1];
resetMv mv3047[1];
setVector ve3048 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3049 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3047[0] = <ve3048,ve3049>;
resetMv mv3050[1];
setMv mv3050[0] = rc2[-12];
resetMv mv3051[1];
setMv mv3051[0] = mv3047[0];
calculateMvCoeff mv3046[0] = DIVISION(mv3050,mv3051);
resetMv mv3052[1];
resetMv mv3053[1];
setVector ve3054 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3055 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3053[0] = <ve3054,ve3055>;
resetMv mv3056[1];
setMv mv3056[0] = rc2[-14];
resetMv mv3057[1];
setMv mv3057[0] = mv3053[0];
calculateMvCoeff mv3052[0] = DIVISION(mv3056,mv3057);
resetMv mv3058[1];
resetMv mv3059[1];
setVector ve3060 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3061 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3059[0] = <ve3060,ve3061>;
resetMv mv3062[1];
setMv mv3062[0] = rc2[-15];
resetMv mv3063[1];
setMv mv3063[0] = mv3059[0];
calculateMvCoeff mv3058[0] = DIVISION(mv3062,mv3063);
resetMv mv3064[1];
resetMv mv3065[1];
setVector ve3066 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3067 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3065[0] = <ve3066,ve3067>;
resetMv mv3068[1];
setMv mv3068[0] = rc2[-31];
resetMv mv3069[1];
setMv mv3069[0] = mv3065[0];
calculateMvCoeff mv3064[0] = DIVISION(mv3068,mv3069);
resetMv mv3070[1];
resetMv mv3071[1];
setVector ve3072 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3073 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3071[0] = <ve3072,ve3073>;
resetMv mv3074[1];
setMv mv3074[0] = rc2[18];
resetMv mv3075[1];
setMv mv3075[0] = mv3071[0];
calculateMvCoeff mv3070[0] = DIVISION(mv3074,mv3075);
resetMv mv3076[1];
resetMv mv3077[1];
setVector ve3078 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3079 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3077[0] = <ve3078,ve3079>;
resetMv mv3080[1];
setMv mv3080[0] = rc2[20];
resetMv mv3081[1];
setMv mv3081[0] = mv3077[0];
calculateMvCoeff mv3076[0] = DIVISION(mv3080,mv3081);
resetMv mv3082[1];
resetMv mv3083[1];
setVector ve3084 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3085 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3083[0] = <ve3084,ve3085>;
resetMv mv3086[1];
setMv mv3086[0] = rc2[21];
resetMv mv3087[1];
setMv mv3087[0] = mv3083[0];
calculateMvCoeff mv3082[0] = DIVISION(mv3086,mv3087);
resetMv mv3088[1];
resetMv mv3089[1];
setVector ve3090 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3091 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3089[0] = <ve3090,ve3091>;
resetMv mv3092[1];
setMv mv3092[0] = rc2[23];
resetMv mv3093[1];
setMv mv3093[0] = mv3089[0];
calculateMvCoeff mv3088[0] = DIVISION(mv3092,mv3093);
resetMv mv3094[1];
resetMv mv3095[1];
setVector ve3096 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3097 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3095[0] = <ve3096,ve3097>;
resetMv mv3098[1];
setMv mv3098[0] = rc2[24];
resetMv mv3099[1];
setMv mv3099[0] = mv3095[0];
calculateMvCoeff mv3094[0] = DIVISION(mv3098,mv3099);
resetMv mv3100[1];
resetMv mv3101[1];
setVector ve3102 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3103 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3101[0] = <ve3102,ve3103>;
resetMv mv3104[1];
setMv mv3104[0] = rc2[25];
resetMv mv3105[1];
setMv mv3105[0] = mv3101[0];
calculateMvCoeff mv3100[0] = DIVISION(mv3104,mv3105);
resetMv mv3106[1];
resetMv mv3107[1];
setVector ve3108 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3109 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3107[0] = <ve3108,ve3109>;
resetMv mv3110[1];
setMv mv3110[0] = rc2[27];
resetMv mv3111[1];
setMv mv3111[0] = mv3107[0];
calculateMvCoeff mv3106[0] = DIVISION(mv3110,mv3111);
resetMv mv3112[1];
resetMv mv3113[1];
setVector ve3114 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3115 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3113[0] = <ve3114,ve3115>;
resetMv mv3116[1];
setMv mv3116[0] = rc2[28];
resetMv mv3117[1];
setMv mv3117[0] = mv3113[0];
calculateMvCoeff mv3112[0] = DIVISION(mv3116,mv3117);
resetMv mv3118[1];
resetMv mv3119[1];
setVector ve3120 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3121 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3119[0] = <ve3120,ve3121>;
resetMv mv3122[1];
setMv mv3122[0] = rc2[29];
resetMv mv3123[1];
setMv mv3123[0] = mv3119[0];
calculateMvCoeff mv3118[0] = DIVISION(mv3122,mv3123);
resetMv mv3124[1];
resetMv mv3125[1];
setVector ve3126 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3127 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3125[0] = <ve3126,ve3127>;
resetMv mv3128[1];
setMv mv3128[0] = rc2[30];
resetMv mv3129[1];
setMv mv3129[0] = mv3125[0];
calculateMvCoeff mv3124[0] = DIVISION(mv3128,mv3129);
resetMv mv3130[1];
resetMv mv3131[1];
setVector ve3132 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3133 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3131[0] = <ve3132,ve3133>;
resetMv mv3134[1];
setMv mv3134[0] = rc2[-31];
resetMv mv3135[1];
setMv mv3135[0] = mv3131[0];
calculateMvCoeff mv3130[0] = DIVISION(mv3134,mv3135);
setVector ve3136 = {rc2[-0,-1,-2,-3,-4,6,7,8,10,11,13,15,16,17,19,21,22,24,25,-26,-28,-29,-30,-31]};
resetMv mv3138[24];
setMv mv3138[2] = mv3004[0];
setMv mv3138[18] = mv3100[0];
setMv mv3138[5] = mv3022[0];
setMv mv3138[8] = mv3040[0];
setMv mv3138[13] = mv3070[0];
setMv mv3138[7] = mv3034[0];
setMv mv3138[10] = mv3052[0];
setMv mv3138[4] = mv3016[0];
setMv mv3138[23] = mv3130[0];
setMv mv3138[11] = mv3058[0];
setMv mv3138[21] = mv3118[0];
setMv mv3138[22] = mv3124[0];
setMv mv3138[19] = mv3106[0];
setMv mv3138[0] = mv2992[0];
setMv mv3138[6] = mv3028[0];
setMv mv3138[9] = mv3046[0];
setMv mv3138[20] = mv3112[0];
setMv mv3138[1] = mv2998[0];
setMv mv3138[3] = mv3010[0];
setMv mv3138[15] = mv3082[0];
setMv mv3138[12] = mv3064[0];
setMv mv3138[17] = mv3094[0];
setMv mv3138[14] = mv3076[0];
setMv mv3138[16] = mv3088[0];
setVector ve3137 = {mv3138[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]};
dotVectors rc2N[4] = <ve3136,ve3137>;

//rc2N[5] = ((((((((-(rc2[5])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + (-((-(rc2[9])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[12])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[14])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[18])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[20])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[23])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[27])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv mv3139[1];
resetMv mv3140[1];
setVector ve3141 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3142 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3140[0] = <ve3141,ve3142>;
resetMv mv3143[1];
setMv mv3143[0] = rc2[-5];
resetMv mv3144[1];
setMv mv3144[0] = mv3140[0];
calculateMvCoeff mv3139[0] = DIVISION(mv3143,mv3144);
resetMv mv3145[1];
resetMv mv3146[1];
setVector ve3147 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3148 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3146[0] = <ve3147,ve3148>;
resetMv mv3149[1];
setMv mv3149[0] = rc2[-9];
resetMv mv3150[1];
setMv mv3150[0] = mv3146[0];
calculateMvCoeff mv3145[0] = DIVISION(mv3149,mv3150);
resetMv mv3151[1];
resetMv mv3152[1];
setVector ve3153 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3154 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3152[0] = <ve3153,ve3154>;
resetMv mv3155[1];
setMv mv3155[0] = rc2[-12];
resetMv mv3156[1];
setMv mv3156[0] = mv3152[0];
calculateMvCoeff mv3151[0] = DIVISION(mv3155,mv3156);
resetMv mv3157[1];
resetMv mv3158[1];
setVector ve3159 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3160 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3158[0] = <ve3159,ve3160>;
resetMv mv3161[1];
setMv mv3161[0] = rc2[-14];
resetMv mv3162[1];
setMv mv3162[0] = mv3158[0];
calculateMvCoeff mv3157[0] = DIVISION(mv3161,mv3162);
resetMv mv3163[1];
resetMv mv3164[1];
setVector ve3165 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3166 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3164[0] = <ve3165,ve3166>;
resetMv mv3167[1];
setMv mv3167[0] = rc2[18];
resetMv mv3168[1];
setMv mv3168[0] = mv3164[0];
calculateMvCoeff mv3163[0] = DIVISION(mv3167,mv3168);
resetMv mv3169[1];
resetMv mv3170[1];
setVector ve3171 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3172 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3170[0] = <ve3171,ve3172>;
resetMv mv3173[1];
setMv mv3173[0] = rc2[20];
resetMv mv3174[1];
setMv mv3174[0] = mv3170[0];
calculateMvCoeff mv3169[0] = DIVISION(mv3173,mv3174);
resetMv mv3175[1];
resetMv mv3176[1];
setVector ve3177 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3178 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3176[0] = <ve3177,ve3178>;
resetMv mv3179[1];
setMv mv3179[0] = rc2[23];
resetMv mv3180[1];
setMv mv3180[0] = mv3176[0];
calculateMvCoeff mv3175[0] = DIVISION(mv3179,mv3180);
resetMv mv3181[1];
resetMv mv3182[1];
setVector ve3183 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve3184 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv3182[0] = <ve3183,ve3184>;
resetMv mv3185[1];
setMv mv3185[0] = rc2[27];
resetMv mv3186[1];
setMv mv3186[0] = mv3182[0];
calculateMvCoeff mv3181[0] = DIVISION(mv3185,mv3186);
setVector ve3187 = {rc2[-5,9,12,14,18,20,23,-27]};
resetMv mv3189[8];
setMv mv3189[5] = mv3169[0];
setMv mv3189[7] = mv3181[0];
setMv mv3189[3] = mv3157[0];
setMv mv3189[1] = mv3145[0];
setMv mv3189[6] = mv3175[0];
setMv mv3189[0] = mv3139[0];
setMv mv3189[2] = mv3151[0];
setMv mv3189[4] = mv3163[0];
setVector ve3188 = {mv3189[0,1,2,3,4,5,6,7]};
dotVectors rc2N[5] = <ve3187,ve3188>;

//temp3[0] = -2.0 * (((((rc1N[1] * sat1[1]) + (rc1N[2] * sat1[2])) + (rc1N[3] * sat1[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat1[4])))
resetMv temp3[32];
resetMv mv3190[1];
setVector ve3191 = {rc1N[1,2,3,-4,-5]};
resetMv mv3193[5];
setMv mv3193[0,1,2,4] = sat1[1,2,3,4];
assignMv mv3193[3] = [1.0];
setVector ve3192 = {mv3193[0,1,2,3,4]};
dotVectors mv3190[0] = <ve3191,ve3192>;
resetMv mv3195[1];
assignMv mv3195[0] = [-2.0];
setVector ve3194 = {mv3195[0]};
setVector ve3196 = {mv3190[0]};
dotVectors temp3[0] = <ve3194,ve3196>;

//temp4 = sqrt(temp3)
resetMv temp4[32];
calculateMv temp4 = SQRT(temp3);

//z11[0] = temp4[0] - inputsVector[0]
resetMv z11[32];
resetMv mv3198[2];
setMv mv3198[1] = inputsVector[-0];
setMv mv3198[0] = temp4[0];
setVector ve3197 = {mv3198[0,1]};
dotVectors z11[0] = <ve3197>;

//temp5[0] = -2.0 * (((((rc2N[1] * sat1[1]) + (rc2N[2] * sat1[2])) + (rc2N[3] * sat1[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat1[4])))
resetMv temp5[32];
resetMv mv3199[1];
setVector ve3200 = {rc2N[1,2,3,-4,-5]};
resetMv mv3202[5];
setMv mv3202[0,1,2,4] = sat1[1,2,3,4];
assignMv mv3202[3] = [1.0];
setVector ve3201 = {mv3202[0,1,2,3,4]};
dotVectors mv3199[0] = <ve3200,ve3201>;
resetMv mv3204[1];
assignMv mv3204[0] = [-2.0];
setVector ve3203 = {mv3204[0]};
setVector ve3205 = {mv3199[0]};
dotVectors temp5[0] = <ve3203,ve3205>;

//temp6 = sqrt(temp5)
resetMv temp6[32];
calculateMv temp6 = SQRT(temp5);

//z12[0] = temp6[0] - inputsVector[0]
resetMv z12[32];
resetMv mv3207[2];
setMv mv3207[1] = inputsVector[-0];
setMv mv3207[0] = temp6[0];
setVector ve3206 = {mv3207[0,1]};
dotVectors z12[0] = <ve3206>;

//temp7[0] = -2.0 * (((((rc1N[1] * sat2[1]) + (rc1N[2] * sat2[2])) + (rc1N[3] * sat2[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat2[4])))
resetMv temp7[32];
resetMv mv3208[1];
setVector ve3209 = {rc1N[1,2,3,-4,-5]};
resetMv mv3211[5];
setMv mv3211[0,1,2,4] = sat2[1,2,3,4];
assignMv mv3211[3] = [1.0];
setVector ve3210 = {mv3211[0,1,2,3,4]};
dotVectors mv3208[0] = <ve3209,ve3210>;
resetMv mv3213[1];
assignMv mv3213[0] = [-2.0];
setVector ve3212 = {mv3213[0]};
setVector ve3214 = {mv3208[0]};
dotVectors temp7[0] = <ve3212,ve3214>;

//temp8 = sqrt(temp7)
resetMv temp8[32];
calculateMv temp8 = SQRT(temp7);

//z21[0] = temp8[0] - inputsVector[1]
resetMv z21[32];
resetMv mv3216[2];
setMv mv3216[1] = inputsVector[-1];
setMv mv3216[0] = temp8[0];
setVector ve3215 = {mv3216[0,1]};
dotVectors z21[0] = <ve3215>;

//temp9[0] = -2.0 * (((((rc2N[1] * sat2[1]) + (rc2N[2] * sat2[2])) + (rc2N[3] * sat2[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat2[4])))
resetMv temp9[32];
resetMv mv3217[1];
setVector ve3218 = {rc2N[1,2,3,-4,-5]};
resetMv mv3220[5];
setMv mv3220[0,1,2,4] = sat2[1,2,3,4];
assignMv mv3220[3] = [1.0];
setVector ve3219 = {mv3220[0,1,2,3,4]};
dotVectors mv3217[0] = <ve3218,ve3219>;
resetMv mv3222[1];
assignMv mv3222[0] = [-2.0];
setVector ve3221 = {mv3222[0]};
setVector ve3223 = {mv3217[0]};
dotVectors temp9[0] = <ve3221,ve3223>;

//temp10 = sqrt(temp9)
resetMv temp10[32];
calculateMv temp10 = SQRT(temp9);

//z22[0] = temp10[0] - inputsVector[1]
resetMv z22[32];
resetMv mv3225[2];
setMv mv3225[1] = inputsVector[-1];
setMv mv3225[0] = temp10[0];
setVector ve3224 = {mv3225[0,1]};
dotVectors z22[0] = <ve3224>;

//temp11[0] = -2.0 * (((((rc1N[1] * sat3[1]) + (rc1N[2] * sat3[2])) + (rc1N[3] * sat3[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat3[4])))
resetMv temp11[32];
resetMv mv3226[1];
setVector ve3227 = {rc1N[1,2,3,-4,-5]};
resetMv mv3229[5];
setMv mv3229[0,1,2,4] = sat3[1,2,3,4];
assignMv mv3229[3] = [1.0];
setVector ve3228 = {mv3229[0,1,2,3,4]};
dotVectors mv3226[0] = <ve3227,ve3228>;
resetMv mv3231[1];
assignMv mv3231[0] = [-2.0];
setVector ve3230 = {mv3231[0]};
setVector ve3232 = {mv3226[0]};
dotVectors temp11[0] = <ve3230,ve3232>;

//temp12 = sqrt(temp11)
resetMv temp12[32];
calculateMv temp12 = SQRT(temp11);

//z31[0] = temp12[0] - inputsVector[2]
resetMv z31[32];
resetMv mv3234[2];
setMv mv3234[0] = temp12[0];
setMv mv3234[1] = inputsVector[-2];
setVector ve3233 = {mv3234[0,1]};
dotVectors z31[0] = <ve3233>;

//temp13[0] = -2.0 * (((((rc2N[1] * sat3[1]) + (rc2N[2] * sat3[2])) + (rc2N[3] * sat3[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat3[4])))
resetMv temp13[32];
resetMv mv3235[1];
setVector ve3236 = {rc2N[1,2,3,-4,-5]};
resetMv mv3238[5];
setMv mv3238[0,1,2,4] = sat3[1,2,3,4];
assignMv mv3238[3] = [1.0];
setVector ve3237 = {mv3238[0,1,2,3,4]};
dotVectors mv3235[0] = <ve3236,ve3237>;
resetMv mv3240[1];
assignMv mv3240[0] = [-2.0];
setVector ve3239 = {mv3240[0]};
setVector ve3241 = {mv3235[0]};
dotVectors temp13[0] = <ve3239,ve3241>;

//temp14 = sqrt(temp13)
resetMv temp14[32];
calculateMv temp14 = SQRT(temp13);

//z32[0] = temp14[0] - inputsVector[2]
resetMv z32[32];
resetMv mv3243[2];
setMv mv3243[0] = temp14[0];
setMv mv3243[1] = inputsVector[-2];
setVector ve3242 = {mv3243[0,1]};
dotVectors z32[0] = <ve3242>;

