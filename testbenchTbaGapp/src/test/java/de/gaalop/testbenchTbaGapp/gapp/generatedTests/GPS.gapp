//sat1[1] = inputsVector[3]
assignInputsVector inputsVector = [d1,d2,d3,sat1x,sat1y,sat1z,sat2x,sat2y,sat2z,sat3x,sat3y,sat3z];
resetMv sat1[32];
setMv sat1[1,2,3] = inputsVector[3,4,5];

//sat1[2] = inputsVector[4]

//sat1[3] = inputsVector[5]

//sat1[4] = 0.5 * (((inputsVector[3] * inputsVector[3]) + (inputsVector[4] * inputsVector[4])) + (inputsVector[5] * inputsVector[5]))
resetMv tempmv0[1];
setVector ve1 = {inputsVector[3,4,5]};
setVector ve2 = {inputsVector[3,4,5]};
dotVectors tempmv0[0] = <ve1,ve2>;
setVector ve3 = {0.5};
setVector ve4 = {tempmv0[0]};
dotVectors sat1[4] = <ve3,ve4>;

//sat1[5] = 1.0
assignMv sat1[5] = [1.0];

//sat2[1] = inputsVector[6]
resetMv sat2[32];
setMv sat2[1,2,3] = inputsVector[6,7,8];

//sat2[2] = inputsVector[7]

//sat2[3] = inputsVector[8]

//sat2[4] = 0.5 * (((inputsVector[6] * inputsVector[6]) + (inputsVector[7] * inputsVector[7])) + (inputsVector[8] * inputsVector[8]))
resetMv tempmv5[1];
setVector ve6 = {inputsVector[6,7,8]};
setVector ve7 = {inputsVector[6,7,8]};
dotVectors tempmv5[0] = <ve6,ve7>;
setVector ve8 = {0.5};
setVector ve9 = {tempmv5[0]};
dotVectors sat2[4] = <ve8,ve9>;

//sat2[5] = 1.0
assignMv sat2[5] = [1.0];

//sat3[1] = inputsVector[9]
resetMv sat3[32];
setMv sat3[1,2,3] = inputsVector[9,10,11];

//sat3[2] = inputsVector[10]

//sat3[3] = inputsVector[11]

//sat3[4] = 0.5 * (((inputsVector[9] * inputsVector[9]) + (inputsVector[10] * inputsVector[10])) + (inputsVector[11] * inputsVector[11]))
resetMv tempmv10[1];
setVector ve11 = {inputsVector[9,10,11]};
setVector ve12 = {inputsVector[9,10,11]};
dotVectors tempmv10[0] = <ve11,ve12>;
setVector ve13 = {0.5};
setVector ve14 = {tempmv10[0]};
dotVectors sat3[4] = <ve13,ve14>;

//sat3[5] = 1.0
assignMv sat3[5] = [1.0];

//sph1[1] = sat1[1]
resetMv sph1[32];
setMv sph1[1,2,3] = sat1[1,2,3];

//sph1[2] = sat1[2]

//sph1[3] = sat1[3]

//sph1[4] = sat1[4] - ((0.5 * inputsVector[0]) * inputsVector[0])
setVector ve15 = {sat1[4],-0.5};
setVector ve16 = {1.0,inputsVector[0]};
setVector ve17 = {1.0,inputsVector[0]};
dotVectors sph1[4] = <ve15,ve16,ve17>;

//sph1[5] = 1.0
assignMv sph1[5] = [1.0];

//sph2[1] = sat2[1]
resetMv sph2[32];
setMv sph2[1,2,3] = sat2[1,2,3];

//sph2[2] = sat2[2]

//sph2[3] = sat2[3]

//sph2[4] = sat2[4] - ((0.5 * inputsVector[1]) * inputsVector[1])
setVector ve18 = {sat2[4],-0.5};
setVector ve19 = {1.0,inputsVector[1]};
setVector ve20 = {1.0,inputsVector[1]};
dotVectors sph2[4] = <ve18,ve19,ve20>;

//sph2[5] = 1.0
assignMv sph2[5] = [1.0];

//sph3[1] = sat3[1]
resetMv sph3[32];
setMv sph3[1,2,3] = sat3[1,2,3];

//sph3[2] = sat3[2]

//sph3[3] = sat3[3]

//sph3[4] = sat3[4] - ((0.5 * inputsVector[2]) * inputsVector[2])
setVector ve21 = {sat3[4],-0.5};
setVector ve22 = {1.0,inputsVector[2]};
setVector ve23 = {1.0,inputsVector[2]};
dotVectors sph3[4] = <ve21,ve22,ve23>;

//sph3[5] = 1.0
assignMv sph3[5] = [1.0];

//rcPp[16] = ((((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) * sph3[3]) + (-(((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) * sph3[2]))) + (((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) * sph3[1])
resetMv rcPp[32];
resetMv tempmv24[1];
setVector ve25 = {sph1[1,-2]};
setVector ve26 = {sph2[2,1]};
dotVectors tempmv24[0] = <ve25,ve26>;
resetMv tempmv27[1];
resetMv tempmv28[1];
setVector ve29 = {sph1[1,-3]};
setVector ve30 = {sph2[3,1]};
dotVectors tempmv28[0] = <ve29,ve30>;
setMv tempmv27[0] = tempmv28[-0];
resetMv tempmv31[1];
setVector ve32 = {sph1[2,-3]};
setVector ve33 = {sph2[3,2]};
dotVectors tempmv31[0] = <ve32,ve33>;
setVector ve34 = {tempmv24[0],tempmv27[0],tempmv31[0]};
setVector ve35 = {sph3[3,2,1]};
dotVectors rcPp[16] = <ve34,ve35>;

//rcPp[17] = ((((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) * sph3[4]) + (-(((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) * sph3[2]))) + (((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) * sph3[1])
resetMv tempmv36[1];
setVector ve37 = {sph1[1,-2]};
setVector ve38 = {sph2[2,1]};
dotVectors tempmv36[0] = <ve37,ve38>;
resetMv tempmv39[1];
resetMv tempmv40[1];
setVector ve41 = {sph1[1,-4]};
setVector ve42 = {sph2[4,1]};
dotVectors tempmv40[0] = <ve41,ve42>;
setMv tempmv39[0] = tempmv40[-0];
resetMv tempmv43[1];
setVector ve44 = {sph1[2,-4]};
setVector ve45 = {sph2[4,2]};
dotVectors tempmv43[0] = <ve44,ve45>;
setVector ve46 = {tempmv36[0],tempmv39[0],tempmv43[0]};
setVector ve47 = {sph3[4,2,1]};
dotVectors rcPp[17] = <ve46,ve47>;

//rcPp[18] = (((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[2]))) + ((sph1[2] + (-(sph2[2]))) * sph3[1])
resetMv tempmv48[1];
resetMv tempmv49[1];
setVector ve50 = {sph1[1],sph2[-1]};
dotVectors tempmv49[0] = <ve50>;
setMv tempmv48[0] = tempmv49[-0];
resetMv tempmv51[1];
setVector ve52 = {sph1[2],sph2[-2]};
dotVectors tempmv51[0] = <ve52>;
setVector ve53 = {sph1[1,-2],tempmv48[0],tempmv51[0]};
setVector ve54 = {sph2[2,1],sph3[2,1]};
dotVectors rcPp[18] = <ve53,ve54>;

//rcPp[19] = ((((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) * sph3[4]) + (-(((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) * sph3[3]))) + (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) * sph3[1])
resetMv tempmv55[1];
setVector ve56 = {sph1[1,-3]};
setVector ve57 = {sph2[3,1]};
dotVectors tempmv55[0] = <ve56,ve57>;
resetMv tempmv58[1];
resetMv tempmv59[1];
setVector ve60 = {sph1[1,-4]};
setVector ve61 = {sph2[4,1]};
dotVectors tempmv59[0] = <ve60,ve61>;
setMv tempmv58[0] = tempmv59[-0];
resetMv tempmv62[1];
setVector ve63 = {sph1[3,-4]};
setVector ve64 = {sph2[4,3]};
dotVectors tempmv62[0] = <ve63,ve64>;
setVector ve65 = {tempmv55[0],tempmv58[0],tempmv62[0]};
setVector ve66 = {sph3[4,3,1]};
dotVectors rcPp[19] = <ve65,ve66>;

//rcPp[20] = (((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[3]))) + ((sph1[3] + (-(sph2[3]))) * sph3[1])
resetMv tempmv67[1];
resetMv tempmv68[1];
setVector ve69 = {sph1[1],sph2[-1]};
dotVectors tempmv68[0] = <ve69>;
setMv tempmv67[0] = tempmv68[-0];
resetMv tempmv70[1];
setVector ve71 = {sph1[3],sph2[-3]};
dotVectors tempmv70[0] = <ve71>;
setVector ve72 = {sph1[1,-3],tempmv67[0],tempmv70[0]};
setVector ve73 = {sph2[3,1],sph3[3,1]};
dotVectors rcPp[20] = <ve72,ve73>;

//rcPp[21] = (((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[1])
resetMv tempmv74[1];
resetMv tempmv75[1];
setVector ve76 = {sph1[1],sph2[-1]};
dotVectors tempmv75[0] = <ve76>;
setMv tempmv74[0] = tempmv75[-0];
resetMv tempmv77[1];
setVector ve78 = {sph1[4],sph2[-4]};
dotVectors tempmv77[0] = <ve78>;
setVector ve79 = {sph1[1,-4],tempmv74[0],tempmv77[0]};
setVector ve80 = {sph2[4,1],sph3[4,1]};
dotVectors rcPp[21] = <ve79,ve80>;

//rcPp[22] = ((((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) * sph3[4]) + (-(((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) * sph3[3]))) + (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) * sph3[2])
resetMv tempmv81[1];
setVector ve82 = {sph1[2,-3]};
setVector ve83 = {sph2[3,2]};
dotVectors tempmv81[0] = <ve82,ve83>;
resetMv tempmv84[1];
resetMv tempmv85[1];
setVector ve86 = {sph1[2,-4]};
setVector ve87 = {sph2[4,2]};
dotVectors tempmv85[0] = <ve86,ve87>;
setMv tempmv84[0] = tempmv85[-0];
resetMv tempmv88[1];
setVector ve89 = {sph1[3,-4]};
setVector ve90 = {sph2[4,3]};
dotVectors tempmv88[0] = <ve89,ve90>;
setVector ve91 = {tempmv81[0],tempmv84[0],tempmv88[0]};
setVector ve92 = {sph3[4,3,2]};
dotVectors rcPp[22] = <ve91,ve92>;

//rcPp[23] = (((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) + (-((sph1[2] + (-(sph2[2]))) * sph3[3]))) + ((sph1[3] + (-(sph2[3]))) * sph3[2])
resetMv tempmv93[1];
resetMv tempmv94[1];
setVector ve95 = {sph1[2],sph2[-2]};
dotVectors tempmv94[0] = <ve95>;
setMv tempmv93[0] = tempmv94[-0];
resetMv tempmv96[1];
setVector ve97 = {sph1[3],sph2[-3]};
dotVectors tempmv96[0] = <ve97>;
setVector ve98 = {sph1[2,-3],tempmv93[0],tempmv96[0]};
setVector ve99 = {sph2[3,2],sph3[3,2]};
dotVectors rcPp[23] = <ve98,ve99>;

//rcPp[24] = (((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) + (-((sph1[2] + (-(sph2[2]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[2])
resetMv tempmv100[1];
resetMv tempmv101[1];
setVector ve102 = {sph1[2],sph2[-2]};
dotVectors tempmv101[0] = <ve102>;
setMv tempmv100[0] = tempmv101[-0];
resetMv tempmv103[1];
setVector ve104 = {sph1[4],sph2[-4]};
dotVectors tempmv103[0] = <ve104>;
setVector ve105 = {sph1[2,-4],tempmv100[0],tempmv103[0]};
setVector ve106 = {sph2[4,2],sph3[4,2]};
dotVectors rcPp[24] = <ve105,ve106>;

//rcPp[25] = (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) + (-((sph1[3] + (-(sph2[3]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[3])
resetMv tempmv107[1];
resetMv tempmv108[1];
setVector ve109 = {sph1[3],sph2[-3]};
dotVectors tempmv108[0] = <ve109>;
setMv tempmv107[0] = tempmv108[-0];
resetMv tempmv110[1];
setVector ve111 = {sph1[4],sph2[-4]};
dotVectors tempmv110[0] = <ve111>;
setVector ve112 = {sph1[3,-4],tempmv107[0],tempmv110[0]};
setVector ve113 = {sph2[4,3],sph3[4,3]};
dotVectors rcPp[25] = <ve112,ve113>;

//len[0] = sqrt(abs((((((((((-(rcPp[16] * rcPp[16])) + (rcPp[17] * rcPp[18])) + (rcPp[18] * rcPp[17])) + (rcPp[19] * rcPp[20])) + (rcPp[20] * rcPp[19])) + (rcPp[21] * rcPp[21])) + (rcPp[22] * rcPp[23])) + (rcPp[23] * rcPp[22])) + (rcPp[24] * rcPp[24])) + (rcPp[25] * rcPp[25])))
resetMv len[32];
resetMv tempmv114[1];
resetMv tempmv115[1];
setVector ve116 = {rcPp[-16,17,18,19,20,21,22,23,24,25]};
setVector ve117 = {rcPp[16,18,17,20,19,21,23,22,24,25]};
dotVectors tempmv115[0] = <ve116,ve117>;
resetMv tempmv118[1];
setMv tempmv118[0] = tempmv115[0];
calculateMvCoeff tempmv114[0] = ABS(tempmv118);
resetMv tempmv119[1];
setMv tempmv119[0] = tempmv114[0];
calculateMvCoeff len[0] = SQRT(tempmv119);

//rcPpDual[6] = -(rcPp[25])
resetMv rcPpDual[32];
setMv rcPpDual[6,7,8,9,10,11,12,13,14,15] = rcPp[-25,24,-22,23,-21,19,-20,-17,18,16];

//rcPpDual[7] = rcPp[24]

//rcPpDual[8] = -(rcPp[22])

//rcPpDual[9] = rcPp[23]

//rcPpDual[10] = -(rcPp[21])

//rcPpDual[11] = rcPp[19]

//rcPpDual[12] = -(rcPp[20])

//rcPpDual[13] = -(rcPp[17])

//rcPpDual[14] = rcPp[18]

//rcPpDual[15] = rcPp[16]

//nen[1] = rcPpDual[9]
resetMv nen[32];
setMv nen[1,2,3,4] = rcPpDual[9,12,14,15];

//nen[2] = rcPpDual[12]

//nen[3] = rcPpDual[14]

//nen[4] = rcPpDual[15]

//rc1[1] = (((len[0] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (rcPpDual[6] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[7] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(rcPpDual[9] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv rc1[32];
resetMv tempmv120[1];
resetMv tempmv121[1];
setVector ve122 = {nen[1,2,3]};
setVector ve123 = {nen[1,2,3]};
dotVectors tempmv121[0] = <ve122,ve123>;
resetMv tempmv124[1];
setMv tempmv124[0] = nen[1];
resetMv tempmv125[1];
setMv tempmv125[0] = tempmv121[0];
calculateMvCoeff tempmv120[0] = DIVISION(tempmv124,tempmv125);
resetMv tempmv126[1];
resetMv tempmv127[1];
setVector ve128 = {nen[1,2,3]};
setVector ve129 = {nen[1,2,3]};
dotVectors tempmv127[0] = <ve128,ve129>;
resetMv tempmv130[1];
setMv tempmv130[0] = nen[2];
resetMv tempmv131[1];
setMv tempmv131[0] = tempmv127[0];
calculateMvCoeff tempmv126[0] = DIVISION(tempmv130,tempmv131);
resetMv tempmv132[1];
resetMv tempmv133[1];
setVector ve134 = {nen[1,2,3]};
setVector ve135 = {nen[1,2,3]};
dotVectors tempmv133[0] = <ve134,ve135>;
resetMv tempmv136[1];
setMv tempmv136[0] = nen[3];
resetMv tempmv137[1];
setMv tempmv137[0] = tempmv133[0];
calculateMvCoeff tempmv132[0] = DIVISION(tempmv136,tempmv137);
resetMv tempmv138[1];
resetMv tempmv139[1];
setVector ve140 = {nen[1,2,3]};
setVector ve141 = {nen[1,2,3]};
dotVectors tempmv139[0] = <ve140,ve141>;
resetMv tempmv142[1];
setMv tempmv142[0] = nen[4];
resetMv tempmv143[1];
setMv tempmv143[0] = tempmv139[0];
calculateMvCoeff tempmv138[0] = DIVISION(tempmv142,tempmv143);
setVector ve144 = {len[0],rcPpDual[6,7,-9]};
setVector ve145 = {tempmv120[0],tempmv126[0],tempmv132[0],tempmv138[0]};
dotVectors rc1[1] = <ve144,ve145>;

//rc1[2] = (((len[0] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[6] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[10] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(rcPpDual[12] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv146[1];
resetMv tempmv147[1];
setVector ve148 = {nen[1,2,3]};
setVector ve149 = {nen[1,2,3]};
dotVectors tempmv147[0] = <ve148,ve149>;
resetMv tempmv150[1];
setMv tempmv150[0] = nen[2];
resetMv tempmv151[1];
setMv tempmv151[0] = tempmv147[0];
calculateMvCoeff tempmv146[0] = DIVISION(tempmv150,tempmv151);
resetMv tempmv152[1];
resetMv tempmv153[1];
setVector ve154 = {nen[1,2,3]};
setVector ve155 = {nen[1,2,3]};
dotVectors tempmv153[0] = <ve154,ve155>;
resetMv tempmv156[1];
setMv tempmv156[0] = nen[1];
resetMv tempmv157[1];
setMv tempmv157[0] = tempmv153[0];
calculateMvCoeff tempmv152[0] = DIVISION(tempmv156,tempmv157);
resetMv tempmv158[1];
resetMv tempmv159[1];
setVector ve160 = {nen[1,2,3]};
setVector ve161 = {nen[1,2,3]};
dotVectors tempmv159[0] = <ve160,ve161>;
resetMv tempmv162[1];
setMv tempmv162[0] = nen[3];
resetMv tempmv163[1];
setMv tempmv163[0] = tempmv159[0];
calculateMvCoeff tempmv158[0] = DIVISION(tempmv162,tempmv163);
resetMv tempmv164[1];
resetMv tempmv165[1];
setVector ve166 = {nen[1,2,3]};
setVector ve167 = {nen[1,2,3]};
dotVectors tempmv165[0] = <ve166,ve167>;
resetMv tempmv168[1];
setMv tempmv168[0] = nen[4];
resetMv tempmv169[1];
setMv tempmv169[0] = tempmv165[0];
calculateMvCoeff tempmv164[0] = DIVISION(tempmv168,tempmv169);
setVector ve170 = {len[0],rcPpDual[-6,10,-12]};
setVector ve171 = {tempmv146[0],tempmv152[0],tempmv158[0],tempmv164[0]};
dotVectors rc1[2] = <ve170,ve171>;

//rc1[3] = (((len[0] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[7] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[10] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[14] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv172[1];
resetMv tempmv173[1];
setVector ve174 = {nen[1,2,3]};
setVector ve175 = {nen[1,2,3]};
dotVectors tempmv173[0] = <ve174,ve175>;
resetMv tempmv176[1];
setMv tempmv176[0] = nen[3];
resetMv tempmv177[1];
setMv tempmv177[0] = tempmv173[0];
calculateMvCoeff tempmv172[0] = DIVISION(tempmv176,tempmv177);
resetMv tempmv178[1];
resetMv tempmv179[1];
setVector ve180 = {nen[1,2,3]};
setVector ve181 = {nen[1,2,3]};
dotVectors tempmv179[0] = <ve180,ve181>;
resetMv tempmv182[1];
setMv tempmv182[0] = nen[1];
resetMv tempmv183[1];
setMv tempmv183[0] = tempmv179[0];
calculateMvCoeff tempmv178[0] = DIVISION(tempmv182,tempmv183);
resetMv tempmv184[1];
resetMv tempmv185[1];
setVector ve186 = {nen[1,2,3]};
setVector ve187 = {nen[1,2,3]};
dotVectors tempmv185[0] = <ve186,ve187>;
resetMv tempmv188[1];
setMv tempmv188[0] = nen[2];
resetMv tempmv189[1];
setMv tempmv189[0] = tempmv185[0];
calculateMvCoeff tempmv184[0] = DIVISION(tempmv188,tempmv189);
resetMv tempmv190[1];
resetMv tempmv191[1];
setVector ve192 = {nen[1,2,3]};
setVector ve193 = {nen[1,2,3]};
dotVectors tempmv191[0] = <ve192,ve193>;
resetMv tempmv194[1];
setMv tempmv194[0] = nen[4];
resetMv tempmv195[1];
setMv tempmv195[0] = tempmv191[0];
calculateMvCoeff tempmv190[0] = DIVISION(tempmv194,tempmv195);
setVector ve196 = {len[0],rcPpDual[-7,-10,-14]};
setVector ve197 = {tempmv172[0],tempmv178[0],tempmv184[0],tempmv190[0]};
dotVectors rc1[3] = <ve196,ve197>;

//rc1[4] = ((((len[0] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[8] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[11] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[13] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[15] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv198[1];
resetMv tempmv199[1];
setVector ve200 = {nen[1,2,3]};
setVector ve201 = {nen[1,2,3]};
dotVectors tempmv199[0] = <ve200,ve201>;
resetMv tempmv202[1];
setMv tempmv202[0] = nen[4];
resetMv tempmv203[1];
setMv tempmv203[0] = tempmv199[0];
calculateMvCoeff tempmv198[0] = DIVISION(tempmv202,tempmv203);
resetMv tempmv204[1];
resetMv tempmv205[1];
setVector ve206 = {nen[1,2,3]};
setVector ve207 = {nen[1,2,3]};
dotVectors tempmv205[0] = <ve206,ve207>;
resetMv tempmv208[1];
setMv tempmv208[0] = nen[1];
resetMv tempmv209[1];
setMv tempmv209[0] = tempmv205[0];
calculateMvCoeff tempmv204[0] = DIVISION(tempmv208,tempmv209);
resetMv tempmv210[1];
resetMv tempmv211[1];
setVector ve212 = {nen[1,2,3]};
setVector ve213 = {nen[1,2,3]};
dotVectors tempmv211[0] = <ve212,ve213>;
resetMv tempmv214[1];
setMv tempmv214[0] = nen[2];
resetMv tempmv215[1];
setMv tempmv215[0] = tempmv211[0];
calculateMvCoeff tempmv210[0] = DIVISION(tempmv214,tempmv215);
resetMv tempmv216[1];
resetMv tempmv217[1];
setVector ve218 = {nen[1,2,3]};
setVector ve219 = {nen[1,2,3]};
dotVectors tempmv217[0] = <ve218,ve219>;
resetMv tempmv220[1];
setMv tempmv220[0] = nen[3];
resetMv tempmv221[1];
setMv tempmv221[0] = tempmv217[0];
calculateMvCoeff tempmv216[0] = DIVISION(tempmv220,tempmv221);
resetMv tempmv222[1];
resetMv tempmv223[1];
setVector ve224 = {nen[1,2,3]};
setVector ve225 = {nen[1,2,3]};
dotVectors tempmv223[0] = <ve224,ve225>;
resetMv tempmv226[1];
setMv tempmv226[0] = nen[4];
resetMv tempmv227[1];
setMv tempmv227[0] = tempmv223[0];
calculateMvCoeff tempmv222[0] = DIVISION(tempmv226,tempmv227);
setVector ve228 = {len[0],rcPpDual[-8,-11,-13,-15]};
setVector ve229 = {tempmv198[0],tempmv204[0],tempmv210[0],tempmv216[0],tempmv222[0]};
dotVectors rc1[4] = <ve228,ve229>;

//rc1[5] = ((-(rcPpDual[9] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(rcPpDual[12] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[14] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv230[1];
resetMv tempmv231[1];
setVector ve232 = {nen[1,2,3]};
setVector ve233 = {nen[1,2,3]};
dotVectors tempmv231[0] = <ve232,ve233>;
resetMv tempmv234[1];
setMv tempmv234[0] = nen[1];
resetMv tempmv235[1];
setMv tempmv235[0] = tempmv231[0];
calculateMvCoeff tempmv230[0] = DIVISION(tempmv234,tempmv235);
resetMv tempmv236[1];
resetMv tempmv237[1];
setVector ve238 = {nen[1,2,3]};
setVector ve239 = {nen[1,2,3]};
dotVectors tempmv237[0] = <ve238,ve239>;
resetMv tempmv240[1];
setMv tempmv240[0] = nen[2];
resetMv tempmv241[1];
setMv tempmv241[0] = tempmv237[0];
calculateMvCoeff tempmv236[0] = DIVISION(tempmv240,tempmv241);
resetMv tempmv242[1];
resetMv tempmv243[1];
setVector ve244 = {nen[1,2,3]};
setVector ve245 = {nen[1,2,3]};
dotVectors tempmv243[0] = <ve244,ve245>;
resetMv tempmv246[1];
setMv tempmv246[0] = nen[3];
resetMv tempmv247[1];
setMv tempmv247[0] = tempmv243[0];
calculateMvCoeff tempmv242[0] = DIVISION(tempmv246,tempmv247);
setVector ve248 = {rcPpDual[-9,-12,-14]};
setVector ve249 = {tempmv230[0],tempmv236[0],tempmv242[0]};
dotVectors rc1[5] = <ve248,ve249>;

//rc1[16] = ((rcPpDual[6] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[7] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[10] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv250[1];
resetMv tempmv251[1];
setVector ve252 = {nen[1,2,3]};
setVector ve253 = {nen[1,2,3]};
dotVectors tempmv251[0] = <ve252,ve253>;
resetMv tempmv254[1];
setMv tempmv254[0] = nen[3];
resetMv tempmv255[1];
setMv tempmv255[0] = tempmv251[0];
calculateMvCoeff tempmv250[0] = DIVISION(tempmv254,tempmv255);
resetMv tempmv256[1];
resetMv tempmv257[1];
setVector ve258 = {nen[1,2,3]};
setVector ve259 = {nen[1,2,3]};
dotVectors tempmv257[0] = <ve258,ve259>;
resetMv tempmv260[1];
setMv tempmv260[0] = nen[2];
resetMv tempmv261[1];
setMv tempmv261[0] = tempmv257[0];
calculateMvCoeff tempmv256[0] = DIVISION(tempmv260,tempmv261);
resetMv tempmv262[1];
resetMv tempmv263[1];
setVector ve264 = {nen[1,2,3]};
setVector ve265 = {nen[1,2,3]};
dotVectors tempmv263[0] = <ve264,ve265>;
resetMv tempmv266[1];
setMv tempmv266[0] = nen[1];
resetMv tempmv267[1];
setMv tempmv267[0] = tempmv263[0];
calculateMvCoeff tempmv262[0] = DIVISION(tempmv266,tempmv267);
setVector ve268 = {rcPpDual[6,-7,10]};
setVector ve269 = {tempmv250[0],tempmv256[0],tempmv262[0]};
dotVectors rc1[16] = <ve268,ve269>;

//rc1[17] = ((rcPpDual[6] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[8] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[11] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv270[1];
resetMv tempmv271[1];
setVector ve272 = {nen[1,2,3]};
setVector ve273 = {nen[1,2,3]};
dotVectors tempmv271[0] = <ve272,ve273>;
resetMv tempmv274[1];
setMv tempmv274[0] = nen[4];
resetMv tempmv275[1];
setMv tempmv275[0] = tempmv271[0];
calculateMvCoeff tempmv270[0] = DIVISION(tempmv274,tempmv275);
resetMv tempmv276[1];
resetMv tempmv277[1];
setVector ve278 = {nen[1,2,3]};
setVector ve279 = {nen[1,2,3]};
dotVectors tempmv277[0] = <ve278,ve279>;
resetMv tempmv280[1];
setMv tempmv280[0] = nen[2];
resetMv tempmv281[1];
setMv tempmv281[0] = tempmv277[0];
calculateMvCoeff tempmv276[0] = DIVISION(tempmv280,tempmv281);
resetMv tempmv282[1];
resetMv tempmv283[1];
setVector ve284 = {nen[1,2,3]};
setVector ve285 = {nen[1,2,3]};
dotVectors tempmv283[0] = <ve284,ve285>;
resetMv tempmv286[1];
setMv tempmv286[0] = nen[1];
resetMv tempmv287[1];
setMv tempmv287[0] = tempmv283[0];
calculateMvCoeff tempmv282[0] = DIVISION(tempmv286,tempmv287);
setVector ve288 = {rcPpDual[6,-8,11]};
setVector ve289 = {tempmv270[0],tempmv276[0],tempmv282[0]};
dotVectors rc1[17] = <ve288,ve289>;

//rc1[18] = (-(rcPpDual[9] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[12] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv290[1];
resetMv tempmv291[1];
setVector ve292 = {nen[1,2,3]};
setVector ve293 = {nen[1,2,3]};
dotVectors tempmv291[0] = <ve292,ve293>;
resetMv tempmv294[1];
setMv tempmv294[0] = nen[2];
resetMv tempmv295[1];
setMv tempmv295[0] = tempmv291[0];
calculateMvCoeff tempmv290[0] = DIVISION(tempmv294,tempmv295);
resetMv tempmv296[1];
resetMv tempmv297[1];
setVector ve298 = {nen[1,2,3]};
setVector ve299 = {nen[1,2,3]};
dotVectors tempmv297[0] = <ve298,ve299>;
resetMv tempmv300[1];
setMv tempmv300[0] = nen[1];
resetMv tempmv301[1];
setMv tempmv301[0] = tempmv297[0];
calculateMvCoeff tempmv296[0] = DIVISION(tempmv300,tempmv301);
setVector ve302 = {rcPpDual[-9,12]};
setVector ve303 = {tempmv290[0],tempmv296[0]};
dotVectors rc1[18] = <ve302,ve303>;

//rc1[19] = ((rcPpDual[7] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[8] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[13] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv304[1];
resetMv tempmv305[1];
setVector ve306 = {nen[1,2,3]};
setVector ve307 = {nen[1,2,3]};
dotVectors tempmv305[0] = <ve306,ve307>;
resetMv tempmv308[1];
setMv tempmv308[0] = nen[4];
resetMv tempmv309[1];
setMv tempmv309[0] = tempmv305[0];
calculateMvCoeff tempmv304[0] = DIVISION(tempmv308,tempmv309);
resetMv tempmv310[1];
resetMv tempmv311[1];
setVector ve312 = {nen[1,2,3]};
setVector ve313 = {nen[1,2,3]};
dotVectors tempmv311[0] = <ve312,ve313>;
resetMv tempmv314[1];
setMv tempmv314[0] = nen[3];
resetMv tempmv315[1];
setMv tempmv315[0] = tempmv311[0];
calculateMvCoeff tempmv310[0] = DIVISION(tempmv314,tempmv315);
resetMv tempmv316[1];
resetMv tempmv317[1];
setVector ve318 = {nen[1,2,3]};
setVector ve319 = {nen[1,2,3]};
dotVectors tempmv317[0] = <ve318,ve319>;
resetMv tempmv320[1];
setMv tempmv320[0] = nen[1];
resetMv tempmv321[1];
setMv tempmv321[0] = tempmv317[0];
calculateMvCoeff tempmv316[0] = DIVISION(tempmv320,tempmv321);
setVector ve322 = {rcPpDual[7,-8,13]};
setVector ve323 = {tempmv304[0],tempmv310[0],tempmv316[0]};
dotVectors rc1[19] = <ve322,ve323>;

//rc1[20] = (-(rcPpDual[9] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[14] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv324[1];
resetMv tempmv325[1];
setVector ve326 = {nen[1,2,3]};
setVector ve327 = {nen[1,2,3]};
dotVectors tempmv325[0] = <ve326,ve327>;
resetMv tempmv328[1];
setMv tempmv328[0] = nen[3];
resetMv tempmv329[1];
setMv tempmv329[0] = tempmv325[0];
calculateMvCoeff tempmv324[0] = DIVISION(tempmv328,tempmv329);
resetMv tempmv330[1];
resetMv tempmv331[1];
setVector ve332 = {nen[1,2,3]};
setVector ve333 = {nen[1,2,3]};
dotVectors tempmv331[0] = <ve332,ve333>;
resetMv tempmv334[1];
setMv tempmv334[0] = nen[1];
resetMv tempmv335[1];
setMv tempmv335[0] = tempmv331[0];
calculateMvCoeff tempmv330[0] = DIVISION(tempmv334,tempmv335);
setVector ve336 = {rcPpDual[-9,14]};
setVector ve337 = {tempmv324[0],tempmv330[0]};
dotVectors rc1[20] = <ve336,ve337>;

//rc1[21] = (-(rcPpDual[9] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[15] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv338[1];
resetMv tempmv339[1];
setVector ve340 = {nen[1,2,3]};
setVector ve341 = {nen[1,2,3]};
dotVectors tempmv339[0] = <ve340,ve341>;
resetMv tempmv342[1];
setMv tempmv342[0] = nen[4];
resetMv tempmv343[1];
setMv tempmv343[0] = tempmv339[0];
calculateMvCoeff tempmv338[0] = DIVISION(tempmv342,tempmv343);
resetMv tempmv344[1];
resetMv tempmv345[1];
setVector ve346 = {nen[1,2,3]};
setVector ve347 = {nen[1,2,3]};
dotVectors tempmv345[0] = <ve346,ve347>;
resetMv tempmv348[1];
setMv tempmv348[0] = nen[1];
resetMv tempmv349[1];
setMv tempmv349[0] = tempmv345[0];
calculateMvCoeff tempmv344[0] = DIVISION(tempmv348,tempmv349);
setVector ve350 = {rcPpDual[-9,15]};
setVector ve351 = {tempmv338[0],tempmv344[0]};
dotVectors rc1[21] = <ve350,ve351>;

//rc1[22] = ((rcPpDual[10] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[11] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[13] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv352[1];
resetMv tempmv353[1];
setVector ve354 = {nen[1,2,3]};
setVector ve355 = {nen[1,2,3]};
dotVectors tempmv353[0] = <ve354,ve355>;
resetMv tempmv356[1];
setMv tempmv356[0] = nen[4];
resetMv tempmv357[1];
setMv tempmv357[0] = tempmv353[0];
calculateMvCoeff tempmv352[0] = DIVISION(tempmv356,tempmv357);
resetMv tempmv358[1];
resetMv tempmv359[1];
setVector ve360 = {nen[1,2,3]};
setVector ve361 = {nen[1,2,3]};
dotVectors tempmv359[0] = <ve360,ve361>;
resetMv tempmv362[1];
setMv tempmv362[0] = nen[3];
resetMv tempmv363[1];
setMv tempmv363[0] = tempmv359[0];
calculateMvCoeff tempmv358[0] = DIVISION(tempmv362,tempmv363);
resetMv tempmv364[1];
resetMv tempmv365[1];
setVector ve366 = {nen[1,2,3]};
setVector ve367 = {nen[1,2,3]};
dotVectors tempmv365[0] = <ve366,ve367>;
resetMv tempmv368[1];
setMv tempmv368[0] = nen[2];
resetMv tempmv369[1];
setMv tempmv369[0] = tempmv365[0];
calculateMvCoeff tempmv364[0] = DIVISION(tempmv368,tempmv369);
setVector ve370 = {rcPpDual[10,-11,13]};
setVector ve371 = {tempmv352[0],tempmv358[0],tempmv364[0]};
dotVectors rc1[22] = <ve370,ve371>;

//rc1[23] = (-(rcPpDual[12] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[14] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv372[1];
resetMv tempmv373[1];
setVector ve374 = {nen[1,2,3]};
setVector ve375 = {nen[1,2,3]};
dotVectors tempmv373[0] = <ve374,ve375>;
resetMv tempmv376[1];
setMv tempmv376[0] = nen[3];
resetMv tempmv377[1];
setMv tempmv377[0] = tempmv373[0];
calculateMvCoeff tempmv372[0] = DIVISION(tempmv376,tempmv377);
resetMv tempmv378[1];
resetMv tempmv379[1];
setVector ve380 = {nen[1,2,3]};
setVector ve381 = {nen[1,2,3]};
dotVectors tempmv379[0] = <ve380,ve381>;
resetMv tempmv382[1];
setMv tempmv382[0] = nen[2];
resetMv tempmv383[1];
setMv tempmv383[0] = tempmv379[0];
calculateMvCoeff tempmv378[0] = DIVISION(tempmv382,tempmv383);
setVector ve384 = {rcPpDual[-12,14]};
setVector ve385 = {tempmv372[0],tempmv378[0]};
dotVectors rc1[23] = <ve384,ve385>;

//rc1[24] = (-(rcPpDual[12] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[15] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv386[1];
resetMv tempmv387[1];
setVector ve388 = {nen[1,2,3]};
setVector ve389 = {nen[1,2,3]};
dotVectors tempmv387[0] = <ve388,ve389>;
resetMv tempmv390[1];
setMv tempmv390[0] = nen[4];
resetMv tempmv391[1];
setMv tempmv391[0] = tempmv387[0];
calculateMvCoeff tempmv386[0] = DIVISION(tempmv390,tempmv391);
resetMv tempmv392[1];
resetMv tempmv393[1];
setVector ve394 = {nen[1,2,3]};
setVector ve395 = {nen[1,2,3]};
dotVectors tempmv393[0] = <ve394,ve395>;
resetMv tempmv396[1];
setMv tempmv396[0] = nen[2];
resetMv tempmv397[1];
setMv tempmv397[0] = tempmv393[0];
calculateMvCoeff tempmv392[0] = DIVISION(tempmv396,tempmv397);
setVector ve398 = {rcPpDual[-12,15]};
setVector ve399 = {tempmv386[0],tempmv392[0]};
dotVectors rc1[24] = <ve398,ve399>;

//rc1[25] = (-(rcPpDual[14] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[15] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv400[1];
resetMv tempmv401[1];
setVector ve402 = {nen[1,2,3]};
setVector ve403 = {nen[1,2,3]};
dotVectors tempmv401[0] = <ve402,ve403>;
resetMv tempmv404[1];
setMv tempmv404[0] = nen[4];
resetMv tempmv405[1];
setMv tempmv405[0] = tempmv401[0];
calculateMvCoeff tempmv400[0] = DIVISION(tempmv404,tempmv405);
resetMv tempmv406[1];
resetMv tempmv407[1];
setVector ve408 = {nen[1,2,3]};
setVector ve409 = {nen[1,2,3]};
dotVectors tempmv407[0] = <ve408,ve409>;
resetMv tempmv410[1];
setMv tempmv410[0] = nen[3];
resetMv tempmv411[1];
setMv tempmv411[0] = tempmv407[0];
calculateMvCoeff tempmv406[0] = DIVISION(tempmv410,tempmv411);
setVector ve412 = {rcPpDual[-14,15]};
setVector ve413 = {tempmv400[0],tempmv406[0]};
dotVectors rc1[25] = <ve412,ve413>;

//rc1N[1] = (((((((-(rc1[1])) * ((-(rc1[5])) / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))) + (-((-(rc1[2])) * (rc1[18] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[3])) * (rc1[20] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + ((-(rc1[5])) * (rc1[21] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (-((-(rc1[16])) * (rc1[23] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + ((-(rc1[18])) * (rc1[24] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + ((-(rc1[20])) * (rc1[25] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))
resetMv rc1N[32];
resetMv tempmv414[1];
resetMv tempmv415[1];
setVector ve416 = {rc1[-5,18,20,23]};
setVector ve417 = {rc1[-5,18,20,23]};
dotVectors tempmv415[0] = <ve416,ve417>;
resetMv tempmv418[1];
setMv tempmv418[0] = rc1[-5];
resetMv tempmv419[1];
setMv tempmv419[0] = tempmv415[0];
calculateMvCoeff tempmv414[0] = DIVISION(tempmv418,tempmv419);
resetMv tempmv420[1];
resetMv tempmv421[1];
setVector ve422 = {rc1[-5,18,20,23]};
setVector ve423 = {rc1[-5,18,20,23]};
dotVectors tempmv421[0] = <ve422,ve423>;
resetMv tempmv424[1];
setMv tempmv424[0] = rc1[18];
resetMv tempmv425[1];
setMv tempmv425[0] = tempmv421[0];
calculateMvCoeff tempmv420[0] = DIVISION(tempmv424,tempmv425);
resetMv tempmv426[1];
resetMv tempmv427[1];
setVector ve428 = {rc1[-5,18,20,23]};
setVector ve429 = {rc1[-5,18,20,23]};
dotVectors tempmv427[0] = <ve428,ve429>;
resetMv tempmv430[1];
setMv tempmv430[0] = rc1[20];
resetMv tempmv431[1];
setMv tempmv431[0] = tempmv427[0];
calculateMvCoeff tempmv426[0] = DIVISION(tempmv430,tempmv431);
resetMv tempmv432[1];
resetMv tempmv433[1];
setVector ve434 = {rc1[-5,18,20,23]};
setVector ve435 = {rc1[-5,18,20,23]};
dotVectors tempmv433[0] = <ve434,ve435>;
resetMv tempmv436[1];
setMv tempmv436[0] = rc1[21];
resetMv tempmv437[1];
setMv tempmv437[0] = tempmv433[0];
calculateMvCoeff tempmv432[0] = DIVISION(tempmv436,tempmv437);
resetMv tempmv438[1];
resetMv tempmv439[1];
setVector ve440 = {rc1[-5,18,20,23]};
setVector ve441 = {rc1[-5,18,20,23]};
dotVectors tempmv439[0] = <ve440,ve441>;
resetMv tempmv442[1];
setMv tempmv442[0] = rc1[23];
resetMv tempmv443[1];
setMv tempmv443[0] = tempmv439[0];
calculateMvCoeff tempmv438[0] = DIVISION(tempmv442,tempmv443);
resetMv tempmv444[1];
resetMv tempmv445[1];
setVector ve446 = {rc1[-5,18,20,23]};
setVector ve447 = {rc1[-5,18,20,23]};
dotVectors tempmv445[0] = <ve446,ve447>;
resetMv tempmv448[1];
setMv tempmv448[0] = rc1[24];
resetMv tempmv449[1];
setMv tempmv449[0] = tempmv445[0];
calculateMvCoeff tempmv444[0] = DIVISION(tempmv448,tempmv449);
resetMv tempmv450[1];
resetMv tempmv451[1];
setVector ve452 = {rc1[-5,18,20,23]};
setVector ve453 = {rc1[-5,18,20,23]};
dotVectors tempmv451[0] = <ve452,ve453>;
resetMv tempmv454[1];
setMv tempmv454[0] = rc1[25];
resetMv tempmv455[1];
setMv tempmv455[0] = tempmv451[0];
calculateMvCoeff tempmv450[0] = DIVISION(tempmv454,tempmv455);
setVector ve456 = {rc1[-1,2,3,-5,16,-18,-20]};
setVector ve457 = {tempmv414[0],tempmv420[0],tempmv426[0],tempmv432[0],tempmv438[0],tempmv444[0],tempmv450[0]};
dotVectors rc1N[1] = <ve456,ve457>;

//rc1N[2] = (((((((-(rc1[1])) * (rc1[18] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))) + ((-(rc1[2])) * ((-(rc1[5])) / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (-((-(rc1[3])) * (rc1[23] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + ((-(rc1[5])) * (rc1[24] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + ((-(rc1[16])) * (rc1[20] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (-((-(rc1[18])) * (rc1[21] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + ((-(rc1[23])) * (rc1[25] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))
resetMv tempmv458[1];
resetMv tempmv459[1];
setVector ve460 = {rc1[-5,18,20,23]};
setVector ve461 = {rc1[-5,18,20,23]};
dotVectors tempmv459[0] = <ve460,ve461>;
resetMv tempmv462[1];
setMv tempmv462[0] = rc1[18];
resetMv tempmv463[1];
setMv tempmv463[0] = tempmv459[0];
calculateMvCoeff tempmv458[0] = DIVISION(tempmv462,tempmv463);
resetMv tempmv464[1];
resetMv tempmv465[1];
setVector ve466 = {rc1[-5,18,20,23]};
setVector ve467 = {rc1[-5,18,20,23]};
dotVectors tempmv465[0] = <ve466,ve467>;
resetMv tempmv468[1];
setMv tempmv468[0] = rc1[-5];
resetMv tempmv469[1];
setMv tempmv469[0] = tempmv465[0];
calculateMvCoeff tempmv464[0] = DIVISION(tempmv468,tempmv469);
resetMv tempmv470[1];
resetMv tempmv471[1];
setVector ve472 = {rc1[-5,18,20,23]};
setVector ve473 = {rc1[-5,18,20,23]};
dotVectors tempmv471[0] = <ve472,ve473>;
resetMv tempmv474[1];
setMv tempmv474[0] = rc1[23];
resetMv tempmv475[1];
setMv tempmv475[0] = tempmv471[0];
calculateMvCoeff tempmv470[0] = DIVISION(tempmv474,tempmv475);
resetMv tempmv476[1];
resetMv tempmv477[1];
setVector ve478 = {rc1[-5,18,20,23]};
setVector ve479 = {rc1[-5,18,20,23]};
dotVectors tempmv477[0] = <ve478,ve479>;
resetMv tempmv480[1];
setMv tempmv480[0] = rc1[24];
resetMv tempmv481[1];
setMv tempmv481[0] = tempmv477[0];
calculateMvCoeff tempmv476[0] = DIVISION(tempmv480,tempmv481);
resetMv tempmv482[1];
resetMv tempmv483[1];
setVector ve484 = {rc1[-5,18,20,23]};
setVector ve485 = {rc1[-5,18,20,23]};
dotVectors tempmv483[0] = <ve484,ve485>;
resetMv tempmv486[1];
setMv tempmv486[0] = rc1[20];
resetMv tempmv487[1];
setMv tempmv487[0] = tempmv483[0];
calculateMvCoeff tempmv482[0] = DIVISION(tempmv486,tempmv487);
resetMv tempmv488[1];
resetMv tempmv489[1];
setVector ve490 = {rc1[-5,18,20,23]};
setVector ve491 = {rc1[-5,18,20,23]};
dotVectors tempmv489[0] = <ve490,ve491>;
resetMv tempmv492[1];
setMv tempmv492[0] = rc1[21];
resetMv tempmv493[1];
setMv tempmv493[0] = tempmv489[0];
calculateMvCoeff tempmv488[0] = DIVISION(tempmv492,tempmv493);
resetMv tempmv494[1];
resetMv tempmv495[1];
setVector ve496 = {rc1[-5,18,20,23]};
setVector ve497 = {rc1[-5,18,20,23]};
dotVectors tempmv495[0] = <ve496,ve497>;
resetMv tempmv498[1];
setMv tempmv498[0] = rc1[25];
resetMv tempmv499[1];
setMv tempmv499[0] = tempmv495[0];
calculateMvCoeff tempmv494[0] = DIVISION(tempmv498,tempmv499);
setVector ve500 = {rc1[-1,-2,3,-5,-16,18,-23]};
setVector ve501 = {tempmv458[0],tempmv464[0],tempmv470[0],tempmv476[0],tempmv482[0],tempmv488[0],tempmv494[0]};
dotVectors rc1N[2] = <ve500,ve501>;

//rc1N[3] = (((((((-(rc1[1])) * (rc1[20] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))) + ((-(rc1[2])) * (rc1[23] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + ((-(rc1[3])) * ((-(rc1[5])) / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + ((-(rc1[5])) * (rc1[25] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (-((-(rc1[16])) * (rc1[18] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[20])) * (rc1[21] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[23])) * (rc1[24] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))
resetMv tempmv502[1];
resetMv tempmv503[1];
setVector ve504 = {rc1[-5,18,20,23]};
setVector ve505 = {rc1[-5,18,20,23]};
dotVectors tempmv503[0] = <ve504,ve505>;
resetMv tempmv506[1];
setMv tempmv506[0] = rc1[20];
resetMv tempmv507[1];
setMv tempmv507[0] = tempmv503[0];
calculateMvCoeff tempmv502[0] = DIVISION(tempmv506,tempmv507);
resetMv tempmv508[1];
resetMv tempmv509[1];
setVector ve510 = {rc1[-5,18,20,23]};
setVector ve511 = {rc1[-5,18,20,23]};
dotVectors tempmv509[0] = <ve510,ve511>;
resetMv tempmv512[1];
setMv tempmv512[0] = rc1[23];
resetMv tempmv513[1];
setMv tempmv513[0] = tempmv509[0];
calculateMvCoeff tempmv508[0] = DIVISION(tempmv512,tempmv513);
resetMv tempmv514[1];
resetMv tempmv515[1];
setVector ve516 = {rc1[-5,18,20,23]};
setVector ve517 = {rc1[-5,18,20,23]};
dotVectors tempmv515[0] = <ve516,ve517>;
resetMv tempmv518[1];
setMv tempmv518[0] = rc1[-5];
resetMv tempmv519[1];
setMv tempmv519[0] = tempmv515[0];
calculateMvCoeff tempmv514[0] = DIVISION(tempmv518,tempmv519);
resetMv tempmv520[1];
resetMv tempmv521[1];
setVector ve522 = {rc1[-5,18,20,23]};
setVector ve523 = {rc1[-5,18,20,23]};
dotVectors tempmv521[0] = <ve522,ve523>;
resetMv tempmv524[1];
setMv tempmv524[0] = rc1[25];
resetMv tempmv525[1];
setMv tempmv525[0] = tempmv521[0];
calculateMvCoeff tempmv520[0] = DIVISION(tempmv524,tempmv525);
resetMv tempmv526[1];
resetMv tempmv527[1];
setVector ve528 = {rc1[-5,18,20,23]};
setVector ve529 = {rc1[-5,18,20,23]};
dotVectors tempmv527[0] = <ve528,ve529>;
resetMv tempmv530[1];
setMv tempmv530[0] = rc1[18];
resetMv tempmv531[1];
setMv tempmv531[0] = tempmv527[0];
calculateMvCoeff tempmv526[0] = DIVISION(tempmv530,tempmv531);
resetMv tempmv532[1];
resetMv tempmv533[1];
setVector ve534 = {rc1[-5,18,20,23]};
setVector ve535 = {rc1[-5,18,20,23]};
dotVectors tempmv533[0] = <ve534,ve535>;
resetMv tempmv536[1];
setMv tempmv536[0] = rc1[21];
resetMv tempmv537[1];
setMv tempmv537[0] = tempmv533[0];
calculateMvCoeff tempmv532[0] = DIVISION(tempmv536,tempmv537);
resetMv tempmv538[1];
resetMv tempmv539[1];
setVector ve540 = {rc1[-5,18,20,23]};
setVector ve541 = {rc1[-5,18,20,23]};
dotVectors tempmv539[0] = <ve540,ve541>;
resetMv tempmv542[1];
setMv tempmv542[0] = rc1[24];
resetMv tempmv543[1];
setMv tempmv543[0] = tempmv539[0];
calculateMvCoeff tempmv538[0] = DIVISION(tempmv542,tempmv543);
setVector ve544 = {rc1[-1,-2,-3,-5,16,20,23]};
setVector ve545 = {tempmv502[0],tempmv508[0],tempmv514[0],tempmv520[0],tempmv526[0],tempmv532[0],tempmv538[0]};
dotVectors rc1N[3] = <ve544,ve545>;

//rc1N[4] = ((((((((((-(rc1[1])) * (rc1[21] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))) + ((-(rc1[2])) * (rc1[24] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + ((-(rc1[3])) * (rc1[25] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + ((-(rc1[4])) * ((-(rc1[5])) / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (-((-(rc1[17])) * (rc1[18] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[19])) * (rc1[20] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[21])) * (rc1[21] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[22])) * (rc1[23] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[24])) * (rc1[24] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[25])) * (rc1[25] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))
resetMv tempmv546[1];
resetMv tempmv547[1];
setVector ve548 = {rc1[-5,18,20,23]};
setVector ve549 = {rc1[-5,18,20,23]};
dotVectors tempmv547[0] = <ve548,ve549>;
resetMv tempmv550[1];
setMv tempmv550[0] = rc1[21];
resetMv tempmv551[1];
setMv tempmv551[0] = tempmv547[0];
calculateMvCoeff tempmv546[0] = DIVISION(tempmv550,tempmv551);
resetMv tempmv552[1];
resetMv tempmv553[1];
setVector ve554 = {rc1[-5,18,20,23]};
setVector ve555 = {rc1[-5,18,20,23]};
dotVectors tempmv553[0] = <ve554,ve555>;
resetMv tempmv556[1];
setMv tempmv556[0] = rc1[24];
resetMv tempmv557[1];
setMv tempmv557[0] = tempmv553[0];
calculateMvCoeff tempmv552[0] = DIVISION(tempmv556,tempmv557);
resetMv tempmv558[1];
resetMv tempmv559[1];
setVector ve560 = {rc1[-5,18,20,23]};
setVector ve561 = {rc1[-5,18,20,23]};
dotVectors tempmv559[0] = <ve560,ve561>;
resetMv tempmv562[1];
setMv tempmv562[0] = rc1[25];
resetMv tempmv563[1];
setMv tempmv563[0] = tempmv559[0];
calculateMvCoeff tempmv558[0] = DIVISION(tempmv562,tempmv563);
resetMv tempmv564[1];
resetMv tempmv565[1];
setVector ve566 = {rc1[-5,18,20,23]};
setVector ve567 = {rc1[-5,18,20,23]};
dotVectors tempmv565[0] = <ve566,ve567>;
resetMv tempmv568[1];
setMv tempmv568[0] = rc1[-5];
resetMv tempmv569[1];
setMv tempmv569[0] = tempmv565[0];
calculateMvCoeff tempmv564[0] = DIVISION(tempmv568,tempmv569);
resetMv tempmv570[1];
resetMv tempmv571[1];
setVector ve572 = {rc1[-5,18,20,23]};
setVector ve573 = {rc1[-5,18,20,23]};
dotVectors tempmv571[0] = <ve572,ve573>;
resetMv tempmv574[1];
setMv tempmv574[0] = rc1[18];
resetMv tempmv575[1];
setMv tempmv575[0] = tempmv571[0];
calculateMvCoeff tempmv570[0] = DIVISION(tempmv574,tempmv575);
resetMv tempmv576[1];
resetMv tempmv577[1];
setVector ve578 = {rc1[-5,18,20,23]};
setVector ve579 = {rc1[-5,18,20,23]};
dotVectors tempmv577[0] = <ve578,ve579>;
resetMv tempmv580[1];
setMv tempmv580[0] = rc1[20];
resetMv tempmv581[1];
setMv tempmv581[0] = tempmv577[0];
calculateMvCoeff tempmv576[0] = DIVISION(tempmv580,tempmv581);
resetMv tempmv582[1];
resetMv tempmv583[1];
setVector ve584 = {rc1[-5,18,20,23]};
setVector ve585 = {rc1[-5,18,20,23]};
dotVectors tempmv583[0] = <ve584,ve585>;
resetMv tempmv586[1];
setMv tempmv586[0] = rc1[21];
resetMv tempmv587[1];
setMv tempmv587[0] = tempmv583[0];
calculateMvCoeff tempmv582[0] = DIVISION(tempmv586,tempmv587);
resetMv tempmv588[1];
resetMv tempmv589[1];
setVector ve590 = {rc1[-5,18,20,23]};
setVector ve591 = {rc1[-5,18,20,23]};
dotVectors tempmv589[0] = <ve590,ve591>;
resetMv tempmv592[1];
setMv tempmv592[0] = rc1[23];
resetMv tempmv593[1];
setMv tempmv593[0] = tempmv589[0];
calculateMvCoeff tempmv588[0] = DIVISION(tempmv592,tempmv593);
resetMv tempmv594[1];
resetMv tempmv595[1];
setVector ve596 = {rc1[-5,18,20,23]};
setVector ve597 = {rc1[-5,18,20,23]};
dotVectors tempmv595[0] = <ve596,ve597>;
resetMv tempmv598[1];
setMv tempmv598[0] = rc1[24];
resetMv tempmv599[1];
setMv tempmv599[0] = tempmv595[0];
calculateMvCoeff tempmv594[0] = DIVISION(tempmv598,tempmv599);
resetMv tempmv600[1];
resetMv tempmv601[1];
setVector ve602 = {rc1[-5,18,20,23]};
setVector ve603 = {rc1[-5,18,20,23]};
dotVectors tempmv601[0] = <ve602,ve603>;
resetMv tempmv604[1];
setMv tempmv604[0] = rc1[25];
resetMv tempmv605[1];
setMv tempmv605[0] = tempmv601[0];
calculateMvCoeff tempmv600[0] = DIVISION(tempmv604,tempmv605);
setVector ve606 = {rc1[-1,-2,-3,-4,17,19,21,22,24,25]};
setVector ve607 = {tempmv546[0],tempmv552[0],tempmv558[0],tempmv564[0],tempmv570[0],tempmv576[0],tempmv582[0],tempmv588[0],tempmv594[0],tempmv600[0]};
dotVectors rc1N[4] = <ve606,ve607>;

//rc1N[5] = ((((-(rc1[5])) * ((-(rc1[5])) / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))) + (-((-(rc1[18])) * (rc1[18] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[20])) * (rc1[20] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[23])) * (rc1[23] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))
resetMv tempmv608[1];
resetMv tempmv609[1];
setVector ve610 = {rc1[-5,18,20,23]};
setVector ve611 = {rc1[-5,18,20,23]};
dotVectors tempmv609[0] = <ve610,ve611>;
resetMv tempmv612[1];
setMv tempmv612[0] = rc1[-5];
resetMv tempmv613[1];
setMv tempmv613[0] = tempmv609[0];
calculateMvCoeff tempmv608[0] = DIVISION(tempmv612,tempmv613);
resetMv tempmv614[1];
resetMv tempmv615[1];
setVector ve616 = {rc1[-5,18,20,23]};
setVector ve617 = {rc1[-5,18,20,23]};
dotVectors tempmv615[0] = <ve616,ve617>;
resetMv tempmv618[1];
setMv tempmv618[0] = rc1[18];
resetMv tempmv619[1];
setMv tempmv619[0] = tempmv615[0];
calculateMvCoeff tempmv614[0] = DIVISION(tempmv618,tempmv619);
resetMv tempmv620[1];
resetMv tempmv621[1];
setVector ve622 = {rc1[-5,18,20,23]};
setVector ve623 = {rc1[-5,18,20,23]};
dotVectors tempmv621[0] = <ve622,ve623>;
resetMv tempmv624[1];
setMv tempmv624[0] = rc1[20];
resetMv tempmv625[1];
setMv tempmv625[0] = tempmv621[0];
calculateMvCoeff tempmv620[0] = DIVISION(tempmv624,tempmv625);
resetMv tempmv626[1];
resetMv tempmv627[1];
setVector ve628 = {rc1[-5,18,20,23]};
setVector ve629 = {rc1[-5,18,20,23]};
dotVectors tempmv627[0] = <ve628,ve629>;
resetMv tempmv630[1];
setMv tempmv630[0] = rc1[23];
resetMv tempmv631[1];
setMv tempmv631[0] = tempmv627[0];
calculateMvCoeff tempmv626[0] = DIVISION(tempmv630,tempmv631);
setVector ve632 = {rc1[-5,18,20,23]};
setVector ve633 = {tempmv608[0],tempmv614[0],tempmv620[0],tempmv626[0]};
dotVectors rc1N[5] = <ve632,ve633>;

//rc2[1] = ((((-(len[0])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (rcPpDual[6] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[7] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(rcPpDual[9] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv rc2[32];
resetMv tempmv634[1];
resetMv tempmv635[1];
setVector ve636 = {nen[1,2,3]};
setVector ve637 = {nen[1,2,3]};
dotVectors tempmv635[0] = <ve636,ve637>;
resetMv tempmv638[1];
setMv tempmv638[0] = nen[1];
resetMv tempmv639[1];
setMv tempmv639[0] = tempmv635[0];
calculateMvCoeff tempmv634[0] = DIVISION(tempmv638,tempmv639);
resetMv tempmv640[1];
resetMv tempmv641[1];
setVector ve642 = {nen[1,2,3]};
setVector ve643 = {nen[1,2,3]};
dotVectors tempmv641[0] = <ve642,ve643>;
resetMv tempmv644[1];
setMv tempmv644[0] = nen[2];
resetMv tempmv645[1];
setMv tempmv645[0] = tempmv641[0];
calculateMvCoeff tempmv640[0] = DIVISION(tempmv644,tempmv645);
resetMv tempmv646[1];
resetMv tempmv647[1];
setVector ve648 = {nen[1,2,3]};
setVector ve649 = {nen[1,2,3]};
dotVectors tempmv647[0] = <ve648,ve649>;
resetMv tempmv650[1];
setMv tempmv650[0] = nen[3];
resetMv tempmv651[1];
setMv tempmv651[0] = tempmv647[0];
calculateMvCoeff tempmv646[0] = DIVISION(tempmv650,tempmv651);
resetMv tempmv652[1];
resetMv tempmv653[1];
setVector ve654 = {nen[1,2,3]};
setVector ve655 = {nen[1,2,3]};
dotVectors tempmv653[0] = <ve654,ve655>;
resetMv tempmv656[1];
setMv tempmv656[0] = nen[4];
resetMv tempmv657[1];
setMv tempmv657[0] = tempmv653[0];
calculateMvCoeff tempmv652[0] = DIVISION(tempmv656,tempmv657);
setVector ve658 = {len[-0],rcPpDual[6,7,-9]};
setVector ve659 = {tempmv634[0],tempmv640[0],tempmv646[0],tempmv652[0]};
dotVectors rc2[1] = <ve658,ve659>;

//rc2[2] = ((((-(len[0])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[6] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[10] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(rcPpDual[12] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv660[1];
resetMv tempmv661[1];
setVector ve662 = {nen[1,2,3]};
setVector ve663 = {nen[1,2,3]};
dotVectors tempmv661[0] = <ve662,ve663>;
resetMv tempmv664[1];
setMv tempmv664[0] = nen[2];
resetMv tempmv665[1];
setMv tempmv665[0] = tempmv661[0];
calculateMvCoeff tempmv660[0] = DIVISION(tempmv664,tempmv665);
resetMv tempmv666[1];
resetMv tempmv667[1];
setVector ve668 = {nen[1,2,3]};
setVector ve669 = {nen[1,2,3]};
dotVectors tempmv667[0] = <ve668,ve669>;
resetMv tempmv670[1];
setMv tempmv670[0] = nen[1];
resetMv tempmv671[1];
setMv tempmv671[0] = tempmv667[0];
calculateMvCoeff tempmv666[0] = DIVISION(tempmv670,tempmv671);
resetMv tempmv672[1];
resetMv tempmv673[1];
setVector ve674 = {nen[1,2,3]};
setVector ve675 = {nen[1,2,3]};
dotVectors tempmv673[0] = <ve674,ve675>;
resetMv tempmv676[1];
setMv tempmv676[0] = nen[3];
resetMv tempmv677[1];
setMv tempmv677[0] = tempmv673[0];
calculateMvCoeff tempmv672[0] = DIVISION(tempmv676,tempmv677);
resetMv tempmv678[1];
resetMv tempmv679[1];
setVector ve680 = {nen[1,2,3]};
setVector ve681 = {nen[1,2,3]};
dotVectors tempmv679[0] = <ve680,ve681>;
resetMv tempmv682[1];
setMv tempmv682[0] = nen[4];
resetMv tempmv683[1];
setMv tempmv683[0] = tempmv679[0];
calculateMvCoeff tempmv678[0] = DIVISION(tempmv682,tempmv683);
setVector ve684 = {len[-0],rcPpDual[-6,10,-12]};
setVector ve685 = {tempmv660[0],tempmv666[0],tempmv672[0],tempmv678[0]};
dotVectors rc2[2] = <ve684,ve685>;

//rc2[3] = ((((-(len[0])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[7] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[10] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[14] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv686[1];
resetMv tempmv687[1];
setVector ve688 = {nen[1,2,3]};
setVector ve689 = {nen[1,2,3]};
dotVectors tempmv687[0] = <ve688,ve689>;
resetMv tempmv690[1];
setMv tempmv690[0] = nen[3];
resetMv tempmv691[1];
setMv tempmv691[0] = tempmv687[0];
calculateMvCoeff tempmv686[0] = DIVISION(tempmv690,tempmv691);
resetMv tempmv692[1];
resetMv tempmv693[1];
setVector ve694 = {nen[1,2,3]};
setVector ve695 = {nen[1,2,3]};
dotVectors tempmv693[0] = <ve694,ve695>;
resetMv tempmv696[1];
setMv tempmv696[0] = nen[1];
resetMv tempmv697[1];
setMv tempmv697[0] = tempmv693[0];
calculateMvCoeff tempmv692[0] = DIVISION(tempmv696,tempmv697);
resetMv tempmv698[1];
resetMv tempmv699[1];
setVector ve700 = {nen[1,2,3]};
setVector ve701 = {nen[1,2,3]};
dotVectors tempmv699[0] = <ve700,ve701>;
resetMv tempmv702[1];
setMv tempmv702[0] = nen[2];
resetMv tempmv703[1];
setMv tempmv703[0] = tempmv699[0];
calculateMvCoeff tempmv698[0] = DIVISION(tempmv702,tempmv703);
resetMv tempmv704[1];
resetMv tempmv705[1];
setVector ve706 = {nen[1,2,3]};
setVector ve707 = {nen[1,2,3]};
dotVectors tempmv705[0] = <ve706,ve707>;
resetMv tempmv708[1];
setMv tempmv708[0] = nen[4];
resetMv tempmv709[1];
setMv tempmv709[0] = tempmv705[0];
calculateMvCoeff tempmv704[0] = DIVISION(tempmv708,tempmv709);
setVector ve710 = {len[-0],rcPpDual[-7,-10,-14]};
setVector ve711 = {tempmv686[0],tempmv692[0],tempmv698[0],tempmv704[0]};
dotVectors rc2[3] = <ve710,ve711>;

//rc2[4] = (((((-(len[0])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[8] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[11] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[13] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[15] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv712[1];
resetMv tempmv713[1];
setVector ve714 = {nen[1,2,3]};
setVector ve715 = {nen[1,2,3]};
dotVectors tempmv713[0] = <ve714,ve715>;
resetMv tempmv716[1];
setMv tempmv716[0] = nen[4];
resetMv tempmv717[1];
setMv tempmv717[0] = tempmv713[0];
calculateMvCoeff tempmv712[0] = DIVISION(tempmv716,tempmv717);
resetMv tempmv718[1];
resetMv tempmv719[1];
setVector ve720 = {nen[1,2,3]};
setVector ve721 = {nen[1,2,3]};
dotVectors tempmv719[0] = <ve720,ve721>;
resetMv tempmv722[1];
setMv tempmv722[0] = nen[1];
resetMv tempmv723[1];
setMv tempmv723[0] = tempmv719[0];
calculateMvCoeff tempmv718[0] = DIVISION(tempmv722,tempmv723);
resetMv tempmv724[1];
resetMv tempmv725[1];
setVector ve726 = {nen[1,2,3]};
setVector ve727 = {nen[1,2,3]};
dotVectors tempmv725[0] = <ve726,ve727>;
resetMv tempmv728[1];
setMv tempmv728[0] = nen[2];
resetMv tempmv729[1];
setMv tempmv729[0] = tempmv725[0];
calculateMvCoeff tempmv724[0] = DIVISION(tempmv728,tempmv729);
resetMv tempmv730[1];
resetMv tempmv731[1];
setVector ve732 = {nen[1,2,3]};
setVector ve733 = {nen[1,2,3]};
dotVectors tempmv731[0] = <ve732,ve733>;
resetMv tempmv734[1];
setMv tempmv734[0] = nen[3];
resetMv tempmv735[1];
setMv tempmv735[0] = tempmv731[0];
calculateMvCoeff tempmv730[0] = DIVISION(tempmv734,tempmv735);
resetMv tempmv736[1];
resetMv tempmv737[1];
setVector ve738 = {nen[1,2,3]};
setVector ve739 = {nen[1,2,3]};
dotVectors tempmv737[0] = <ve738,ve739>;
resetMv tempmv740[1];
setMv tempmv740[0] = nen[4];
resetMv tempmv741[1];
setMv tempmv741[0] = tempmv737[0];
calculateMvCoeff tempmv736[0] = DIVISION(tempmv740,tempmv741);
setVector ve742 = {len[-0],rcPpDual[-8,-11,-13,-15]};
setVector ve743 = {tempmv712[0],tempmv718[0],tempmv724[0],tempmv730[0],tempmv736[0]};
dotVectors rc2[4] = <ve742,ve743>;

//rc2[5] = ((-(rcPpDual[9] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(rcPpDual[12] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[14] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv744[1];
resetMv tempmv745[1];
setVector ve746 = {nen[1,2,3]};
setVector ve747 = {nen[1,2,3]};
dotVectors tempmv745[0] = <ve746,ve747>;
resetMv tempmv748[1];
setMv tempmv748[0] = nen[1];
resetMv tempmv749[1];
setMv tempmv749[0] = tempmv745[0];
calculateMvCoeff tempmv744[0] = DIVISION(tempmv748,tempmv749);
resetMv tempmv750[1];
resetMv tempmv751[1];
setVector ve752 = {nen[1,2,3]};
setVector ve753 = {nen[1,2,3]};
dotVectors tempmv751[0] = <ve752,ve753>;
resetMv tempmv754[1];
setMv tempmv754[0] = nen[2];
resetMv tempmv755[1];
setMv tempmv755[0] = tempmv751[0];
calculateMvCoeff tempmv750[0] = DIVISION(tempmv754,tempmv755);
resetMv tempmv756[1];
resetMv tempmv757[1];
setVector ve758 = {nen[1,2,3]};
setVector ve759 = {nen[1,2,3]};
dotVectors tempmv757[0] = <ve758,ve759>;
resetMv tempmv760[1];
setMv tempmv760[0] = nen[3];
resetMv tempmv761[1];
setMv tempmv761[0] = tempmv757[0];
calculateMvCoeff tempmv756[0] = DIVISION(tempmv760,tempmv761);
setVector ve762 = {rcPpDual[-9,-12,-14]};
setVector ve763 = {tempmv744[0],tempmv750[0],tempmv756[0]};
dotVectors rc2[5] = <ve762,ve763>;

//rc2[16] = ((rcPpDual[6] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[7] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[10] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv764[1];
resetMv tempmv765[1];
setVector ve766 = {nen[1,2,3]};
setVector ve767 = {nen[1,2,3]};
dotVectors tempmv765[0] = <ve766,ve767>;
resetMv tempmv768[1];
setMv tempmv768[0] = nen[3];
resetMv tempmv769[1];
setMv tempmv769[0] = tempmv765[0];
calculateMvCoeff tempmv764[0] = DIVISION(tempmv768,tempmv769);
resetMv tempmv770[1];
resetMv tempmv771[1];
setVector ve772 = {nen[1,2,3]};
setVector ve773 = {nen[1,2,3]};
dotVectors tempmv771[0] = <ve772,ve773>;
resetMv tempmv774[1];
setMv tempmv774[0] = nen[2];
resetMv tempmv775[1];
setMv tempmv775[0] = tempmv771[0];
calculateMvCoeff tempmv770[0] = DIVISION(tempmv774,tempmv775);
resetMv tempmv776[1];
resetMv tempmv777[1];
setVector ve778 = {nen[1,2,3]};
setVector ve779 = {nen[1,2,3]};
dotVectors tempmv777[0] = <ve778,ve779>;
resetMv tempmv780[1];
setMv tempmv780[0] = nen[1];
resetMv tempmv781[1];
setMv tempmv781[0] = tempmv777[0];
calculateMvCoeff tempmv776[0] = DIVISION(tempmv780,tempmv781);
setVector ve782 = {rcPpDual[6,-7,10]};
setVector ve783 = {tempmv764[0],tempmv770[0],tempmv776[0]};
dotVectors rc2[16] = <ve782,ve783>;

//rc2[17] = ((rcPpDual[6] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[8] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[11] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv784[1];
resetMv tempmv785[1];
setVector ve786 = {nen[1,2,3]};
setVector ve787 = {nen[1,2,3]};
dotVectors tempmv785[0] = <ve786,ve787>;
resetMv tempmv788[1];
setMv tempmv788[0] = nen[4];
resetMv tempmv789[1];
setMv tempmv789[0] = tempmv785[0];
calculateMvCoeff tempmv784[0] = DIVISION(tempmv788,tempmv789);
resetMv tempmv790[1];
resetMv tempmv791[1];
setVector ve792 = {nen[1,2,3]};
setVector ve793 = {nen[1,2,3]};
dotVectors tempmv791[0] = <ve792,ve793>;
resetMv tempmv794[1];
setMv tempmv794[0] = nen[2];
resetMv tempmv795[1];
setMv tempmv795[0] = tempmv791[0];
calculateMvCoeff tempmv790[0] = DIVISION(tempmv794,tempmv795);
resetMv tempmv796[1];
resetMv tempmv797[1];
setVector ve798 = {nen[1,2,3]};
setVector ve799 = {nen[1,2,3]};
dotVectors tempmv797[0] = <ve798,ve799>;
resetMv tempmv800[1];
setMv tempmv800[0] = nen[1];
resetMv tempmv801[1];
setMv tempmv801[0] = tempmv797[0];
calculateMvCoeff tempmv796[0] = DIVISION(tempmv800,tempmv801);
setVector ve802 = {rcPpDual[6,-8,11]};
setVector ve803 = {tempmv784[0],tempmv790[0],tempmv796[0]};
dotVectors rc2[17] = <ve802,ve803>;

//rc2[18] = (-(rcPpDual[9] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[12] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv804[1];
resetMv tempmv805[1];
setVector ve806 = {nen[1,2,3]};
setVector ve807 = {nen[1,2,3]};
dotVectors tempmv805[0] = <ve806,ve807>;
resetMv tempmv808[1];
setMv tempmv808[0] = nen[2];
resetMv tempmv809[1];
setMv tempmv809[0] = tempmv805[0];
calculateMvCoeff tempmv804[0] = DIVISION(tempmv808,tempmv809);
resetMv tempmv810[1];
resetMv tempmv811[1];
setVector ve812 = {nen[1,2,3]};
setVector ve813 = {nen[1,2,3]};
dotVectors tempmv811[0] = <ve812,ve813>;
resetMv tempmv814[1];
setMv tempmv814[0] = nen[1];
resetMv tempmv815[1];
setMv tempmv815[0] = tempmv811[0];
calculateMvCoeff tempmv810[0] = DIVISION(tempmv814,tempmv815);
setVector ve816 = {rcPpDual[-9,12]};
setVector ve817 = {tempmv804[0],tempmv810[0]};
dotVectors rc2[18] = <ve816,ve817>;

//rc2[19] = ((rcPpDual[7] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[8] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[13] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv818[1];
resetMv tempmv819[1];
setVector ve820 = {nen[1,2,3]};
setVector ve821 = {nen[1,2,3]};
dotVectors tempmv819[0] = <ve820,ve821>;
resetMv tempmv822[1];
setMv tempmv822[0] = nen[4];
resetMv tempmv823[1];
setMv tempmv823[0] = tempmv819[0];
calculateMvCoeff tempmv818[0] = DIVISION(tempmv822,tempmv823);
resetMv tempmv824[1];
resetMv tempmv825[1];
setVector ve826 = {nen[1,2,3]};
setVector ve827 = {nen[1,2,3]};
dotVectors tempmv825[0] = <ve826,ve827>;
resetMv tempmv828[1];
setMv tempmv828[0] = nen[3];
resetMv tempmv829[1];
setMv tempmv829[0] = tempmv825[0];
calculateMvCoeff tempmv824[0] = DIVISION(tempmv828,tempmv829);
resetMv tempmv830[1];
resetMv tempmv831[1];
setVector ve832 = {nen[1,2,3]};
setVector ve833 = {nen[1,2,3]};
dotVectors tempmv831[0] = <ve832,ve833>;
resetMv tempmv834[1];
setMv tempmv834[0] = nen[1];
resetMv tempmv835[1];
setMv tempmv835[0] = tempmv831[0];
calculateMvCoeff tempmv830[0] = DIVISION(tempmv834,tempmv835);
setVector ve836 = {rcPpDual[7,-8,13]};
setVector ve837 = {tempmv818[0],tempmv824[0],tempmv830[0]};
dotVectors rc2[19] = <ve836,ve837>;

//rc2[20] = (-(rcPpDual[9] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[14] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv838[1];
resetMv tempmv839[1];
setVector ve840 = {nen[1,2,3]};
setVector ve841 = {nen[1,2,3]};
dotVectors tempmv839[0] = <ve840,ve841>;
resetMv tempmv842[1];
setMv tempmv842[0] = nen[3];
resetMv tempmv843[1];
setMv tempmv843[0] = tempmv839[0];
calculateMvCoeff tempmv838[0] = DIVISION(tempmv842,tempmv843);
resetMv tempmv844[1];
resetMv tempmv845[1];
setVector ve846 = {nen[1,2,3]};
setVector ve847 = {nen[1,2,3]};
dotVectors tempmv845[0] = <ve846,ve847>;
resetMv tempmv848[1];
setMv tempmv848[0] = nen[1];
resetMv tempmv849[1];
setMv tempmv849[0] = tempmv845[0];
calculateMvCoeff tempmv844[0] = DIVISION(tempmv848,tempmv849);
setVector ve850 = {rcPpDual[-9,14]};
setVector ve851 = {tempmv838[0],tempmv844[0]};
dotVectors rc2[20] = <ve850,ve851>;

//rc2[21] = (-(rcPpDual[9] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[15] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv852[1];
resetMv tempmv853[1];
setVector ve854 = {nen[1,2,3]};
setVector ve855 = {nen[1,2,3]};
dotVectors tempmv853[0] = <ve854,ve855>;
resetMv tempmv856[1];
setMv tempmv856[0] = nen[4];
resetMv tempmv857[1];
setMv tempmv857[0] = tempmv853[0];
calculateMvCoeff tempmv852[0] = DIVISION(tempmv856,tempmv857);
resetMv tempmv858[1];
resetMv tempmv859[1];
setVector ve860 = {nen[1,2,3]};
setVector ve861 = {nen[1,2,3]};
dotVectors tempmv859[0] = <ve860,ve861>;
resetMv tempmv862[1];
setMv tempmv862[0] = nen[1];
resetMv tempmv863[1];
setMv tempmv863[0] = tempmv859[0];
calculateMvCoeff tempmv858[0] = DIVISION(tempmv862,tempmv863);
setVector ve864 = {rcPpDual[-9,15]};
setVector ve865 = {tempmv852[0],tempmv858[0]};
dotVectors rc2[21] = <ve864,ve865>;

//rc2[22] = ((rcPpDual[10] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[11] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[13] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv866[1];
resetMv tempmv867[1];
setVector ve868 = {nen[1,2,3]};
setVector ve869 = {nen[1,2,3]};
dotVectors tempmv867[0] = <ve868,ve869>;
resetMv tempmv870[1];
setMv tempmv870[0] = nen[4];
resetMv tempmv871[1];
setMv tempmv871[0] = tempmv867[0];
calculateMvCoeff tempmv866[0] = DIVISION(tempmv870,tempmv871);
resetMv tempmv872[1];
resetMv tempmv873[1];
setVector ve874 = {nen[1,2,3]};
setVector ve875 = {nen[1,2,3]};
dotVectors tempmv873[0] = <ve874,ve875>;
resetMv tempmv876[1];
setMv tempmv876[0] = nen[3];
resetMv tempmv877[1];
setMv tempmv877[0] = tempmv873[0];
calculateMvCoeff tempmv872[0] = DIVISION(tempmv876,tempmv877);
resetMv tempmv878[1];
resetMv tempmv879[1];
setVector ve880 = {nen[1,2,3]};
setVector ve881 = {nen[1,2,3]};
dotVectors tempmv879[0] = <ve880,ve881>;
resetMv tempmv882[1];
setMv tempmv882[0] = nen[2];
resetMv tempmv883[1];
setMv tempmv883[0] = tempmv879[0];
calculateMvCoeff tempmv878[0] = DIVISION(tempmv882,tempmv883);
setVector ve884 = {rcPpDual[10,-11,13]};
setVector ve885 = {tempmv866[0],tempmv872[0],tempmv878[0]};
dotVectors rc2[22] = <ve884,ve885>;

//rc2[23] = (-(rcPpDual[12] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[14] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv886[1];
resetMv tempmv887[1];
setVector ve888 = {nen[1,2,3]};
setVector ve889 = {nen[1,2,3]};
dotVectors tempmv887[0] = <ve888,ve889>;
resetMv tempmv890[1];
setMv tempmv890[0] = nen[3];
resetMv tempmv891[1];
setMv tempmv891[0] = tempmv887[0];
calculateMvCoeff tempmv886[0] = DIVISION(tempmv890,tempmv891);
resetMv tempmv892[1];
resetMv tempmv893[1];
setVector ve894 = {nen[1,2,3]};
setVector ve895 = {nen[1,2,3]};
dotVectors tempmv893[0] = <ve894,ve895>;
resetMv tempmv896[1];
setMv tempmv896[0] = nen[2];
resetMv tempmv897[1];
setMv tempmv897[0] = tempmv893[0];
calculateMvCoeff tempmv892[0] = DIVISION(tempmv896,tempmv897);
setVector ve898 = {rcPpDual[-12,14]};
setVector ve899 = {tempmv886[0],tempmv892[0]};
dotVectors rc2[23] = <ve898,ve899>;

//rc2[24] = (-(rcPpDual[12] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[15] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv900[1];
resetMv tempmv901[1];
setVector ve902 = {nen[1,2,3]};
setVector ve903 = {nen[1,2,3]};
dotVectors tempmv901[0] = <ve902,ve903>;
resetMv tempmv904[1];
setMv tempmv904[0] = nen[4];
resetMv tempmv905[1];
setMv tempmv905[0] = tempmv901[0];
calculateMvCoeff tempmv900[0] = DIVISION(tempmv904,tempmv905);
resetMv tempmv906[1];
resetMv tempmv907[1];
setVector ve908 = {nen[1,2,3]};
setVector ve909 = {nen[1,2,3]};
dotVectors tempmv907[0] = <ve908,ve909>;
resetMv tempmv910[1];
setMv tempmv910[0] = nen[2];
resetMv tempmv911[1];
setMv tempmv911[0] = tempmv907[0];
calculateMvCoeff tempmv906[0] = DIVISION(tempmv910,tempmv911);
setVector ve912 = {rcPpDual[-12,15]};
setVector ve913 = {tempmv900[0],tempmv906[0]};
dotVectors rc2[24] = <ve912,ve913>;

//rc2[25] = (-(rcPpDual[14] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[15] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv914[1];
resetMv tempmv915[1];
setVector ve916 = {nen[1,2,3]};
setVector ve917 = {nen[1,2,3]};
dotVectors tempmv915[0] = <ve916,ve917>;
resetMv tempmv918[1];
setMv tempmv918[0] = nen[4];
resetMv tempmv919[1];
setMv tempmv919[0] = tempmv915[0];
calculateMvCoeff tempmv914[0] = DIVISION(tempmv918,tempmv919);
resetMv tempmv920[1];
resetMv tempmv921[1];
setVector ve922 = {nen[1,2,3]};
setVector ve923 = {nen[1,2,3]};
dotVectors tempmv921[0] = <ve922,ve923>;
resetMv tempmv924[1];
setMv tempmv924[0] = nen[3];
resetMv tempmv925[1];
setMv tempmv925[0] = tempmv921[0];
calculateMvCoeff tempmv920[0] = DIVISION(tempmv924,tempmv925);
setVector ve926 = {rcPpDual[-14,15]};
setVector ve927 = {tempmv914[0],tempmv920[0]};
dotVectors rc2[25] = <ve926,ve927>;

//rc2N[1] = (((((((-(rc2[1])) * ((-(rc2[5])) / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))) + (-((-(rc2[2])) * (rc2[18] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[3])) * (rc2[20] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + ((-(rc2[5])) * (rc2[21] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (-((-(rc2[16])) * (rc2[23] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + ((-(rc2[18])) * (rc2[24] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + ((-(rc2[20])) * (rc2[25] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))
resetMv rc2N[32];
resetMv tempmv928[1];
resetMv tempmv929[1];
setVector ve930 = {rc2[-5,18,20,23]};
setVector ve931 = {rc2[-5,18,20,23]};
dotVectors tempmv929[0] = <ve930,ve931>;
resetMv tempmv932[1];
setMv tempmv932[0] = rc2[-5];
resetMv tempmv933[1];
setMv tempmv933[0] = tempmv929[0];
calculateMvCoeff tempmv928[0] = DIVISION(tempmv932,tempmv933);
resetMv tempmv934[1];
resetMv tempmv935[1];
setVector ve936 = {rc2[-5,18,20,23]};
setVector ve937 = {rc2[-5,18,20,23]};
dotVectors tempmv935[0] = <ve936,ve937>;
resetMv tempmv938[1];
setMv tempmv938[0] = rc2[18];
resetMv tempmv939[1];
setMv tempmv939[0] = tempmv935[0];
calculateMvCoeff tempmv934[0] = DIVISION(tempmv938,tempmv939);
resetMv tempmv940[1];
resetMv tempmv941[1];
setVector ve942 = {rc2[-5,18,20,23]};
setVector ve943 = {rc2[-5,18,20,23]};
dotVectors tempmv941[0] = <ve942,ve943>;
resetMv tempmv944[1];
setMv tempmv944[0] = rc2[20];
resetMv tempmv945[1];
setMv tempmv945[0] = tempmv941[0];
calculateMvCoeff tempmv940[0] = DIVISION(tempmv944,tempmv945);
resetMv tempmv946[1];
resetMv tempmv947[1];
setVector ve948 = {rc2[-5,18,20,23]};
setVector ve949 = {rc2[-5,18,20,23]};
dotVectors tempmv947[0] = <ve948,ve949>;
resetMv tempmv950[1];
setMv tempmv950[0] = rc2[21];
resetMv tempmv951[1];
setMv tempmv951[0] = tempmv947[0];
calculateMvCoeff tempmv946[0] = DIVISION(tempmv950,tempmv951);
resetMv tempmv952[1];
resetMv tempmv953[1];
setVector ve954 = {rc2[-5,18,20,23]};
setVector ve955 = {rc2[-5,18,20,23]};
dotVectors tempmv953[0] = <ve954,ve955>;
resetMv tempmv956[1];
setMv tempmv956[0] = rc2[23];
resetMv tempmv957[1];
setMv tempmv957[0] = tempmv953[0];
calculateMvCoeff tempmv952[0] = DIVISION(tempmv956,tempmv957);
resetMv tempmv958[1];
resetMv tempmv959[1];
setVector ve960 = {rc2[-5,18,20,23]};
setVector ve961 = {rc2[-5,18,20,23]};
dotVectors tempmv959[0] = <ve960,ve961>;
resetMv tempmv962[1];
setMv tempmv962[0] = rc2[24];
resetMv tempmv963[1];
setMv tempmv963[0] = tempmv959[0];
calculateMvCoeff tempmv958[0] = DIVISION(tempmv962,tempmv963);
resetMv tempmv964[1];
resetMv tempmv965[1];
setVector ve966 = {rc2[-5,18,20,23]};
setVector ve967 = {rc2[-5,18,20,23]};
dotVectors tempmv965[0] = <ve966,ve967>;
resetMv tempmv968[1];
setMv tempmv968[0] = rc2[25];
resetMv tempmv969[1];
setMv tempmv969[0] = tempmv965[0];
calculateMvCoeff tempmv964[0] = DIVISION(tempmv968,tempmv969);
setVector ve970 = {rc2[-1,2,3,-5,16,-18,-20]};
setVector ve971 = {tempmv928[0],tempmv934[0],tempmv940[0],tempmv946[0],tempmv952[0],tempmv958[0],tempmv964[0]};
dotVectors rc2N[1] = <ve970,ve971>;

//rc2N[2] = (((((((-(rc2[1])) * (rc2[18] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))) + ((-(rc2[2])) * ((-(rc2[5])) / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (-((-(rc2[3])) * (rc2[23] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + ((-(rc2[5])) * (rc2[24] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + ((-(rc2[16])) * (rc2[20] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (-((-(rc2[18])) * (rc2[21] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + ((-(rc2[23])) * (rc2[25] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))
resetMv tempmv972[1];
resetMv tempmv973[1];
setVector ve974 = {rc2[-5,18,20,23]};
setVector ve975 = {rc2[-5,18,20,23]};
dotVectors tempmv973[0] = <ve974,ve975>;
resetMv tempmv976[1];
setMv tempmv976[0] = rc2[18];
resetMv tempmv977[1];
setMv tempmv977[0] = tempmv973[0];
calculateMvCoeff tempmv972[0] = DIVISION(tempmv976,tempmv977);
resetMv tempmv978[1];
resetMv tempmv979[1];
setVector ve980 = {rc2[-5,18,20,23]};
setVector ve981 = {rc2[-5,18,20,23]};
dotVectors tempmv979[0] = <ve980,ve981>;
resetMv tempmv982[1];
setMv tempmv982[0] = rc2[-5];
resetMv tempmv983[1];
setMv tempmv983[0] = tempmv979[0];
calculateMvCoeff tempmv978[0] = DIVISION(tempmv982,tempmv983);
resetMv tempmv984[1];
resetMv tempmv985[1];
setVector ve986 = {rc2[-5,18,20,23]};
setVector ve987 = {rc2[-5,18,20,23]};
dotVectors tempmv985[0] = <ve986,ve987>;
resetMv tempmv988[1];
setMv tempmv988[0] = rc2[23];
resetMv tempmv989[1];
setMv tempmv989[0] = tempmv985[0];
calculateMvCoeff tempmv984[0] = DIVISION(tempmv988,tempmv989);
resetMv tempmv990[1];
resetMv tempmv991[1];
setVector ve992 = {rc2[-5,18,20,23]};
setVector ve993 = {rc2[-5,18,20,23]};
dotVectors tempmv991[0] = <ve992,ve993>;
resetMv tempmv994[1];
setMv tempmv994[0] = rc2[24];
resetMv tempmv995[1];
setMv tempmv995[0] = tempmv991[0];
calculateMvCoeff tempmv990[0] = DIVISION(tempmv994,tempmv995);
resetMv tempmv996[1];
resetMv tempmv997[1];
setVector ve998 = {rc2[-5,18,20,23]};
setVector ve999 = {rc2[-5,18,20,23]};
dotVectors tempmv997[0] = <ve998,ve999>;
resetMv tempmv1000[1];
setMv tempmv1000[0] = rc2[20];
resetMv tempmv1001[1];
setMv tempmv1001[0] = tempmv997[0];
calculateMvCoeff tempmv996[0] = DIVISION(tempmv1000,tempmv1001);
resetMv tempmv1002[1];
resetMv tempmv1003[1];
setVector ve1004 = {rc2[-5,18,20,23]};
setVector ve1005 = {rc2[-5,18,20,23]};
dotVectors tempmv1003[0] = <ve1004,ve1005>;
resetMv tempmv1006[1];
setMv tempmv1006[0] = rc2[21];
resetMv tempmv1007[1];
setMv tempmv1007[0] = tempmv1003[0];
calculateMvCoeff tempmv1002[0] = DIVISION(tempmv1006,tempmv1007);
resetMv tempmv1008[1];
resetMv tempmv1009[1];
setVector ve1010 = {rc2[-5,18,20,23]};
setVector ve1011 = {rc2[-5,18,20,23]};
dotVectors tempmv1009[0] = <ve1010,ve1011>;
resetMv tempmv1012[1];
setMv tempmv1012[0] = rc2[25];
resetMv tempmv1013[1];
setMv tempmv1013[0] = tempmv1009[0];
calculateMvCoeff tempmv1008[0] = DIVISION(tempmv1012,tempmv1013);
setVector ve1014 = {rc2[-1,-2,3,-5,-16,18,-23]};
setVector ve1015 = {tempmv972[0],tempmv978[0],tempmv984[0],tempmv990[0],tempmv996[0],tempmv1002[0],tempmv1008[0]};
dotVectors rc2N[2] = <ve1014,ve1015>;

//rc2N[3] = (((((((-(rc2[1])) * (rc2[20] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))) + ((-(rc2[2])) * (rc2[23] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + ((-(rc2[3])) * ((-(rc2[5])) / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + ((-(rc2[5])) * (rc2[25] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (-((-(rc2[16])) * (rc2[18] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[20])) * (rc2[21] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[23])) * (rc2[24] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))
resetMv tempmv1016[1];
resetMv tempmv1017[1];
setVector ve1018 = {rc2[-5,18,20,23]};
setVector ve1019 = {rc2[-5,18,20,23]};
dotVectors tempmv1017[0] = <ve1018,ve1019>;
resetMv tempmv1020[1];
setMv tempmv1020[0] = rc2[20];
resetMv tempmv1021[1];
setMv tempmv1021[0] = tempmv1017[0];
calculateMvCoeff tempmv1016[0] = DIVISION(tempmv1020,tempmv1021);
resetMv tempmv1022[1];
resetMv tempmv1023[1];
setVector ve1024 = {rc2[-5,18,20,23]};
setVector ve1025 = {rc2[-5,18,20,23]};
dotVectors tempmv1023[0] = <ve1024,ve1025>;
resetMv tempmv1026[1];
setMv tempmv1026[0] = rc2[23];
resetMv tempmv1027[1];
setMv tempmv1027[0] = tempmv1023[0];
calculateMvCoeff tempmv1022[0] = DIVISION(tempmv1026,tempmv1027);
resetMv tempmv1028[1];
resetMv tempmv1029[1];
setVector ve1030 = {rc2[-5,18,20,23]};
setVector ve1031 = {rc2[-5,18,20,23]};
dotVectors tempmv1029[0] = <ve1030,ve1031>;
resetMv tempmv1032[1];
setMv tempmv1032[0] = rc2[-5];
resetMv tempmv1033[1];
setMv tempmv1033[0] = tempmv1029[0];
calculateMvCoeff tempmv1028[0] = DIVISION(tempmv1032,tempmv1033);
resetMv tempmv1034[1];
resetMv tempmv1035[1];
setVector ve1036 = {rc2[-5,18,20,23]};
setVector ve1037 = {rc2[-5,18,20,23]};
dotVectors tempmv1035[0] = <ve1036,ve1037>;
resetMv tempmv1038[1];
setMv tempmv1038[0] = rc2[25];
resetMv tempmv1039[1];
setMv tempmv1039[0] = tempmv1035[0];
calculateMvCoeff tempmv1034[0] = DIVISION(tempmv1038,tempmv1039);
resetMv tempmv1040[1];
resetMv tempmv1041[1];
setVector ve1042 = {rc2[-5,18,20,23]};
setVector ve1043 = {rc2[-5,18,20,23]};
dotVectors tempmv1041[0] = <ve1042,ve1043>;
resetMv tempmv1044[1];
setMv tempmv1044[0] = rc2[18];
resetMv tempmv1045[1];
setMv tempmv1045[0] = tempmv1041[0];
calculateMvCoeff tempmv1040[0] = DIVISION(tempmv1044,tempmv1045);
resetMv tempmv1046[1];
resetMv tempmv1047[1];
setVector ve1048 = {rc2[-5,18,20,23]};
setVector ve1049 = {rc2[-5,18,20,23]};
dotVectors tempmv1047[0] = <ve1048,ve1049>;
resetMv tempmv1050[1];
setMv tempmv1050[0] = rc2[21];
resetMv tempmv1051[1];
setMv tempmv1051[0] = tempmv1047[0];
calculateMvCoeff tempmv1046[0] = DIVISION(tempmv1050,tempmv1051);
resetMv tempmv1052[1];
resetMv tempmv1053[1];
setVector ve1054 = {rc2[-5,18,20,23]};
setVector ve1055 = {rc2[-5,18,20,23]};
dotVectors tempmv1053[0] = <ve1054,ve1055>;
resetMv tempmv1056[1];
setMv tempmv1056[0] = rc2[24];
resetMv tempmv1057[1];
setMv tempmv1057[0] = tempmv1053[0];
calculateMvCoeff tempmv1052[0] = DIVISION(tempmv1056,tempmv1057);
setVector ve1058 = {rc2[-1,-2,-3,-5,16,20,23]};
setVector ve1059 = {tempmv1016[0],tempmv1022[0],tempmv1028[0],tempmv1034[0],tempmv1040[0],tempmv1046[0],tempmv1052[0]};
dotVectors rc2N[3] = <ve1058,ve1059>;

//rc2N[4] = ((((((((((-(rc2[1])) * (rc2[21] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))) + ((-(rc2[2])) * (rc2[24] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + ((-(rc2[3])) * (rc2[25] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + ((-(rc2[4])) * ((-(rc2[5])) / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (-((-(rc2[17])) * (rc2[18] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[19])) * (rc2[20] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[21])) * (rc2[21] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[22])) * (rc2[23] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[24])) * (rc2[24] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[25])) * (rc2[25] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))
resetMv tempmv1060[1];
resetMv tempmv1061[1];
setVector ve1062 = {rc2[-5,18,20,23]};
setVector ve1063 = {rc2[-5,18,20,23]};
dotVectors tempmv1061[0] = <ve1062,ve1063>;
resetMv tempmv1064[1];
setMv tempmv1064[0] = rc2[21];
resetMv tempmv1065[1];
setMv tempmv1065[0] = tempmv1061[0];
calculateMvCoeff tempmv1060[0] = DIVISION(tempmv1064,tempmv1065);
resetMv tempmv1066[1];
resetMv tempmv1067[1];
setVector ve1068 = {rc2[-5,18,20,23]};
setVector ve1069 = {rc2[-5,18,20,23]};
dotVectors tempmv1067[0] = <ve1068,ve1069>;
resetMv tempmv1070[1];
setMv tempmv1070[0] = rc2[24];
resetMv tempmv1071[1];
setMv tempmv1071[0] = tempmv1067[0];
calculateMvCoeff tempmv1066[0] = DIVISION(tempmv1070,tempmv1071);
resetMv tempmv1072[1];
resetMv tempmv1073[1];
setVector ve1074 = {rc2[-5,18,20,23]};
setVector ve1075 = {rc2[-5,18,20,23]};
dotVectors tempmv1073[0] = <ve1074,ve1075>;
resetMv tempmv1076[1];
setMv tempmv1076[0] = rc2[25];
resetMv tempmv1077[1];
setMv tempmv1077[0] = tempmv1073[0];
calculateMvCoeff tempmv1072[0] = DIVISION(tempmv1076,tempmv1077);
resetMv tempmv1078[1];
resetMv tempmv1079[1];
setVector ve1080 = {rc2[-5,18,20,23]};
setVector ve1081 = {rc2[-5,18,20,23]};
dotVectors tempmv1079[0] = <ve1080,ve1081>;
resetMv tempmv1082[1];
setMv tempmv1082[0] = rc2[-5];
resetMv tempmv1083[1];
setMv tempmv1083[0] = tempmv1079[0];
calculateMvCoeff tempmv1078[0] = DIVISION(tempmv1082,tempmv1083);
resetMv tempmv1084[1];
resetMv tempmv1085[1];
setVector ve1086 = {rc2[-5,18,20,23]};
setVector ve1087 = {rc2[-5,18,20,23]};
dotVectors tempmv1085[0] = <ve1086,ve1087>;
resetMv tempmv1088[1];
setMv tempmv1088[0] = rc2[18];
resetMv tempmv1089[1];
setMv tempmv1089[0] = tempmv1085[0];
calculateMvCoeff tempmv1084[0] = DIVISION(tempmv1088,tempmv1089);
resetMv tempmv1090[1];
resetMv tempmv1091[1];
setVector ve1092 = {rc2[-5,18,20,23]};
setVector ve1093 = {rc2[-5,18,20,23]};
dotVectors tempmv1091[0] = <ve1092,ve1093>;
resetMv tempmv1094[1];
setMv tempmv1094[0] = rc2[20];
resetMv tempmv1095[1];
setMv tempmv1095[0] = tempmv1091[0];
calculateMvCoeff tempmv1090[0] = DIVISION(tempmv1094,tempmv1095);
resetMv tempmv1096[1];
resetMv tempmv1097[1];
setVector ve1098 = {rc2[-5,18,20,23]};
setVector ve1099 = {rc2[-5,18,20,23]};
dotVectors tempmv1097[0] = <ve1098,ve1099>;
resetMv tempmv1100[1];
setMv tempmv1100[0] = rc2[21];
resetMv tempmv1101[1];
setMv tempmv1101[0] = tempmv1097[0];
calculateMvCoeff tempmv1096[0] = DIVISION(tempmv1100,tempmv1101);
resetMv tempmv1102[1];
resetMv tempmv1103[1];
setVector ve1104 = {rc2[-5,18,20,23]};
setVector ve1105 = {rc2[-5,18,20,23]};
dotVectors tempmv1103[0] = <ve1104,ve1105>;
resetMv tempmv1106[1];
setMv tempmv1106[0] = rc2[23];
resetMv tempmv1107[1];
setMv tempmv1107[0] = tempmv1103[0];
calculateMvCoeff tempmv1102[0] = DIVISION(tempmv1106,tempmv1107);
resetMv tempmv1108[1];
resetMv tempmv1109[1];
setVector ve1110 = {rc2[-5,18,20,23]};
setVector ve1111 = {rc2[-5,18,20,23]};
dotVectors tempmv1109[0] = <ve1110,ve1111>;
resetMv tempmv1112[1];
setMv tempmv1112[0] = rc2[24];
resetMv tempmv1113[1];
setMv tempmv1113[0] = tempmv1109[0];
calculateMvCoeff tempmv1108[0] = DIVISION(tempmv1112,tempmv1113);
resetMv tempmv1114[1];
resetMv tempmv1115[1];
setVector ve1116 = {rc2[-5,18,20,23]};
setVector ve1117 = {rc2[-5,18,20,23]};
dotVectors tempmv1115[0] = <ve1116,ve1117>;
resetMv tempmv1118[1];
setMv tempmv1118[0] = rc2[25];
resetMv tempmv1119[1];
setMv tempmv1119[0] = tempmv1115[0];
calculateMvCoeff tempmv1114[0] = DIVISION(tempmv1118,tempmv1119);
setVector ve1120 = {rc2[-1,-2,-3,-4,17,19,21,22,24,25]};
setVector ve1121 = {tempmv1060[0],tempmv1066[0],tempmv1072[0],tempmv1078[0],tempmv1084[0],tempmv1090[0],tempmv1096[0],tempmv1102[0],tempmv1108[0],tempmv1114[0]};
dotVectors rc2N[4] = <ve1120,ve1121>;

//rc2N[5] = ((((-(rc2[5])) * ((-(rc2[5])) / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))) + (-((-(rc2[18])) * (rc2[18] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[20])) * (rc2[20] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[23])) * (rc2[23] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))
resetMv tempmv1122[1];
resetMv tempmv1123[1];
setVector ve1124 = {rc2[-5,18,20,23]};
setVector ve1125 = {rc2[-5,18,20,23]};
dotVectors tempmv1123[0] = <ve1124,ve1125>;
resetMv tempmv1126[1];
setMv tempmv1126[0] = rc2[-5];
resetMv tempmv1127[1];
setMv tempmv1127[0] = tempmv1123[0];
calculateMvCoeff tempmv1122[0] = DIVISION(tempmv1126,tempmv1127);
resetMv tempmv1128[1];
resetMv tempmv1129[1];
setVector ve1130 = {rc2[-5,18,20,23]};
setVector ve1131 = {rc2[-5,18,20,23]};
dotVectors tempmv1129[0] = <ve1130,ve1131>;
resetMv tempmv1132[1];
setMv tempmv1132[0] = rc2[18];
resetMv tempmv1133[1];
setMv tempmv1133[0] = tempmv1129[0];
calculateMvCoeff tempmv1128[0] = DIVISION(tempmv1132,tempmv1133);
resetMv tempmv1134[1];
resetMv tempmv1135[1];
setVector ve1136 = {rc2[-5,18,20,23]};
setVector ve1137 = {rc2[-5,18,20,23]};
dotVectors tempmv1135[0] = <ve1136,ve1137>;
resetMv tempmv1138[1];
setMv tempmv1138[0] = rc2[20];
resetMv tempmv1139[1];
setMv tempmv1139[0] = tempmv1135[0];
calculateMvCoeff tempmv1134[0] = DIVISION(tempmv1138,tempmv1139);
resetMv tempmv1140[1];
resetMv tempmv1141[1];
setVector ve1142 = {rc2[-5,18,20,23]};
setVector ve1143 = {rc2[-5,18,20,23]};
dotVectors tempmv1141[0] = <ve1142,ve1143>;
resetMv tempmv1144[1];
setMv tempmv1144[0] = rc2[23];
resetMv tempmv1145[1];
setMv tempmv1145[0] = tempmv1141[0];
calculateMvCoeff tempmv1140[0] = DIVISION(tempmv1144,tempmv1145);
setVector ve1146 = {rc2[-5,18,20,23]};
setVector ve1147 = {tempmv1122[0],tempmv1128[0],tempmv1134[0],tempmv1140[0]};
dotVectors rc2N[5] = <ve1146,ve1147>;

//z11[0] = (sqrt(-2.0 * (((((rc1N[1] * sat1[1]) + (rc1N[2] * sat1[2])) + (rc1N[3] * sat1[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat1[4]))))) - inputsVector[0]
resetMv z11[32];
resetMv tempmv1148[1];
resetMv tempmv1149[1];
resetMv tempmv1150[1];
setVector ve1151 = {rc1N[1,2,3,-4,-5]};
setVector ve1152 = {sat1[1,2,3],1.0,sat1[4]};
dotVectors tempmv1150[0] = <ve1151,ve1152>;
setVector ve1153 = {-2.0};
setVector ve1154 = {tempmv1150[0]};
dotVectors tempmv1149[0] = <ve1153,ve1154>;
resetMv tempmv1155[1];
setMv tempmv1155[0] = tempmv1149[0];
calculateMvCoeff tempmv1148[0] = SQRT(tempmv1155);
setVector ve1156 = {tempmv1148[0],inputsVector[-0]};
dotVectors z11[0] = <ve1156>;

//z12[0] = (sqrt(-2.0 * (((((rc2N[1] * sat1[1]) + (rc2N[2] * sat1[2])) + (rc2N[3] * sat1[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat1[4]))))) - inputsVector[0]
resetMv z12[32];
resetMv tempmv1157[1];
resetMv tempmv1158[1];
resetMv tempmv1159[1];
setVector ve1160 = {rc2N[1,2,3,-4,-5]};
setVector ve1161 = {sat1[1,2,3],1.0,sat1[4]};
dotVectors tempmv1159[0] = <ve1160,ve1161>;
setVector ve1162 = {-2.0};
setVector ve1163 = {tempmv1159[0]};
dotVectors tempmv1158[0] = <ve1162,ve1163>;
resetMv tempmv1164[1];
setMv tempmv1164[0] = tempmv1158[0];
calculateMvCoeff tempmv1157[0] = SQRT(tempmv1164);
setVector ve1165 = {tempmv1157[0],inputsVector[-0]};
dotVectors z12[0] = <ve1165>;

//z21[0] = (sqrt(-2.0 * (((((rc1N[1] * sat2[1]) + (rc1N[2] * sat2[2])) + (rc1N[3] * sat2[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat2[4]))))) - inputsVector[1]
resetMv z21[32];
resetMv tempmv1166[1];
resetMv tempmv1167[1];
resetMv tempmv1168[1];
setVector ve1169 = {rc1N[1,2,3,-4,-5]};
setVector ve1170 = {sat2[1,2,3],1.0,sat2[4]};
dotVectors tempmv1168[0] = <ve1169,ve1170>;
setVector ve1171 = {-2.0};
setVector ve1172 = {tempmv1168[0]};
dotVectors tempmv1167[0] = <ve1171,ve1172>;
resetMv tempmv1173[1];
setMv tempmv1173[0] = tempmv1167[0];
calculateMvCoeff tempmv1166[0] = SQRT(tempmv1173);
setVector ve1174 = {tempmv1166[0],inputsVector[-1]};
dotVectors z21[0] = <ve1174>;

//z22[0] = (sqrt(-2.0 * (((((rc2N[1] * sat2[1]) + (rc2N[2] * sat2[2])) + (rc2N[3] * sat2[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat2[4]))))) - inputsVector[1]
resetMv z22[32];
resetMv tempmv1175[1];
resetMv tempmv1176[1];
resetMv tempmv1177[1];
setVector ve1178 = {rc2N[1,2,3,-4,-5]};
setVector ve1179 = {sat2[1,2,3],1.0,sat2[4]};
dotVectors tempmv1177[0] = <ve1178,ve1179>;
setVector ve1180 = {-2.0};
setVector ve1181 = {tempmv1177[0]};
dotVectors tempmv1176[0] = <ve1180,ve1181>;
resetMv tempmv1182[1];
setMv tempmv1182[0] = tempmv1176[0];
calculateMvCoeff tempmv1175[0] = SQRT(tempmv1182);
setVector ve1183 = {tempmv1175[0],inputsVector[-1]};
dotVectors z22[0] = <ve1183>;

//z31[0] = (sqrt(-2.0 * (((((rc1N[1] * sat3[1]) + (rc1N[2] * sat3[2])) + (rc1N[3] * sat3[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat3[4]))))) - inputsVector[2]
resetMv z31[32];
resetMv tempmv1184[1];
resetMv tempmv1185[1];
resetMv tempmv1186[1];
setVector ve1187 = {rc1N[1,2,3,-4,-5]};
setVector ve1188 = {sat3[1,2,3],1.0,sat3[4]};
dotVectors tempmv1186[0] = <ve1187,ve1188>;
setVector ve1189 = {-2.0};
setVector ve1190 = {tempmv1186[0]};
dotVectors tempmv1185[0] = <ve1189,ve1190>;
resetMv tempmv1191[1];
setMv tempmv1191[0] = tempmv1185[0];
calculateMvCoeff tempmv1184[0] = SQRT(tempmv1191);
setVector ve1192 = {tempmv1184[0],inputsVector[-2]};
dotVectors z31[0] = <ve1192>;

//z32[0] = (sqrt(-2.0 * (((((rc2N[1] * sat3[1]) + (rc2N[2] * sat3[2])) + (rc2N[3] * sat3[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat3[4]))))) - inputsVector[2]
resetMv z32[32];
resetMv tempmv1193[1];
resetMv tempmv1194[1];
resetMv tempmv1195[1];
setVector ve1196 = {rc2N[1,2,3,-4,-5]};
setVector ve1197 = {sat3[1,2,3],1.0,sat3[4]};
dotVectors tempmv1195[0] = <ve1196,ve1197>;
setVector ve1198 = {-2.0};
setVector ve1199 = {tempmv1195[0]};
dotVectors tempmv1194[0] = <ve1198,ve1199>;
resetMv tempmv1200[1];
setMv tempmv1200[0] = tempmv1194[0];
calculateMvCoeff tempmv1193[0] = SQRT(tempmv1200);
setVector ve1201 = {tempmv1193[0],inputsVector[-2]};
dotVectors z32[0] = <ve1201>;

