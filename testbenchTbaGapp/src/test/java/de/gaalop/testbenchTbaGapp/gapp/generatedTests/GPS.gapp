//sat1[1] = inputsVector[3]
assignInputsVector inputsVector = [d1,d2,d3,sat1x,sat1y,sat1z,sat2x,sat2y,sat2z,sat3x,sat3y,sat3z];
resetMv sat1[32];
setMv sat1[1,2,3] = inputsVector[3,4,5];

//sat1[2] = inputsVector[4]

//sat1[3] = inputsVector[5]

//sat1[4] = 0.5 * (((inputsVector[3] * inputsVector[3]) + (inputsVector[4] * inputsVector[4])) + (inputsVector[5] * inputsVector[5]))
resetMv tempmv0[1];
setVector ve1 = {inputsVector[3,4,5]};
setVector ve2 = {inputsVector[3,4,5]};
dotVectors tempmv0[0] = <ve1,ve2>;
setVector ve3 = {0.5};
setVector ve4 = {tempmv0[0]};
dotVectors sat1[4] = <ve3,ve4>;

//sat1[5] = 1.0
assignMv sat1[5] = [1.0];

//sat2[1] = inputsVector[6]
resetMv sat2[32];
setMv sat2[1,2,3] = inputsVector[6,7,8];

//sat2[2] = inputsVector[7]

//sat2[3] = inputsVector[8]

//sat2[4] = 0.5 * (((inputsVector[6] * inputsVector[6]) + (inputsVector[7] * inputsVector[7])) + (inputsVector[8] * inputsVector[8]))
resetMv tempmv5[1];
setVector ve6 = {inputsVector[6,7,8]};
setVector ve7 = {inputsVector[6,7,8]};
dotVectors tempmv5[0] = <ve6,ve7>;
setVector ve8 = {0.5};
setVector ve9 = {tempmv5[0]};
dotVectors sat2[4] = <ve8,ve9>;

//sat2[5] = 1.0
assignMv sat2[5] = [1.0];

//sat3[1] = inputsVector[9]
resetMv sat3[32];
setMv sat3[1,2,3] = inputsVector[9,10,11];

//sat3[2] = inputsVector[10]

//sat3[3] = inputsVector[11]

//sat3[4] = 0.5 * (((inputsVector[9] * inputsVector[9]) + (inputsVector[10] * inputsVector[10])) + (inputsVector[11] * inputsVector[11]))
resetMv tempmv10[1];
setVector ve11 = {inputsVector[9,10,11]};
setVector ve12 = {inputsVector[9,10,11]};
dotVectors tempmv10[0] = <ve11,ve12>;
setVector ve13 = {0.5};
setVector ve14 = {tempmv10[0]};
dotVectors sat3[4] = <ve13,ve14>;

//sat3[5] = 1.0
assignMv sat3[5] = [1.0];

//sph1[1] = sat1[1]
resetMv sph1[32];
setMv sph1[1,2,3] = sat1[1,2,3];

//sph1[2] = sat1[2]

//sph1[3] = sat1[3]

//sph1[4] = sat1[4] - ((0.5 * inputsVector[0]) * inputsVector[0])
setVector ve15 = {sat1[4],-0.5};
setVector ve16 = {1.0,inputsVector[0]};
setVector ve17 = {1.0,inputsVector[0]};
dotVectors sph1[4] = <ve15,ve16,ve17>;

//sph1[5] = 1.0
assignMv sph1[5] = [1.0];

//sph2[1] = sat2[1]
resetMv sph2[32];
setMv sph2[1,2,3] = sat2[1,2,3];

//sph2[2] = sat2[2]

//sph2[3] = sat2[3]

//sph2[4] = sat2[4] - ((0.5 * inputsVector[1]) * inputsVector[1])
setVector ve18 = {sat2[4],-0.5};
setVector ve19 = {1.0,inputsVector[1]};
setVector ve20 = {1.0,inputsVector[1]};
dotVectors sph2[4] = <ve18,ve19,ve20>;

//sph2[5] = 1.0
assignMv sph2[5] = [1.0];

//sph3[1] = sat3[1]
resetMv sph3[32];
setMv sph3[1,2,3] = sat3[1,2,3];

//sph3[2] = sat3[2]

//sph3[3] = sat3[3]

//sph3[4] = sat3[4] - ((0.5 * inputsVector[2]) * inputsVector[2])
setVector ve21 = {sat3[4],-0.5};
setVector ve22 = {1.0,inputsVector[2]};
setVector ve23 = {1.0,inputsVector[2]};
dotVectors sph3[4] = <ve21,ve22,ve23>;

//sph3[5] = 1.0
assignMv sph3[5] = [1.0];

//rcPp[16] = ((((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) * sph3[3]) + (-(((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) * sph3[2]))) + (((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) * sph3[1])
resetMv rcPp[32];
resetMv tempmv24[1];
setVector ve25 = {sph1[1,-2]};
setVector ve26 = {sph2[2,1]};
dotVectors tempmv24[0] = <ve25,ve26>;
resetMv tempmv27[1];
resetMv tempmv28[1];
setVector ve29 = {sph1[1,-3]};
setVector ve30 = {sph2[3,1]};
dotVectors tempmv28[0] = <ve29,ve30>;
setMv tempmv27[0] = tempmv28[-0];
resetMv tempmv31[1];
setVector ve32 = {sph1[2,-3]};
setVector ve33 = {sph2[3,2]};
dotVectors tempmv31[0] = <ve32,ve33>;
setVector ve34 = {tempmv24[0],tempmv27[0],tempmv31[0]};
setVector ve35 = {sph3[3,2,1]};
dotVectors rcPp[16] = <ve34,ve35>;

//rcPp[17] = ((((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) * sph3[4]) + (-(((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) * sph3[2]))) + (((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) * sph3[1])
resetMv tempmv36[1];
setVector ve37 = {sph1[1,-2]};
setVector ve38 = {sph2[2,1]};
dotVectors tempmv36[0] = <ve37,ve38>;
resetMv tempmv39[1];
resetMv tempmv40[1];
setVector ve41 = {sph1[1,-4]};
setVector ve42 = {sph2[4,1]};
dotVectors tempmv40[0] = <ve41,ve42>;
setMv tempmv39[0] = tempmv40[-0];
resetMv tempmv43[1];
setVector ve44 = {sph1[2,-4]};
setVector ve45 = {sph2[4,2]};
dotVectors tempmv43[0] = <ve44,ve45>;
setVector ve46 = {tempmv36[0],tempmv39[0],tempmv43[0]};
setVector ve47 = {sph3[4,2,1]};
dotVectors rcPp[17] = <ve46,ve47>;

//rcPp[18] = (((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[2]))) + ((sph1[2] + (-(sph2[2]))) * sph3[1])
resetMv tempmv48[1];
resetMv tempmv49[1];
setVector ve50 = {sph1[1],sph2[-1]};
dotVectors tempmv49[0] = <ve50>;
setMv tempmv48[0] = tempmv49[-0];
resetMv tempmv51[1];
setVector ve52 = {sph1[2],sph2[-2]};
dotVectors tempmv51[0] = <ve52>;
setVector ve53 = {sph1[1,-2],tempmv48[0],tempmv51[0]};
setVector ve54 = {sph2[2,1],sph3[2,1]};
dotVectors rcPp[18] = <ve53,ve54>;

//rcPp[19] = ((((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) * sph3[4]) + (-(((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) * sph3[3]))) + (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) * sph3[1])
resetMv tempmv55[1];
setVector ve56 = {sph1[1,-3]};
setVector ve57 = {sph2[3,1]};
dotVectors tempmv55[0] = <ve56,ve57>;
resetMv tempmv58[1];
resetMv tempmv59[1];
setVector ve60 = {sph1[1,-4]};
setVector ve61 = {sph2[4,1]};
dotVectors tempmv59[0] = <ve60,ve61>;
setMv tempmv58[0] = tempmv59[-0];
resetMv tempmv62[1];
setVector ve63 = {sph1[3,-4]};
setVector ve64 = {sph2[4,3]};
dotVectors tempmv62[0] = <ve63,ve64>;
setVector ve65 = {tempmv55[0],tempmv58[0],tempmv62[0]};
setVector ve66 = {sph3[4,3,1]};
dotVectors rcPp[19] = <ve65,ve66>;

//rcPp[20] = (((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[3]))) + ((sph1[3] + (-(sph2[3]))) * sph3[1])
resetMv tempmv67[1];
resetMv tempmv68[1];
setVector ve69 = {sph1[1],sph2[-1]};
dotVectors tempmv68[0] = <ve69>;
setMv tempmv67[0] = tempmv68[-0];
resetMv tempmv70[1];
setVector ve71 = {sph1[3],sph2[-3]};
dotVectors tempmv70[0] = <ve71>;
setVector ve72 = {sph1[1,-3],tempmv67[0],tempmv70[0]};
setVector ve73 = {sph2[3,1],sph3[3,1]};
dotVectors rcPp[20] = <ve72,ve73>;

//rcPp[21] = (((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[1])
resetMv tempmv74[1];
resetMv tempmv75[1];
setVector ve76 = {sph1[1],sph2[-1]};
dotVectors tempmv75[0] = <ve76>;
setMv tempmv74[0] = tempmv75[-0];
resetMv tempmv77[1];
setVector ve78 = {sph1[4],sph2[-4]};
dotVectors tempmv77[0] = <ve78>;
setVector ve79 = {sph1[1,-4],tempmv74[0],tempmv77[0]};
setVector ve80 = {sph2[4,1],sph3[4,1]};
dotVectors rcPp[21] = <ve79,ve80>;

//rcPp[22] = ((((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) * sph3[4]) + (-(((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) * sph3[3]))) + (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) * sph3[2])
resetMv tempmv81[1];
setVector ve82 = {sph1[2,-3]};
setVector ve83 = {sph2[3,2]};
dotVectors tempmv81[0] = <ve82,ve83>;
resetMv tempmv84[1];
resetMv tempmv85[1];
setVector ve86 = {sph1[2,-4]};
setVector ve87 = {sph2[4,2]};
dotVectors tempmv85[0] = <ve86,ve87>;
setMv tempmv84[0] = tempmv85[-0];
resetMv tempmv88[1];
setVector ve89 = {sph1[3,-4]};
setVector ve90 = {sph2[4,3]};
dotVectors tempmv88[0] = <ve89,ve90>;
setVector ve91 = {tempmv81[0],tempmv84[0],tempmv88[0]};
setVector ve92 = {sph3[4,3,2]};
dotVectors rcPp[22] = <ve91,ve92>;

//rcPp[23] = (((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) + (-((sph1[2] + (-(sph2[2]))) * sph3[3]))) + ((sph1[3] + (-(sph2[3]))) * sph3[2])
resetMv tempmv93[1];
resetMv tempmv94[1];
setVector ve95 = {sph1[2],sph2[-2]};
dotVectors tempmv94[0] = <ve95>;
setMv tempmv93[0] = tempmv94[-0];
resetMv tempmv96[1];
setVector ve97 = {sph1[3],sph2[-3]};
dotVectors tempmv96[0] = <ve97>;
setVector ve98 = {sph1[2,-3],tempmv93[0],tempmv96[0]};
setVector ve99 = {sph2[3,2],sph3[3,2]};
dotVectors rcPp[23] = <ve98,ve99>;

//rcPp[24] = (((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) + (-((sph1[2] + (-(sph2[2]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[2])
resetMv tempmv100[1];
resetMv tempmv101[1];
setVector ve102 = {sph1[2],sph2[-2]};
dotVectors tempmv101[0] = <ve102>;
setMv tempmv100[0] = tempmv101[-0];
resetMv tempmv103[1];
setVector ve104 = {sph1[4],sph2[-4]};
dotVectors tempmv103[0] = <ve104>;
setVector ve105 = {sph1[2,-4],tempmv100[0],tempmv103[0]};
setVector ve106 = {sph2[4,2],sph3[4,2]};
dotVectors rcPp[24] = <ve105,ve106>;

//rcPp[25] = (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) + (-((sph1[3] + (-(sph2[3]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[3])
resetMv tempmv107[1];
resetMv tempmv108[1];
setVector ve109 = {sph1[3],sph2[-3]};
dotVectors tempmv108[0] = <ve109>;
setMv tempmv107[0] = tempmv108[-0];
resetMv tempmv110[1];
setVector ve111 = {sph1[4],sph2[-4]};
dotVectors tempmv110[0] = <ve111>;
setVector ve112 = {sph1[3,-4],tempmv107[0],tempmv110[0]};
setVector ve113 = {sph2[4,3],sph3[4,3]};
dotVectors rcPp[25] = <ve112,ve113>;

//len[0] = sqrt(sqrt(abs(((((((((((-(rcPp[16] * rcPp[16])) + (rcPp[17] * rcPp[18])) + (rcPp[18] * rcPp[17])) + (rcPp[19] * rcPp[20])) + (rcPp[20] * rcPp[19])) + (rcPp[21] * rcPp[21])) + (rcPp[22] * rcPp[23])) + (rcPp[23] * rcPp[22])) + (rcPp[24] * rcPp[24])) + (rcPp[25] * rcPp[25])) * ((((((((((-(rcPp[16] * rcPp[16])) + (rcPp[17] * rcPp[18])) + (rcPp[18] * rcPp[17])) + (rcPp[19] * rcPp[20])) + (rcPp[20] * rcPp[19])) + (rcPp[21] * rcPp[21])) + (rcPp[22] * rcPp[23])) + (rcPp[23] * rcPp[22])) + (rcPp[24] * rcPp[24])) + (rcPp[25] * rcPp[25])))))
resetMv len[32];
resetMv tempmv114[1];
resetMv tempmv115[1];
resetMv tempmv116[1];
resetMv tempmv117[1];
setVector ve118 = {rcPp[-16,17,18,19,20,21,22,23,24,25]};
setVector ve119 = {rcPp[16,18,17,20,19,21,23,22,24,25]};
dotVectors tempmv117[0] = <ve118,ve119>;
resetMv tempmv120[1];
setVector ve121 = {rcPp[-16,17,18,19,20,21,22,23,24,25]};
setVector ve122 = {rcPp[16,18,17,20,19,21,23,22,24,25]};
dotVectors tempmv120[0] = <ve121,ve122>;
setVector ve123 = {tempmv117[0]};
setVector ve124 = {tempmv120[0]};
dotVectors tempmv116[0] = <ve123,ve124>;
resetMv tempmv125[1];
setMv tempmv125[0] = tempmv116[0];
calculateMvCoeff tempmv115[0] = ABS(tempmv125);
resetMv tempmv126[1];
setMv tempmv126[0] = tempmv115[0];
calculateMvCoeff tempmv114[0] = SQRT(tempmv126);
resetMv tempmv127[1];
setMv tempmv127[0] = tempmv114[0];
calculateMvCoeff len[0] = SQRT(tempmv127);

//rcPpDual[6] = -(rcPp[25])
resetMv rcPpDual[32];
setMv rcPpDual[6,7,8,9,10,11,12,13,14,15] = rcPp[-25,24,-22,23,-21,19,-20,-17,18,16];

//rcPpDual[7] = rcPp[24]

//rcPpDual[8] = -(rcPp[22])

//rcPpDual[9] = rcPp[23]

//rcPpDual[10] = -(rcPp[21])

//rcPpDual[11] = rcPp[19]

//rcPpDual[12] = -(rcPp[20])

//rcPpDual[13] = -(rcPp[17])

//rcPpDual[14] = rcPp[18]

//rcPpDual[15] = rcPp[16]

//nen[1] = rcPpDual[9]
resetMv nen[32];
setMv nen[1,2,3,4] = rcPpDual[9,12,14,15];

//nen[2] = rcPpDual[12]

//nen[3] = rcPpDual[14]

//nen[4] = rcPpDual[15]

//rc1[1] = (((len[0] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (rcPpDual[6] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[7] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(rcPpDual[9] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv rc1[32];
resetMv tempmv128[1];
resetMv tempmv129[1];
setVector ve130 = {nen[1,2,3]};
setVector ve131 = {nen[1,2,3]};
dotVectors tempmv129[0] = <ve130,ve131>;
resetMv tempmv132[1];
setMv tempmv132[0] = nen[1];
resetMv tempmv133[1];
setMv tempmv133[0] = tempmv129[0];
calculateMvCoeff tempmv128[0] = DIVISION(tempmv132,tempmv133);
resetMv tempmv134[1];
resetMv tempmv135[1];
setVector ve136 = {nen[1,2,3]};
setVector ve137 = {nen[1,2,3]};
dotVectors tempmv135[0] = <ve136,ve137>;
resetMv tempmv138[1];
setMv tempmv138[0] = nen[2];
resetMv tempmv139[1];
setMv tempmv139[0] = tempmv135[0];
calculateMvCoeff tempmv134[0] = DIVISION(tempmv138,tempmv139);
resetMv tempmv140[1];
resetMv tempmv141[1];
setVector ve142 = {nen[1,2,3]};
setVector ve143 = {nen[1,2,3]};
dotVectors tempmv141[0] = <ve142,ve143>;
resetMv tempmv144[1];
setMv tempmv144[0] = nen[3];
resetMv tempmv145[1];
setMv tempmv145[0] = tempmv141[0];
calculateMvCoeff tempmv140[0] = DIVISION(tempmv144,tempmv145);
resetMv tempmv146[1];
resetMv tempmv147[1];
setVector ve148 = {nen[1,2,3]};
setVector ve149 = {nen[1,2,3]};
dotVectors tempmv147[0] = <ve148,ve149>;
resetMv tempmv150[1];
setMv tempmv150[0] = nen[4];
resetMv tempmv151[1];
setMv tempmv151[0] = tempmv147[0];
calculateMvCoeff tempmv146[0] = DIVISION(tempmv150,tempmv151);
setVector ve152 = {len[0],rcPpDual[6,7,-9]};
setVector ve153 = {tempmv128[0],tempmv134[0],tempmv140[0],tempmv146[0]};
dotVectors rc1[1] = <ve152,ve153>;

//rc1[2] = (((len[0] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[6] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[10] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(rcPpDual[12] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv154[1];
resetMv tempmv155[1];
setVector ve156 = {nen[1,2,3]};
setVector ve157 = {nen[1,2,3]};
dotVectors tempmv155[0] = <ve156,ve157>;
resetMv tempmv158[1];
setMv tempmv158[0] = nen[2];
resetMv tempmv159[1];
setMv tempmv159[0] = tempmv155[0];
calculateMvCoeff tempmv154[0] = DIVISION(tempmv158,tempmv159);
resetMv tempmv160[1];
resetMv tempmv161[1];
setVector ve162 = {nen[1,2,3]};
setVector ve163 = {nen[1,2,3]};
dotVectors tempmv161[0] = <ve162,ve163>;
resetMv tempmv164[1];
setMv tempmv164[0] = nen[1];
resetMv tempmv165[1];
setMv tempmv165[0] = tempmv161[0];
calculateMvCoeff tempmv160[0] = DIVISION(tempmv164,tempmv165);
resetMv tempmv166[1];
resetMv tempmv167[1];
setVector ve168 = {nen[1,2,3]};
setVector ve169 = {nen[1,2,3]};
dotVectors tempmv167[0] = <ve168,ve169>;
resetMv tempmv170[1];
setMv tempmv170[0] = nen[3];
resetMv tempmv171[1];
setMv tempmv171[0] = tempmv167[0];
calculateMvCoeff tempmv166[0] = DIVISION(tempmv170,tempmv171);
resetMv tempmv172[1];
resetMv tempmv173[1];
setVector ve174 = {nen[1,2,3]};
setVector ve175 = {nen[1,2,3]};
dotVectors tempmv173[0] = <ve174,ve175>;
resetMv tempmv176[1];
setMv tempmv176[0] = nen[4];
resetMv tempmv177[1];
setMv tempmv177[0] = tempmv173[0];
calculateMvCoeff tempmv172[0] = DIVISION(tempmv176,tempmv177);
setVector ve178 = {len[0],rcPpDual[-6,10,-12]};
setVector ve179 = {tempmv154[0],tempmv160[0],tempmv166[0],tempmv172[0]};
dotVectors rc1[2] = <ve178,ve179>;

//rc1[3] = (((len[0] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[7] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[10] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[14] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv180[1];
resetMv tempmv181[1];
setVector ve182 = {nen[1,2,3]};
setVector ve183 = {nen[1,2,3]};
dotVectors tempmv181[0] = <ve182,ve183>;
resetMv tempmv184[1];
setMv tempmv184[0] = nen[3];
resetMv tempmv185[1];
setMv tempmv185[0] = tempmv181[0];
calculateMvCoeff tempmv180[0] = DIVISION(tempmv184,tempmv185);
resetMv tempmv186[1];
resetMv tempmv187[1];
setVector ve188 = {nen[1,2,3]};
setVector ve189 = {nen[1,2,3]};
dotVectors tempmv187[0] = <ve188,ve189>;
resetMv tempmv190[1];
setMv tempmv190[0] = nen[1];
resetMv tempmv191[1];
setMv tempmv191[0] = tempmv187[0];
calculateMvCoeff tempmv186[0] = DIVISION(tempmv190,tempmv191);
resetMv tempmv192[1];
resetMv tempmv193[1];
setVector ve194 = {nen[1,2,3]};
setVector ve195 = {nen[1,2,3]};
dotVectors tempmv193[0] = <ve194,ve195>;
resetMv tempmv196[1];
setMv tempmv196[0] = nen[2];
resetMv tempmv197[1];
setMv tempmv197[0] = tempmv193[0];
calculateMvCoeff tempmv192[0] = DIVISION(tempmv196,tempmv197);
resetMv tempmv198[1];
resetMv tempmv199[1];
setVector ve200 = {nen[1,2,3]};
setVector ve201 = {nen[1,2,3]};
dotVectors tempmv199[0] = <ve200,ve201>;
resetMv tempmv202[1];
setMv tempmv202[0] = nen[4];
resetMv tempmv203[1];
setMv tempmv203[0] = tempmv199[0];
calculateMvCoeff tempmv198[0] = DIVISION(tempmv202,tempmv203);
setVector ve204 = {len[0],rcPpDual[-7,-10,-14]};
setVector ve205 = {tempmv180[0],tempmv186[0],tempmv192[0],tempmv198[0]};
dotVectors rc1[3] = <ve204,ve205>;

//rc1[4] = ((((len[0] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[8] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[11] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[13] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[15] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv206[1];
resetMv tempmv207[1];
setVector ve208 = {nen[1,2,3]};
setVector ve209 = {nen[1,2,3]};
dotVectors tempmv207[0] = <ve208,ve209>;
resetMv tempmv210[1];
setMv tempmv210[0] = nen[4];
resetMv tempmv211[1];
setMv tempmv211[0] = tempmv207[0];
calculateMvCoeff tempmv206[0] = DIVISION(tempmv210,tempmv211);
resetMv tempmv212[1];
resetMv tempmv213[1];
setVector ve214 = {nen[1,2,3]};
setVector ve215 = {nen[1,2,3]};
dotVectors tempmv213[0] = <ve214,ve215>;
resetMv tempmv216[1];
setMv tempmv216[0] = nen[1];
resetMv tempmv217[1];
setMv tempmv217[0] = tempmv213[0];
calculateMvCoeff tempmv212[0] = DIVISION(tempmv216,tempmv217);
resetMv tempmv218[1];
resetMv tempmv219[1];
setVector ve220 = {nen[1,2,3]};
setVector ve221 = {nen[1,2,3]};
dotVectors tempmv219[0] = <ve220,ve221>;
resetMv tempmv222[1];
setMv tempmv222[0] = nen[2];
resetMv tempmv223[1];
setMv tempmv223[0] = tempmv219[0];
calculateMvCoeff tempmv218[0] = DIVISION(tempmv222,tempmv223);
resetMv tempmv224[1];
resetMv tempmv225[1];
setVector ve226 = {nen[1,2,3]};
setVector ve227 = {nen[1,2,3]};
dotVectors tempmv225[0] = <ve226,ve227>;
resetMv tempmv228[1];
setMv tempmv228[0] = nen[3];
resetMv tempmv229[1];
setMv tempmv229[0] = tempmv225[0];
calculateMvCoeff tempmv224[0] = DIVISION(tempmv228,tempmv229);
resetMv tempmv230[1];
resetMv tempmv231[1];
setVector ve232 = {nen[1,2,3]};
setVector ve233 = {nen[1,2,3]};
dotVectors tempmv231[0] = <ve232,ve233>;
resetMv tempmv234[1];
setMv tempmv234[0] = nen[4];
resetMv tempmv235[1];
setMv tempmv235[0] = tempmv231[0];
calculateMvCoeff tempmv230[0] = DIVISION(tempmv234,tempmv235);
setVector ve236 = {len[0],rcPpDual[-8,-11,-13,-15]};
setVector ve237 = {tempmv206[0],tempmv212[0],tempmv218[0],tempmv224[0],tempmv230[0]};
dotVectors rc1[4] = <ve236,ve237>;

//rc1[5] = ((-(rcPpDual[9] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(rcPpDual[12] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[14] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv238[1];
resetMv tempmv239[1];
setVector ve240 = {nen[1,2,3]};
setVector ve241 = {nen[1,2,3]};
dotVectors tempmv239[0] = <ve240,ve241>;
resetMv tempmv242[1];
setMv tempmv242[0] = nen[1];
resetMv tempmv243[1];
setMv tempmv243[0] = tempmv239[0];
calculateMvCoeff tempmv238[0] = DIVISION(tempmv242,tempmv243);
resetMv tempmv244[1];
resetMv tempmv245[1];
setVector ve246 = {nen[1,2,3]};
setVector ve247 = {nen[1,2,3]};
dotVectors tempmv245[0] = <ve246,ve247>;
resetMv tempmv248[1];
setMv tempmv248[0] = nen[2];
resetMv tempmv249[1];
setMv tempmv249[0] = tempmv245[0];
calculateMvCoeff tempmv244[0] = DIVISION(tempmv248,tempmv249);
resetMv tempmv250[1];
resetMv tempmv251[1];
setVector ve252 = {nen[1,2,3]};
setVector ve253 = {nen[1,2,3]};
dotVectors tempmv251[0] = <ve252,ve253>;
resetMv tempmv254[1];
setMv tempmv254[0] = nen[3];
resetMv tempmv255[1];
setMv tempmv255[0] = tempmv251[0];
calculateMvCoeff tempmv250[0] = DIVISION(tempmv254,tempmv255);
setVector ve256 = {rcPpDual[-9,-12,-14]};
setVector ve257 = {tempmv238[0],tempmv244[0],tempmv250[0]};
dotVectors rc1[5] = <ve256,ve257>;

//rc1[16] = ((rcPpDual[6] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[7] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[10] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv258[1];
resetMv tempmv259[1];
setVector ve260 = {nen[1,2,3]};
setVector ve261 = {nen[1,2,3]};
dotVectors tempmv259[0] = <ve260,ve261>;
resetMv tempmv262[1];
setMv tempmv262[0] = nen[3];
resetMv tempmv263[1];
setMv tempmv263[0] = tempmv259[0];
calculateMvCoeff tempmv258[0] = DIVISION(tempmv262,tempmv263);
resetMv tempmv264[1];
resetMv tempmv265[1];
setVector ve266 = {nen[1,2,3]};
setVector ve267 = {nen[1,2,3]};
dotVectors tempmv265[0] = <ve266,ve267>;
resetMv tempmv268[1];
setMv tempmv268[0] = nen[2];
resetMv tempmv269[1];
setMv tempmv269[0] = tempmv265[0];
calculateMvCoeff tempmv264[0] = DIVISION(tempmv268,tempmv269);
resetMv tempmv270[1];
resetMv tempmv271[1];
setVector ve272 = {nen[1,2,3]};
setVector ve273 = {nen[1,2,3]};
dotVectors tempmv271[0] = <ve272,ve273>;
resetMv tempmv274[1];
setMv tempmv274[0] = nen[1];
resetMv tempmv275[1];
setMv tempmv275[0] = tempmv271[0];
calculateMvCoeff tempmv270[0] = DIVISION(tempmv274,tempmv275);
setVector ve276 = {rcPpDual[6,-7,10]};
setVector ve277 = {tempmv258[0],tempmv264[0],tempmv270[0]};
dotVectors rc1[16] = <ve276,ve277>;

//rc1[17] = ((rcPpDual[6] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[8] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[11] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv278[1];
resetMv tempmv279[1];
setVector ve280 = {nen[1,2,3]};
setVector ve281 = {nen[1,2,3]};
dotVectors tempmv279[0] = <ve280,ve281>;
resetMv tempmv282[1];
setMv tempmv282[0] = nen[4];
resetMv tempmv283[1];
setMv tempmv283[0] = tempmv279[0];
calculateMvCoeff tempmv278[0] = DIVISION(tempmv282,tempmv283);
resetMv tempmv284[1];
resetMv tempmv285[1];
setVector ve286 = {nen[1,2,3]};
setVector ve287 = {nen[1,2,3]};
dotVectors tempmv285[0] = <ve286,ve287>;
resetMv tempmv288[1];
setMv tempmv288[0] = nen[2];
resetMv tempmv289[1];
setMv tempmv289[0] = tempmv285[0];
calculateMvCoeff tempmv284[0] = DIVISION(tempmv288,tempmv289);
resetMv tempmv290[1];
resetMv tempmv291[1];
setVector ve292 = {nen[1,2,3]};
setVector ve293 = {nen[1,2,3]};
dotVectors tempmv291[0] = <ve292,ve293>;
resetMv tempmv294[1];
setMv tempmv294[0] = nen[1];
resetMv tempmv295[1];
setMv tempmv295[0] = tempmv291[0];
calculateMvCoeff tempmv290[0] = DIVISION(tempmv294,tempmv295);
setVector ve296 = {rcPpDual[6,-8,11]};
setVector ve297 = {tempmv278[0],tempmv284[0],tempmv290[0]};
dotVectors rc1[17] = <ve296,ve297>;

//rc1[18] = (-(rcPpDual[9] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[12] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv298[1];
resetMv tempmv299[1];
setVector ve300 = {nen[1,2,3]};
setVector ve301 = {nen[1,2,3]};
dotVectors tempmv299[0] = <ve300,ve301>;
resetMv tempmv302[1];
setMv tempmv302[0] = nen[2];
resetMv tempmv303[1];
setMv tempmv303[0] = tempmv299[0];
calculateMvCoeff tempmv298[0] = DIVISION(tempmv302,tempmv303);
resetMv tempmv304[1];
resetMv tempmv305[1];
setVector ve306 = {nen[1,2,3]};
setVector ve307 = {nen[1,2,3]};
dotVectors tempmv305[0] = <ve306,ve307>;
resetMv tempmv308[1];
setMv tempmv308[0] = nen[1];
resetMv tempmv309[1];
setMv tempmv309[0] = tempmv305[0];
calculateMvCoeff tempmv304[0] = DIVISION(tempmv308,tempmv309);
setVector ve310 = {rcPpDual[-9,12]};
setVector ve311 = {tempmv298[0],tempmv304[0]};
dotVectors rc1[18] = <ve310,ve311>;

//rc1[19] = ((rcPpDual[7] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[8] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[13] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv312[1];
resetMv tempmv313[1];
setVector ve314 = {nen[1,2,3]};
setVector ve315 = {nen[1,2,3]};
dotVectors tempmv313[0] = <ve314,ve315>;
resetMv tempmv316[1];
setMv tempmv316[0] = nen[4];
resetMv tempmv317[1];
setMv tempmv317[0] = tempmv313[0];
calculateMvCoeff tempmv312[0] = DIVISION(tempmv316,tempmv317);
resetMv tempmv318[1];
resetMv tempmv319[1];
setVector ve320 = {nen[1,2,3]};
setVector ve321 = {nen[1,2,3]};
dotVectors tempmv319[0] = <ve320,ve321>;
resetMv tempmv322[1];
setMv tempmv322[0] = nen[3];
resetMv tempmv323[1];
setMv tempmv323[0] = tempmv319[0];
calculateMvCoeff tempmv318[0] = DIVISION(tempmv322,tempmv323);
resetMv tempmv324[1];
resetMv tempmv325[1];
setVector ve326 = {nen[1,2,3]};
setVector ve327 = {nen[1,2,3]};
dotVectors tempmv325[0] = <ve326,ve327>;
resetMv tempmv328[1];
setMv tempmv328[0] = nen[1];
resetMv tempmv329[1];
setMv tempmv329[0] = tempmv325[0];
calculateMvCoeff tempmv324[0] = DIVISION(tempmv328,tempmv329);
setVector ve330 = {rcPpDual[7,-8,13]};
setVector ve331 = {tempmv312[0],tempmv318[0],tempmv324[0]};
dotVectors rc1[19] = <ve330,ve331>;

//rc1[20] = (-(rcPpDual[9] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[14] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv332[1];
resetMv tempmv333[1];
setVector ve334 = {nen[1,2,3]};
setVector ve335 = {nen[1,2,3]};
dotVectors tempmv333[0] = <ve334,ve335>;
resetMv tempmv336[1];
setMv tempmv336[0] = nen[3];
resetMv tempmv337[1];
setMv tempmv337[0] = tempmv333[0];
calculateMvCoeff tempmv332[0] = DIVISION(tempmv336,tempmv337);
resetMv tempmv338[1];
resetMv tempmv339[1];
setVector ve340 = {nen[1,2,3]};
setVector ve341 = {nen[1,2,3]};
dotVectors tempmv339[0] = <ve340,ve341>;
resetMv tempmv342[1];
setMv tempmv342[0] = nen[1];
resetMv tempmv343[1];
setMv tempmv343[0] = tempmv339[0];
calculateMvCoeff tempmv338[0] = DIVISION(tempmv342,tempmv343);
setVector ve344 = {rcPpDual[-9,14]};
setVector ve345 = {tempmv332[0],tempmv338[0]};
dotVectors rc1[20] = <ve344,ve345>;

//rc1[21] = (-(rcPpDual[9] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[15] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv346[1];
resetMv tempmv347[1];
setVector ve348 = {nen[1,2,3]};
setVector ve349 = {nen[1,2,3]};
dotVectors tempmv347[0] = <ve348,ve349>;
resetMv tempmv350[1];
setMv tempmv350[0] = nen[4];
resetMv tempmv351[1];
setMv tempmv351[0] = tempmv347[0];
calculateMvCoeff tempmv346[0] = DIVISION(tempmv350,tempmv351);
resetMv tempmv352[1];
resetMv tempmv353[1];
setVector ve354 = {nen[1,2,3]};
setVector ve355 = {nen[1,2,3]};
dotVectors tempmv353[0] = <ve354,ve355>;
resetMv tempmv356[1];
setMv tempmv356[0] = nen[1];
resetMv tempmv357[1];
setMv tempmv357[0] = tempmv353[0];
calculateMvCoeff tempmv352[0] = DIVISION(tempmv356,tempmv357);
setVector ve358 = {rcPpDual[-9,15]};
setVector ve359 = {tempmv346[0],tempmv352[0]};
dotVectors rc1[21] = <ve358,ve359>;

//rc1[22] = ((rcPpDual[10] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[11] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[13] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv360[1];
resetMv tempmv361[1];
setVector ve362 = {nen[1,2,3]};
setVector ve363 = {nen[1,2,3]};
dotVectors tempmv361[0] = <ve362,ve363>;
resetMv tempmv364[1];
setMv tempmv364[0] = nen[4];
resetMv tempmv365[1];
setMv tempmv365[0] = tempmv361[0];
calculateMvCoeff tempmv360[0] = DIVISION(tempmv364,tempmv365);
resetMv tempmv366[1];
resetMv tempmv367[1];
setVector ve368 = {nen[1,2,3]};
setVector ve369 = {nen[1,2,3]};
dotVectors tempmv367[0] = <ve368,ve369>;
resetMv tempmv370[1];
setMv tempmv370[0] = nen[3];
resetMv tempmv371[1];
setMv tempmv371[0] = tempmv367[0];
calculateMvCoeff tempmv366[0] = DIVISION(tempmv370,tempmv371);
resetMv tempmv372[1];
resetMv tempmv373[1];
setVector ve374 = {nen[1,2,3]};
setVector ve375 = {nen[1,2,3]};
dotVectors tempmv373[0] = <ve374,ve375>;
resetMv tempmv376[1];
setMv tempmv376[0] = nen[2];
resetMv tempmv377[1];
setMv tempmv377[0] = tempmv373[0];
calculateMvCoeff tempmv372[0] = DIVISION(tempmv376,tempmv377);
setVector ve378 = {rcPpDual[10,-11,13]};
setVector ve379 = {tempmv360[0],tempmv366[0],tempmv372[0]};
dotVectors rc1[22] = <ve378,ve379>;

//rc1[23] = (-(rcPpDual[12] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[14] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv380[1];
resetMv tempmv381[1];
setVector ve382 = {nen[1,2,3]};
setVector ve383 = {nen[1,2,3]};
dotVectors tempmv381[0] = <ve382,ve383>;
resetMv tempmv384[1];
setMv tempmv384[0] = nen[3];
resetMv tempmv385[1];
setMv tempmv385[0] = tempmv381[0];
calculateMvCoeff tempmv380[0] = DIVISION(tempmv384,tempmv385);
resetMv tempmv386[1];
resetMv tempmv387[1];
setVector ve388 = {nen[1,2,3]};
setVector ve389 = {nen[1,2,3]};
dotVectors tempmv387[0] = <ve388,ve389>;
resetMv tempmv390[1];
setMv tempmv390[0] = nen[2];
resetMv tempmv391[1];
setMv tempmv391[0] = tempmv387[0];
calculateMvCoeff tempmv386[0] = DIVISION(tempmv390,tempmv391);
setVector ve392 = {rcPpDual[-12,14]};
setVector ve393 = {tempmv380[0],tempmv386[0]};
dotVectors rc1[23] = <ve392,ve393>;

//rc1[24] = (-(rcPpDual[12] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[15] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv394[1];
resetMv tempmv395[1];
setVector ve396 = {nen[1,2,3]};
setVector ve397 = {nen[1,2,3]};
dotVectors tempmv395[0] = <ve396,ve397>;
resetMv tempmv398[1];
setMv tempmv398[0] = nen[4];
resetMv tempmv399[1];
setMv tempmv399[0] = tempmv395[0];
calculateMvCoeff tempmv394[0] = DIVISION(tempmv398,tempmv399);
resetMv tempmv400[1];
resetMv tempmv401[1];
setVector ve402 = {nen[1,2,3]};
setVector ve403 = {nen[1,2,3]};
dotVectors tempmv401[0] = <ve402,ve403>;
resetMv tempmv404[1];
setMv tempmv404[0] = nen[2];
resetMv tempmv405[1];
setMv tempmv405[0] = tempmv401[0];
calculateMvCoeff tempmv400[0] = DIVISION(tempmv404,tempmv405);
setVector ve406 = {rcPpDual[-12,15]};
setVector ve407 = {tempmv394[0],tempmv400[0]};
dotVectors rc1[24] = <ve406,ve407>;

//rc1[25] = (-(rcPpDual[14] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[15] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv408[1];
resetMv tempmv409[1];
setVector ve410 = {nen[1,2,3]};
setVector ve411 = {nen[1,2,3]};
dotVectors tempmv409[0] = <ve410,ve411>;
resetMv tempmv412[1];
setMv tempmv412[0] = nen[4];
resetMv tempmv413[1];
setMv tempmv413[0] = tempmv409[0];
calculateMvCoeff tempmv408[0] = DIVISION(tempmv412,tempmv413);
resetMv tempmv414[1];
resetMv tempmv415[1];
setVector ve416 = {nen[1,2,3]};
setVector ve417 = {nen[1,2,3]};
dotVectors tempmv415[0] = <ve416,ve417>;
resetMv tempmv418[1];
setMv tempmv418[0] = nen[3];
resetMv tempmv419[1];
setMv tempmv419[0] = tempmv415[0];
calculateMvCoeff tempmv414[0] = DIVISION(tempmv418,tempmv419);
setVector ve420 = {rcPpDual[-14,15]};
setVector ve421 = {tempmv408[0],tempmv414[0]};
dotVectors rc1[25] = <ve420,ve421>;

//rc1N[1] = -(((((((rc1[1] * ((-(rc1[5])) / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))) + (-(rc1[2] * (rc1[18] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-(rc1[3] * (rc1[20] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (rc1[5] * (rc1[21] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (-(rc1[16] * (rc1[23] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (rc1[18] * (rc1[24] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (rc1[20] * (rc1[25] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))
resetMv rc1N[32];
resetMv tempmv422[1];
resetMv tempmv423[1];
setVector ve424 = {rc1[-5,18,20,23]};
setVector ve425 = {rc1[-5,18,20,23]};
dotVectors tempmv423[0] = <ve424,ve425>;
resetMv tempmv426[1];
setMv tempmv426[0] = rc1[-5];
resetMv tempmv427[1];
setMv tempmv427[0] = tempmv423[0];
calculateMvCoeff tempmv422[0] = DIVISION(tempmv426,tempmv427);
resetMv tempmv428[1];
resetMv tempmv429[1];
setVector ve430 = {rc1[-5,18,20,23]};
setVector ve431 = {rc1[-5,18,20,23]};
dotVectors tempmv429[0] = <ve430,ve431>;
resetMv tempmv432[1];
setMv tempmv432[0] = rc1[18];
resetMv tempmv433[1];
setMv tempmv433[0] = tempmv429[0];
calculateMvCoeff tempmv428[0] = DIVISION(tempmv432,tempmv433);
resetMv tempmv434[1];
resetMv tempmv435[1];
setVector ve436 = {rc1[-5,18,20,23]};
setVector ve437 = {rc1[-5,18,20,23]};
dotVectors tempmv435[0] = <ve436,ve437>;
resetMv tempmv438[1];
setMv tempmv438[0] = rc1[20];
resetMv tempmv439[1];
setMv tempmv439[0] = tempmv435[0];
calculateMvCoeff tempmv434[0] = DIVISION(tempmv438,tempmv439);
resetMv tempmv440[1];
resetMv tempmv441[1];
setVector ve442 = {rc1[-5,18,20,23]};
setVector ve443 = {rc1[-5,18,20,23]};
dotVectors tempmv441[0] = <ve442,ve443>;
resetMv tempmv444[1];
setMv tempmv444[0] = rc1[21];
resetMv tempmv445[1];
setMv tempmv445[0] = tempmv441[0];
calculateMvCoeff tempmv440[0] = DIVISION(tempmv444,tempmv445);
resetMv tempmv446[1];
resetMv tempmv447[1];
setVector ve448 = {rc1[-5,18,20,23]};
setVector ve449 = {rc1[-5,18,20,23]};
dotVectors tempmv447[0] = <ve448,ve449>;
resetMv tempmv450[1];
setMv tempmv450[0] = rc1[23];
resetMv tempmv451[1];
setMv tempmv451[0] = tempmv447[0];
calculateMvCoeff tempmv446[0] = DIVISION(tempmv450,tempmv451);
resetMv tempmv452[1];
resetMv tempmv453[1];
setVector ve454 = {rc1[-5,18,20,23]};
setVector ve455 = {rc1[-5,18,20,23]};
dotVectors tempmv453[0] = <ve454,ve455>;
resetMv tempmv456[1];
setMv tempmv456[0] = rc1[24];
resetMv tempmv457[1];
setMv tempmv457[0] = tempmv453[0];
calculateMvCoeff tempmv452[0] = DIVISION(tempmv456,tempmv457);
resetMv tempmv458[1];
resetMv tempmv459[1];
setVector ve460 = {rc1[-5,18,20,23]};
setVector ve461 = {rc1[-5,18,20,23]};
dotVectors tempmv459[0] = <ve460,ve461>;
resetMv tempmv462[1];
setMv tempmv462[0] = rc1[25];
resetMv tempmv463[1];
setMv tempmv463[0] = tempmv459[0];
calculateMvCoeff tempmv458[0] = DIVISION(tempmv462,tempmv463);
resetMv tempmv464[1];
setVector ve465 = {rc1[1,-2,-3,5,-16,18,20]};
setVector ve466 = {tempmv422[0],tempmv428[0],tempmv434[0],tempmv440[0],tempmv446[0],tempmv452[0],tempmv458[0]};
dotVectors tempmv464[0] = <ve465,ve466>;
setMv rc1N[1] = tempmv464[-0];

//rc1N[2] = -(((((((rc1[1] * (rc1[18] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))) + (rc1[2] * ((-(rc1[5])) / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (-(rc1[3] * (rc1[23] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (rc1[5] * (rc1[24] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (rc1[16] * (rc1[20] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (-(rc1[18] * (rc1[21] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (rc1[23] * (rc1[25] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))
resetMv tempmv467[1];
resetMv tempmv468[1];
setVector ve469 = {rc1[-5,18,20,23]};
setVector ve470 = {rc1[-5,18,20,23]};
dotVectors tempmv468[0] = <ve469,ve470>;
resetMv tempmv471[1];
setMv tempmv471[0] = rc1[18];
resetMv tempmv472[1];
setMv tempmv472[0] = tempmv468[0];
calculateMvCoeff tempmv467[0] = DIVISION(tempmv471,tempmv472);
resetMv tempmv473[1];
resetMv tempmv474[1];
setVector ve475 = {rc1[-5,18,20,23]};
setVector ve476 = {rc1[-5,18,20,23]};
dotVectors tempmv474[0] = <ve475,ve476>;
resetMv tempmv477[1];
setMv tempmv477[0] = rc1[-5];
resetMv tempmv478[1];
setMv tempmv478[0] = tempmv474[0];
calculateMvCoeff tempmv473[0] = DIVISION(tempmv477,tempmv478);
resetMv tempmv479[1];
resetMv tempmv480[1];
setVector ve481 = {rc1[-5,18,20,23]};
setVector ve482 = {rc1[-5,18,20,23]};
dotVectors tempmv480[0] = <ve481,ve482>;
resetMv tempmv483[1];
setMv tempmv483[0] = rc1[23];
resetMv tempmv484[1];
setMv tempmv484[0] = tempmv480[0];
calculateMvCoeff tempmv479[0] = DIVISION(tempmv483,tempmv484);
resetMv tempmv485[1];
resetMv tempmv486[1];
setVector ve487 = {rc1[-5,18,20,23]};
setVector ve488 = {rc1[-5,18,20,23]};
dotVectors tempmv486[0] = <ve487,ve488>;
resetMv tempmv489[1];
setMv tempmv489[0] = rc1[24];
resetMv tempmv490[1];
setMv tempmv490[0] = tempmv486[0];
calculateMvCoeff tempmv485[0] = DIVISION(tempmv489,tempmv490);
resetMv tempmv491[1];
resetMv tempmv492[1];
setVector ve493 = {rc1[-5,18,20,23]};
setVector ve494 = {rc1[-5,18,20,23]};
dotVectors tempmv492[0] = <ve493,ve494>;
resetMv tempmv495[1];
setMv tempmv495[0] = rc1[20];
resetMv tempmv496[1];
setMv tempmv496[0] = tempmv492[0];
calculateMvCoeff tempmv491[0] = DIVISION(tempmv495,tempmv496);
resetMv tempmv497[1];
resetMv tempmv498[1];
setVector ve499 = {rc1[-5,18,20,23]};
setVector ve500 = {rc1[-5,18,20,23]};
dotVectors tempmv498[0] = <ve499,ve500>;
resetMv tempmv501[1];
setMv tempmv501[0] = rc1[21];
resetMv tempmv502[1];
setMv tempmv502[0] = tempmv498[0];
calculateMvCoeff tempmv497[0] = DIVISION(tempmv501,tempmv502);
resetMv tempmv503[1];
resetMv tempmv504[1];
setVector ve505 = {rc1[-5,18,20,23]};
setVector ve506 = {rc1[-5,18,20,23]};
dotVectors tempmv504[0] = <ve505,ve506>;
resetMv tempmv507[1];
setMv tempmv507[0] = rc1[25];
resetMv tempmv508[1];
setMv tempmv508[0] = tempmv504[0];
calculateMvCoeff tempmv503[0] = DIVISION(tempmv507,tempmv508);
resetMv tempmv509[1];
setVector ve510 = {rc1[1,2,-3,5,16,-18,23]};
setVector ve511 = {tempmv467[0],tempmv473[0],tempmv479[0],tempmv485[0],tempmv491[0],tempmv497[0],tempmv503[0]};
dotVectors tempmv509[0] = <ve510,ve511>;
setMv rc1N[2] = tempmv509[-0];

//rc1N[3] = -(((((((rc1[1] * (rc1[20] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))) + (rc1[2] * (rc1[23] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (rc1[3] * ((-(rc1[5])) / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (rc1[5] * (rc1[25] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (-(rc1[16] * (rc1[18] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-(rc1[20] * (rc1[21] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-(rc1[23] * (rc1[24] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))))
resetMv tempmv512[1];
resetMv tempmv513[1];
setVector ve514 = {rc1[-5,18,20,23]};
setVector ve515 = {rc1[-5,18,20,23]};
dotVectors tempmv513[0] = <ve514,ve515>;
resetMv tempmv516[1];
setMv tempmv516[0] = rc1[20];
resetMv tempmv517[1];
setMv tempmv517[0] = tempmv513[0];
calculateMvCoeff tempmv512[0] = DIVISION(tempmv516,tempmv517);
resetMv tempmv518[1];
resetMv tempmv519[1];
setVector ve520 = {rc1[-5,18,20,23]};
setVector ve521 = {rc1[-5,18,20,23]};
dotVectors tempmv519[0] = <ve520,ve521>;
resetMv tempmv522[1];
setMv tempmv522[0] = rc1[23];
resetMv tempmv523[1];
setMv tempmv523[0] = tempmv519[0];
calculateMvCoeff tempmv518[0] = DIVISION(tempmv522,tempmv523);
resetMv tempmv524[1];
resetMv tempmv525[1];
setVector ve526 = {rc1[-5,18,20,23]};
setVector ve527 = {rc1[-5,18,20,23]};
dotVectors tempmv525[0] = <ve526,ve527>;
resetMv tempmv528[1];
setMv tempmv528[0] = rc1[-5];
resetMv tempmv529[1];
setMv tempmv529[0] = tempmv525[0];
calculateMvCoeff tempmv524[0] = DIVISION(tempmv528,tempmv529);
resetMv tempmv530[1];
resetMv tempmv531[1];
setVector ve532 = {rc1[-5,18,20,23]};
setVector ve533 = {rc1[-5,18,20,23]};
dotVectors tempmv531[0] = <ve532,ve533>;
resetMv tempmv534[1];
setMv tempmv534[0] = rc1[25];
resetMv tempmv535[1];
setMv tempmv535[0] = tempmv531[0];
calculateMvCoeff tempmv530[0] = DIVISION(tempmv534,tempmv535);
resetMv tempmv536[1];
resetMv tempmv537[1];
setVector ve538 = {rc1[-5,18,20,23]};
setVector ve539 = {rc1[-5,18,20,23]};
dotVectors tempmv537[0] = <ve538,ve539>;
resetMv tempmv540[1];
setMv tempmv540[0] = rc1[18];
resetMv tempmv541[1];
setMv tempmv541[0] = tempmv537[0];
calculateMvCoeff tempmv536[0] = DIVISION(tempmv540,tempmv541);
resetMv tempmv542[1];
resetMv tempmv543[1];
setVector ve544 = {rc1[-5,18,20,23]};
setVector ve545 = {rc1[-5,18,20,23]};
dotVectors tempmv543[0] = <ve544,ve545>;
resetMv tempmv546[1];
setMv tempmv546[0] = rc1[21];
resetMv tempmv547[1];
setMv tempmv547[0] = tempmv543[0];
calculateMvCoeff tempmv542[0] = DIVISION(tempmv546,tempmv547);
resetMv tempmv548[1];
resetMv tempmv549[1];
setVector ve550 = {rc1[-5,18,20,23]};
setVector ve551 = {rc1[-5,18,20,23]};
dotVectors tempmv549[0] = <ve550,ve551>;
resetMv tempmv552[1];
setMv tempmv552[0] = rc1[24];
resetMv tempmv553[1];
setMv tempmv553[0] = tempmv549[0];
calculateMvCoeff tempmv548[0] = DIVISION(tempmv552,tempmv553);
resetMv tempmv554[1];
setVector ve555 = {rc1[1,2,3,5,-16,-20,-23]};
setVector ve556 = {tempmv512[0],tempmv518[0],tempmv524[0],tempmv530[0],tempmv536[0],tempmv542[0],tempmv548[0]};
dotVectors tempmv554[0] = <ve555,ve556>;
setMv rc1N[3] = tempmv554[-0];

//rc1N[4] = -((((((((((rc1[1] * (rc1[21] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))) + (rc1[2] * (rc1[24] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (rc1[3] * (rc1[25] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (rc1[4] * ((-(rc1[5])) / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (-(rc1[17] * (rc1[18] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-(rc1[19] * (rc1[20] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-(rc1[21] * (rc1[21] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-(rc1[22] * (rc1[23] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-(rc1[24] * (rc1[24] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-(rc1[25] * (rc1[25] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))))
resetMv tempmv557[1];
resetMv tempmv558[1];
setVector ve559 = {rc1[-5,18,20,23]};
setVector ve560 = {rc1[-5,18,20,23]};
dotVectors tempmv558[0] = <ve559,ve560>;
resetMv tempmv561[1];
setMv tempmv561[0] = rc1[21];
resetMv tempmv562[1];
setMv tempmv562[0] = tempmv558[0];
calculateMvCoeff tempmv557[0] = DIVISION(tempmv561,tempmv562);
resetMv tempmv563[1];
resetMv tempmv564[1];
setVector ve565 = {rc1[-5,18,20,23]};
setVector ve566 = {rc1[-5,18,20,23]};
dotVectors tempmv564[0] = <ve565,ve566>;
resetMv tempmv567[1];
setMv tempmv567[0] = rc1[24];
resetMv tempmv568[1];
setMv tempmv568[0] = tempmv564[0];
calculateMvCoeff tempmv563[0] = DIVISION(tempmv567,tempmv568);
resetMv tempmv569[1];
resetMv tempmv570[1];
setVector ve571 = {rc1[-5,18,20,23]};
setVector ve572 = {rc1[-5,18,20,23]};
dotVectors tempmv570[0] = <ve571,ve572>;
resetMv tempmv573[1];
setMv tempmv573[0] = rc1[25];
resetMv tempmv574[1];
setMv tempmv574[0] = tempmv570[0];
calculateMvCoeff tempmv569[0] = DIVISION(tempmv573,tempmv574);
resetMv tempmv575[1];
resetMv tempmv576[1];
setVector ve577 = {rc1[-5,18,20,23]};
setVector ve578 = {rc1[-5,18,20,23]};
dotVectors tempmv576[0] = <ve577,ve578>;
resetMv tempmv579[1];
setMv tempmv579[0] = rc1[-5];
resetMv tempmv580[1];
setMv tempmv580[0] = tempmv576[0];
calculateMvCoeff tempmv575[0] = DIVISION(tempmv579,tempmv580);
resetMv tempmv581[1];
resetMv tempmv582[1];
setVector ve583 = {rc1[-5,18,20,23]};
setVector ve584 = {rc1[-5,18,20,23]};
dotVectors tempmv582[0] = <ve583,ve584>;
resetMv tempmv585[1];
setMv tempmv585[0] = rc1[18];
resetMv tempmv586[1];
setMv tempmv586[0] = tempmv582[0];
calculateMvCoeff tempmv581[0] = DIVISION(tempmv585,tempmv586);
resetMv tempmv587[1];
resetMv tempmv588[1];
setVector ve589 = {rc1[-5,18,20,23]};
setVector ve590 = {rc1[-5,18,20,23]};
dotVectors tempmv588[0] = <ve589,ve590>;
resetMv tempmv591[1];
setMv tempmv591[0] = rc1[20];
resetMv tempmv592[1];
setMv tempmv592[0] = tempmv588[0];
calculateMvCoeff tempmv587[0] = DIVISION(tempmv591,tempmv592);
resetMv tempmv593[1];
resetMv tempmv594[1];
setVector ve595 = {rc1[-5,18,20,23]};
setVector ve596 = {rc1[-5,18,20,23]};
dotVectors tempmv594[0] = <ve595,ve596>;
resetMv tempmv597[1];
setMv tempmv597[0] = rc1[21];
resetMv tempmv598[1];
setMv tempmv598[0] = tempmv594[0];
calculateMvCoeff tempmv593[0] = DIVISION(tempmv597,tempmv598);
resetMv tempmv599[1];
resetMv tempmv600[1];
setVector ve601 = {rc1[-5,18,20,23]};
setVector ve602 = {rc1[-5,18,20,23]};
dotVectors tempmv600[0] = <ve601,ve602>;
resetMv tempmv603[1];
setMv tempmv603[0] = rc1[23];
resetMv tempmv604[1];
setMv tempmv604[0] = tempmv600[0];
calculateMvCoeff tempmv599[0] = DIVISION(tempmv603,tempmv604);
resetMv tempmv605[1];
resetMv tempmv606[1];
setVector ve607 = {rc1[-5,18,20,23]};
setVector ve608 = {rc1[-5,18,20,23]};
dotVectors tempmv606[0] = <ve607,ve608>;
resetMv tempmv609[1];
setMv tempmv609[0] = rc1[24];
resetMv tempmv610[1];
setMv tempmv610[0] = tempmv606[0];
calculateMvCoeff tempmv605[0] = DIVISION(tempmv609,tempmv610);
resetMv tempmv611[1];
resetMv tempmv612[1];
setVector ve613 = {rc1[-5,18,20,23]};
setVector ve614 = {rc1[-5,18,20,23]};
dotVectors tempmv612[0] = <ve613,ve614>;
resetMv tempmv615[1];
setMv tempmv615[0] = rc1[25];
resetMv tempmv616[1];
setMv tempmv616[0] = tempmv612[0];
calculateMvCoeff tempmv611[0] = DIVISION(tempmv615,tempmv616);
resetMv tempmv617[1];
setVector ve618 = {rc1[1,2,3,4,-17,-19,-21,-22,-24,-25]};
setVector ve619 = {tempmv557[0],tempmv563[0],tempmv569[0],tempmv575[0],tempmv581[0],tempmv587[0],tempmv593[0],tempmv599[0],tempmv605[0],tempmv611[0]};
dotVectors tempmv617[0] = <ve618,ve619>;
setMv rc1N[4] = tempmv617[-0];

//rc1N[5] = -((((rc1[5] * ((-(rc1[5])) / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))) + (-(rc1[18] * (rc1[18] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-(rc1[20] * (rc1[20] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-(rc1[23] * (rc1[23] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))))
resetMv tempmv620[1];
resetMv tempmv621[1];
setVector ve622 = {rc1[-5,18,20,23]};
setVector ve623 = {rc1[-5,18,20,23]};
dotVectors tempmv621[0] = <ve622,ve623>;
resetMv tempmv624[1];
setMv tempmv624[0] = rc1[-5];
resetMv tempmv625[1];
setMv tempmv625[0] = tempmv621[0];
calculateMvCoeff tempmv620[0] = DIVISION(tempmv624,tempmv625);
resetMv tempmv626[1];
resetMv tempmv627[1];
setVector ve628 = {rc1[-5,18,20,23]};
setVector ve629 = {rc1[-5,18,20,23]};
dotVectors tempmv627[0] = <ve628,ve629>;
resetMv tempmv630[1];
setMv tempmv630[0] = rc1[18];
resetMv tempmv631[1];
setMv tempmv631[0] = tempmv627[0];
calculateMvCoeff tempmv626[0] = DIVISION(tempmv630,tempmv631);
resetMv tempmv632[1];
resetMv tempmv633[1];
setVector ve634 = {rc1[-5,18,20,23]};
setVector ve635 = {rc1[-5,18,20,23]};
dotVectors tempmv633[0] = <ve634,ve635>;
resetMv tempmv636[1];
setMv tempmv636[0] = rc1[20];
resetMv tempmv637[1];
setMv tempmv637[0] = tempmv633[0];
calculateMvCoeff tempmv632[0] = DIVISION(tempmv636,tempmv637);
resetMv tempmv638[1];
resetMv tempmv639[1];
setVector ve640 = {rc1[-5,18,20,23]};
setVector ve641 = {rc1[-5,18,20,23]};
dotVectors tempmv639[0] = <ve640,ve641>;
resetMv tempmv642[1];
setMv tempmv642[0] = rc1[23];
resetMv tempmv643[1];
setMv tempmv643[0] = tempmv639[0];
calculateMvCoeff tempmv638[0] = DIVISION(tempmv642,tempmv643);
resetMv tempmv644[1];
setVector ve645 = {rc1[5,-18,-20,-23]};
setVector ve646 = {tempmv620[0],tempmv626[0],tempmv632[0],tempmv638[0]};
dotVectors tempmv644[0] = <ve645,ve646>;
setMv rc1N[5] = tempmv644[-0];

//rc2[1] = ((((-(len[0])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (rcPpDual[6] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[7] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(rcPpDual[9] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv rc2[32];
resetMv tempmv647[1];
resetMv tempmv648[1];
setVector ve649 = {nen[1,2,3]};
setVector ve650 = {nen[1,2,3]};
dotVectors tempmv648[0] = <ve649,ve650>;
resetMv tempmv651[1];
setMv tempmv651[0] = nen[1];
resetMv tempmv652[1];
setMv tempmv652[0] = tempmv648[0];
calculateMvCoeff tempmv647[0] = DIVISION(tempmv651,tempmv652);
resetMv tempmv653[1];
resetMv tempmv654[1];
setVector ve655 = {nen[1,2,3]};
setVector ve656 = {nen[1,2,3]};
dotVectors tempmv654[0] = <ve655,ve656>;
resetMv tempmv657[1];
setMv tempmv657[0] = nen[2];
resetMv tempmv658[1];
setMv tempmv658[0] = tempmv654[0];
calculateMvCoeff tempmv653[0] = DIVISION(tempmv657,tempmv658);
resetMv tempmv659[1];
resetMv tempmv660[1];
setVector ve661 = {nen[1,2,3]};
setVector ve662 = {nen[1,2,3]};
dotVectors tempmv660[0] = <ve661,ve662>;
resetMv tempmv663[1];
setMv tempmv663[0] = nen[3];
resetMv tempmv664[1];
setMv tempmv664[0] = tempmv660[0];
calculateMvCoeff tempmv659[0] = DIVISION(tempmv663,tempmv664);
resetMv tempmv665[1];
resetMv tempmv666[1];
setVector ve667 = {nen[1,2,3]};
setVector ve668 = {nen[1,2,3]};
dotVectors tempmv666[0] = <ve667,ve668>;
resetMv tempmv669[1];
setMv tempmv669[0] = nen[4];
resetMv tempmv670[1];
setMv tempmv670[0] = tempmv666[0];
calculateMvCoeff tempmv665[0] = DIVISION(tempmv669,tempmv670);
setVector ve671 = {len[-0],rcPpDual[6,7,-9]};
setVector ve672 = {tempmv647[0],tempmv653[0],tempmv659[0],tempmv665[0]};
dotVectors rc2[1] = <ve671,ve672>;

//rc2[2] = ((((-(len[0])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[6] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[10] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(rcPpDual[12] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv673[1];
resetMv tempmv674[1];
setVector ve675 = {nen[1,2,3]};
setVector ve676 = {nen[1,2,3]};
dotVectors tempmv674[0] = <ve675,ve676>;
resetMv tempmv677[1];
setMv tempmv677[0] = nen[2];
resetMv tempmv678[1];
setMv tempmv678[0] = tempmv674[0];
calculateMvCoeff tempmv673[0] = DIVISION(tempmv677,tempmv678);
resetMv tempmv679[1];
resetMv tempmv680[1];
setVector ve681 = {nen[1,2,3]};
setVector ve682 = {nen[1,2,3]};
dotVectors tempmv680[0] = <ve681,ve682>;
resetMv tempmv683[1];
setMv tempmv683[0] = nen[1];
resetMv tempmv684[1];
setMv tempmv684[0] = tempmv680[0];
calculateMvCoeff tempmv679[0] = DIVISION(tempmv683,tempmv684);
resetMv tempmv685[1];
resetMv tempmv686[1];
setVector ve687 = {nen[1,2,3]};
setVector ve688 = {nen[1,2,3]};
dotVectors tempmv686[0] = <ve687,ve688>;
resetMv tempmv689[1];
setMv tempmv689[0] = nen[3];
resetMv tempmv690[1];
setMv tempmv690[0] = tempmv686[0];
calculateMvCoeff tempmv685[0] = DIVISION(tempmv689,tempmv690);
resetMv tempmv691[1];
resetMv tempmv692[1];
setVector ve693 = {nen[1,2,3]};
setVector ve694 = {nen[1,2,3]};
dotVectors tempmv692[0] = <ve693,ve694>;
resetMv tempmv695[1];
setMv tempmv695[0] = nen[4];
resetMv tempmv696[1];
setMv tempmv696[0] = tempmv692[0];
calculateMvCoeff tempmv691[0] = DIVISION(tempmv695,tempmv696);
setVector ve697 = {len[-0],rcPpDual[-6,10,-12]};
setVector ve698 = {tempmv673[0],tempmv679[0],tempmv685[0],tempmv691[0]};
dotVectors rc2[2] = <ve697,ve698>;

//rc2[3] = ((((-(len[0])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[7] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[10] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[14] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv699[1];
resetMv tempmv700[1];
setVector ve701 = {nen[1,2,3]};
setVector ve702 = {nen[1,2,3]};
dotVectors tempmv700[0] = <ve701,ve702>;
resetMv tempmv703[1];
setMv tempmv703[0] = nen[3];
resetMv tempmv704[1];
setMv tempmv704[0] = tempmv700[0];
calculateMvCoeff tempmv699[0] = DIVISION(tempmv703,tempmv704);
resetMv tempmv705[1];
resetMv tempmv706[1];
setVector ve707 = {nen[1,2,3]};
setVector ve708 = {nen[1,2,3]};
dotVectors tempmv706[0] = <ve707,ve708>;
resetMv tempmv709[1];
setMv tempmv709[0] = nen[1];
resetMv tempmv710[1];
setMv tempmv710[0] = tempmv706[0];
calculateMvCoeff tempmv705[0] = DIVISION(tempmv709,tempmv710);
resetMv tempmv711[1];
resetMv tempmv712[1];
setVector ve713 = {nen[1,2,3]};
setVector ve714 = {nen[1,2,3]};
dotVectors tempmv712[0] = <ve713,ve714>;
resetMv tempmv715[1];
setMv tempmv715[0] = nen[2];
resetMv tempmv716[1];
setMv tempmv716[0] = tempmv712[0];
calculateMvCoeff tempmv711[0] = DIVISION(tempmv715,tempmv716);
resetMv tempmv717[1];
resetMv tempmv718[1];
setVector ve719 = {nen[1,2,3]};
setVector ve720 = {nen[1,2,3]};
dotVectors tempmv718[0] = <ve719,ve720>;
resetMv tempmv721[1];
setMv tempmv721[0] = nen[4];
resetMv tempmv722[1];
setMv tempmv722[0] = tempmv718[0];
calculateMvCoeff tempmv717[0] = DIVISION(tempmv721,tempmv722);
setVector ve723 = {len[-0],rcPpDual[-7,-10,-14]};
setVector ve724 = {tempmv699[0],tempmv705[0],tempmv711[0],tempmv717[0]};
dotVectors rc2[3] = <ve723,ve724>;

//rc2[4] = (((((-(len[0])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[8] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[11] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[13] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[15] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv725[1];
resetMv tempmv726[1];
setVector ve727 = {nen[1,2,3]};
setVector ve728 = {nen[1,2,3]};
dotVectors tempmv726[0] = <ve727,ve728>;
resetMv tempmv729[1];
setMv tempmv729[0] = nen[4];
resetMv tempmv730[1];
setMv tempmv730[0] = tempmv726[0];
calculateMvCoeff tempmv725[0] = DIVISION(tempmv729,tempmv730);
resetMv tempmv731[1];
resetMv tempmv732[1];
setVector ve733 = {nen[1,2,3]};
setVector ve734 = {nen[1,2,3]};
dotVectors tempmv732[0] = <ve733,ve734>;
resetMv tempmv735[1];
setMv tempmv735[0] = nen[1];
resetMv tempmv736[1];
setMv tempmv736[0] = tempmv732[0];
calculateMvCoeff tempmv731[0] = DIVISION(tempmv735,tempmv736);
resetMv tempmv737[1];
resetMv tempmv738[1];
setVector ve739 = {nen[1,2,3]};
setVector ve740 = {nen[1,2,3]};
dotVectors tempmv738[0] = <ve739,ve740>;
resetMv tempmv741[1];
setMv tempmv741[0] = nen[2];
resetMv tempmv742[1];
setMv tempmv742[0] = tempmv738[0];
calculateMvCoeff tempmv737[0] = DIVISION(tempmv741,tempmv742);
resetMv tempmv743[1];
resetMv tempmv744[1];
setVector ve745 = {nen[1,2,3]};
setVector ve746 = {nen[1,2,3]};
dotVectors tempmv744[0] = <ve745,ve746>;
resetMv tempmv747[1];
setMv tempmv747[0] = nen[3];
resetMv tempmv748[1];
setMv tempmv748[0] = tempmv744[0];
calculateMvCoeff tempmv743[0] = DIVISION(tempmv747,tempmv748);
resetMv tempmv749[1];
resetMv tempmv750[1];
setVector ve751 = {nen[1,2,3]};
setVector ve752 = {nen[1,2,3]};
dotVectors tempmv750[0] = <ve751,ve752>;
resetMv tempmv753[1];
setMv tempmv753[0] = nen[4];
resetMv tempmv754[1];
setMv tempmv754[0] = tempmv750[0];
calculateMvCoeff tempmv749[0] = DIVISION(tempmv753,tempmv754);
setVector ve755 = {len[-0],rcPpDual[-8,-11,-13,-15]};
setVector ve756 = {tempmv725[0],tempmv731[0],tempmv737[0],tempmv743[0],tempmv749[0]};
dotVectors rc2[4] = <ve755,ve756>;

//rc2[5] = ((-(rcPpDual[9] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(rcPpDual[12] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[14] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv757[1];
resetMv tempmv758[1];
setVector ve759 = {nen[1,2,3]};
setVector ve760 = {nen[1,2,3]};
dotVectors tempmv758[0] = <ve759,ve760>;
resetMv tempmv761[1];
setMv tempmv761[0] = nen[1];
resetMv tempmv762[1];
setMv tempmv762[0] = tempmv758[0];
calculateMvCoeff tempmv757[0] = DIVISION(tempmv761,tempmv762);
resetMv tempmv763[1];
resetMv tempmv764[1];
setVector ve765 = {nen[1,2,3]};
setVector ve766 = {nen[1,2,3]};
dotVectors tempmv764[0] = <ve765,ve766>;
resetMv tempmv767[1];
setMv tempmv767[0] = nen[2];
resetMv tempmv768[1];
setMv tempmv768[0] = tempmv764[0];
calculateMvCoeff tempmv763[0] = DIVISION(tempmv767,tempmv768);
resetMv tempmv769[1];
resetMv tempmv770[1];
setVector ve771 = {nen[1,2,3]};
setVector ve772 = {nen[1,2,3]};
dotVectors tempmv770[0] = <ve771,ve772>;
resetMv tempmv773[1];
setMv tempmv773[0] = nen[3];
resetMv tempmv774[1];
setMv tempmv774[0] = tempmv770[0];
calculateMvCoeff tempmv769[0] = DIVISION(tempmv773,tempmv774);
setVector ve775 = {rcPpDual[-9,-12,-14]};
setVector ve776 = {tempmv757[0],tempmv763[0],tempmv769[0]};
dotVectors rc2[5] = <ve775,ve776>;

//rc2[16] = ((rcPpDual[6] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[7] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[10] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv777[1];
resetMv tempmv778[1];
setVector ve779 = {nen[1,2,3]};
setVector ve780 = {nen[1,2,3]};
dotVectors tempmv778[0] = <ve779,ve780>;
resetMv tempmv781[1];
setMv tempmv781[0] = nen[3];
resetMv tempmv782[1];
setMv tempmv782[0] = tempmv778[0];
calculateMvCoeff tempmv777[0] = DIVISION(tempmv781,tempmv782);
resetMv tempmv783[1];
resetMv tempmv784[1];
setVector ve785 = {nen[1,2,3]};
setVector ve786 = {nen[1,2,3]};
dotVectors tempmv784[0] = <ve785,ve786>;
resetMv tempmv787[1];
setMv tempmv787[0] = nen[2];
resetMv tempmv788[1];
setMv tempmv788[0] = tempmv784[0];
calculateMvCoeff tempmv783[0] = DIVISION(tempmv787,tempmv788);
resetMv tempmv789[1];
resetMv tempmv790[1];
setVector ve791 = {nen[1,2,3]};
setVector ve792 = {nen[1,2,3]};
dotVectors tempmv790[0] = <ve791,ve792>;
resetMv tempmv793[1];
setMv tempmv793[0] = nen[1];
resetMv tempmv794[1];
setMv tempmv794[0] = tempmv790[0];
calculateMvCoeff tempmv789[0] = DIVISION(tempmv793,tempmv794);
setVector ve795 = {rcPpDual[6,-7,10]};
setVector ve796 = {tempmv777[0],tempmv783[0],tempmv789[0]};
dotVectors rc2[16] = <ve795,ve796>;

//rc2[17] = ((rcPpDual[6] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[8] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[11] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv797[1];
resetMv tempmv798[1];
setVector ve799 = {nen[1,2,3]};
setVector ve800 = {nen[1,2,3]};
dotVectors tempmv798[0] = <ve799,ve800>;
resetMv tempmv801[1];
setMv tempmv801[0] = nen[4];
resetMv tempmv802[1];
setMv tempmv802[0] = tempmv798[0];
calculateMvCoeff tempmv797[0] = DIVISION(tempmv801,tempmv802);
resetMv tempmv803[1];
resetMv tempmv804[1];
setVector ve805 = {nen[1,2,3]};
setVector ve806 = {nen[1,2,3]};
dotVectors tempmv804[0] = <ve805,ve806>;
resetMv tempmv807[1];
setMv tempmv807[0] = nen[2];
resetMv tempmv808[1];
setMv tempmv808[0] = tempmv804[0];
calculateMvCoeff tempmv803[0] = DIVISION(tempmv807,tempmv808);
resetMv tempmv809[1];
resetMv tempmv810[1];
setVector ve811 = {nen[1,2,3]};
setVector ve812 = {nen[1,2,3]};
dotVectors tempmv810[0] = <ve811,ve812>;
resetMv tempmv813[1];
setMv tempmv813[0] = nen[1];
resetMv tempmv814[1];
setMv tempmv814[0] = tempmv810[0];
calculateMvCoeff tempmv809[0] = DIVISION(tempmv813,tempmv814);
setVector ve815 = {rcPpDual[6,-8,11]};
setVector ve816 = {tempmv797[0],tempmv803[0],tempmv809[0]};
dotVectors rc2[17] = <ve815,ve816>;

//rc2[18] = (-(rcPpDual[9] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[12] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv817[1];
resetMv tempmv818[1];
setVector ve819 = {nen[1,2,3]};
setVector ve820 = {nen[1,2,3]};
dotVectors tempmv818[0] = <ve819,ve820>;
resetMv tempmv821[1];
setMv tempmv821[0] = nen[2];
resetMv tempmv822[1];
setMv tempmv822[0] = tempmv818[0];
calculateMvCoeff tempmv817[0] = DIVISION(tempmv821,tempmv822);
resetMv tempmv823[1];
resetMv tempmv824[1];
setVector ve825 = {nen[1,2,3]};
setVector ve826 = {nen[1,2,3]};
dotVectors tempmv824[0] = <ve825,ve826>;
resetMv tempmv827[1];
setMv tempmv827[0] = nen[1];
resetMv tempmv828[1];
setMv tempmv828[0] = tempmv824[0];
calculateMvCoeff tempmv823[0] = DIVISION(tempmv827,tempmv828);
setVector ve829 = {rcPpDual[-9,12]};
setVector ve830 = {tempmv817[0],tempmv823[0]};
dotVectors rc2[18] = <ve829,ve830>;

//rc2[19] = ((rcPpDual[7] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[8] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[13] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv831[1];
resetMv tempmv832[1];
setVector ve833 = {nen[1,2,3]};
setVector ve834 = {nen[1,2,3]};
dotVectors tempmv832[0] = <ve833,ve834>;
resetMv tempmv835[1];
setMv tempmv835[0] = nen[4];
resetMv tempmv836[1];
setMv tempmv836[0] = tempmv832[0];
calculateMvCoeff tempmv831[0] = DIVISION(tempmv835,tempmv836);
resetMv tempmv837[1];
resetMv tempmv838[1];
setVector ve839 = {nen[1,2,3]};
setVector ve840 = {nen[1,2,3]};
dotVectors tempmv838[0] = <ve839,ve840>;
resetMv tempmv841[1];
setMv tempmv841[0] = nen[3];
resetMv tempmv842[1];
setMv tempmv842[0] = tempmv838[0];
calculateMvCoeff tempmv837[0] = DIVISION(tempmv841,tempmv842);
resetMv tempmv843[1];
resetMv tempmv844[1];
setVector ve845 = {nen[1,2,3]};
setVector ve846 = {nen[1,2,3]};
dotVectors tempmv844[0] = <ve845,ve846>;
resetMv tempmv847[1];
setMv tempmv847[0] = nen[1];
resetMv tempmv848[1];
setMv tempmv848[0] = tempmv844[0];
calculateMvCoeff tempmv843[0] = DIVISION(tempmv847,tempmv848);
setVector ve849 = {rcPpDual[7,-8,13]};
setVector ve850 = {tempmv831[0],tempmv837[0],tempmv843[0]};
dotVectors rc2[19] = <ve849,ve850>;

//rc2[20] = (-(rcPpDual[9] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[14] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv851[1];
resetMv tempmv852[1];
setVector ve853 = {nen[1,2,3]};
setVector ve854 = {nen[1,2,3]};
dotVectors tempmv852[0] = <ve853,ve854>;
resetMv tempmv855[1];
setMv tempmv855[0] = nen[3];
resetMv tempmv856[1];
setMv tempmv856[0] = tempmv852[0];
calculateMvCoeff tempmv851[0] = DIVISION(tempmv855,tempmv856);
resetMv tempmv857[1];
resetMv tempmv858[1];
setVector ve859 = {nen[1,2,3]};
setVector ve860 = {nen[1,2,3]};
dotVectors tempmv858[0] = <ve859,ve860>;
resetMv tempmv861[1];
setMv tempmv861[0] = nen[1];
resetMv tempmv862[1];
setMv tempmv862[0] = tempmv858[0];
calculateMvCoeff tempmv857[0] = DIVISION(tempmv861,tempmv862);
setVector ve863 = {rcPpDual[-9,14]};
setVector ve864 = {tempmv851[0],tempmv857[0]};
dotVectors rc2[20] = <ve863,ve864>;

//rc2[21] = (-(rcPpDual[9] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[15] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv865[1];
resetMv tempmv866[1];
setVector ve867 = {nen[1,2,3]};
setVector ve868 = {nen[1,2,3]};
dotVectors tempmv866[0] = <ve867,ve868>;
resetMv tempmv869[1];
setMv tempmv869[0] = nen[4];
resetMv tempmv870[1];
setMv tempmv870[0] = tempmv866[0];
calculateMvCoeff tempmv865[0] = DIVISION(tempmv869,tempmv870);
resetMv tempmv871[1];
resetMv tempmv872[1];
setVector ve873 = {nen[1,2,3]};
setVector ve874 = {nen[1,2,3]};
dotVectors tempmv872[0] = <ve873,ve874>;
resetMv tempmv875[1];
setMv tempmv875[0] = nen[1];
resetMv tempmv876[1];
setMv tempmv876[0] = tempmv872[0];
calculateMvCoeff tempmv871[0] = DIVISION(tempmv875,tempmv876);
setVector ve877 = {rcPpDual[-9,15]};
setVector ve878 = {tempmv865[0],tempmv871[0]};
dotVectors rc2[21] = <ve877,ve878>;

//rc2[22] = ((rcPpDual[10] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[11] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[13] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv879[1];
resetMv tempmv880[1];
setVector ve881 = {nen[1,2,3]};
setVector ve882 = {nen[1,2,3]};
dotVectors tempmv880[0] = <ve881,ve882>;
resetMv tempmv883[1];
setMv tempmv883[0] = nen[4];
resetMv tempmv884[1];
setMv tempmv884[0] = tempmv880[0];
calculateMvCoeff tempmv879[0] = DIVISION(tempmv883,tempmv884);
resetMv tempmv885[1];
resetMv tempmv886[1];
setVector ve887 = {nen[1,2,3]};
setVector ve888 = {nen[1,2,3]};
dotVectors tempmv886[0] = <ve887,ve888>;
resetMv tempmv889[1];
setMv tempmv889[0] = nen[3];
resetMv tempmv890[1];
setMv tempmv890[0] = tempmv886[0];
calculateMvCoeff tempmv885[0] = DIVISION(tempmv889,tempmv890);
resetMv tempmv891[1];
resetMv tempmv892[1];
setVector ve893 = {nen[1,2,3]};
setVector ve894 = {nen[1,2,3]};
dotVectors tempmv892[0] = <ve893,ve894>;
resetMv tempmv895[1];
setMv tempmv895[0] = nen[2];
resetMv tempmv896[1];
setMv tempmv896[0] = tempmv892[0];
calculateMvCoeff tempmv891[0] = DIVISION(tempmv895,tempmv896);
setVector ve897 = {rcPpDual[10,-11,13]};
setVector ve898 = {tempmv879[0],tempmv885[0],tempmv891[0]};
dotVectors rc2[22] = <ve897,ve898>;

//rc2[23] = (-(rcPpDual[12] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[14] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv899[1];
resetMv tempmv900[1];
setVector ve901 = {nen[1,2,3]};
setVector ve902 = {nen[1,2,3]};
dotVectors tempmv900[0] = <ve901,ve902>;
resetMv tempmv903[1];
setMv tempmv903[0] = nen[3];
resetMv tempmv904[1];
setMv tempmv904[0] = tempmv900[0];
calculateMvCoeff tempmv899[0] = DIVISION(tempmv903,tempmv904);
resetMv tempmv905[1];
resetMv tempmv906[1];
setVector ve907 = {nen[1,2,3]};
setVector ve908 = {nen[1,2,3]};
dotVectors tempmv906[0] = <ve907,ve908>;
resetMv tempmv909[1];
setMv tempmv909[0] = nen[2];
resetMv tempmv910[1];
setMv tempmv910[0] = tempmv906[0];
calculateMvCoeff tempmv905[0] = DIVISION(tempmv909,tempmv910);
setVector ve911 = {rcPpDual[-12,14]};
setVector ve912 = {tempmv899[0],tempmv905[0]};
dotVectors rc2[23] = <ve911,ve912>;

//rc2[24] = (-(rcPpDual[12] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[15] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv913[1];
resetMv tempmv914[1];
setVector ve915 = {nen[1,2,3]};
setVector ve916 = {nen[1,2,3]};
dotVectors tempmv914[0] = <ve915,ve916>;
resetMv tempmv917[1];
setMv tempmv917[0] = nen[4];
resetMv tempmv918[1];
setMv tempmv918[0] = tempmv914[0];
calculateMvCoeff tempmv913[0] = DIVISION(tempmv917,tempmv918);
resetMv tempmv919[1];
resetMv tempmv920[1];
setVector ve921 = {nen[1,2,3]};
setVector ve922 = {nen[1,2,3]};
dotVectors tempmv920[0] = <ve921,ve922>;
resetMv tempmv923[1];
setMv tempmv923[0] = nen[2];
resetMv tempmv924[1];
setMv tempmv924[0] = tempmv920[0];
calculateMvCoeff tempmv919[0] = DIVISION(tempmv923,tempmv924);
setVector ve925 = {rcPpDual[-12,15]};
setVector ve926 = {tempmv913[0],tempmv919[0]};
dotVectors rc2[24] = <ve925,ve926>;

//rc2[25] = (-(rcPpDual[14] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[15] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv927[1];
resetMv tempmv928[1];
setVector ve929 = {nen[1,2,3]};
setVector ve930 = {nen[1,2,3]};
dotVectors tempmv928[0] = <ve929,ve930>;
resetMv tempmv931[1];
setMv tempmv931[0] = nen[4];
resetMv tempmv932[1];
setMv tempmv932[0] = tempmv928[0];
calculateMvCoeff tempmv927[0] = DIVISION(tempmv931,tempmv932);
resetMv tempmv933[1];
resetMv tempmv934[1];
setVector ve935 = {nen[1,2,3]};
setVector ve936 = {nen[1,2,3]};
dotVectors tempmv934[0] = <ve935,ve936>;
resetMv tempmv937[1];
setMv tempmv937[0] = nen[3];
resetMv tempmv938[1];
setMv tempmv938[0] = tempmv934[0];
calculateMvCoeff tempmv933[0] = DIVISION(tempmv937,tempmv938);
setVector ve939 = {rcPpDual[-14,15]};
setVector ve940 = {tempmv927[0],tempmv933[0]};
dotVectors rc2[25] = <ve939,ve940>;

//rc2N[1] = -(((((((rc2[1] * ((-(rc2[5])) / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))) + (-(rc2[2] * (rc2[18] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-(rc2[3] * (rc2[20] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (rc2[5] * (rc2[21] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (-(rc2[16] * (rc2[23] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (rc2[18] * (rc2[24] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (rc2[20] * (rc2[25] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))
resetMv rc2N[32];
resetMv tempmv941[1];
resetMv tempmv942[1];
setVector ve943 = {rc2[-5,18,20,23]};
setVector ve944 = {rc2[-5,18,20,23]};
dotVectors tempmv942[0] = <ve943,ve944>;
resetMv tempmv945[1];
setMv tempmv945[0] = rc2[-5];
resetMv tempmv946[1];
setMv tempmv946[0] = tempmv942[0];
calculateMvCoeff tempmv941[0] = DIVISION(tempmv945,tempmv946);
resetMv tempmv947[1];
resetMv tempmv948[1];
setVector ve949 = {rc2[-5,18,20,23]};
setVector ve950 = {rc2[-5,18,20,23]};
dotVectors tempmv948[0] = <ve949,ve950>;
resetMv tempmv951[1];
setMv tempmv951[0] = rc2[18];
resetMv tempmv952[1];
setMv tempmv952[0] = tempmv948[0];
calculateMvCoeff tempmv947[0] = DIVISION(tempmv951,tempmv952);
resetMv tempmv953[1];
resetMv tempmv954[1];
setVector ve955 = {rc2[-5,18,20,23]};
setVector ve956 = {rc2[-5,18,20,23]};
dotVectors tempmv954[0] = <ve955,ve956>;
resetMv tempmv957[1];
setMv tempmv957[0] = rc2[20];
resetMv tempmv958[1];
setMv tempmv958[0] = tempmv954[0];
calculateMvCoeff tempmv953[0] = DIVISION(tempmv957,tempmv958);
resetMv tempmv959[1];
resetMv tempmv960[1];
setVector ve961 = {rc2[-5,18,20,23]};
setVector ve962 = {rc2[-5,18,20,23]};
dotVectors tempmv960[0] = <ve961,ve962>;
resetMv tempmv963[1];
setMv tempmv963[0] = rc2[21];
resetMv tempmv964[1];
setMv tempmv964[0] = tempmv960[0];
calculateMvCoeff tempmv959[0] = DIVISION(tempmv963,tempmv964);
resetMv tempmv965[1];
resetMv tempmv966[1];
setVector ve967 = {rc2[-5,18,20,23]};
setVector ve968 = {rc2[-5,18,20,23]};
dotVectors tempmv966[0] = <ve967,ve968>;
resetMv tempmv969[1];
setMv tempmv969[0] = rc2[23];
resetMv tempmv970[1];
setMv tempmv970[0] = tempmv966[0];
calculateMvCoeff tempmv965[0] = DIVISION(tempmv969,tempmv970);
resetMv tempmv971[1];
resetMv tempmv972[1];
setVector ve973 = {rc2[-5,18,20,23]};
setVector ve974 = {rc2[-5,18,20,23]};
dotVectors tempmv972[0] = <ve973,ve974>;
resetMv tempmv975[1];
setMv tempmv975[0] = rc2[24];
resetMv tempmv976[1];
setMv tempmv976[0] = tempmv972[0];
calculateMvCoeff tempmv971[0] = DIVISION(tempmv975,tempmv976);
resetMv tempmv977[1];
resetMv tempmv978[1];
setVector ve979 = {rc2[-5,18,20,23]};
setVector ve980 = {rc2[-5,18,20,23]};
dotVectors tempmv978[0] = <ve979,ve980>;
resetMv tempmv981[1];
setMv tempmv981[0] = rc2[25];
resetMv tempmv982[1];
setMv tempmv982[0] = tempmv978[0];
calculateMvCoeff tempmv977[0] = DIVISION(tempmv981,tempmv982);
resetMv tempmv983[1];
setVector ve984 = {rc2[1,-2,-3,5,-16,18,20]};
setVector ve985 = {tempmv941[0],tempmv947[0],tempmv953[0],tempmv959[0],tempmv965[0],tempmv971[0],tempmv977[0]};
dotVectors tempmv983[0] = <ve984,ve985>;
setMv rc2N[1] = tempmv983[-0];

//rc2N[2] = -(((((((rc2[1] * (rc2[18] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))) + (rc2[2] * ((-(rc2[5])) / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (-(rc2[3] * (rc2[23] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (rc2[5] * (rc2[24] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (rc2[16] * (rc2[20] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (-(rc2[18] * (rc2[21] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (rc2[23] * (rc2[25] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))
resetMv tempmv986[1];
resetMv tempmv987[1];
setVector ve988 = {rc2[-5,18,20,23]};
setVector ve989 = {rc2[-5,18,20,23]};
dotVectors tempmv987[0] = <ve988,ve989>;
resetMv tempmv990[1];
setMv tempmv990[0] = rc2[18];
resetMv tempmv991[1];
setMv tempmv991[0] = tempmv987[0];
calculateMvCoeff tempmv986[0] = DIVISION(tempmv990,tempmv991);
resetMv tempmv992[1];
resetMv tempmv993[1];
setVector ve994 = {rc2[-5,18,20,23]};
setVector ve995 = {rc2[-5,18,20,23]};
dotVectors tempmv993[0] = <ve994,ve995>;
resetMv tempmv996[1];
setMv tempmv996[0] = rc2[-5];
resetMv tempmv997[1];
setMv tempmv997[0] = tempmv993[0];
calculateMvCoeff tempmv992[0] = DIVISION(tempmv996,tempmv997);
resetMv tempmv998[1];
resetMv tempmv999[1];
setVector ve1000 = {rc2[-5,18,20,23]};
setVector ve1001 = {rc2[-5,18,20,23]};
dotVectors tempmv999[0] = <ve1000,ve1001>;
resetMv tempmv1002[1];
setMv tempmv1002[0] = rc2[23];
resetMv tempmv1003[1];
setMv tempmv1003[0] = tempmv999[0];
calculateMvCoeff tempmv998[0] = DIVISION(tempmv1002,tempmv1003);
resetMv tempmv1004[1];
resetMv tempmv1005[1];
setVector ve1006 = {rc2[-5,18,20,23]};
setVector ve1007 = {rc2[-5,18,20,23]};
dotVectors tempmv1005[0] = <ve1006,ve1007>;
resetMv tempmv1008[1];
setMv tempmv1008[0] = rc2[24];
resetMv tempmv1009[1];
setMv tempmv1009[0] = tempmv1005[0];
calculateMvCoeff tempmv1004[0] = DIVISION(tempmv1008,tempmv1009);
resetMv tempmv1010[1];
resetMv tempmv1011[1];
setVector ve1012 = {rc2[-5,18,20,23]};
setVector ve1013 = {rc2[-5,18,20,23]};
dotVectors tempmv1011[0] = <ve1012,ve1013>;
resetMv tempmv1014[1];
setMv tempmv1014[0] = rc2[20];
resetMv tempmv1015[1];
setMv tempmv1015[0] = tempmv1011[0];
calculateMvCoeff tempmv1010[0] = DIVISION(tempmv1014,tempmv1015);
resetMv tempmv1016[1];
resetMv tempmv1017[1];
setVector ve1018 = {rc2[-5,18,20,23]};
setVector ve1019 = {rc2[-5,18,20,23]};
dotVectors tempmv1017[0] = <ve1018,ve1019>;
resetMv tempmv1020[1];
setMv tempmv1020[0] = rc2[21];
resetMv tempmv1021[1];
setMv tempmv1021[0] = tempmv1017[0];
calculateMvCoeff tempmv1016[0] = DIVISION(tempmv1020,tempmv1021);
resetMv tempmv1022[1];
resetMv tempmv1023[1];
setVector ve1024 = {rc2[-5,18,20,23]};
setVector ve1025 = {rc2[-5,18,20,23]};
dotVectors tempmv1023[0] = <ve1024,ve1025>;
resetMv tempmv1026[1];
setMv tempmv1026[0] = rc2[25];
resetMv tempmv1027[1];
setMv tempmv1027[0] = tempmv1023[0];
calculateMvCoeff tempmv1022[0] = DIVISION(tempmv1026,tempmv1027);
resetMv tempmv1028[1];
setVector ve1029 = {rc2[1,2,-3,5,16,-18,23]};
setVector ve1030 = {tempmv986[0],tempmv992[0],tempmv998[0],tempmv1004[0],tempmv1010[0],tempmv1016[0],tempmv1022[0]};
dotVectors tempmv1028[0] = <ve1029,ve1030>;
setMv rc2N[2] = tempmv1028[-0];

//rc2N[3] = -(((((((rc2[1] * (rc2[20] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))) + (rc2[2] * (rc2[23] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (rc2[3] * ((-(rc2[5])) / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (rc2[5] * (rc2[25] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (-(rc2[16] * (rc2[18] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-(rc2[20] * (rc2[21] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-(rc2[23] * (rc2[24] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))))
resetMv tempmv1031[1];
resetMv tempmv1032[1];
setVector ve1033 = {rc2[-5,18,20,23]};
setVector ve1034 = {rc2[-5,18,20,23]};
dotVectors tempmv1032[0] = <ve1033,ve1034>;
resetMv tempmv1035[1];
setMv tempmv1035[0] = rc2[20];
resetMv tempmv1036[1];
setMv tempmv1036[0] = tempmv1032[0];
calculateMvCoeff tempmv1031[0] = DIVISION(tempmv1035,tempmv1036);
resetMv tempmv1037[1];
resetMv tempmv1038[1];
setVector ve1039 = {rc2[-5,18,20,23]};
setVector ve1040 = {rc2[-5,18,20,23]};
dotVectors tempmv1038[0] = <ve1039,ve1040>;
resetMv tempmv1041[1];
setMv tempmv1041[0] = rc2[23];
resetMv tempmv1042[1];
setMv tempmv1042[0] = tempmv1038[0];
calculateMvCoeff tempmv1037[0] = DIVISION(tempmv1041,tempmv1042);
resetMv tempmv1043[1];
resetMv tempmv1044[1];
setVector ve1045 = {rc2[-5,18,20,23]};
setVector ve1046 = {rc2[-5,18,20,23]};
dotVectors tempmv1044[0] = <ve1045,ve1046>;
resetMv tempmv1047[1];
setMv tempmv1047[0] = rc2[-5];
resetMv tempmv1048[1];
setMv tempmv1048[0] = tempmv1044[0];
calculateMvCoeff tempmv1043[0] = DIVISION(tempmv1047,tempmv1048);
resetMv tempmv1049[1];
resetMv tempmv1050[1];
setVector ve1051 = {rc2[-5,18,20,23]};
setVector ve1052 = {rc2[-5,18,20,23]};
dotVectors tempmv1050[0] = <ve1051,ve1052>;
resetMv tempmv1053[1];
setMv tempmv1053[0] = rc2[25];
resetMv tempmv1054[1];
setMv tempmv1054[0] = tempmv1050[0];
calculateMvCoeff tempmv1049[0] = DIVISION(tempmv1053,tempmv1054);
resetMv tempmv1055[1];
resetMv tempmv1056[1];
setVector ve1057 = {rc2[-5,18,20,23]};
setVector ve1058 = {rc2[-5,18,20,23]};
dotVectors tempmv1056[0] = <ve1057,ve1058>;
resetMv tempmv1059[1];
setMv tempmv1059[0] = rc2[18];
resetMv tempmv1060[1];
setMv tempmv1060[0] = tempmv1056[0];
calculateMvCoeff tempmv1055[0] = DIVISION(tempmv1059,tempmv1060);
resetMv tempmv1061[1];
resetMv tempmv1062[1];
setVector ve1063 = {rc2[-5,18,20,23]};
setVector ve1064 = {rc2[-5,18,20,23]};
dotVectors tempmv1062[0] = <ve1063,ve1064>;
resetMv tempmv1065[1];
setMv tempmv1065[0] = rc2[21];
resetMv tempmv1066[1];
setMv tempmv1066[0] = tempmv1062[0];
calculateMvCoeff tempmv1061[0] = DIVISION(tempmv1065,tempmv1066);
resetMv tempmv1067[1];
resetMv tempmv1068[1];
setVector ve1069 = {rc2[-5,18,20,23]};
setVector ve1070 = {rc2[-5,18,20,23]};
dotVectors tempmv1068[0] = <ve1069,ve1070>;
resetMv tempmv1071[1];
setMv tempmv1071[0] = rc2[24];
resetMv tempmv1072[1];
setMv tempmv1072[0] = tempmv1068[0];
calculateMvCoeff tempmv1067[0] = DIVISION(tempmv1071,tempmv1072);
resetMv tempmv1073[1];
setVector ve1074 = {rc2[1,2,3,5,-16,-20,-23]};
setVector ve1075 = {tempmv1031[0],tempmv1037[0],tempmv1043[0],tempmv1049[0],tempmv1055[0],tempmv1061[0],tempmv1067[0]};
dotVectors tempmv1073[0] = <ve1074,ve1075>;
setMv rc2N[3] = tempmv1073[-0];

//rc2N[4] = -((((((((((rc2[1] * (rc2[21] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))) + (rc2[2] * (rc2[24] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (rc2[3] * (rc2[25] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (rc2[4] * ((-(rc2[5])) / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (-(rc2[17] * (rc2[18] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-(rc2[19] * (rc2[20] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-(rc2[21] * (rc2[21] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-(rc2[22] * (rc2[23] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-(rc2[24] * (rc2[24] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-(rc2[25] * (rc2[25] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))))
resetMv tempmv1076[1];
resetMv tempmv1077[1];
setVector ve1078 = {rc2[-5,18,20,23]};
setVector ve1079 = {rc2[-5,18,20,23]};
dotVectors tempmv1077[0] = <ve1078,ve1079>;
resetMv tempmv1080[1];
setMv tempmv1080[0] = rc2[21];
resetMv tempmv1081[1];
setMv tempmv1081[0] = tempmv1077[0];
calculateMvCoeff tempmv1076[0] = DIVISION(tempmv1080,tempmv1081);
resetMv tempmv1082[1];
resetMv tempmv1083[1];
setVector ve1084 = {rc2[-5,18,20,23]};
setVector ve1085 = {rc2[-5,18,20,23]};
dotVectors tempmv1083[0] = <ve1084,ve1085>;
resetMv tempmv1086[1];
setMv tempmv1086[0] = rc2[24];
resetMv tempmv1087[1];
setMv tempmv1087[0] = tempmv1083[0];
calculateMvCoeff tempmv1082[0] = DIVISION(tempmv1086,tempmv1087);
resetMv tempmv1088[1];
resetMv tempmv1089[1];
setVector ve1090 = {rc2[-5,18,20,23]};
setVector ve1091 = {rc2[-5,18,20,23]};
dotVectors tempmv1089[0] = <ve1090,ve1091>;
resetMv tempmv1092[1];
setMv tempmv1092[0] = rc2[25];
resetMv tempmv1093[1];
setMv tempmv1093[0] = tempmv1089[0];
calculateMvCoeff tempmv1088[0] = DIVISION(tempmv1092,tempmv1093);
resetMv tempmv1094[1];
resetMv tempmv1095[1];
setVector ve1096 = {rc2[-5,18,20,23]};
setVector ve1097 = {rc2[-5,18,20,23]};
dotVectors tempmv1095[0] = <ve1096,ve1097>;
resetMv tempmv1098[1];
setMv tempmv1098[0] = rc2[-5];
resetMv tempmv1099[1];
setMv tempmv1099[0] = tempmv1095[0];
calculateMvCoeff tempmv1094[0] = DIVISION(tempmv1098,tempmv1099);
resetMv tempmv1100[1];
resetMv tempmv1101[1];
setVector ve1102 = {rc2[-5,18,20,23]};
setVector ve1103 = {rc2[-5,18,20,23]};
dotVectors tempmv1101[0] = <ve1102,ve1103>;
resetMv tempmv1104[1];
setMv tempmv1104[0] = rc2[18];
resetMv tempmv1105[1];
setMv tempmv1105[0] = tempmv1101[0];
calculateMvCoeff tempmv1100[0] = DIVISION(tempmv1104,tempmv1105);
resetMv tempmv1106[1];
resetMv tempmv1107[1];
setVector ve1108 = {rc2[-5,18,20,23]};
setVector ve1109 = {rc2[-5,18,20,23]};
dotVectors tempmv1107[0] = <ve1108,ve1109>;
resetMv tempmv1110[1];
setMv tempmv1110[0] = rc2[20];
resetMv tempmv1111[1];
setMv tempmv1111[0] = tempmv1107[0];
calculateMvCoeff tempmv1106[0] = DIVISION(tempmv1110,tempmv1111);
resetMv tempmv1112[1];
resetMv tempmv1113[1];
setVector ve1114 = {rc2[-5,18,20,23]};
setVector ve1115 = {rc2[-5,18,20,23]};
dotVectors tempmv1113[0] = <ve1114,ve1115>;
resetMv tempmv1116[1];
setMv tempmv1116[0] = rc2[21];
resetMv tempmv1117[1];
setMv tempmv1117[0] = tempmv1113[0];
calculateMvCoeff tempmv1112[0] = DIVISION(tempmv1116,tempmv1117);
resetMv tempmv1118[1];
resetMv tempmv1119[1];
setVector ve1120 = {rc2[-5,18,20,23]};
setVector ve1121 = {rc2[-5,18,20,23]};
dotVectors tempmv1119[0] = <ve1120,ve1121>;
resetMv tempmv1122[1];
setMv tempmv1122[0] = rc2[23];
resetMv tempmv1123[1];
setMv tempmv1123[0] = tempmv1119[0];
calculateMvCoeff tempmv1118[0] = DIVISION(tempmv1122,tempmv1123);
resetMv tempmv1124[1];
resetMv tempmv1125[1];
setVector ve1126 = {rc2[-5,18,20,23]};
setVector ve1127 = {rc2[-5,18,20,23]};
dotVectors tempmv1125[0] = <ve1126,ve1127>;
resetMv tempmv1128[1];
setMv tempmv1128[0] = rc2[24];
resetMv tempmv1129[1];
setMv tempmv1129[0] = tempmv1125[0];
calculateMvCoeff tempmv1124[0] = DIVISION(tempmv1128,tempmv1129);
resetMv tempmv1130[1];
resetMv tempmv1131[1];
setVector ve1132 = {rc2[-5,18,20,23]};
setVector ve1133 = {rc2[-5,18,20,23]};
dotVectors tempmv1131[0] = <ve1132,ve1133>;
resetMv tempmv1134[1];
setMv tempmv1134[0] = rc2[25];
resetMv tempmv1135[1];
setMv tempmv1135[0] = tempmv1131[0];
calculateMvCoeff tempmv1130[0] = DIVISION(tempmv1134,tempmv1135);
resetMv tempmv1136[1];
setVector ve1137 = {rc2[1,2,3,4,-17,-19,-21,-22,-24,-25]};
setVector ve1138 = {tempmv1076[0],tempmv1082[0],tempmv1088[0],tempmv1094[0],tempmv1100[0],tempmv1106[0],tempmv1112[0],tempmv1118[0],tempmv1124[0],tempmv1130[0]};
dotVectors tempmv1136[0] = <ve1137,ve1138>;
setMv rc2N[4] = tempmv1136[-0];

//rc2N[5] = -((((rc2[5] * ((-(rc2[5])) / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))) + (-(rc2[18] * (rc2[18] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-(rc2[20] * (rc2[20] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-(rc2[23] * (rc2[23] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))))
resetMv tempmv1139[1];
resetMv tempmv1140[1];
setVector ve1141 = {rc2[-5,18,20,23]};
setVector ve1142 = {rc2[-5,18,20,23]};
dotVectors tempmv1140[0] = <ve1141,ve1142>;
resetMv tempmv1143[1];
setMv tempmv1143[0] = rc2[-5];
resetMv tempmv1144[1];
setMv tempmv1144[0] = tempmv1140[0];
calculateMvCoeff tempmv1139[0] = DIVISION(tempmv1143,tempmv1144);
resetMv tempmv1145[1];
resetMv tempmv1146[1];
setVector ve1147 = {rc2[-5,18,20,23]};
setVector ve1148 = {rc2[-5,18,20,23]};
dotVectors tempmv1146[0] = <ve1147,ve1148>;
resetMv tempmv1149[1];
setMv tempmv1149[0] = rc2[18];
resetMv tempmv1150[1];
setMv tempmv1150[0] = tempmv1146[0];
calculateMvCoeff tempmv1145[0] = DIVISION(tempmv1149,tempmv1150);
resetMv tempmv1151[1];
resetMv tempmv1152[1];
setVector ve1153 = {rc2[-5,18,20,23]};
setVector ve1154 = {rc2[-5,18,20,23]};
dotVectors tempmv1152[0] = <ve1153,ve1154>;
resetMv tempmv1155[1];
setMv tempmv1155[0] = rc2[20];
resetMv tempmv1156[1];
setMv tempmv1156[0] = tempmv1152[0];
calculateMvCoeff tempmv1151[0] = DIVISION(tempmv1155,tempmv1156);
resetMv tempmv1157[1];
resetMv tempmv1158[1];
setVector ve1159 = {rc2[-5,18,20,23]};
setVector ve1160 = {rc2[-5,18,20,23]};
dotVectors tempmv1158[0] = <ve1159,ve1160>;
resetMv tempmv1161[1];
setMv tempmv1161[0] = rc2[23];
resetMv tempmv1162[1];
setMv tempmv1162[0] = tempmv1158[0];
calculateMvCoeff tempmv1157[0] = DIVISION(tempmv1161,tempmv1162);
resetMv tempmv1163[1];
setVector ve1164 = {rc2[5,-18,-20,-23]};
setVector ve1165 = {tempmv1139[0],tempmv1145[0],tempmv1151[0],tempmv1157[0]};
dotVectors tempmv1163[0] = <ve1164,ve1165>;
setMv rc2N[5] = tempmv1163[-0];

//z11[0] = (sqrt(-(2.0 * (((((rc1N[1] * sat1[1]) + (rc1N[2] * sat1[2])) + (rc1N[3] * sat1[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat1[4])))))) - inputsVector[0]
resetMv z11[32];
resetMv tempmv1166[1];
resetMv tempmv1167[1];
resetMv tempmv1168[1];
setVector ve1169 = {rc1N[1,2,3,-4,-5]};
setVector ve1170 = {sat1[1,2,3],1.0,sat1[4]};
dotVectors tempmv1168[0] = <ve1169,ve1170>;
resetMv tempmv1171[1];
setVector ve1172 = {2.0};
setVector ve1173 = {tempmv1168[0]};
dotVectors tempmv1171[0] = <ve1172,ve1173>;
setMv tempmv1167[0] = tempmv1171[-0];
resetMv tempmv1174[1];
setMv tempmv1174[0] = tempmv1167[0];
calculateMvCoeff tempmv1166[0] = SQRT(tempmv1174);
setVector ve1175 = {tempmv1166[0],inputsVector[-0]};
dotVectors z11[0] = <ve1175>;

//z12[0] = (sqrt(-(2.0 * (((((rc2N[1] * sat1[1]) + (rc2N[2] * sat1[2])) + (rc2N[3] * sat1[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat1[4])))))) - inputsVector[0]
resetMv z12[32];
resetMv tempmv1176[1];
resetMv tempmv1177[1];
resetMv tempmv1178[1];
setVector ve1179 = {rc2N[1,2,3,-4,-5]};
setVector ve1180 = {sat1[1,2,3],1.0,sat1[4]};
dotVectors tempmv1178[0] = <ve1179,ve1180>;
resetMv tempmv1181[1];
setVector ve1182 = {2.0};
setVector ve1183 = {tempmv1178[0]};
dotVectors tempmv1181[0] = <ve1182,ve1183>;
setMv tempmv1177[0] = tempmv1181[-0];
resetMv tempmv1184[1];
setMv tempmv1184[0] = tempmv1177[0];
calculateMvCoeff tempmv1176[0] = SQRT(tempmv1184);
setVector ve1185 = {tempmv1176[0],inputsVector[-0]};
dotVectors z12[0] = <ve1185>;

//z21[0] = (sqrt(-(2.0 * (((((rc1N[1] * sat2[1]) + (rc1N[2] * sat2[2])) + (rc1N[3] * sat2[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat2[4])))))) - inputsVector[1]
resetMv z21[32];
resetMv tempmv1186[1];
resetMv tempmv1187[1];
resetMv tempmv1188[1];
setVector ve1189 = {rc1N[1,2,3,-4,-5]};
setVector ve1190 = {sat2[1,2,3],1.0,sat2[4]};
dotVectors tempmv1188[0] = <ve1189,ve1190>;
resetMv tempmv1191[1];
setVector ve1192 = {2.0};
setVector ve1193 = {tempmv1188[0]};
dotVectors tempmv1191[0] = <ve1192,ve1193>;
setMv tempmv1187[0] = tempmv1191[-0];
resetMv tempmv1194[1];
setMv tempmv1194[0] = tempmv1187[0];
calculateMvCoeff tempmv1186[0] = SQRT(tempmv1194);
setVector ve1195 = {tempmv1186[0],inputsVector[-1]};
dotVectors z21[0] = <ve1195>;

//z22[0] = (sqrt(-(2.0 * (((((rc2N[1] * sat2[1]) + (rc2N[2] * sat2[2])) + (rc2N[3] * sat2[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat2[4])))))) - inputsVector[1]
resetMv z22[32];
resetMv tempmv1196[1];
resetMv tempmv1197[1];
resetMv tempmv1198[1];
setVector ve1199 = {rc2N[1,2,3,-4,-5]};
setVector ve1200 = {sat2[1,2,3],1.0,sat2[4]};
dotVectors tempmv1198[0] = <ve1199,ve1200>;
resetMv tempmv1201[1];
setVector ve1202 = {2.0};
setVector ve1203 = {tempmv1198[0]};
dotVectors tempmv1201[0] = <ve1202,ve1203>;
setMv tempmv1197[0] = tempmv1201[-0];
resetMv tempmv1204[1];
setMv tempmv1204[0] = tempmv1197[0];
calculateMvCoeff tempmv1196[0] = SQRT(tempmv1204);
setVector ve1205 = {tempmv1196[0],inputsVector[-1]};
dotVectors z22[0] = <ve1205>;

//z31[0] = (sqrt(-(2.0 * (((((rc1N[1] * sat3[1]) + (rc1N[2] * sat3[2])) + (rc1N[3] * sat3[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat3[4])))))) - inputsVector[2]
resetMv z31[32];
resetMv tempmv1206[1];
resetMv tempmv1207[1];
resetMv tempmv1208[1];
setVector ve1209 = {rc1N[1,2,3,-4,-5]};
setVector ve1210 = {sat3[1,2,3],1.0,sat3[4]};
dotVectors tempmv1208[0] = <ve1209,ve1210>;
resetMv tempmv1211[1];
setVector ve1212 = {2.0};
setVector ve1213 = {tempmv1208[0]};
dotVectors tempmv1211[0] = <ve1212,ve1213>;
setMv tempmv1207[0] = tempmv1211[-0];
resetMv tempmv1214[1];
setMv tempmv1214[0] = tempmv1207[0];
calculateMvCoeff tempmv1206[0] = SQRT(tempmv1214);
setVector ve1215 = {tempmv1206[0],inputsVector[-2]};
dotVectors z31[0] = <ve1215>;

//z32[0] = (sqrt(-(2.0 * (((((rc2N[1] * sat3[1]) + (rc2N[2] * sat3[2])) + (rc2N[3] * sat3[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat3[4])))))) - inputsVector[2]
resetMv z32[32];
resetMv tempmv1216[1];
resetMv tempmv1217[1];
resetMv tempmv1218[1];
setVector ve1219 = {rc2N[1,2,3,-4,-5]};
setVector ve1220 = {sat3[1,2,3],1.0,sat3[4]};
dotVectors tempmv1218[0] = <ve1219,ve1220>;
resetMv tempmv1221[1];
setVector ve1222 = {2.0};
setVector ve1223 = {tempmv1218[0]};
dotVectors tempmv1221[0] = <ve1222,ve1223>;
setMv tempmv1217[0] = tempmv1221[-0];
resetMv tempmv1224[1];
setMv tempmv1224[0] = tempmv1217[0];
calculateMvCoeff tempmv1216[0] = SQRT(tempmv1224);
setVector ve1225 = {tempmv1216[0],inputsVector[-2]};
dotVectors z32[0] = <ve1225>;

