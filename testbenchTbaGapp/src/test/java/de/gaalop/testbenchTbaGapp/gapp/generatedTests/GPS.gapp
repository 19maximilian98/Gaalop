//sat1[1] = inputsVector[3]
assignInputsVector inputsVector = [d1,d2,d3,sat1x,sat1y,sat1z,sat2x,sat2y,sat2z,sat3x,sat3y,sat3z];
resetMv sat1[32];
setMv sat1[1,2,3] = inputsVector[3,4,5];

//sat1[2] = inputsVector[4]

//sat1[3] = inputsVector[5]

//sat1[4] = 0.5 * (((inputsVector[3] * inputsVector[3]) + (inputsVector[4] * inputsVector[4])) + (inputsVector[5] * inputsVector[5]))
resetMv mv0[1];
setVector ve1 = {inputsVector[3,4,5]};
setVector ve2 = {inputsVector[3,4,5]};
dotVectors mv0[0] = <ve1,ve2>;
setVector ve3 = {0.5};
setVector ve4 = {mv0[0]};
dotVectors sat1[4] = <ve3,ve4>;

//sat1[5] = 1.0
assignMv sat1[5] = [1.0];

//sat2[1] = inputsVector[6]
resetMv sat2[32];
setMv sat2[1,2,3] = inputsVector[6,7,8];

//sat2[2] = inputsVector[7]

//sat2[3] = inputsVector[8]

//sat2[4] = 0.5 * (((inputsVector[6] * inputsVector[6]) + (inputsVector[7] * inputsVector[7])) + (inputsVector[8] * inputsVector[8]))
resetMv mv5[1];
setVector ve6 = {inputsVector[6,7,8]};
setVector ve7 = {inputsVector[6,7,8]};
dotVectors mv5[0] = <ve6,ve7>;
setVector ve8 = {0.5};
setVector ve9 = {mv5[0]};
dotVectors sat2[4] = <ve8,ve9>;

//sat2[5] = 1.0
assignMv sat2[5] = [1.0];

//sat3[1] = inputsVector[9]
resetMv sat3[32];
setMv sat3[1,2,3] = inputsVector[9,10,11];

//sat3[2] = inputsVector[10]

//sat3[3] = inputsVector[11]

//sat3[4] = 0.5 * (((inputsVector[9] * inputsVector[9]) + (inputsVector[10] * inputsVector[10])) + (inputsVector[11] * inputsVector[11]))
resetMv mv10[1];
setVector ve11 = {inputsVector[9,10,11]};
setVector ve12 = {inputsVector[9,10,11]};
dotVectors mv10[0] = <ve11,ve12>;
setVector ve13 = {0.5};
setVector ve14 = {mv10[0]};
dotVectors sat3[4] = <ve13,ve14>;

//sat3[5] = 1.0
assignMv sat3[5] = [1.0];

//sph1[1] = sat1[1]
resetMv sph1[32];
setMv sph1[1,2,3] = sat1[1,2,3];

//sph1[2] = sat1[2]

//sph1[3] = sat1[3]

//sph1[4] = sat1[4] - ((0.5 * inputsVector[0]) * inputsVector[0])
setVector ve15 = {sat1[4],-0.5};
setVector ve16 = {1.0,inputsVector[0]};
setVector ve17 = {1.0,inputsVector[0]};
dotVectors sph1[4] = <ve15,ve16,ve17>;

//sph1[5] = 1.0
assignMv sph1[5] = [1.0];

//sph2[1] = sat2[1]
resetMv sph2[32];
setMv sph2[1,2,3] = sat2[1,2,3];

//sph2[2] = sat2[2]

//sph2[3] = sat2[3]

//sph2[4] = sat2[4] - ((0.5 * inputsVector[1]) * inputsVector[1])
setVector ve18 = {sat2[4],-0.5};
setVector ve19 = {1.0,inputsVector[1]};
setVector ve20 = {1.0,inputsVector[1]};
dotVectors sph2[4] = <ve18,ve19,ve20>;

//sph2[5] = 1.0
assignMv sph2[5] = [1.0];

//sph3[1] = sat3[1]
resetMv sph3[32];
setMv sph3[1,2,3] = sat3[1,2,3];

//sph3[2] = sat3[2]

//sph3[3] = sat3[3]

//sph3[4] = sat3[4] - ((0.5 * inputsVector[2]) * inputsVector[2])
setVector ve21 = {sat3[4],-0.5};
setVector ve22 = {1.0,inputsVector[2]};
setVector ve23 = {1.0,inputsVector[2]};
dotVectors sph3[4] = <ve21,ve22,ve23>;

//sph3[5] = 1.0
assignMv sph3[5] = [1.0];

//rcPp[16] = ((((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) * sph3[3]) + (-(((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) * sph3[2]))) + (((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) * sph3[1])
resetMv rcPp[32];
resetMv mv24[1];
setVector ve25 = {sph1[1,-2]};
setVector ve26 = {sph2[2,1]};
dotVectors mv24[0] = <ve25,ve26>;
resetMv mv27[1];
resetMv mv28[1];
setVector ve29 = {sph1[1,-3]};
setVector ve30 = {sph2[3,1]};
dotVectors mv28[0] = <ve29,ve30>;
setMv mv27[0] = mv28[-0];
resetMv mv31[1];
setVector ve32 = {sph1[2,-3]};
setVector ve33 = {sph2[3,2]};
dotVectors mv31[0] = <ve32,ve33>;
setVector ve34 = {mv24[0],mv27[0],mv31[0]};
setVector ve35 = {sph3[3,2,1]};
dotVectors rcPp[16] = <ve34,ve35>;

//rcPp[17] = ((((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) * sph3[4]) + (-(((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) * sph3[2]))) + (((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) * sph3[1])
resetMv mv36[1];
setVector ve37 = {sph1[1,-2]};
setVector ve38 = {sph2[2,1]};
dotVectors mv36[0] = <ve37,ve38>;
resetMv mv39[1];
resetMv mv40[1];
setVector ve41 = {sph1[1,-4]};
setVector ve42 = {sph2[4,1]};
dotVectors mv40[0] = <ve41,ve42>;
setMv mv39[0] = mv40[-0];
resetMv mv43[1];
setVector ve44 = {sph1[2,-4]};
setVector ve45 = {sph2[4,2]};
dotVectors mv43[0] = <ve44,ve45>;
setVector ve46 = {mv36[0],mv39[0],mv43[0]};
setVector ve47 = {sph3[4,2,1]};
dotVectors rcPp[17] = <ve46,ve47>;

//rcPp[18] = (((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[2]))) + ((sph1[2] + (-(sph2[2]))) * sph3[1])
resetMv mv48[1];
resetMv mv49[1];
setVector ve50 = {sph1[1],sph2[-1]};
dotVectors mv49[0] = <ve50>;
setMv mv48[0] = mv49[-0];
resetMv mv51[1];
setVector ve52 = {sph1[2],sph2[-2]};
dotVectors mv51[0] = <ve52>;
setVector ve53 = {sph1[1,-2],mv48[0],mv51[0]};
setVector ve54 = {sph2[2,1],sph3[2,1]};
dotVectors rcPp[18] = <ve53,ve54>;

//rcPp[19] = ((((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) * sph3[4]) + (-(((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) * sph3[3]))) + (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) * sph3[1])
resetMv mv55[1];
setVector ve56 = {sph1[1,-3]};
setVector ve57 = {sph2[3,1]};
dotVectors mv55[0] = <ve56,ve57>;
resetMv mv58[1];
resetMv mv59[1];
setVector ve60 = {sph1[1,-4]};
setVector ve61 = {sph2[4,1]};
dotVectors mv59[0] = <ve60,ve61>;
setMv mv58[0] = mv59[-0];
resetMv mv62[1];
setVector ve63 = {sph1[3,-4]};
setVector ve64 = {sph2[4,3]};
dotVectors mv62[0] = <ve63,ve64>;
setVector ve65 = {mv55[0],mv58[0],mv62[0]};
setVector ve66 = {sph3[4,3,1]};
dotVectors rcPp[19] = <ve65,ve66>;

//rcPp[20] = (((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[3]))) + ((sph1[3] + (-(sph2[3]))) * sph3[1])
resetMv mv67[1];
resetMv mv68[1];
setVector ve69 = {sph1[1],sph2[-1]};
dotVectors mv68[0] = <ve69>;
setMv mv67[0] = mv68[-0];
resetMv mv70[1];
setVector ve71 = {sph1[3],sph2[-3]};
dotVectors mv70[0] = <ve71>;
setVector ve72 = {sph1[1,-3],mv67[0],mv70[0]};
setVector ve73 = {sph2[3,1],sph3[3,1]};
dotVectors rcPp[20] = <ve72,ve73>;

//rcPp[21] = (((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[1])
resetMv mv74[1];
resetMv mv75[1];
setVector ve76 = {sph1[1],sph2[-1]};
dotVectors mv75[0] = <ve76>;
setMv mv74[0] = mv75[-0];
resetMv mv77[1];
setVector ve78 = {sph1[4],sph2[-4]};
dotVectors mv77[0] = <ve78>;
setVector ve79 = {sph1[1,-4],mv74[0],mv77[0]};
setVector ve80 = {sph2[4,1],sph3[4,1]};
dotVectors rcPp[21] = <ve79,ve80>;

//rcPp[22] = ((((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) * sph3[4]) + (-(((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) * sph3[3]))) + (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) * sph3[2])
resetMv mv81[1];
setVector ve82 = {sph1[2,-3]};
setVector ve83 = {sph2[3,2]};
dotVectors mv81[0] = <ve82,ve83>;
resetMv mv84[1];
resetMv mv85[1];
setVector ve86 = {sph1[2,-4]};
setVector ve87 = {sph2[4,2]};
dotVectors mv85[0] = <ve86,ve87>;
setMv mv84[0] = mv85[-0];
resetMv mv88[1];
setVector ve89 = {sph1[3,-4]};
setVector ve90 = {sph2[4,3]};
dotVectors mv88[0] = <ve89,ve90>;
setVector ve91 = {mv81[0],mv84[0],mv88[0]};
setVector ve92 = {sph3[4,3,2]};
dotVectors rcPp[22] = <ve91,ve92>;

//rcPp[23] = (((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) + (-((sph1[2] + (-(sph2[2]))) * sph3[3]))) + ((sph1[3] + (-(sph2[3]))) * sph3[2])
resetMv mv93[1];
resetMv mv94[1];
setVector ve95 = {sph1[2],sph2[-2]};
dotVectors mv94[0] = <ve95>;
setMv mv93[0] = mv94[-0];
resetMv mv96[1];
setVector ve97 = {sph1[3],sph2[-3]};
dotVectors mv96[0] = <ve97>;
setVector ve98 = {sph1[2,-3],mv93[0],mv96[0]};
setVector ve99 = {sph2[3,2],sph3[3,2]};
dotVectors rcPp[23] = <ve98,ve99>;

//rcPp[24] = (((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) + (-((sph1[2] + (-(sph2[2]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[2])
resetMv mv100[1];
resetMv mv101[1];
setVector ve102 = {sph1[2],sph2[-2]};
dotVectors mv101[0] = <ve102>;
setMv mv100[0] = mv101[-0];
resetMv mv103[1];
setVector ve104 = {sph1[4],sph2[-4]};
dotVectors mv103[0] = <ve104>;
setVector ve105 = {sph1[2,-4],mv100[0],mv103[0]};
setVector ve106 = {sph2[4,2],sph3[4,2]};
dotVectors rcPp[24] = <ve105,ve106>;

//rcPp[25] = (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) + (-((sph1[3] + (-(sph2[3]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[3])
resetMv mv107[1];
resetMv mv108[1];
setVector ve109 = {sph1[3],sph2[-3]};
dotVectors mv108[0] = <ve109>;
setMv mv107[0] = mv108[-0];
resetMv mv110[1];
setVector ve111 = {sph1[4],sph2[-4]};
dotVectors mv110[0] = <ve111>;
setVector ve112 = {sph1[3,-4],mv107[0],mv110[0]};
setVector ve113 = {sph2[4,3],sph3[4,3]};
dotVectors rcPp[25] = <ve112,ve113>;

//temp0[0] = (((((((((-(rcPp[16] * rcPp[16])) + (rcPp[17] * rcPp[18])) + (rcPp[18] * rcPp[17])) + (rcPp[19] * rcPp[20])) + (rcPp[20] * rcPp[19])) + (rcPp[21] * rcPp[21])) + (rcPp[22] * rcPp[23])) + (rcPp[23] * rcPp[22])) + (rcPp[24] * rcPp[24])) + (rcPp[25] * rcPp[25])
resetMv temp0[32];
setVector ve114 = {rcPp[-16,17,18,19,20,21,22,23,24,25]};
setVector ve115 = {rcPp[16,18,17,20,19,21,23,22,24,25]};
dotVectors temp0[0] = <ve114,ve115>;

//temp1 = abs(temp0)
resetMv temp1[32];
calculateMv temp1 = ABS(temp0);

//len = sqrt(temp1)
resetMv len[32];
calculateMv len = SQRT(temp1);

//rcPpDual[6] = -(rcPp[25])
resetMv rcPpDual[32];
setMv rcPpDual[6,7,8,9,10,11,12,13,14,15] = rcPp[-25,24,-22,23,-21,19,-20,-17,18,16];

//rcPpDual[7] = rcPp[24]

//rcPpDual[8] = -(rcPp[22])

//rcPpDual[9] = rcPp[23]

//rcPpDual[10] = -(rcPp[21])

//rcPpDual[11] = rcPp[19]

//rcPpDual[12] = -(rcPp[20])

//rcPpDual[13] = -(rcPp[17])

//rcPpDual[14] = rcPp[18]

//rcPpDual[15] = rcPp[16]

//nen[1] = rcPpDual[9]
resetMv nen[32];
setMv nen[1,2,3,4] = rcPpDual[9,12,14,15];

//nen[2] = rcPpDual[12]

//nen[3] = rcPpDual[14]

//nen[4] = rcPpDual[15]

//rc1[0] = (((len[1] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (len[2] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[3] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[5] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv rc1[32];
resetMv mv116[1];
resetMv mv117[1];
setVector ve118 = {nen[1,2,3]};
setVector ve119 = {nen[1,2,3]};
dotVectors mv117[0] = <ve118,ve119>;
resetMv mv120[1];
setMv mv120[0] = nen[1];
resetMv mv121[1];
setMv mv121[0] = mv117[0];
calculateMvCoeff mv116[0] = DIVISION(mv120,mv121);
resetMv mv122[1];
resetMv mv123[1];
setVector ve124 = {nen[1,2,3]};
setVector ve125 = {nen[1,2,3]};
dotVectors mv123[0] = <ve124,ve125>;
resetMv mv126[1];
setMv mv126[0] = nen[2];
resetMv mv127[1];
setMv mv127[0] = mv123[0];
calculateMvCoeff mv122[0] = DIVISION(mv126,mv127);
resetMv mv128[1];
resetMv mv129[1];
setVector ve130 = {nen[1,2,3]};
setVector ve131 = {nen[1,2,3]};
dotVectors mv129[0] = <ve130,ve131>;
resetMv mv132[1];
setMv mv132[0] = nen[3];
resetMv mv133[1];
setMv mv133[0] = mv129[0];
calculateMvCoeff mv128[0] = DIVISION(mv132,mv133);
resetMv mv134[1];
resetMv mv135[1];
setVector ve136 = {nen[1,2,3]};
setVector ve137 = {nen[1,2,3]};
dotVectors mv135[0] = <ve136,ve137>;
resetMv mv138[1];
setMv mv138[0] = nen[4];
resetMv mv139[1];
setMv mv139[0] = mv135[0];
calculateMvCoeff mv134[0] = DIVISION(mv138,mv139);
setVector ve140 = {len[1,2,3,-5]};
setVector ve141 = {mv116[0],mv122[0],mv128[0],mv134[0]};
dotVectors rc1[0] = <ve140,ve141>;

//rc1[1] = (((len[0] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + ((rcPpDual[6] + len[6]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[7] + len[7]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[9] + len[9]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv142[1];
resetMv mv143[1];
setVector ve144 = {nen[1,2,3]};
setVector ve145 = {nen[1,2,3]};
dotVectors mv143[0] = <ve144,ve145>;
resetMv mv146[1];
setMv mv146[0] = nen[1];
resetMv mv147[1];
setMv mv147[0] = mv143[0];
calculateMvCoeff mv142[0] = DIVISION(mv146,mv147);
resetMv mv148[1];
setVector ve149 = {rcPpDual[6],len[6]};
dotVectors mv148[0] = <ve149>;
resetMv mv150[1];
resetMv mv151[1];
setVector ve152 = {nen[1,2,3]};
setVector ve153 = {nen[1,2,3]};
dotVectors mv151[0] = <ve152,ve153>;
resetMv mv154[1];
setMv mv154[0] = nen[2];
resetMv mv155[1];
setMv mv155[0] = mv151[0];
calculateMvCoeff mv150[0] = DIVISION(mv154,mv155);
resetMv mv156[1];
setVector ve157 = {rcPpDual[7],len[7]};
dotVectors mv156[0] = <ve157>;
resetMv mv158[1];
resetMv mv159[1];
setVector ve160 = {nen[1,2,3]};
setVector ve161 = {nen[1,2,3]};
dotVectors mv159[0] = <ve160,ve161>;
resetMv mv162[1];
setMv mv162[0] = nen[3];
resetMv mv163[1];
setMv mv163[0] = mv159[0];
calculateMvCoeff mv158[0] = DIVISION(mv162,mv163);
resetMv mv164[1];
resetMv mv165[1];
setVector ve166 = {rcPpDual[9],len[9]};
dotVectors mv165[0] = <ve166>;
setMv mv164[0] = mv165[-0];
resetMv mv167[1];
resetMv mv168[1];
setVector ve169 = {nen[1,2,3]};
setVector ve170 = {nen[1,2,3]};
dotVectors mv168[0] = <ve169,ve170>;
resetMv mv171[1];
setMv mv171[0] = nen[4];
resetMv mv172[1];
setMv mv172[0] = mv168[0];
calculateMvCoeff mv167[0] = DIVISION(mv171,mv172);
setVector ve173 = {len[0],mv148[0],mv156[0],mv164[0]};
setVector ve174 = {mv142[0],mv150[0],mv158[0],mv167[0]};
dotVectors rc1[1] = <ve173,ve174>;

//rc1[2] = (((len[0] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[6] + len[6]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[10] + len[10]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[12] + len[12]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv175[1];
resetMv mv176[1];
setVector ve177 = {nen[1,2,3]};
setVector ve178 = {nen[1,2,3]};
dotVectors mv176[0] = <ve177,ve178>;
resetMv mv179[1];
setMv mv179[0] = nen[2];
resetMv mv180[1];
setMv mv180[0] = mv176[0];
calculateMvCoeff mv175[0] = DIVISION(mv179,mv180);
resetMv mv181[1];
resetMv mv182[1];
setVector ve183 = {rcPpDual[6],len[6]};
dotVectors mv182[0] = <ve183>;
setMv mv181[0] = mv182[-0];
resetMv mv184[1];
resetMv mv185[1];
setVector ve186 = {nen[1,2,3]};
setVector ve187 = {nen[1,2,3]};
dotVectors mv185[0] = <ve186,ve187>;
resetMv mv188[1];
setMv mv188[0] = nen[1];
resetMv mv189[1];
setMv mv189[0] = mv185[0];
calculateMvCoeff mv184[0] = DIVISION(mv188,mv189);
resetMv mv190[1];
setVector ve191 = {rcPpDual[10],len[10]};
dotVectors mv190[0] = <ve191>;
resetMv mv192[1];
resetMv mv193[1];
setVector ve194 = {nen[1,2,3]};
setVector ve195 = {nen[1,2,3]};
dotVectors mv193[0] = <ve194,ve195>;
resetMv mv196[1];
setMv mv196[0] = nen[3];
resetMv mv197[1];
setMv mv197[0] = mv193[0];
calculateMvCoeff mv192[0] = DIVISION(mv196,mv197);
resetMv mv198[1];
resetMv mv199[1];
setVector ve200 = {rcPpDual[12],len[12]};
dotVectors mv199[0] = <ve200>;
setMv mv198[0] = mv199[-0];
resetMv mv201[1];
resetMv mv202[1];
setVector ve203 = {nen[1,2,3]};
setVector ve204 = {nen[1,2,3]};
dotVectors mv202[0] = <ve203,ve204>;
resetMv mv205[1];
setMv mv205[0] = nen[4];
resetMv mv206[1];
setMv mv206[0] = mv202[0];
calculateMvCoeff mv201[0] = DIVISION(mv205,mv206);
setVector ve207 = {len[0],mv181[0],mv190[0],mv198[0]};
setVector ve208 = {mv175[0],mv184[0],mv192[0],mv201[0]};
dotVectors rc1[2] = <ve207,ve208>;

//rc1[3] = (((len[0] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[7] + len[7]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[10] + len[10]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[14] + len[14]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv209[1];
resetMv mv210[1];
setVector ve211 = {nen[1,2,3]};
setVector ve212 = {nen[1,2,3]};
dotVectors mv210[0] = <ve211,ve212>;
resetMv mv213[1];
setMv mv213[0] = nen[3];
resetMv mv214[1];
setMv mv214[0] = mv210[0];
calculateMvCoeff mv209[0] = DIVISION(mv213,mv214);
resetMv mv215[1];
resetMv mv216[1];
setVector ve217 = {rcPpDual[7],len[7]};
dotVectors mv216[0] = <ve217>;
setMv mv215[0] = mv216[-0];
resetMv mv218[1];
resetMv mv219[1];
setVector ve220 = {nen[1,2,3]};
setVector ve221 = {nen[1,2,3]};
dotVectors mv219[0] = <ve220,ve221>;
resetMv mv222[1];
setMv mv222[0] = nen[1];
resetMv mv223[1];
setMv mv223[0] = mv219[0];
calculateMvCoeff mv218[0] = DIVISION(mv222,mv223);
resetMv mv224[1];
resetMv mv225[1];
setVector ve226 = {rcPpDual[10],len[10]};
dotVectors mv225[0] = <ve226>;
setMv mv224[0] = mv225[-0];
resetMv mv227[1];
resetMv mv228[1];
setVector ve229 = {nen[1,2,3]};
setVector ve230 = {nen[1,2,3]};
dotVectors mv228[0] = <ve229,ve230>;
resetMv mv231[1];
setMv mv231[0] = nen[2];
resetMv mv232[1];
setMv mv232[0] = mv228[0];
calculateMvCoeff mv227[0] = DIVISION(mv231,mv232);
resetMv mv233[1];
resetMv mv234[1];
setVector ve235 = {rcPpDual[14],len[14]};
dotVectors mv234[0] = <ve235>;
setMv mv233[0] = mv234[-0];
resetMv mv236[1];
resetMv mv237[1];
setVector ve238 = {nen[1,2,3]};
setVector ve239 = {nen[1,2,3]};
dotVectors mv237[0] = <ve238,ve239>;
resetMv mv240[1];
setMv mv240[0] = nen[4];
resetMv mv241[1];
setMv mv241[0] = mv237[0];
calculateMvCoeff mv236[0] = DIVISION(mv240,mv241);
setVector ve242 = {len[0],mv215[0],mv224[0],mv233[0]};
setVector ve243 = {mv209[0],mv218[0],mv227[0],mv236[0]};
dotVectors rc1[3] = <ve242,ve243>;

//rc1[4] = ((((len[0] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] + len[8]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[11] + len[11]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[13] + len[13]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[15] + len[15]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv244[1];
resetMv mv245[1];
setVector ve246 = {nen[1,2,3]};
setVector ve247 = {nen[1,2,3]};
dotVectors mv245[0] = <ve246,ve247>;
resetMv mv248[1];
setMv mv248[0] = nen[4];
resetMv mv249[1];
setMv mv249[0] = mv245[0];
calculateMvCoeff mv244[0] = DIVISION(mv248,mv249);
resetMv mv250[1];
resetMv mv251[1];
setVector ve252 = {rcPpDual[8],len[8]};
dotVectors mv251[0] = <ve252>;
setMv mv250[0] = mv251[-0];
resetMv mv253[1];
resetMv mv254[1];
setVector ve255 = {nen[1,2,3]};
setVector ve256 = {nen[1,2,3]};
dotVectors mv254[0] = <ve255,ve256>;
resetMv mv257[1];
setMv mv257[0] = nen[1];
resetMv mv258[1];
setMv mv258[0] = mv254[0];
calculateMvCoeff mv253[0] = DIVISION(mv257,mv258);
resetMv mv259[1];
resetMv mv260[1];
setVector ve261 = {rcPpDual[11],len[11]};
dotVectors mv260[0] = <ve261>;
setMv mv259[0] = mv260[-0];
resetMv mv262[1];
resetMv mv263[1];
setVector ve264 = {nen[1,2,3]};
setVector ve265 = {nen[1,2,3]};
dotVectors mv263[0] = <ve264,ve265>;
resetMv mv266[1];
setMv mv266[0] = nen[2];
resetMv mv267[1];
setMv mv267[0] = mv263[0];
calculateMvCoeff mv262[0] = DIVISION(mv266,mv267);
resetMv mv268[1];
resetMv mv269[1];
setVector ve270 = {rcPpDual[13],len[13]};
dotVectors mv269[0] = <ve270>;
setMv mv268[0] = mv269[-0];
resetMv mv271[1];
resetMv mv272[1];
setVector ve273 = {nen[1,2,3]};
setVector ve274 = {nen[1,2,3]};
dotVectors mv272[0] = <ve273,ve274>;
resetMv mv275[1];
setMv mv275[0] = nen[3];
resetMv mv276[1];
setMv mv276[0] = mv272[0];
calculateMvCoeff mv271[0] = DIVISION(mv275,mv276);
resetMv mv277[1];
resetMv mv278[1];
setVector ve279 = {rcPpDual[15],len[15]};
dotVectors mv278[0] = <ve279>;
setMv mv277[0] = mv278[-0];
resetMv mv280[1];
resetMv mv281[1];
setVector ve282 = {nen[1,2,3]};
setVector ve283 = {nen[1,2,3]};
dotVectors mv281[0] = <ve282,ve283>;
resetMv mv284[1];
setMv mv284[0] = nen[4];
resetMv mv285[1];
setMv mv285[0] = mv281[0];
calculateMvCoeff mv280[0] = DIVISION(mv284,mv285);
setVector ve286 = {len[0],mv250[0],mv259[0],mv268[0],mv277[0]};
setVector ve287 = {mv244[0],mv253[0],mv262[0],mv271[0],mv280[0]};
dotVectors rc1[4] = <ve286,ve287>;

//rc1[5] = ((-((rcPpDual[9] + len[9]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[12] + len[12]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[14] + len[14]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv288[1];
resetMv mv289[1];
setVector ve290 = {rcPpDual[9],len[9]};
dotVectors mv289[0] = <ve290>;
setMv mv288[0] = mv289[-0];
resetMv mv291[1];
resetMv mv292[1];
setVector ve293 = {nen[1,2,3]};
setVector ve294 = {nen[1,2,3]};
dotVectors mv292[0] = <ve293,ve294>;
resetMv mv295[1];
setMv mv295[0] = nen[1];
resetMv mv296[1];
setMv mv296[0] = mv292[0];
calculateMvCoeff mv291[0] = DIVISION(mv295,mv296);
resetMv mv297[1];
resetMv mv298[1];
setVector ve299 = {rcPpDual[12],len[12]};
dotVectors mv298[0] = <ve299>;
setMv mv297[0] = mv298[-0];
resetMv mv300[1];
resetMv mv301[1];
setVector ve302 = {nen[1,2,3]};
setVector ve303 = {nen[1,2,3]};
dotVectors mv301[0] = <ve302,ve303>;
resetMv mv304[1];
setMv mv304[0] = nen[2];
resetMv mv305[1];
setMv mv305[0] = mv301[0];
calculateMvCoeff mv300[0] = DIVISION(mv304,mv305);
resetMv mv306[1];
resetMv mv307[1];
setVector ve308 = {rcPpDual[14],len[14]};
dotVectors mv307[0] = <ve308>;
setMv mv306[0] = mv307[-0];
resetMv mv309[1];
resetMv mv310[1];
setVector ve311 = {nen[1,2,3]};
setVector ve312 = {nen[1,2,3]};
dotVectors mv310[0] = <ve311,ve312>;
resetMv mv313[1];
setMv mv313[0] = nen[3];
resetMv mv314[1];
setMv mv314[0] = mv310[0];
calculateMvCoeff mv309[0] = DIVISION(mv313,mv314);
setVector ve315 = {mv288[0],mv297[0],mv306[0]};
setVector ve316 = {mv291[0],mv300[0],mv309[0]};
dotVectors rc1[5] = <ve315,ve316>;

//rc1[6] = (((len[1] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[2] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[16] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[18] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv317[1];
resetMv mv318[1];
setVector ve319 = {nen[1,2,3]};
setVector ve320 = {nen[1,2,3]};
dotVectors mv318[0] = <ve319,ve320>;
resetMv mv321[1];
setMv mv321[0] = nen[2];
resetMv mv322[1];
setMv mv322[0] = mv318[0];
calculateMvCoeff mv317[0] = DIVISION(mv321,mv322);
resetMv mv323[1];
resetMv mv324[1];
setVector ve325 = {nen[1,2,3]};
setVector ve326 = {nen[1,2,3]};
dotVectors mv324[0] = <ve325,ve326>;
resetMv mv327[1];
setMv mv327[0] = nen[1];
resetMv mv328[1];
setMv mv328[0] = mv324[0];
calculateMvCoeff mv323[0] = DIVISION(mv327,mv328);
resetMv mv329[1];
resetMv mv330[1];
setVector ve331 = {nen[1,2,3]};
setVector ve332 = {nen[1,2,3]};
dotVectors mv330[0] = <ve331,ve332>;
resetMv mv333[1];
setMv mv333[0] = nen[3];
resetMv mv334[1];
setMv mv334[0] = mv330[0];
calculateMvCoeff mv329[0] = DIVISION(mv333,mv334);
resetMv mv335[1];
resetMv mv336[1];
setVector ve337 = {nen[1,2,3]};
setVector ve338 = {nen[1,2,3]};
dotVectors mv336[0] = <ve337,ve338>;
resetMv mv339[1];
setMv mv339[0] = nen[4];
resetMv mv340[1];
setMv mv340[0] = mv336[0];
calculateMvCoeff mv335[0] = DIVISION(mv339,mv340);
setVector ve341 = {len[1,-2,16,-18]};
setVector ve342 = {mv317[0],mv323[0],mv329[0],mv335[0]};
dotVectors rc1[6] = <ve341,ve342>;

//rc1[7] = (((len[1] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[3] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[16] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[20] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv343[1];
resetMv mv344[1];
setVector ve345 = {nen[1,2,3]};
setVector ve346 = {nen[1,2,3]};
dotVectors mv344[0] = <ve345,ve346>;
resetMv mv347[1];
setMv mv347[0] = nen[3];
resetMv mv348[1];
setMv mv348[0] = mv344[0];
calculateMvCoeff mv343[0] = DIVISION(mv347,mv348);
resetMv mv349[1];
resetMv mv350[1];
setVector ve351 = {nen[1,2,3]};
setVector ve352 = {nen[1,2,3]};
dotVectors mv350[0] = <ve351,ve352>;
resetMv mv353[1];
setMv mv353[0] = nen[1];
resetMv mv354[1];
setMv mv354[0] = mv350[0];
calculateMvCoeff mv349[0] = DIVISION(mv353,mv354);
resetMv mv355[1];
resetMv mv356[1];
setVector ve357 = {nen[1,2,3]};
setVector ve358 = {nen[1,2,3]};
dotVectors mv356[0] = <ve357,ve358>;
resetMv mv359[1];
setMv mv359[0] = nen[2];
resetMv mv360[1];
setMv mv360[0] = mv356[0];
calculateMvCoeff mv355[0] = DIVISION(mv359,mv360);
resetMv mv361[1];
resetMv mv362[1];
setVector ve363 = {nen[1,2,3]};
setVector ve364 = {nen[1,2,3]};
dotVectors mv362[0] = <ve363,ve364>;
resetMv mv365[1];
setMv mv365[0] = nen[4];
resetMv mv366[1];
setMv mv366[0] = mv362[0];
calculateMvCoeff mv361[0] = DIVISION(mv365,mv366);
setVector ve367 = {len[1,-3,-16,-20]};
setVector ve368 = {mv343[0],mv349[0],mv355[0],mv361[0]};
dotVectors rc1[7] = <ve367,ve368>;

//rc1[8] = ((((len[1] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[4] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[17] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[19] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[21] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv369[1];
resetMv mv370[1];
setVector ve371 = {nen[1,2,3]};
setVector ve372 = {nen[1,2,3]};
dotVectors mv370[0] = <ve371,ve372>;
resetMv mv373[1];
setMv mv373[0] = nen[4];
resetMv mv374[1];
setMv mv374[0] = mv370[0];
calculateMvCoeff mv369[0] = DIVISION(mv373,mv374);
resetMv mv375[1];
resetMv mv376[1];
setVector ve377 = {nen[1,2,3]};
setVector ve378 = {nen[1,2,3]};
dotVectors mv376[0] = <ve377,ve378>;
resetMv mv379[1];
setMv mv379[0] = nen[1];
resetMv mv380[1];
setMv mv380[0] = mv376[0];
calculateMvCoeff mv375[0] = DIVISION(mv379,mv380);
resetMv mv381[1];
resetMv mv382[1];
setVector ve383 = {nen[1,2,3]};
setVector ve384 = {nen[1,2,3]};
dotVectors mv382[0] = <ve383,ve384>;
resetMv mv385[1];
setMv mv385[0] = nen[2];
resetMv mv386[1];
setMv mv386[0] = mv382[0];
calculateMvCoeff mv381[0] = DIVISION(mv385,mv386);
resetMv mv387[1];
resetMv mv388[1];
setVector ve389 = {nen[1,2,3]};
setVector ve390 = {nen[1,2,3]};
dotVectors mv388[0] = <ve389,ve390>;
resetMv mv391[1];
setMv mv391[0] = nen[3];
resetMv mv392[1];
setMv mv392[0] = mv388[0];
calculateMvCoeff mv387[0] = DIVISION(mv391,mv392);
resetMv mv393[1];
resetMv mv394[1];
setVector ve395 = {nen[1,2,3]};
setVector ve396 = {nen[1,2,3]};
dotVectors mv394[0] = <ve395,ve396>;
resetMv mv397[1];
setMv mv397[0] = nen[4];
resetMv mv398[1];
setMv mv398[0] = mv394[0];
calculateMvCoeff mv393[0] = DIVISION(mv397,mv398);
setVector ve399 = {len[1,-4,-17,-19,-21]};
setVector ve400 = {mv369[0],mv375[0],mv381[0],mv387[0],mv393[0]};
dotVectors rc1[8] = <ve399,ve400>;

//rc1[9] = ((-(len[5] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[18] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[20] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv401[1];
resetMv mv402[1];
setVector ve403 = {nen[1,2,3]};
setVector ve404 = {nen[1,2,3]};
dotVectors mv402[0] = <ve403,ve404>;
resetMv mv405[1];
setMv mv405[0] = nen[1];
resetMv mv406[1];
setMv mv406[0] = mv402[0];
calculateMvCoeff mv401[0] = DIVISION(mv405,mv406);
resetMv mv407[1];
resetMv mv408[1];
setVector ve409 = {nen[1,2,3]};
setVector ve410 = {nen[1,2,3]};
dotVectors mv408[0] = <ve409,ve410>;
resetMv mv411[1];
setMv mv411[0] = nen[2];
resetMv mv412[1];
setMv mv412[0] = mv408[0];
calculateMvCoeff mv407[0] = DIVISION(mv411,mv412);
resetMv mv413[1];
resetMv mv414[1];
setVector ve415 = {nen[1,2,3]};
setVector ve416 = {nen[1,2,3]};
dotVectors mv414[0] = <ve415,ve416>;
resetMv mv417[1];
setMv mv417[0] = nen[3];
resetMv mv418[1];
setMv mv418[0] = mv414[0];
calculateMvCoeff mv413[0] = DIVISION(mv417,mv418);
setVector ve419 = {len[-5,-18,-20]};
setVector ve420 = {mv401[0],mv407[0],mv413[0]};
dotVectors rc1[9] = <ve419,ve420>;

//rc1[10] = (((len[2] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[3] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[16] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[23] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv421[1];
resetMv mv422[1];
setVector ve423 = {nen[1,2,3]};
setVector ve424 = {nen[1,2,3]};
dotVectors mv422[0] = <ve423,ve424>;
resetMv mv425[1];
setMv mv425[0] = nen[3];
resetMv mv426[1];
setMv mv426[0] = mv422[0];
calculateMvCoeff mv421[0] = DIVISION(mv425,mv426);
resetMv mv427[1];
resetMv mv428[1];
setVector ve429 = {nen[1,2,3]};
setVector ve430 = {nen[1,2,3]};
dotVectors mv428[0] = <ve429,ve430>;
resetMv mv431[1];
setMv mv431[0] = nen[2];
resetMv mv432[1];
setMv mv432[0] = mv428[0];
calculateMvCoeff mv427[0] = DIVISION(mv431,mv432);
resetMv mv433[1];
resetMv mv434[1];
setVector ve435 = {nen[1,2,3]};
setVector ve436 = {nen[1,2,3]};
dotVectors mv434[0] = <ve435,ve436>;
resetMv mv437[1];
setMv mv437[0] = nen[1];
resetMv mv438[1];
setMv mv438[0] = mv434[0];
calculateMvCoeff mv433[0] = DIVISION(mv437,mv438);
resetMv mv439[1];
resetMv mv440[1];
setVector ve441 = {nen[1,2,3]};
setVector ve442 = {nen[1,2,3]};
dotVectors mv440[0] = <ve441,ve442>;
resetMv mv443[1];
setMv mv443[0] = nen[4];
resetMv mv444[1];
setMv mv444[0] = mv440[0];
calculateMvCoeff mv439[0] = DIVISION(mv443,mv444);
setVector ve445 = {len[2,-3,16,-23]};
setVector ve446 = {mv421[0],mv427[0],mv433[0],mv439[0]};
dotVectors rc1[10] = <ve445,ve446>;

//rc1[11] = ((((len[2] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[4] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[17] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[22] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[24] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv447[1];
resetMv mv448[1];
setVector ve449 = {nen[1,2,3]};
setVector ve450 = {nen[1,2,3]};
dotVectors mv448[0] = <ve449,ve450>;
resetMv mv451[1];
setMv mv451[0] = nen[4];
resetMv mv452[1];
setMv mv452[0] = mv448[0];
calculateMvCoeff mv447[0] = DIVISION(mv451,mv452);
resetMv mv453[1];
resetMv mv454[1];
setVector ve455 = {nen[1,2,3]};
setVector ve456 = {nen[1,2,3]};
dotVectors mv454[0] = <ve455,ve456>;
resetMv mv457[1];
setMv mv457[0] = nen[2];
resetMv mv458[1];
setMv mv458[0] = mv454[0];
calculateMvCoeff mv453[0] = DIVISION(mv457,mv458);
resetMv mv459[1];
resetMv mv460[1];
setVector ve461 = {nen[1,2,3]};
setVector ve462 = {nen[1,2,3]};
dotVectors mv460[0] = <ve461,ve462>;
resetMv mv463[1];
setMv mv463[0] = nen[1];
resetMv mv464[1];
setMv mv464[0] = mv460[0];
calculateMvCoeff mv459[0] = DIVISION(mv463,mv464);
resetMv mv465[1];
resetMv mv466[1];
setVector ve467 = {nen[1,2,3]};
setVector ve468 = {nen[1,2,3]};
dotVectors mv466[0] = <ve467,ve468>;
resetMv mv469[1];
setMv mv469[0] = nen[3];
resetMv mv470[1];
setMv mv470[0] = mv466[0];
calculateMvCoeff mv465[0] = DIVISION(mv469,mv470);
resetMv mv471[1];
resetMv mv472[1];
setVector ve473 = {nen[1,2,3]};
setVector ve474 = {nen[1,2,3]};
dotVectors mv472[0] = <ve473,ve474>;
resetMv mv475[1];
setMv mv475[0] = nen[4];
resetMv mv476[1];
setMv mv476[0] = mv472[0];
calculateMvCoeff mv471[0] = DIVISION(mv475,mv476);
setVector ve477 = {len[2,-4,17,-22,-24]};
setVector ve478 = {mv447[0],mv453[0],mv459[0],mv465[0],mv471[0]};
dotVectors rc1[11] = <ve477,ve478>;

//rc1[12] = ((-(len[5] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[18] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[23] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv479[1];
resetMv mv480[1];
setVector ve481 = {nen[1,2,3]};
setVector ve482 = {nen[1,2,3]};
dotVectors mv480[0] = <ve481,ve482>;
resetMv mv483[1];
setMv mv483[0] = nen[2];
resetMv mv484[1];
setMv mv484[0] = mv480[0];
calculateMvCoeff mv479[0] = DIVISION(mv483,mv484);
resetMv mv485[1];
resetMv mv486[1];
setVector ve487 = {nen[1,2,3]};
setVector ve488 = {nen[1,2,3]};
dotVectors mv486[0] = <ve487,ve488>;
resetMv mv489[1];
setMv mv489[0] = nen[1];
resetMv mv490[1];
setMv mv490[0] = mv486[0];
calculateMvCoeff mv485[0] = DIVISION(mv489,mv490);
resetMv mv491[1];
resetMv mv492[1];
setVector ve493 = {nen[1,2,3]};
setVector ve494 = {nen[1,2,3]};
dotVectors mv492[0] = <ve493,ve494>;
resetMv mv495[1];
setMv mv495[0] = nen[3];
resetMv mv496[1];
setMv mv496[0] = mv492[0];
calculateMvCoeff mv491[0] = DIVISION(mv495,mv496);
setVector ve497 = {len[-5,18,-23]};
setVector ve498 = {mv479[0],mv485[0],mv491[0]};
dotVectors rc1[12] = <ve497,ve498>;

//rc1[13] = ((((len[3] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[4] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[19] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[22] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[25] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv499[1];
resetMv mv500[1];
setVector ve501 = {nen[1,2,3]};
setVector ve502 = {nen[1,2,3]};
dotVectors mv500[0] = <ve501,ve502>;
resetMv mv503[1];
setMv mv503[0] = nen[4];
resetMv mv504[1];
setMv mv504[0] = mv500[0];
calculateMvCoeff mv499[0] = DIVISION(mv503,mv504);
resetMv mv505[1];
resetMv mv506[1];
setVector ve507 = {nen[1,2,3]};
setVector ve508 = {nen[1,2,3]};
dotVectors mv506[0] = <ve507,ve508>;
resetMv mv509[1];
setMv mv509[0] = nen[3];
resetMv mv510[1];
setMv mv510[0] = mv506[0];
calculateMvCoeff mv505[0] = DIVISION(mv509,mv510);
resetMv mv511[1];
resetMv mv512[1];
setVector ve513 = {nen[1,2,3]};
setVector ve514 = {nen[1,2,3]};
dotVectors mv512[0] = <ve513,ve514>;
resetMv mv515[1];
setMv mv515[0] = nen[1];
resetMv mv516[1];
setMv mv516[0] = mv512[0];
calculateMvCoeff mv511[0] = DIVISION(mv515,mv516);
resetMv mv517[1];
resetMv mv518[1];
setVector ve519 = {nen[1,2,3]};
setVector ve520 = {nen[1,2,3]};
dotVectors mv518[0] = <ve519,ve520>;
resetMv mv521[1];
setMv mv521[0] = nen[2];
resetMv mv522[1];
setMv mv522[0] = mv518[0];
calculateMvCoeff mv517[0] = DIVISION(mv521,mv522);
resetMv mv523[1];
resetMv mv524[1];
setVector ve525 = {nen[1,2,3]};
setVector ve526 = {nen[1,2,3]};
dotVectors mv524[0] = <ve525,ve526>;
resetMv mv527[1];
setMv mv527[0] = nen[4];
resetMv mv528[1];
setMv mv528[0] = mv524[0];
calculateMvCoeff mv523[0] = DIVISION(mv527,mv528);
setVector ve529 = {len[3,-4,19,22,-25]};
setVector ve530 = {mv499[0],mv505[0],mv511[0],mv517[0],mv523[0]};
dotVectors rc1[13] = <ve529,ve530>;

//rc1[14] = ((-(len[5] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[20] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[23] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv531[1];
resetMv mv532[1];
setVector ve533 = {nen[1,2,3]};
setVector ve534 = {nen[1,2,3]};
dotVectors mv532[0] = <ve533,ve534>;
resetMv mv535[1];
setMv mv535[0] = nen[3];
resetMv mv536[1];
setMv mv536[0] = mv532[0];
calculateMvCoeff mv531[0] = DIVISION(mv535,mv536);
resetMv mv537[1];
resetMv mv538[1];
setVector ve539 = {nen[1,2,3]};
setVector ve540 = {nen[1,2,3]};
dotVectors mv538[0] = <ve539,ve540>;
resetMv mv541[1];
setMv mv541[0] = nen[1];
resetMv mv542[1];
setMv mv542[0] = mv538[0];
calculateMvCoeff mv537[0] = DIVISION(mv541,mv542);
resetMv mv543[1];
resetMv mv544[1];
setVector ve545 = {nen[1,2,3]};
setVector ve546 = {nen[1,2,3]};
dotVectors mv544[0] = <ve545,ve546>;
resetMv mv547[1];
setMv mv547[0] = nen[2];
resetMv mv548[1];
setMv mv548[0] = mv544[0];
calculateMvCoeff mv543[0] = DIVISION(mv547,mv548);
setVector ve549 = {len[-5,20,23]};
setVector ve550 = {mv531[0],mv537[0],mv543[0]};
dotVectors rc1[14] = <ve549,ve550>;

//rc1[15] = (((-(len[5] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[21] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[24] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[25] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv551[1];
resetMv mv552[1];
setVector ve553 = {nen[1,2,3]};
setVector ve554 = {nen[1,2,3]};
dotVectors mv552[0] = <ve553,ve554>;
resetMv mv555[1];
setMv mv555[0] = nen[4];
resetMv mv556[1];
setMv mv556[0] = mv552[0];
calculateMvCoeff mv551[0] = DIVISION(mv555,mv556);
resetMv mv557[1];
resetMv mv558[1];
setVector ve559 = {nen[1,2,3]};
setVector ve560 = {nen[1,2,3]};
dotVectors mv558[0] = <ve559,ve560>;
resetMv mv561[1];
setMv mv561[0] = nen[1];
resetMv mv562[1];
setMv mv562[0] = mv558[0];
calculateMvCoeff mv557[0] = DIVISION(mv561,mv562);
resetMv mv563[1];
resetMv mv564[1];
setVector ve565 = {nen[1,2,3]};
setVector ve566 = {nen[1,2,3]};
dotVectors mv564[0] = <ve565,ve566>;
resetMv mv567[1];
setMv mv567[0] = nen[2];
resetMv mv568[1];
setMv mv568[0] = mv564[0];
calculateMvCoeff mv563[0] = DIVISION(mv567,mv568);
resetMv mv569[1];
resetMv mv570[1];
setVector ve571 = {nen[1,2,3]};
setVector ve572 = {nen[1,2,3]};
dotVectors mv570[0] = <ve571,ve572>;
resetMv mv573[1];
setMv mv573[0] = nen[3];
resetMv mv574[1];
setMv mv574[0] = mv570[0];
calculateMvCoeff mv569[0] = DIVISION(mv573,mv574);
setVector ve575 = {len[-5,21,24,25]};
setVector ve576 = {mv551[0],mv557[0],mv563[0],mv569[0]};
dotVectors rc1[15] = <ve575,ve576>;

//rc1[16] = ((((rcPpDual[6] + len[6]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[7] + len[7]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[10] + len[10]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[27] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv577[1];
setVector ve578 = {rcPpDual[6],len[6]};
dotVectors mv577[0] = <ve578>;
resetMv mv579[1];
resetMv mv580[1];
setVector ve581 = {nen[1,2,3]};
setVector ve582 = {nen[1,2,3]};
dotVectors mv580[0] = <ve581,ve582>;
resetMv mv583[1];
setMv mv583[0] = nen[3];
resetMv mv584[1];
setMv mv584[0] = mv580[0];
calculateMvCoeff mv579[0] = DIVISION(mv583,mv584);
resetMv mv585[1];
resetMv mv586[1];
setVector ve587 = {rcPpDual[7],len[7]};
dotVectors mv586[0] = <ve587>;
setMv mv585[0] = mv586[-0];
resetMv mv588[1];
resetMv mv589[1];
setVector ve590 = {nen[1,2,3]};
setVector ve591 = {nen[1,2,3]};
dotVectors mv589[0] = <ve590,ve591>;
resetMv mv592[1];
setMv mv592[0] = nen[2];
resetMv mv593[1];
setMv mv593[0] = mv589[0];
calculateMvCoeff mv588[0] = DIVISION(mv592,mv593);
resetMv mv594[1];
setVector ve595 = {rcPpDual[10],len[10]};
dotVectors mv594[0] = <ve595>;
resetMv mv596[1];
resetMv mv597[1];
setVector ve598 = {nen[1,2,3]};
setVector ve599 = {nen[1,2,3]};
dotVectors mv597[0] = <ve598,ve599>;
resetMv mv600[1];
setMv mv600[0] = nen[1];
resetMv mv601[1];
setMv mv601[0] = mv597[0];
calculateMvCoeff mv596[0] = DIVISION(mv600,mv601);
resetMv mv602[1];
resetMv mv603[1];
setVector ve604 = {nen[1,2,3]};
setVector ve605 = {nen[1,2,3]};
dotVectors mv603[0] = <ve604,ve605>;
resetMv mv606[1];
setMv mv606[0] = nen[4];
resetMv mv607[1];
setMv mv607[0] = mv603[0];
calculateMvCoeff mv602[0] = DIVISION(mv606,mv607);
setVector ve608 = {mv577[0],mv585[0],mv594[0],len[-27]};
setVector ve609 = {mv579[0],mv588[0],mv596[0],mv602[0]};
dotVectors rc1[16] = <ve608,ve609>;

//rc1[17] = (((((rcPpDual[6] + len[6]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] + len[8]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[11] + len[11]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[26] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[28] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv610[1];
setVector ve611 = {rcPpDual[6],len[6]};
dotVectors mv610[0] = <ve611>;
resetMv mv612[1];
resetMv mv613[1];
setVector ve614 = {nen[1,2,3]};
setVector ve615 = {nen[1,2,3]};
dotVectors mv613[0] = <ve614,ve615>;
resetMv mv616[1];
setMv mv616[0] = nen[4];
resetMv mv617[1];
setMv mv617[0] = mv613[0];
calculateMvCoeff mv612[0] = DIVISION(mv616,mv617);
resetMv mv618[1];
resetMv mv619[1];
setVector ve620 = {rcPpDual[8],len[8]};
dotVectors mv619[0] = <ve620>;
setMv mv618[0] = mv619[-0];
resetMv mv621[1];
resetMv mv622[1];
setVector ve623 = {nen[1,2,3]};
setVector ve624 = {nen[1,2,3]};
dotVectors mv622[0] = <ve623,ve624>;
resetMv mv625[1];
setMv mv625[0] = nen[2];
resetMv mv626[1];
setMv mv626[0] = mv622[0];
calculateMvCoeff mv621[0] = DIVISION(mv625,mv626);
resetMv mv627[1];
setVector ve628 = {rcPpDual[11],len[11]};
dotVectors mv627[0] = <ve628>;
resetMv mv629[1];
resetMv mv630[1];
setVector ve631 = {nen[1,2,3]};
setVector ve632 = {nen[1,2,3]};
dotVectors mv630[0] = <ve631,ve632>;
resetMv mv633[1];
setMv mv633[0] = nen[1];
resetMv mv634[1];
setMv mv634[0] = mv630[0];
calculateMvCoeff mv629[0] = DIVISION(mv633,mv634);
resetMv mv635[1];
resetMv mv636[1];
setVector ve637 = {nen[1,2,3]};
setVector ve638 = {nen[1,2,3]};
dotVectors mv636[0] = <ve637,ve638>;
resetMv mv639[1];
setMv mv639[0] = nen[3];
resetMv mv640[1];
setMv mv640[0] = mv636[0];
calculateMvCoeff mv635[0] = DIVISION(mv639,mv640);
resetMv mv641[1];
resetMv mv642[1];
setVector ve643 = {nen[1,2,3]};
setVector ve644 = {nen[1,2,3]};
dotVectors mv642[0] = <ve643,ve644>;
resetMv mv645[1];
setMv mv645[0] = nen[4];
resetMv mv646[1];
setMv mv646[0] = mv642[0];
calculateMvCoeff mv641[0] = DIVISION(mv645,mv646);
setVector ve647 = {mv610[0],mv618[0],mv627[0],len[-26,-28]};
setVector ve648 = {mv612[0],mv621[0],mv629[0],mv635[0],mv641[0]};
dotVectors rc1[17] = <ve647,ve648>;

//rc1[18] = ((-((rcPpDual[9] + len[9]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[12] + len[12]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[27] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv649[1];
resetMv mv650[1];
setVector ve651 = {rcPpDual[9],len[9]};
dotVectors mv650[0] = <ve651>;
setMv mv649[0] = mv650[-0];
resetMv mv652[1];
resetMv mv653[1];
setVector ve654 = {nen[1,2,3]};
setVector ve655 = {nen[1,2,3]};
dotVectors mv653[0] = <ve654,ve655>;
resetMv mv656[1];
setMv mv656[0] = nen[2];
resetMv mv657[1];
setMv mv657[0] = mv653[0];
calculateMvCoeff mv652[0] = DIVISION(mv656,mv657);
resetMv mv658[1];
setVector ve659 = {rcPpDual[12],len[12]};
dotVectors mv658[0] = <ve659>;
resetMv mv660[1];
resetMv mv661[1];
setVector ve662 = {nen[1,2,3]};
setVector ve663 = {nen[1,2,3]};
dotVectors mv661[0] = <ve662,ve663>;
resetMv mv664[1];
setMv mv664[0] = nen[1];
resetMv mv665[1];
setMv mv665[0] = mv661[0];
calculateMvCoeff mv660[0] = DIVISION(mv664,mv665);
resetMv mv666[1];
resetMv mv667[1];
setVector ve668 = {nen[1,2,3]};
setVector ve669 = {nen[1,2,3]};
dotVectors mv667[0] = <ve668,ve669>;
resetMv mv670[1];
setMv mv670[0] = nen[3];
resetMv mv671[1];
setMv mv671[0] = mv667[0];
calculateMvCoeff mv666[0] = DIVISION(mv670,mv671);
setVector ve672 = {mv649[0],mv658[0],len[-27]};
setVector ve673 = {mv652[0],mv660[0],mv666[0]};
dotVectors rc1[18] = <ve672,ve673>;

//rc1[19] = (((((rcPpDual[7] + len[7]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] + len[8]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[13] + len[13]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[26] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[29] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv674[1];
setVector ve675 = {rcPpDual[7],len[7]};
dotVectors mv674[0] = <ve675>;
resetMv mv676[1];
resetMv mv677[1];
setVector ve678 = {nen[1,2,3]};
setVector ve679 = {nen[1,2,3]};
dotVectors mv677[0] = <ve678,ve679>;
resetMv mv680[1];
setMv mv680[0] = nen[4];
resetMv mv681[1];
setMv mv681[0] = mv677[0];
calculateMvCoeff mv676[0] = DIVISION(mv680,mv681);
resetMv mv682[1];
resetMv mv683[1];
setVector ve684 = {rcPpDual[8],len[8]};
dotVectors mv683[0] = <ve684>;
setMv mv682[0] = mv683[-0];
resetMv mv685[1];
resetMv mv686[1];
setVector ve687 = {nen[1,2,3]};
setVector ve688 = {nen[1,2,3]};
dotVectors mv686[0] = <ve687,ve688>;
resetMv mv689[1];
setMv mv689[0] = nen[3];
resetMv mv690[1];
setMv mv690[0] = mv686[0];
calculateMvCoeff mv685[0] = DIVISION(mv689,mv690);
resetMv mv691[1];
setVector ve692 = {rcPpDual[13],len[13]};
dotVectors mv691[0] = <ve692>;
resetMv mv693[1];
resetMv mv694[1];
setVector ve695 = {nen[1,2,3]};
setVector ve696 = {nen[1,2,3]};
dotVectors mv694[0] = <ve695,ve696>;
resetMv mv697[1];
setMv mv697[0] = nen[1];
resetMv mv698[1];
setMv mv698[0] = mv694[0];
calculateMvCoeff mv693[0] = DIVISION(mv697,mv698);
resetMv mv699[1];
resetMv mv700[1];
setVector ve701 = {nen[1,2,3]};
setVector ve702 = {nen[1,2,3]};
dotVectors mv700[0] = <ve701,ve702>;
resetMv mv703[1];
setMv mv703[0] = nen[2];
resetMv mv704[1];
setMv mv704[0] = mv700[0];
calculateMvCoeff mv699[0] = DIVISION(mv703,mv704);
resetMv mv705[1];
resetMv mv706[1];
setVector ve707 = {nen[1,2,3]};
setVector ve708 = {nen[1,2,3]};
dotVectors mv706[0] = <ve707,ve708>;
resetMv mv709[1];
setMv mv709[0] = nen[4];
resetMv mv710[1];
setMv mv710[0] = mv706[0];
calculateMvCoeff mv705[0] = DIVISION(mv709,mv710);
setVector ve711 = {mv674[0],mv682[0],mv691[0],len[26,-29]};
setVector ve712 = {mv676[0],mv685[0],mv693[0],mv699[0],mv705[0]};
dotVectors rc1[19] = <ve711,ve712>;

//rc1[20] = ((-((rcPpDual[9] + len[9]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[14] + len[14]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[27] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv713[1];
resetMv mv714[1];
setVector ve715 = {rcPpDual[9],len[9]};
dotVectors mv714[0] = <ve715>;
setMv mv713[0] = mv714[-0];
resetMv mv716[1];
resetMv mv717[1];
setVector ve718 = {nen[1,2,3]};
setVector ve719 = {nen[1,2,3]};
dotVectors mv717[0] = <ve718,ve719>;
resetMv mv720[1];
setMv mv720[0] = nen[3];
resetMv mv721[1];
setMv mv721[0] = mv717[0];
calculateMvCoeff mv716[0] = DIVISION(mv720,mv721);
resetMv mv722[1];
setVector ve723 = {rcPpDual[14],len[14]};
dotVectors mv722[0] = <ve723>;
resetMv mv724[1];
resetMv mv725[1];
setVector ve726 = {nen[1,2,3]};
setVector ve727 = {nen[1,2,3]};
dotVectors mv725[0] = <ve726,ve727>;
resetMv mv728[1];
setMv mv728[0] = nen[1];
resetMv mv729[1];
setMv mv729[0] = mv725[0];
calculateMvCoeff mv724[0] = DIVISION(mv728,mv729);
resetMv mv730[1];
resetMv mv731[1];
setVector ve732 = {nen[1,2,3]};
setVector ve733 = {nen[1,2,3]};
dotVectors mv731[0] = <ve732,ve733>;
resetMv mv734[1];
setMv mv734[0] = nen[2];
resetMv mv735[1];
setMv mv735[0] = mv731[0];
calculateMvCoeff mv730[0] = DIVISION(mv734,mv735);
setVector ve736 = {mv713[0],mv722[0],len[27]};
setVector ve737 = {mv716[0],mv724[0],mv730[0]};
dotVectors rc1[20] = <ve736,ve737>;

//rc1[21] = (((-((rcPpDual[9] + len[9]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] + len[15]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[28] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[29] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv738[1];
resetMv mv739[1];
setVector ve740 = {rcPpDual[9],len[9]};
dotVectors mv739[0] = <ve740>;
setMv mv738[0] = mv739[-0];
resetMv mv741[1];
resetMv mv742[1];
setVector ve743 = {nen[1,2,3]};
setVector ve744 = {nen[1,2,3]};
dotVectors mv742[0] = <ve743,ve744>;
resetMv mv745[1];
setMv mv745[0] = nen[4];
resetMv mv746[1];
setMv mv746[0] = mv742[0];
calculateMvCoeff mv741[0] = DIVISION(mv745,mv746);
resetMv mv747[1];
setVector ve748 = {rcPpDual[15],len[15]};
dotVectors mv747[0] = <ve748>;
resetMv mv749[1];
resetMv mv750[1];
setVector ve751 = {nen[1,2,3]};
setVector ve752 = {nen[1,2,3]};
dotVectors mv750[0] = <ve751,ve752>;
resetMv mv753[1];
setMv mv753[0] = nen[1];
resetMv mv754[1];
setMv mv754[0] = mv750[0];
calculateMvCoeff mv749[0] = DIVISION(mv753,mv754);
resetMv mv755[1];
resetMv mv756[1];
setVector ve757 = {nen[1,2,3]};
setVector ve758 = {nen[1,2,3]};
dotVectors mv756[0] = <ve757,ve758>;
resetMv mv759[1];
setMv mv759[0] = nen[2];
resetMv mv760[1];
setMv mv760[0] = mv756[0];
calculateMvCoeff mv755[0] = DIVISION(mv759,mv760);
resetMv mv761[1];
resetMv mv762[1];
setVector ve763 = {nen[1,2,3]};
setVector ve764 = {nen[1,2,3]};
dotVectors mv762[0] = <ve763,ve764>;
resetMv mv765[1];
setMv mv765[0] = nen[3];
resetMv mv766[1];
setMv mv766[0] = mv762[0];
calculateMvCoeff mv761[0] = DIVISION(mv765,mv766);
setVector ve767 = {mv738[0],mv747[0],len[28,29]};
setVector ve768 = {mv741[0],mv749[0],mv755[0],mv761[0]};
dotVectors rc1[21] = <ve767,ve768>;

//rc1[22] = (((((rcPpDual[10] + len[10]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[11] + len[11]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[13] + len[13]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[26] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[30] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv769[1];
setVector ve770 = {rcPpDual[10],len[10]};
dotVectors mv769[0] = <ve770>;
resetMv mv771[1];
resetMv mv772[1];
setVector ve773 = {nen[1,2,3]};
setVector ve774 = {nen[1,2,3]};
dotVectors mv772[0] = <ve773,ve774>;
resetMv mv775[1];
setMv mv775[0] = nen[4];
resetMv mv776[1];
setMv mv776[0] = mv772[0];
calculateMvCoeff mv771[0] = DIVISION(mv775,mv776);
resetMv mv777[1];
resetMv mv778[1];
setVector ve779 = {rcPpDual[11],len[11]};
dotVectors mv778[0] = <ve779>;
setMv mv777[0] = mv778[-0];
resetMv mv780[1];
resetMv mv781[1];
setVector ve782 = {nen[1,2,3]};
setVector ve783 = {nen[1,2,3]};
dotVectors mv781[0] = <ve782,ve783>;
resetMv mv784[1];
setMv mv784[0] = nen[3];
resetMv mv785[1];
setMv mv785[0] = mv781[0];
calculateMvCoeff mv780[0] = DIVISION(mv784,mv785);
resetMv mv786[1];
setVector ve787 = {rcPpDual[13],len[13]};
dotVectors mv786[0] = <ve787>;
resetMv mv788[1];
resetMv mv789[1];
setVector ve790 = {nen[1,2,3]};
setVector ve791 = {nen[1,2,3]};
dotVectors mv789[0] = <ve790,ve791>;
resetMv mv792[1];
setMv mv792[0] = nen[2];
resetMv mv793[1];
setMv mv793[0] = mv789[0];
calculateMvCoeff mv788[0] = DIVISION(mv792,mv793);
resetMv mv794[1];
resetMv mv795[1];
setVector ve796 = {nen[1,2,3]};
setVector ve797 = {nen[1,2,3]};
dotVectors mv795[0] = <ve796,ve797>;
resetMv mv798[1];
setMv mv798[0] = nen[1];
resetMv mv799[1];
setMv mv799[0] = mv795[0];
calculateMvCoeff mv794[0] = DIVISION(mv798,mv799);
resetMv mv800[1];
resetMv mv801[1];
setVector ve802 = {nen[1,2,3]};
setVector ve803 = {nen[1,2,3]};
dotVectors mv801[0] = <ve802,ve803>;
resetMv mv804[1];
setMv mv804[0] = nen[4];
resetMv mv805[1];
setMv mv805[0] = mv801[0];
calculateMvCoeff mv800[0] = DIVISION(mv804,mv805);
setVector ve806 = {mv769[0],mv777[0],mv786[0],len[-26,-30]};
setVector ve807 = {mv771[0],mv780[0],mv788[0],mv794[0],mv800[0]};
dotVectors rc1[22] = <ve806,ve807>;

//rc1[23] = ((-((rcPpDual[12] + len[12]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[14] + len[14]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[27] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv808[1];
resetMv mv809[1];
setVector ve810 = {rcPpDual[12],len[12]};
dotVectors mv809[0] = <ve810>;
setMv mv808[0] = mv809[-0];
resetMv mv811[1];
resetMv mv812[1];
setVector ve813 = {nen[1,2,3]};
setVector ve814 = {nen[1,2,3]};
dotVectors mv812[0] = <ve813,ve814>;
resetMv mv815[1];
setMv mv815[0] = nen[3];
resetMv mv816[1];
setMv mv816[0] = mv812[0];
calculateMvCoeff mv811[0] = DIVISION(mv815,mv816);
resetMv mv817[1];
setVector ve818 = {rcPpDual[14],len[14]};
dotVectors mv817[0] = <ve818>;
resetMv mv819[1];
resetMv mv820[1];
setVector ve821 = {nen[1,2,3]};
setVector ve822 = {nen[1,2,3]};
dotVectors mv820[0] = <ve821,ve822>;
resetMv mv823[1];
setMv mv823[0] = nen[2];
resetMv mv824[1];
setMv mv824[0] = mv820[0];
calculateMvCoeff mv819[0] = DIVISION(mv823,mv824);
resetMv mv825[1];
resetMv mv826[1];
setVector ve827 = {nen[1,2,3]};
setVector ve828 = {nen[1,2,3]};
dotVectors mv826[0] = <ve827,ve828>;
resetMv mv829[1];
setMv mv829[0] = nen[1];
resetMv mv830[1];
setMv mv830[0] = mv826[0];
calculateMvCoeff mv825[0] = DIVISION(mv829,mv830);
setVector ve831 = {mv808[0],mv817[0],len[-27]};
setVector ve832 = {mv811[0],mv819[0],mv825[0]};
dotVectors rc1[23] = <ve831,ve832>;

//rc1[24] = (((-((rcPpDual[12] + len[12]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] + len[15]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[28] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[30] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv833[1];
resetMv mv834[1];
setVector ve835 = {rcPpDual[12],len[12]};
dotVectors mv834[0] = <ve835>;
setMv mv833[0] = mv834[-0];
resetMv mv836[1];
resetMv mv837[1];
setVector ve838 = {nen[1,2,3]};
setVector ve839 = {nen[1,2,3]};
dotVectors mv837[0] = <ve838,ve839>;
resetMv mv840[1];
setMv mv840[0] = nen[4];
resetMv mv841[1];
setMv mv841[0] = mv837[0];
calculateMvCoeff mv836[0] = DIVISION(mv840,mv841);
resetMv mv842[1];
setVector ve843 = {rcPpDual[15],len[15]};
dotVectors mv842[0] = <ve843>;
resetMv mv844[1];
resetMv mv845[1];
setVector ve846 = {nen[1,2,3]};
setVector ve847 = {nen[1,2,3]};
dotVectors mv845[0] = <ve846,ve847>;
resetMv mv848[1];
setMv mv848[0] = nen[2];
resetMv mv849[1];
setMv mv849[0] = mv845[0];
calculateMvCoeff mv844[0] = DIVISION(mv848,mv849);
resetMv mv850[1];
resetMv mv851[1];
setVector ve852 = {nen[1,2,3]};
setVector ve853 = {nen[1,2,3]};
dotVectors mv851[0] = <ve852,ve853>;
resetMv mv854[1];
setMv mv854[0] = nen[1];
resetMv mv855[1];
setMv mv855[0] = mv851[0];
calculateMvCoeff mv850[0] = DIVISION(mv854,mv855);
resetMv mv856[1];
resetMv mv857[1];
setVector ve858 = {nen[1,2,3]};
setVector ve859 = {nen[1,2,3]};
dotVectors mv857[0] = <ve858,ve859>;
resetMv mv860[1];
setMv mv860[0] = nen[3];
resetMv mv861[1];
setMv mv861[0] = mv857[0];
calculateMvCoeff mv856[0] = DIVISION(mv860,mv861);
setVector ve862 = {mv833[0],mv842[0],len[-28,30]};
setVector ve863 = {mv836[0],mv844[0],mv850[0],mv856[0]};
dotVectors rc1[24] = <ve862,ve863>;

//rc1[25] = (((-((rcPpDual[14] + len[14]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] + len[15]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[29] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[30] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv864[1];
resetMv mv865[1];
setVector ve866 = {rcPpDual[14],len[14]};
dotVectors mv865[0] = <ve866>;
setMv mv864[0] = mv865[-0];
resetMv mv867[1];
resetMv mv868[1];
setVector ve869 = {nen[1,2,3]};
setVector ve870 = {nen[1,2,3]};
dotVectors mv868[0] = <ve869,ve870>;
resetMv mv871[1];
setMv mv871[0] = nen[4];
resetMv mv872[1];
setMv mv872[0] = mv868[0];
calculateMvCoeff mv867[0] = DIVISION(mv871,mv872);
resetMv mv873[1];
setVector ve874 = {rcPpDual[15],len[15]};
dotVectors mv873[0] = <ve874>;
resetMv mv875[1];
resetMv mv876[1];
setVector ve877 = {nen[1,2,3]};
setVector ve878 = {nen[1,2,3]};
dotVectors mv876[0] = <ve877,ve878>;
resetMv mv879[1];
setMv mv879[0] = nen[3];
resetMv mv880[1];
setMv mv880[0] = mv876[0];
calculateMvCoeff mv875[0] = DIVISION(mv879,mv880);
resetMv mv881[1];
resetMv mv882[1];
setVector ve883 = {nen[1,2,3]};
setVector ve884 = {nen[1,2,3]};
dotVectors mv882[0] = <ve883,ve884>;
resetMv mv885[1];
setMv mv885[0] = nen[1];
resetMv mv886[1];
setMv mv886[0] = mv882[0];
calculateMvCoeff mv881[0] = DIVISION(mv885,mv886);
resetMv mv887[1];
resetMv mv888[1];
setVector ve889 = {nen[1,2,3]};
setVector ve890 = {nen[1,2,3]};
dotVectors mv888[0] = <ve889,ve890>;
resetMv mv891[1];
setMv mv891[0] = nen[2];
resetMv mv892[1];
setMv mv892[0] = mv888[0];
calculateMvCoeff mv887[0] = DIVISION(mv891,mv892);
setVector ve893 = {mv864[0],mv873[0],len[-29,-30]};
setVector ve894 = {mv867[0],mv875[0],mv881[0],mv887[0]};
dotVectors rc1[25] = <ve893,ve894>;

//rc1[26] = ((((len[16] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[17] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[19] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[22] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[31] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv895[1];
resetMv mv896[1];
setVector ve897 = {nen[1,2,3]};
setVector ve898 = {nen[1,2,3]};
dotVectors mv896[0] = <ve897,ve898>;
resetMv mv899[1];
setMv mv899[0] = nen[4];
resetMv mv900[1];
setMv mv900[0] = mv896[0];
calculateMvCoeff mv895[0] = DIVISION(mv899,mv900);
resetMv mv901[1];
resetMv mv902[1];
setVector ve903 = {nen[1,2,3]};
setVector ve904 = {nen[1,2,3]};
dotVectors mv902[0] = <ve903,ve904>;
resetMv mv905[1];
setMv mv905[0] = nen[3];
resetMv mv906[1];
setMv mv906[0] = mv902[0];
calculateMvCoeff mv901[0] = DIVISION(mv905,mv906);
resetMv mv907[1];
resetMv mv908[1];
setVector ve909 = {nen[1,2,3]};
setVector ve910 = {nen[1,2,3]};
dotVectors mv908[0] = <ve909,ve910>;
resetMv mv911[1];
setMv mv911[0] = nen[2];
resetMv mv912[1];
setMv mv912[0] = mv908[0];
calculateMvCoeff mv907[0] = DIVISION(mv911,mv912);
resetMv mv913[1];
resetMv mv914[1];
setVector ve915 = {nen[1,2,3]};
setVector ve916 = {nen[1,2,3]};
dotVectors mv914[0] = <ve915,ve916>;
resetMv mv917[1];
setMv mv917[0] = nen[1];
resetMv mv918[1];
setMv mv918[0] = mv914[0];
calculateMvCoeff mv913[0] = DIVISION(mv917,mv918);
resetMv mv919[1];
resetMv mv920[1];
setVector ve921 = {nen[1,2,3]};
setVector ve922 = {nen[1,2,3]};
dotVectors mv920[0] = <ve921,ve922>;
resetMv mv923[1];
setMv mv923[0] = nen[4];
resetMv mv924[1];
setMv mv924[0] = mv920[0];
calculateMvCoeff mv919[0] = DIVISION(mv923,mv924);
setVector ve925 = {len[16,-17,19,-22,-31]};
setVector ve926 = {mv895[0],mv901[0],mv907[0],mv913[0],mv919[0]};
dotVectors rc1[26] = <ve925,ve926>;

//rc1[27] = ((-(len[18] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[20] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[23] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv927[1];
resetMv mv928[1];
setVector ve929 = {nen[1,2,3]};
setVector ve930 = {nen[1,2,3]};
dotVectors mv928[0] = <ve929,ve930>;
resetMv mv931[1];
setMv mv931[0] = nen[3];
resetMv mv932[1];
setMv mv932[0] = mv928[0];
calculateMvCoeff mv927[0] = DIVISION(mv931,mv932);
resetMv mv933[1];
resetMv mv934[1];
setVector ve935 = {nen[1,2,3]};
setVector ve936 = {nen[1,2,3]};
dotVectors mv934[0] = <ve935,ve936>;
resetMv mv937[1];
setMv mv937[0] = nen[2];
resetMv mv938[1];
setMv mv938[0] = mv934[0];
calculateMvCoeff mv933[0] = DIVISION(mv937,mv938);
resetMv mv939[1];
resetMv mv940[1];
setVector ve941 = {nen[1,2,3]};
setVector ve942 = {nen[1,2,3]};
dotVectors mv940[0] = <ve941,ve942>;
resetMv mv943[1];
setMv mv943[0] = nen[1];
resetMv mv944[1];
setMv mv944[0] = mv940[0];
calculateMvCoeff mv939[0] = DIVISION(mv943,mv944);
setVector ve945 = {len[-18,20,-23]};
setVector ve946 = {mv927[0],mv933[0],mv939[0]};
dotVectors rc1[27] = <ve945,ve946>;

//rc1[28] = (((-(len[18] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[21] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[24] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[31] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv947[1];
resetMv mv948[1];
setVector ve949 = {nen[1,2,3]};
setVector ve950 = {nen[1,2,3]};
dotVectors mv948[0] = <ve949,ve950>;
resetMv mv951[1];
setMv mv951[0] = nen[4];
resetMv mv952[1];
setMv mv952[0] = mv948[0];
calculateMvCoeff mv947[0] = DIVISION(mv951,mv952);
resetMv mv953[1];
resetMv mv954[1];
setVector ve955 = {nen[1,2,3]};
setVector ve956 = {nen[1,2,3]};
dotVectors mv954[0] = <ve955,ve956>;
resetMv mv957[1];
setMv mv957[0] = nen[2];
resetMv mv958[1];
setMv mv958[0] = mv954[0];
calculateMvCoeff mv953[0] = DIVISION(mv957,mv958);
resetMv mv959[1];
resetMv mv960[1];
setVector ve961 = {nen[1,2,3]};
setVector ve962 = {nen[1,2,3]};
dotVectors mv960[0] = <ve961,ve962>;
resetMv mv963[1];
setMv mv963[0] = nen[1];
resetMv mv964[1];
setMv mv964[0] = mv960[0];
calculateMvCoeff mv959[0] = DIVISION(mv963,mv964);
resetMv mv965[1];
resetMv mv966[1];
setVector ve967 = {nen[1,2,3]};
setVector ve968 = {nen[1,2,3]};
dotVectors mv966[0] = <ve967,ve968>;
resetMv mv969[1];
setMv mv969[0] = nen[3];
resetMv mv970[1];
setMv mv970[0] = mv966[0];
calculateMvCoeff mv965[0] = DIVISION(mv969,mv970);
setVector ve971 = {len[-18,21,-24,31]};
setVector ve972 = {mv947[0],mv953[0],mv959[0],mv965[0]};
dotVectors rc1[28] = <ve971,ve972>;

//rc1[29] = (((-(len[20] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[21] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[25] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[31] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv973[1];
resetMv mv974[1];
setVector ve975 = {nen[1,2,3]};
setVector ve976 = {nen[1,2,3]};
dotVectors mv974[0] = <ve975,ve976>;
resetMv mv977[1];
setMv mv977[0] = nen[4];
resetMv mv978[1];
setMv mv978[0] = mv974[0];
calculateMvCoeff mv973[0] = DIVISION(mv977,mv978);
resetMv mv979[1];
resetMv mv980[1];
setVector ve981 = {nen[1,2,3]};
setVector ve982 = {nen[1,2,3]};
dotVectors mv980[0] = <ve981,ve982>;
resetMv mv983[1];
setMv mv983[0] = nen[3];
resetMv mv984[1];
setMv mv984[0] = mv980[0];
calculateMvCoeff mv979[0] = DIVISION(mv983,mv984);
resetMv mv985[1];
resetMv mv986[1];
setVector ve987 = {nen[1,2,3]};
setVector ve988 = {nen[1,2,3]};
dotVectors mv986[0] = <ve987,ve988>;
resetMv mv989[1];
setMv mv989[0] = nen[1];
resetMv mv990[1];
setMv mv990[0] = mv986[0];
calculateMvCoeff mv985[0] = DIVISION(mv989,mv990);
resetMv mv991[1];
resetMv mv992[1];
setVector ve993 = {nen[1,2,3]};
setVector ve994 = {nen[1,2,3]};
dotVectors mv992[0] = <ve993,ve994>;
resetMv mv995[1];
setMv mv995[0] = nen[2];
resetMv mv996[1];
setMv mv996[0] = mv992[0];
calculateMvCoeff mv991[0] = DIVISION(mv995,mv996);
setVector ve997 = {len[-20,21,-25,-31]};
setVector ve998 = {mv973[0],mv979[0],mv985[0],mv991[0]};
dotVectors rc1[29] = <ve997,ve998>;

//rc1[30] = (((-(len[23] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[24] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[25] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[31] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv999[1];
resetMv mv1000[1];
setVector ve1001 = {nen[1,2,3]};
setVector ve1002 = {nen[1,2,3]};
dotVectors mv1000[0] = <ve1001,ve1002>;
resetMv mv1003[1];
setMv mv1003[0] = nen[4];
resetMv mv1004[1];
setMv mv1004[0] = mv1000[0];
calculateMvCoeff mv999[0] = DIVISION(mv1003,mv1004);
resetMv mv1005[1];
resetMv mv1006[1];
setVector ve1007 = {nen[1,2,3]};
setVector ve1008 = {nen[1,2,3]};
dotVectors mv1006[0] = <ve1007,ve1008>;
resetMv mv1009[1];
setMv mv1009[0] = nen[3];
resetMv mv1010[1];
setMv mv1010[0] = mv1006[0];
calculateMvCoeff mv1005[0] = DIVISION(mv1009,mv1010);
resetMv mv1011[1];
resetMv mv1012[1];
setVector ve1013 = {nen[1,2,3]};
setVector ve1014 = {nen[1,2,3]};
dotVectors mv1012[0] = <ve1013,ve1014>;
resetMv mv1015[1];
setMv mv1015[0] = nen[2];
resetMv mv1016[1];
setMv mv1016[0] = mv1012[0];
calculateMvCoeff mv1011[0] = DIVISION(mv1015,mv1016);
resetMv mv1017[1];
resetMv mv1018[1];
setVector ve1019 = {nen[1,2,3]};
setVector ve1020 = {nen[1,2,3]};
dotVectors mv1018[0] = <ve1019,ve1020>;
resetMv mv1021[1];
setMv mv1021[0] = nen[1];
resetMv mv1022[1];
setMv mv1022[0] = mv1018[0];
calculateMvCoeff mv1017[0] = DIVISION(mv1021,mv1022);
setVector ve1023 = {len[-23,24,-25,31]};
setVector ve1024 = {mv999[0],mv1005[0],mv1011[0],mv1017[0]};
dotVectors rc1[30] = <ve1023,ve1024>;

//rc1[31] = (((-(len[27] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[28] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[29] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[30] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv1025[1];
resetMv mv1026[1];
setVector ve1027 = {nen[1,2,3]};
setVector ve1028 = {nen[1,2,3]};
dotVectors mv1026[0] = <ve1027,ve1028>;
resetMv mv1029[1];
setMv mv1029[0] = nen[4];
resetMv mv1030[1];
setMv mv1030[0] = mv1026[0];
calculateMvCoeff mv1025[0] = DIVISION(mv1029,mv1030);
resetMv mv1031[1];
resetMv mv1032[1];
setVector ve1033 = {nen[1,2,3]};
setVector ve1034 = {nen[1,2,3]};
dotVectors mv1032[0] = <ve1033,ve1034>;
resetMv mv1035[1];
setMv mv1035[0] = nen[3];
resetMv mv1036[1];
setMv mv1036[0] = mv1032[0];
calculateMvCoeff mv1031[0] = DIVISION(mv1035,mv1036);
resetMv mv1037[1];
resetMv mv1038[1];
setVector ve1039 = {nen[1,2,3]};
setVector ve1040 = {nen[1,2,3]};
dotVectors mv1038[0] = <ve1039,ve1040>;
resetMv mv1041[1];
setMv mv1041[0] = nen[2];
resetMv mv1042[1];
setMv mv1042[0] = mv1038[0];
calculateMvCoeff mv1037[0] = DIVISION(mv1041,mv1042);
resetMv mv1043[1];
resetMv mv1044[1];
setVector ve1045 = {nen[1,2,3]};
setVector ve1046 = {nen[1,2,3]};
dotVectors mv1044[0] = <ve1045,ve1046>;
resetMv mv1047[1];
setMv mv1047[0] = nen[1];
resetMv mv1048[1];
setMv mv1048[0] = mv1044[0];
calculateMvCoeff mv1043[0] = DIVISION(mv1047,mv1048);
setVector ve1049 = {len[-27,28,-29,30]};
setVector ve1050 = {mv1025[0],mv1031[0],mv1037[0],mv1043[0]};
dotVectors rc1[31] = <ve1049,ve1050>;

//rc1N[1] = ((((((((((((((((-(rc1[0])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[2])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[3])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[5])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[6])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[7])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[9])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[10])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[12])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[14])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[16])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[18])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[20])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[23])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[27])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv rc1N[32];
resetMv mv1051[1];
resetMv mv1052[1];
setVector ve1053 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1054 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1052[0] = <ve1053,ve1054>;
resetMv mv1055[1];
setMv mv1055[0] = rc1[-9];
resetMv mv1056[1];
setMv mv1056[0] = mv1052[0];
calculateMvCoeff mv1051[0] = DIVISION(mv1055,mv1056);
resetMv mv1057[1];
resetMv mv1058[1];
setVector ve1059 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1060 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1058[0] = <ve1059,ve1060>;
resetMv mv1061[1];
setMv mv1061[0] = rc1[-5];
resetMv mv1062[1];
setMv mv1062[0] = mv1058[0];
calculateMvCoeff mv1057[0] = DIVISION(mv1061,mv1062);
resetMv mv1063[1];
resetMv mv1064[1];
setVector ve1065 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1066 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1064[0] = <ve1065,ve1066>;
resetMv mv1067[1];
setMv mv1067[0] = rc1[18];
resetMv mv1068[1];
setMv mv1068[0] = mv1064[0];
calculateMvCoeff mv1063[0] = DIVISION(mv1067,mv1068);
resetMv mv1069[1];
resetMv mv1070[1];
setVector ve1071 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1072 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1070[0] = <ve1071,ve1072>;
resetMv mv1073[1];
setMv mv1073[0] = rc1[20];
resetMv mv1074[1];
setMv mv1074[0] = mv1070[0];
calculateMvCoeff mv1069[0] = DIVISION(mv1073,mv1074);
resetMv mv1075[1];
resetMv mv1076[1];
setVector ve1077 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1078 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1076[0] = <ve1077,ve1078>;
resetMv mv1079[1];
setMv mv1079[0] = rc1[21];
resetMv mv1080[1];
setMv mv1080[0] = mv1076[0];
calculateMvCoeff mv1075[0] = DIVISION(mv1079,mv1080);
resetMv mv1081[1];
resetMv mv1082[1];
setVector ve1083 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1084 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1082[0] = <ve1083,ve1084>;
resetMv mv1085[1];
setMv mv1085[0] = rc1[-12];
resetMv mv1086[1];
setMv mv1086[0] = mv1082[0];
calculateMvCoeff mv1081[0] = DIVISION(mv1085,mv1086);
resetMv mv1087[1];
resetMv mv1088[1];
setVector ve1089 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1090 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1088[0] = <ve1089,ve1090>;
resetMv mv1091[1];
setMv mv1091[0] = rc1[-14];
resetMv mv1092[1];
setMv mv1092[0] = mv1088[0];
calculateMvCoeff mv1087[0] = DIVISION(mv1091,mv1092);
resetMv mv1093[1];
resetMv mv1094[1];
setVector ve1095 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1096 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1094[0] = <ve1095,ve1096>;
resetMv mv1097[1];
setMv mv1097[0] = rc1[-15];
resetMv mv1098[1];
setMv mv1098[0] = mv1094[0];
calculateMvCoeff mv1093[0] = DIVISION(mv1097,mv1098);
resetMv mv1099[1];
resetMv mv1100[1];
setVector ve1101 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1102 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1100[0] = <ve1101,ve1102>;
resetMv mv1103[1];
setMv mv1103[0] = rc1[27];
resetMv mv1104[1];
setMv mv1104[0] = mv1100[0];
calculateMvCoeff mv1099[0] = DIVISION(mv1103,mv1104);
resetMv mv1105[1];
resetMv mv1106[1];
setVector ve1107 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1108 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1106[0] = <ve1107,ve1108>;
resetMv mv1109[1];
setMv mv1109[0] = rc1[28];
resetMv mv1110[1];
setMv mv1110[0] = mv1106[0];
calculateMvCoeff mv1105[0] = DIVISION(mv1109,mv1110);
resetMv mv1111[1];
resetMv mv1112[1];
setVector ve1113 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1114 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1112[0] = <ve1113,ve1114>;
resetMv mv1115[1];
setMv mv1115[0] = rc1[29];
resetMv mv1116[1];
setMv mv1116[0] = mv1112[0];
calculateMvCoeff mv1111[0] = DIVISION(mv1115,mv1116);
resetMv mv1117[1];
resetMv mv1118[1];
setVector ve1119 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1120 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1118[0] = <ve1119,ve1120>;
resetMv mv1121[1];
setMv mv1121[0] = rc1[23];
resetMv mv1122[1];
setMv mv1122[0] = mv1118[0];
calculateMvCoeff mv1117[0] = DIVISION(mv1121,mv1122);
resetMv mv1123[1];
resetMv mv1124[1];
setVector ve1125 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1126 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1124[0] = <ve1125,ve1126>;
resetMv mv1127[1];
setMv mv1127[0] = rc1[24];
resetMv mv1128[1];
setMv mv1128[0] = mv1124[0];
calculateMvCoeff mv1123[0] = DIVISION(mv1127,mv1128);
resetMv mv1129[1];
resetMv mv1130[1];
setVector ve1131 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1132 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1130[0] = <ve1131,ve1132>;
resetMv mv1133[1];
setMv mv1133[0] = rc1[25];
resetMv mv1134[1];
setMv mv1134[0] = mv1130[0];
calculateMvCoeff mv1129[0] = DIVISION(mv1133,mv1134);
resetMv mv1135[1];
resetMv mv1136[1];
setVector ve1137 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1138 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1136[0] = <ve1137,ve1138>;
resetMv mv1139[1];
setMv mv1139[0] = rc1[-31];
resetMv mv1140[1];
setMv mv1140[0] = mv1136[0];
calculateMvCoeff mv1135[0] = DIVISION(mv1139,mv1140);
resetMv mv1141[1];
resetMv mv1142[1];
setVector ve1143 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1144 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1142[0] = <ve1143,ve1144>;
resetMv mv1145[1];
setMv mv1145[0] = rc1[30];
resetMv mv1146[1];
setMv mv1146[0] = mv1142[0];
calculateMvCoeff mv1141[0] = DIVISION(mv1145,mv1146);
setVector ve1147 = {rc1[-0,-1,2,3,-5,-6,-7,9,10,-12,-14,16,-18,-20,23,-27]};
setVector ve1148 = {mv1051[0],mv1057[0],mv1063[0],mv1069[0],mv1075[0],mv1081[0],mv1087[0],mv1093[0],mv1099[0],mv1105[0],mv1111[0],mv1117[0],mv1123[0],mv1129[0],mv1135[0],mv1141[0]};
dotVectors rc1N[1] = <ve1147,ve1148>;

//rc1N[2] = ((((((((((((((((-(rc1[0])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[2])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[3])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[5])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[6])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[7])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[9])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[10])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[12])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[14])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[16])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[18])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[20])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[23])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[27])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))
resetMv mv1149[1];
resetMv mv1150[1];
setVector ve1151 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1152 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1150[0] = <ve1151,ve1152>;
resetMv mv1153[1];
setMv mv1153[0] = rc1[-12];
resetMv mv1154[1];
setMv mv1154[0] = mv1150[0];
calculateMvCoeff mv1149[0] = DIVISION(mv1153,mv1154);
resetMv mv1155[1];
resetMv mv1156[1];
setVector ve1157 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1158 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1156[0] = <ve1157,ve1158>;
resetMv mv1159[1];
setMv mv1159[0] = rc1[18];
resetMv mv1160[1];
setMv mv1160[0] = mv1156[0];
calculateMvCoeff mv1155[0] = DIVISION(mv1159,mv1160);
resetMv mv1161[1];
resetMv mv1162[1];
setVector ve1163 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1164 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1162[0] = <ve1163,ve1164>;
resetMv mv1165[1];
setMv mv1165[0] = rc1[-5];
resetMv mv1166[1];
setMv mv1166[0] = mv1162[0];
calculateMvCoeff mv1161[0] = DIVISION(mv1165,mv1166);
resetMv mv1167[1];
resetMv mv1168[1];
setVector ve1169 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1170 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1168[0] = <ve1169,ve1170>;
resetMv mv1171[1];
setMv mv1171[0] = rc1[23];
resetMv mv1172[1];
setMv mv1172[0] = mv1168[0];
calculateMvCoeff mv1167[0] = DIVISION(mv1171,mv1172);
resetMv mv1173[1];
resetMv mv1174[1];
setVector ve1175 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1176 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1174[0] = <ve1175,ve1176>;
resetMv mv1177[1];
setMv mv1177[0] = rc1[24];
resetMv mv1178[1];
setMv mv1178[0] = mv1174[0];
calculateMvCoeff mv1173[0] = DIVISION(mv1177,mv1178);
resetMv mv1179[1];
resetMv mv1180[1];
setVector ve1181 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1182 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1180[0] = <ve1181,ve1182>;
resetMv mv1183[1];
setMv mv1183[0] = rc1[-9];
resetMv mv1184[1];
setMv mv1184[0] = mv1180[0];
calculateMvCoeff mv1179[0] = DIVISION(mv1183,mv1184);
resetMv mv1185[1];
resetMv mv1186[1];
setVector ve1187 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1188 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1186[0] = <ve1187,ve1188>;
resetMv mv1189[1];
setMv mv1189[0] = rc1[27];
resetMv mv1190[1];
setMv mv1190[0] = mv1186[0];
calculateMvCoeff mv1185[0] = DIVISION(mv1189,mv1190);
resetMv mv1191[1];
resetMv mv1192[1];
setVector ve1193 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1194 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1192[0] = <ve1193,ve1194>;
resetMv mv1195[1];
setMv mv1195[0] = rc1[28];
resetMv mv1196[1];
setMv mv1196[0] = mv1192[0];
calculateMvCoeff mv1191[0] = DIVISION(mv1195,mv1196);
resetMv mv1197[1];
resetMv mv1198[1];
setVector ve1199 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1200 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1198[0] = <ve1199,ve1200>;
resetMv mv1201[1];
setMv mv1201[0] = rc1[-14];
resetMv mv1202[1];
setMv mv1202[0] = mv1198[0];
calculateMvCoeff mv1197[0] = DIVISION(mv1201,mv1202);
resetMv mv1203[1];
resetMv mv1204[1];
setVector ve1205 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1206 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1204[0] = <ve1205,ve1206>;
resetMv mv1207[1];
setMv mv1207[0] = rc1[-15];
resetMv mv1208[1];
setMv mv1208[0] = mv1204[0];
calculateMvCoeff mv1203[0] = DIVISION(mv1207,mv1208);
resetMv mv1209[1];
resetMv mv1210[1];
setVector ve1211 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1212 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1210[0] = <ve1211,ve1212>;
resetMv mv1213[1];
setMv mv1213[0] = rc1[30];
resetMv mv1214[1];
setMv mv1214[0] = mv1210[0];
calculateMvCoeff mv1209[0] = DIVISION(mv1213,mv1214);
resetMv mv1215[1];
resetMv mv1216[1];
setVector ve1217 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1218 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1216[0] = <ve1217,ve1218>;
resetMv mv1219[1];
setMv mv1219[0] = rc1[20];
resetMv mv1220[1];
setMv mv1220[0] = mv1216[0];
calculateMvCoeff mv1215[0] = DIVISION(mv1219,mv1220);
resetMv mv1221[1];
resetMv mv1222[1];
setVector ve1223 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1224 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1222[0] = <ve1223,ve1224>;
resetMv mv1225[1];
setMv mv1225[0] = rc1[21];
resetMv mv1226[1];
setMv mv1226[0] = mv1222[0];
calculateMvCoeff mv1221[0] = DIVISION(mv1225,mv1226);
resetMv mv1227[1];
resetMv mv1228[1];
setVector ve1229 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1230 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1228[0] = <ve1229,ve1230>;
resetMv mv1231[1];
setMv mv1231[0] = rc1[-31];
resetMv mv1232[1];
setMv mv1232[0] = mv1228[0];
calculateMvCoeff mv1227[0] = DIVISION(mv1231,mv1232);
resetMv mv1233[1];
resetMv mv1234[1];
setVector ve1235 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1236 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1234[0] = <ve1235,ve1236>;
resetMv mv1237[1];
setMv mv1237[0] = rc1[25];
resetMv mv1238[1];
setMv mv1238[0] = mv1234[0];
calculateMvCoeff mv1233[0] = DIVISION(mv1237,mv1238);
resetMv mv1239[1];
resetMv mv1240[1];
setVector ve1241 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1242 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1240[0] = <ve1241,ve1242>;
resetMv mv1243[1];
setMv mv1243[0] = rc1[29];
resetMv mv1244[1];
setMv mv1244[0] = mv1240[0];
calculateMvCoeff mv1239[0] = DIVISION(mv1243,mv1244);
setVector ve1245 = {rc1[-0,-1,-2,3,-5,6,-7,9,-10,12,-14,-16,18,-20,-23,27]};
setVector ve1246 = {mv1149[0],mv1155[0],mv1161[0],mv1167[0],mv1173[0],mv1179[0],mv1185[0],mv1191[0],mv1197[0],mv1203[0],mv1209[0],mv1215[0],mv1221[0],mv1227[0],mv1233[0],mv1239[0]};
dotVectors rc1N[2] = <ve1245,ve1246>;

//rc1N[3] = ((((((((((((((((-(rc1[0])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[2])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[3])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[5])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[6])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[7])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[9])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[10])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[12])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[14])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[16])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[18])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[20])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[23])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[27])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv mv1247[1];
resetMv mv1248[1];
setVector ve1249 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1250 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1248[0] = <ve1249,ve1250>;
resetMv mv1251[1];
setMv mv1251[0] = rc1[-14];
resetMv mv1252[1];
setMv mv1252[0] = mv1248[0];
calculateMvCoeff mv1247[0] = DIVISION(mv1251,mv1252);
resetMv mv1253[1];
resetMv mv1254[1];
setVector ve1255 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1256 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1254[0] = <ve1255,ve1256>;
resetMv mv1257[1];
setMv mv1257[0] = rc1[20];
resetMv mv1258[1];
setMv mv1258[0] = mv1254[0];
calculateMvCoeff mv1253[0] = DIVISION(mv1257,mv1258);
resetMv mv1259[1];
resetMv mv1260[1];
setVector ve1261 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1262 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1260[0] = <ve1261,ve1262>;
resetMv mv1263[1];
setMv mv1263[0] = rc1[23];
resetMv mv1264[1];
setMv mv1264[0] = mv1260[0];
calculateMvCoeff mv1259[0] = DIVISION(mv1263,mv1264);
resetMv mv1265[1];
resetMv mv1266[1];
setVector ve1267 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1268 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1266[0] = <ve1267,ve1268>;
resetMv mv1269[1];
setMv mv1269[0] = rc1[-5];
resetMv mv1270[1];
setMv mv1270[0] = mv1266[0];
calculateMvCoeff mv1265[0] = DIVISION(mv1269,mv1270);
resetMv mv1271[1];
resetMv mv1272[1];
setVector ve1273 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1274 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1272[0] = <ve1273,ve1274>;
resetMv mv1275[1];
setMv mv1275[0] = rc1[25];
resetMv mv1276[1];
setMv mv1276[0] = mv1272[0];
calculateMvCoeff mv1271[0] = DIVISION(mv1275,mv1276);
resetMv mv1277[1];
resetMv mv1278[1];
setVector ve1279 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1280 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1278[0] = <ve1279,ve1280>;
resetMv mv1281[1];
setMv mv1281[0] = rc1[27];
resetMv mv1282[1];
setMv mv1282[0] = mv1278[0];
calculateMvCoeff mv1277[0] = DIVISION(mv1281,mv1282);
resetMv mv1283[1];
resetMv mv1284[1];
setVector ve1285 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1286 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1284[0] = <ve1285,ve1286>;
resetMv mv1287[1];
setMv mv1287[0] = rc1[-9];
resetMv mv1288[1];
setMv mv1288[0] = mv1284[0];
calculateMvCoeff mv1283[0] = DIVISION(mv1287,mv1288);
resetMv mv1289[1];
resetMv mv1290[1];
setVector ve1291 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1292 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1290[0] = <ve1291,ve1292>;
resetMv mv1293[1];
setMv mv1293[0] = rc1[29];
resetMv mv1294[1];
setMv mv1294[0] = mv1290[0];
calculateMvCoeff mv1289[0] = DIVISION(mv1293,mv1294);
resetMv mv1295[1];
resetMv mv1296[1];
setVector ve1297 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1298 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1296[0] = <ve1297,ve1298>;
resetMv mv1299[1];
setMv mv1299[0] = rc1[-12];
resetMv mv1300[1];
setMv mv1300[0] = mv1296[0];
calculateMvCoeff mv1295[0] = DIVISION(mv1299,mv1300);
resetMv mv1301[1];
resetMv mv1302[1];
setVector ve1303 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1304 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1302[0] = <ve1303,ve1304>;
resetMv mv1305[1];
setMv mv1305[0] = rc1[30];
resetMv mv1306[1];
setMv mv1306[0] = mv1302[0];
calculateMvCoeff mv1301[0] = DIVISION(mv1305,mv1306);
resetMv mv1307[1];
resetMv mv1308[1];
setVector ve1309 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1310 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1308[0] = <ve1309,ve1310>;
resetMv mv1311[1];
setMv mv1311[0] = rc1[-15];
resetMv mv1312[1];
setMv mv1312[0] = mv1308[0];
calculateMvCoeff mv1307[0] = DIVISION(mv1311,mv1312);
resetMv mv1313[1];
resetMv mv1314[1];
setVector ve1315 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1316 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1314[0] = <ve1315,ve1316>;
resetMv mv1317[1];
setMv mv1317[0] = rc1[18];
resetMv mv1318[1];
setMv mv1318[0] = mv1314[0];
calculateMvCoeff mv1313[0] = DIVISION(mv1317,mv1318);
resetMv mv1319[1];
resetMv mv1320[1];
setVector ve1321 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1322 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1320[0] = <ve1321,ve1322>;
resetMv mv1323[1];
setMv mv1323[0] = rc1[-31];
resetMv mv1324[1];
setMv mv1324[0] = mv1320[0];
calculateMvCoeff mv1319[0] = DIVISION(mv1323,mv1324);
resetMv mv1325[1];
resetMv mv1326[1];
setVector ve1327 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1328 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1326[0] = <ve1327,ve1328>;
resetMv mv1329[1];
setMv mv1329[0] = rc1[21];
resetMv mv1330[1];
setMv mv1330[0] = mv1326[0];
calculateMvCoeff mv1325[0] = DIVISION(mv1329,mv1330);
resetMv mv1331[1];
resetMv mv1332[1];
setVector ve1333 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1334 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1332[0] = <ve1333,ve1334>;
resetMv mv1335[1];
setMv mv1335[0] = rc1[24];
resetMv mv1336[1];
setMv mv1336[0] = mv1332[0];
calculateMvCoeff mv1331[0] = DIVISION(mv1335,mv1336);
resetMv mv1337[1];
resetMv mv1338[1];
setVector ve1339 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1340 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1338[0] = <ve1339,ve1340>;
resetMv mv1341[1];
setMv mv1341[0] = rc1[28];
resetMv mv1342[1];
setMv mv1342[0] = mv1338[0];
calculateMvCoeff mv1337[0] = DIVISION(mv1341,mv1342);
setVector ve1343 = {rc1[-0,-1,-2,-3,-5,6,7,9,10,12,14,16,18,20,23,-27]};
setVector ve1344 = {mv1247[0],mv1253[0],mv1259[0],mv1265[0],mv1271[0],mv1277[0],mv1283[0],mv1289[0],mv1295[0],mv1301[0],mv1307[0],mv1313[0],mv1319[0],mv1325[0],mv1331[0],mv1337[0]};
dotVectors rc1N[3] = <ve1343,ve1344>;

//rc1N[4] = ((((((((((((((((((((((((-(rc1[0])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[2])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[3])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[4])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[6])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[7])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[8])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[10])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[11])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[13])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[15])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[16])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[17])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[19])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[21])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[22])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[24])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[25])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[26])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[28])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[29])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[30])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[31])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv mv1345[1];
resetMv mv1346[1];
setVector ve1347 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1348 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1346[0] = <ve1347,ve1348>;
resetMv mv1349[1];
setMv mv1349[0] = rc1[-15];
resetMv mv1350[1];
setMv mv1350[0] = mv1346[0];
calculateMvCoeff mv1345[0] = DIVISION(mv1349,mv1350);
resetMv mv1351[1];
resetMv mv1352[1];
setVector ve1353 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1354 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1352[0] = <ve1353,ve1354>;
resetMv mv1355[1];
setMv mv1355[0] = rc1[21];
resetMv mv1356[1];
setMv mv1356[0] = mv1352[0];
calculateMvCoeff mv1351[0] = DIVISION(mv1355,mv1356);
resetMv mv1357[1];
resetMv mv1358[1];
setVector ve1359 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1360 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1358[0] = <ve1359,ve1360>;
resetMv mv1361[1];
setMv mv1361[0] = rc1[24];
resetMv mv1362[1];
setMv mv1362[0] = mv1358[0];
calculateMvCoeff mv1357[0] = DIVISION(mv1361,mv1362);
resetMv mv1363[1];
resetMv mv1364[1];
setVector ve1365 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1366 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1364[0] = <ve1365,ve1366>;
resetMv mv1367[1];
setMv mv1367[0] = rc1[25];
resetMv mv1368[1];
setMv mv1368[0] = mv1364[0];
calculateMvCoeff mv1363[0] = DIVISION(mv1367,mv1368);
resetMv mv1369[1];
resetMv mv1370[1];
setVector ve1371 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1372 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1370[0] = <ve1371,ve1372>;
resetMv mv1373[1];
setMv mv1373[0] = rc1[-5];
resetMv mv1374[1];
setMv mv1374[0] = mv1370[0];
calculateMvCoeff mv1369[0] = DIVISION(mv1373,mv1374);
resetMv mv1375[1];
resetMv mv1376[1];
setVector ve1377 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1378 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1376[0] = <ve1377,ve1378>;
resetMv mv1379[1];
setMv mv1379[0] = rc1[28];
resetMv mv1380[1];
setMv mv1380[0] = mv1376[0];
calculateMvCoeff mv1375[0] = DIVISION(mv1379,mv1380);
resetMv mv1381[1];
resetMv mv1382[1];
setVector ve1383 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1384 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1382[0] = <ve1383,ve1384>;
resetMv mv1385[1];
setMv mv1385[0] = rc1[29];
resetMv mv1386[1];
setMv mv1386[0] = mv1382[0];
calculateMvCoeff mv1381[0] = DIVISION(mv1385,mv1386);
resetMv mv1387[1];
resetMv mv1388[1];
setVector ve1389 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1390 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1388[0] = <ve1389,ve1390>;
resetMv mv1391[1];
setMv mv1391[0] = rc1[-9];
resetMv mv1392[1];
setMv mv1392[0] = mv1388[0];
calculateMvCoeff mv1387[0] = DIVISION(mv1391,mv1392);
resetMv mv1393[1];
resetMv mv1394[1];
setVector ve1395 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1396 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1394[0] = <ve1395,ve1396>;
resetMv mv1397[1];
setMv mv1397[0] = rc1[30];
resetMv mv1398[1];
setMv mv1398[0] = mv1394[0];
calculateMvCoeff mv1393[0] = DIVISION(mv1397,mv1398);
resetMv mv1399[1];
resetMv mv1400[1];
setVector ve1401 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1402 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1400[0] = <ve1401,ve1402>;
resetMv mv1403[1];
setMv mv1403[0] = rc1[-12];
resetMv mv1404[1];
setMv mv1404[0] = mv1400[0];
calculateMvCoeff mv1399[0] = DIVISION(mv1403,mv1404);
resetMv mv1405[1];
resetMv mv1406[1];
setVector ve1407 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1408 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1406[0] = <ve1407,ve1408>;
resetMv mv1409[1];
setMv mv1409[0] = rc1[-14];
resetMv mv1410[1];
setMv mv1410[0] = mv1406[0];
calculateMvCoeff mv1405[0] = DIVISION(mv1409,mv1410);
resetMv mv1411[1];
resetMv mv1412[1];
setVector ve1413 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1414 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1412[0] = <ve1413,ve1414>;
resetMv mv1415[1];
setMv mv1415[0] = rc1[-15];
resetMv mv1416[1];
setMv mv1416[0] = mv1412[0];
calculateMvCoeff mv1411[0] = DIVISION(mv1415,mv1416);
resetMv mv1417[1];
resetMv mv1418[1];
setVector ve1419 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1420 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1418[0] = <ve1419,ve1420>;
resetMv mv1421[1];
setMv mv1421[0] = rc1[-31];
resetMv mv1422[1];
setMv mv1422[0] = mv1418[0];
calculateMvCoeff mv1417[0] = DIVISION(mv1421,mv1422);
resetMv mv1423[1];
resetMv mv1424[1];
setVector ve1425 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1426 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1424[0] = <ve1425,ve1426>;
resetMv mv1427[1];
setMv mv1427[0] = rc1[18];
resetMv mv1428[1];
setMv mv1428[0] = mv1424[0];
calculateMvCoeff mv1423[0] = DIVISION(mv1427,mv1428);
resetMv mv1429[1];
resetMv mv1430[1];
setVector ve1431 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1432 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1430[0] = <ve1431,ve1432>;
resetMv mv1433[1];
setMv mv1433[0] = rc1[20];
resetMv mv1434[1];
setMv mv1434[0] = mv1430[0];
calculateMvCoeff mv1429[0] = DIVISION(mv1433,mv1434);
resetMv mv1435[1];
resetMv mv1436[1];
setVector ve1437 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1438 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1436[0] = <ve1437,ve1438>;
resetMv mv1439[1];
setMv mv1439[0] = rc1[21];
resetMv mv1440[1];
setMv mv1440[0] = mv1436[0];
calculateMvCoeff mv1435[0] = DIVISION(mv1439,mv1440);
resetMv mv1441[1];
resetMv mv1442[1];
setVector ve1443 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1444 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1442[0] = <ve1443,ve1444>;
resetMv mv1445[1];
setMv mv1445[0] = rc1[23];
resetMv mv1446[1];
setMv mv1446[0] = mv1442[0];
calculateMvCoeff mv1441[0] = DIVISION(mv1445,mv1446);
resetMv mv1447[1];
resetMv mv1448[1];
setVector ve1449 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1450 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1448[0] = <ve1449,ve1450>;
resetMv mv1451[1];
setMv mv1451[0] = rc1[24];
resetMv mv1452[1];
setMv mv1452[0] = mv1448[0];
calculateMvCoeff mv1447[0] = DIVISION(mv1451,mv1452);
resetMv mv1453[1];
resetMv mv1454[1];
setVector ve1455 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1456 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1454[0] = <ve1455,ve1456>;
resetMv mv1457[1];
setMv mv1457[0] = rc1[25];
resetMv mv1458[1];
setMv mv1458[0] = mv1454[0];
calculateMvCoeff mv1453[0] = DIVISION(mv1457,mv1458);
resetMv mv1459[1];
resetMv mv1460[1];
setVector ve1461 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1462 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1460[0] = <ve1461,ve1462>;
resetMv mv1463[1];
setMv mv1463[0] = rc1[27];
resetMv mv1464[1];
setMv mv1464[0] = mv1460[0];
calculateMvCoeff mv1459[0] = DIVISION(mv1463,mv1464);
resetMv mv1465[1];
resetMv mv1466[1];
setVector ve1467 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1468 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1466[0] = <ve1467,ve1468>;
resetMv mv1469[1];
setMv mv1469[0] = rc1[28];
resetMv mv1470[1];
setMv mv1470[0] = mv1466[0];
calculateMvCoeff mv1465[0] = DIVISION(mv1469,mv1470);
resetMv mv1471[1];
resetMv mv1472[1];
setVector ve1473 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1474 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1472[0] = <ve1473,ve1474>;
resetMv mv1475[1];
setMv mv1475[0] = rc1[29];
resetMv mv1476[1];
setMv mv1476[0] = mv1472[0];
calculateMvCoeff mv1471[0] = DIVISION(mv1475,mv1476);
resetMv mv1477[1];
resetMv mv1478[1];
setVector ve1479 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1480 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1478[0] = <ve1479,ve1480>;
resetMv mv1481[1];
setMv mv1481[0] = rc1[30];
resetMv mv1482[1];
setMv mv1482[0] = mv1478[0];
calculateMvCoeff mv1477[0] = DIVISION(mv1481,mv1482);
resetMv mv1483[1];
resetMv mv1484[1];
setVector ve1485 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1486 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1484[0] = <ve1485,ve1486>;
resetMv mv1487[1];
setMv mv1487[0] = rc1[-31];
resetMv mv1488[1];
setMv mv1488[0] = mv1484[0];
calculateMvCoeff mv1483[0] = DIVISION(mv1487,mv1488);
setVector ve1489 = {rc1[-0,-1,-2,-3,-4,6,7,8,10,11,13,15,16,17,19,21,22,24,25,-26,-28,-29,-30,-31]};
setVector ve1490 = {mv1345[0],mv1351[0],mv1357[0],mv1363[0],mv1369[0],mv1375[0],mv1381[0],mv1387[0],mv1393[0],mv1399[0],mv1405[0],mv1411[0],mv1417[0],mv1423[0],mv1429[0],mv1435[0],mv1441[0],mv1447[0],mv1453[0],mv1459[0],mv1465[0],mv1471[0],mv1477[0],mv1483[0]};
dotVectors rc1N[4] = <ve1489,ve1490>;

//rc1N[5] = ((((((((-(rc1[5])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + (-((-(rc1[9])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[12])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[14])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[18])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[20])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[23])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[27])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv mv1491[1];
resetMv mv1492[1];
setVector ve1493 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1494 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1492[0] = <ve1493,ve1494>;
resetMv mv1495[1];
setMv mv1495[0] = rc1[-5];
resetMv mv1496[1];
setMv mv1496[0] = mv1492[0];
calculateMvCoeff mv1491[0] = DIVISION(mv1495,mv1496);
resetMv mv1497[1];
resetMv mv1498[1];
setVector ve1499 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1500 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1498[0] = <ve1499,ve1500>;
resetMv mv1501[1];
setMv mv1501[0] = rc1[-9];
resetMv mv1502[1];
setMv mv1502[0] = mv1498[0];
calculateMvCoeff mv1497[0] = DIVISION(mv1501,mv1502);
resetMv mv1503[1];
resetMv mv1504[1];
setVector ve1505 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1506 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1504[0] = <ve1505,ve1506>;
resetMv mv1507[1];
setMv mv1507[0] = rc1[-12];
resetMv mv1508[1];
setMv mv1508[0] = mv1504[0];
calculateMvCoeff mv1503[0] = DIVISION(mv1507,mv1508);
resetMv mv1509[1];
resetMv mv1510[1];
setVector ve1511 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1512 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1510[0] = <ve1511,ve1512>;
resetMv mv1513[1];
setMv mv1513[0] = rc1[-14];
resetMv mv1514[1];
setMv mv1514[0] = mv1510[0];
calculateMvCoeff mv1509[0] = DIVISION(mv1513,mv1514);
resetMv mv1515[1];
resetMv mv1516[1];
setVector ve1517 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1518 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1516[0] = <ve1517,ve1518>;
resetMv mv1519[1];
setMv mv1519[0] = rc1[18];
resetMv mv1520[1];
setMv mv1520[0] = mv1516[0];
calculateMvCoeff mv1515[0] = DIVISION(mv1519,mv1520);
resetMv mv1521[1];
resetMv mv1522[1];
setVector ve1523 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1524 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1522[0] = <ve1523,ve1524>;
resetMv mv1525[1];
setMv mv1525[0] = rc1[20];
resetMv mv1526[1];
setMv mv1526[0] = mv1522[0];
calculateMvCoeff mv1521[0] = DIVISION(mv1525,mv1526);
resetMv mv1527[1];
resetMv mv1528[1];
setVector ve1529 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1530 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1528[0] = <ve1529,ve1530>;
resetMv mv1531[1];
setMv mv1531[0] = rc1[23];
resetMv mv1532[1];
setMv mv1532[0] = mv1528[0];
calculateMvCoeff mv1527[0] = DIVISION(mv1531,mv1532);
resetMv mv1533[1];
resetMv mv1534[1];
setVector ve1535 = {rc1[-5,-9,-12,-14,18,20,23,27]};
setVector ve1536 = {rc1[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv1534[0] = <ve1535,ve1536>;
resetMv mv1537[1];
setMv mv1537[0] = rc1[27];
resetMv mv1538[1];
setMv mv1538[0] = mv1534[0];
calculateMvCoeff mv1533[0] = DIVISION(mv1537,mv1538);
setVector ve1539 = {rc1[-5,9,12,14,18,20,23,-27]};
setVector ve1540 = {mv1491[0],mv1497[0],mv1503[0],mv1509[0],mv1515[0],mv1521[0],mv1527[0],mv1533[0]};
dotVectors rc1N[5] = <ve1539,ve1540>;

//rc2[0] = ((((-(len[1])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + ((-(len[2])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[3])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[5])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv rc2[32];
resetMv mv1541[1];
resetMv mv1542[1];
setVector ve1543 = {nen[1,2,3]};
setVector ve1544 = {nen[1,2,3]};
dotVectors mv1542[0] = <ve1543,ve1544>;
resetMv mv1545[1];
setMv mv1545[0] = nen[1];
resetMv mv1546[1];
setMv mv1546[0] = mv1542[0];
calculateMvCoeff mv1541[0] = DIVISION(mv1545,mv1546);
resetMv mv1547[1];
resetMv mv1548[1];
setVector ve1549 = {nen[1,2,3]};
setVector ve1550 = {nen[1,2,3]};
dotVectors mv1548[0] = <ve1549,ve1550>;
resetMv mv1551[1];
setMv mv1551[0] = nen[2];
resetMv mv1552[1];
setMv mv1552[0] = mv1548[0];
calculateMvCoeff mv1547[0] = DIVISION(mv1551,mv1552);
resetMv mv1553[1];
resetMv mv1554[1];
setVector ve1555 = {nen[1,2,3]};
setVector ve1556 = {nen[1,2,3]};
dotVectors mv1554[0] = <ve1555,ve1556>;
resetMv mv1557[1];
setMv mv1557[0] = nen[3];
resetMv mv1558[1];
setMv mv1558[0] = mv1554[0];
calculateMvCoeff mv1553[0] = DIVISION(mv1557,mv1558);
resetMv mv1559[1];
resetMv mv1560[1];
setVector ve1561 = {nen[1,2,3]};
setVector ve1562 = {nen[1,2,3]};
dotVectors mv1560[0] = <ve1561,ve1562>;
resetMv mv1563[1];
setMv mv1563[0] = nen[4];
resetMv mv1564[1];
setMv mv1564[0] = mv1560[0];
calculateMvCoeff mv1559[0] = DIVISION(mv1563,mv1564);
setVector ve1565 = {len[-1,-2,-3,5]};
setVector ve1566 = {mv1541[0],mv1547[0],mv1553[0],mv1559[0]};
dotVectors rc2[0] = <ve1565,ve1566>;

//rc2[1] = ((((-(len[0])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + ((rcPpDual[6] - len[6]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[7] - len[7]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[9] - len[9]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1567[1];
resetMv mv1568[1];
setVector ve1569 = {nen[1,2,3]};
setVector ve1570 = {nen[1,2,3]};
dotVectors mv1568[0] = <ve1569,ve1570>;
resetMv mv1571[1];
setMv mv1571[0] = nen[1];
resetMv mv1572[1];
setMv mv1572[0] = mv1568[0];
calculateMvCoeff mv1567[0] = DIVISION(mv1571,mv1572);
resetMv mv1573[1];
setVector ve1574 = {rcPpDual[6],len[-6]};
dotVectors mv1573[0] = <ve1574>;
resetMv mv1575[1];
resetMv mv1576[1];
setVector ve1577 = {nen[1,2,3]};
setVector ve1578 = {nen[1,2,3]};
dotVectors mv1576[0] = <ve1577,ve1578>;
resetMv mv1579[1];
setMv mv1579[0] = nen[2];
resetMv mv1580[1];
setMv mv1580[0] = mv1576[0];
calculateMvCoeff mv1575[0] = DIVISION(mv1579,mv1580);
resetMv mv1581[1];
setVector ve1582 = {rcPpDual[7],len[-7]};
dotVectors mv1581[0] = <ve1582>;
resetMv mv1583[1];
resetMv mv1584[1];
setVector ve1585 = {nen[1,2,3]};
setVector ve1586 = {nen[1,2,3]};
dotVectors mv1584[0] = <ve1585,ve1586>;
resetMv mv1587[1];
setMv mv1587[0] = nen[3];
resetMv mv1588[1];
setMv mv1588[0] = mv1584[0];
calculateMvCoeff mv1583[0] = DIVISION(mv1587,mv1588);
resetMv mv1589[1];
resetMv mv1590[1];
setVector ve1591 = {rcPpDual[9],len[-9]};
dotVectors mv1590[0] = <ve1591>;
setMv mv1589[0] = mv1590[-0];
resetMv mv1592[1];
resetMv mv1593[1];
setVector ve1594 = {nen[1,2,3]};
setVector ve1595 = {nen[1,2,3]};
dotVectors mv1593[0] = <ve1594,ve1595>;
resetMv mv1596[1];
setMv mv1596[0] = nen[4];
resetMv mv1597[1];
setMv mv1597[0] = mv1593[0];
calculateMvCoeff mv1592[0] = DIVISION(mv1596,mv1597);
setVector ve1598 = {len[-0],mv1573[0],mv1581[0],mv1589[0]};
setVector ve1599 = {mv1567[0],mv1575[0],mv1583[0],mv1592[0]};
dotVectors rc2[1] = <ve1598,ve1599>;

//rc2[2] = ((((-(len[0])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[6] - len[6]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[10] - len[10]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[12] - len[12]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1600[1];
resetMv mv1601[1];
setVector ve1602 = {nen[1,2,3]};
setVector ve1603 = {nen[1,2,3]};
dotVectors mv1601[0] = <ve1602,ve1603>;
resetMv mv1604[1];
setMv mv1604[0] = nen[2];
resetMv mv1605[1];
setMv mv1605[0] = mv1601[0];
calculateMvCoeff mv1600[0] = DIVISION(mv1604,mv1605);
resetMv mv1606[1];
resetMv mv1607[1];
setVector ve1608 = {rcPpDual[6],len[-6]};
dotVectors mv1607[0] = <ve1608>;
setMv mv1606[0] = mv1607[-0];
resetMv mv1609[1];
resetMv mv1610[1];
setVector ve1611 = {nen[1,2,3]};
setVector ve1612 = {nen[1,2,3]};
dotVectors mv1610[0] = <ve1611,ve1612>;
resetMv mv1613[1];
setMv mv1613[0] = nen[1];
resetMv mv1614[1];
setMv mv1614[0] = mv1610[0];
calculateMvCoeff mv1609[0] = DIVISION(mv1613,mv1614);
resetMv mv1615[1];
setVector ve1616 = {rcPpDual[10],len[-10]};
dotVectors mv1615[0] = <ve1616>;
resetMv mv1617[1];
resetMv mv1618[1];
setVector ve1619 = {nen[1,2,3]};
setVector ve1620 = {nen[1,2,3]};
dotVectors mv1618[0] = <ve1619,ve1620>;
resetMv mv1621[1];
setMv mv1621[0] = nen[3];
resetMv mv1622[1];
setMv mv1622[0] = mv1618[0];
calculateMvCoeff mv1617[0] = DIVISION(mv1621,mv1622);
resetMv mv1623[1];
resetMv mv1624[1];
setVector ve1625 = {rcPpDual[12],len[-12]};
dotVectors mv1624[0] = <ve1625>;
setMv mv1623[0] = mv1624[-0];
resetMv mv1626[1];
resetMv mv1627[1];
setVector ve1628 = {nen[1,2,3]};
setVector ve1629 = {nen[1,2,3]};
dotVectors mv1627[0] = <ve1628,ve1629>;
resetMv mv1630[1];
setMv mv1630[0] = nen[4];
resetMv mv1631[1];
setMv mv1631[0] = mv1627[0];
calculateMvCoeff mv1626[0] = DIVISION(mv1630,mv1631);
setVector ve1632 = {len[-0],mv1606[0],mv1615[0],mv1623[0]};
setVector ve1633 = {mv1600[0],mv1609[0],mv1617[0],mv1626[0]};
dotVectors rc2[2] = <ve1632,ve1633>;

//rc2[3] = ((((-(len[0])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[7] - len[7]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[10] - len[10]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[14] - len[14]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1634[1];
resetMv mv1635[1];
setVector ve1636 = {nen[1,2,3]};
setVector ve1637 = {nen[1,2,3]};
dotVectors mv1635[0] = <ve1636,ve1637>;
resetMv mv1638[1];
setMv mv1638[0] = nen[3];
resetMv mv1639[1];
setMv mv1639[0] = mv1635[0];
calculateMvCoeff mv1634[0] = DIVISION(mv1638,mv1639);
resetMv mv1640[1];
resetMv mv1641[1];
setVector ve1642 = {rcPpDual[7],len[-7]};
dotVectors mv1641[0] = <ve1642>;
setMv mv1640[0] = mv1641[-0];
resetMv mv1643[1];
resetMv mv1644[1];
setVector ve1645 = {nen[1,2,3]};
setVector ve1646 = {nen[1,2,3]};
dotVectors mv1644[0] = <ve1645,ve1646>;
resetMv mv1647[1];
setMv mv1647[0] = nen[1];
resetMv mv1648[1];
setMv mv1648[0] = mv1644[0];
calculateMvCoeff mv1643[0] = DIVISION(mv1647,mv1648);
resetMv mv1649[1];
resetMv mv1650[1];
setVector ve1651 = {rcPpDual[10],len[-10]};
dotVectors mv1650[0] = <ve1651>;
setMv mv1649[0] = mv1650[-0];
resetMv mv1652[1];
resetMv mv1653[1];
setVector ve1654 = {nen[1,2,3]};
setVector ve1655 = {nen[1,2,3]};
dotVectors mv1653[0] = <ve1654,ve1655>;
resetMv mv1656[1];
setMv mv1656[0] = nen[2];
resetMv mv1657[1];
setMv mv1657[0] = mv1653[0];
calculateMvCoeff mv1652[0] = DIVISION(mv1656,mv1657);
resetMv mv1658[1];
resetMv mv1659[1];
setVector ve1660 = {rcPpDual[14],len[-14]};
dotVectors mv1659[0] = <ve1660>;
setMv mv1658[0] = mv1659[-0];
resetMv mv1661[1];
resetMv mv1662[1];
setVector ve1663 = {nen[1,2,3]};
setVector ve1664 = {nen[1,2,3]};
dotVectors mv1662[0] = <ve1663,ve1664>;
resetMv mv1665[1];
setMv mv1665[0] = nen[4];
resetMv mv1666[1];
setMv mv1666[0] = mv1662[0];
calculateMvCoeff mv1661[0] = DIVISION(mv1665,mv1666);
setVector ve1667 = {len[-0],mv1640[0],mv1649[0],mv1658[0]};
setVector ve1668 = {mv1634[0],mv1643[0],mv1652[0],mv1661[0]};
dotVectors rc2[3] = <ve1667,ve1668>;

//rc2[4] = (((((-(len[0])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] - len[8]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[11] - len[11]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[13] - len[13]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[15] - len[15]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1669[1];
resetMv mv1670[1];
setVector ve1671 = {nen[1,2,3]};
setVector ve1672 = {nen[1,2,3]};
dotVectors mv1670[0] = <ve1671,ve1672>;
resetMv mv1673[1];
setMv mv1673[0] = nen[4];
resetMv mv1674[1];
setMv mv1674[0] = mv1670[0];
calculateMvCoeff mv1669[0] = DIVISION(mv1673,mv1674);
resetMv mv1675[1];
resetMv mv1676[1];
setVector ve1677 = {rcPpDual[8],len[-8]};
dotVectors mv1676[0] = <ve1677>;
setMv mv1675[0] = mv1676[-0];
resetMv mv1678[1];
resetMv mv1679[1];
setVector ve1680 = {nen[1,2,3]};
setVector ve1681 = {nen[1,2,3]};
dotVectors mv1679[0] = <ve1680,ve1681>;
resetMv mv1682[1];
setMv mv1682[0] = nen[1];
resetMv mv1683[1];
setMv mv1683[0] = mv1679[0];
calculateMvCoeff mv1678[0] = DIVISION(mv1682,mv1683);
resetMv mv1684[1];
resetMv mv1685[1];
setVector ve1686 = {rcPpDual[11],len[-11]};
dotVectors mv1685[0] = <ve1686>;
setMv mv1684[0] = mv1685[-0];
resetMv mv1687[1];
resetMv mv1688[1];
setVector ve1689 = {nen[1,2,3]};
setVector ve1690 = {nen[1,2,3]};
dotVectors mv1688[0] = <ve1689,ve1690>;
resetMv mv1691[1];
setMv mv1691[0] = nen[2];
resetMv mv1692[1];
setMv mv1692[0] = mv1688[0];
calculateMvCoeff mv1687[0] = DIVISION(mv1691,mv1692);
resetMv mv1693[1];
resetMv mv1694[1];
setVector ve1695 = {rcPpDual[13],len[-13]};
dotVectors mv1694[0] = <ve1695>;
setMv mv1693[0] = mv1694[-0];
resetMv mv1696[1];
resetMv mv1697[1];
setVector ve1698 = {nen[1,2,3]};
setVector ve1699 = {nen[1,2,3]};
dotVectors mv1697[0] = <ve1698,ve1699>;
resetMv mv1700[1];
setMv mv1700[0] = nen[3];
resetMv mv1701[1];
setMv mv1701[0] = mv1697[0];
calculateMvCoeff mv1696[0] = DIVISION(mv1700,mv1701);
resetMv mv1702[1];
resetMv mv1703[1];
setVector ve1704 = {rcPpDual[15],len[-15]};
dotVectors mv1703[0] = <ve1704>;
setMv mv1702[0] = mv1703[-0];
resetMv mv1705[1];
resetMv mv1706[1];
setVector ve1707 = {nen[1,2,3]};
setVector ve1708 = {nen[1,2,3]};
dotVectors mv1706[0] = <ve1707,ve1708>;
resetMv mv1709[1];
setMv mv1709[0] = nen[4];
resetMv mv1710[1];
setMv mv1710[0] = mv1706[0];
calculateMvCoeff mv1705[0] = DIVISION(mv1709,mv1710);
setVector ve1711 = {len[-0],mv1675[0],mv1684[0],mv1693[0],mv1702[0]};
setVector ve1712 = {mv1669[0],mv1678[0],mv1687[0],mv1696[0],mv1705[0]};
dotVectors rc2[4] = <ve1711,ve1712>;

//rc2[5] = ((-((rcPpDual[9] - len[9]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[12] - len[12]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[14] - len[14]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1713[1];
resetMv mv1714[1];
setVector ve1715 = {rcPpDual[9],len[-9]};
dotVectors mv1714[0] = <ve1715>;
setMv mv1713[0] = mv1714[-0];
resetMv mv1716[1];
resetMv mv1717[1];
setVector ve1718 = {nen[1,2,3]};
setVector ve1719 = {nen[1,2,3]};
dotVectors mv1717[0] = <ve1718,ve1719>;
resetMv mv1720[1];
setMv mv1720[0] = nen[1];
resetMv mv1721[1];
setMv mv1721[0] = mv1717[0];
calculateMvCoeff mv1716[0] = DIVISION(mv1720,mv1721);
resetMv mv1722[1];
resetMv mv1723[1];
setVector ve1724 = {rcPpDual[12],len[-12]};
dotVectors mv1723[0] = <ve1724>;
setMv mv1722[0] = mv1723[-0];
resetMv mv1725[1];
resetMv mv1726[1];
setVector ve1727 = {nen[1,2,3]};
setVector ve1728 = {nen[1,2,3]};
dotVectors mv1726[0] = <ve1727,ve1728>;
resetMv mv1729[1];
setMv mv1729[0] = nen[2];
resetMv mv1730[1];
setMv mv1730[0] = mv1726[0];
calculateMvCoeff mv1725[0] = DIVISION(mv1729,mv1730);
resetMv mv1731[1];
resetMv mv1732[1];
setVector ve1733 = {rcPpDual[14],len[-14]};
dotVectors mv1732[0] = <ve1733>;
setMv mv1731[0] = mv1732[-0];
resetMv mv1734[1];
resetMv mv1735[1];
setVector ve1736 = {nen[1,2,3]};
setVector ve1737 = {nen[1,2,3]};
dotVectors mv1735[0] = <ve1736,ve1737>;
resetMv mv1738[1];
setMv mv1738[0] = nen[3];
resetMv mv1739[1];
setMv mv1739[0] = mv1735[0];
calculateMvCoeff mv1734[0] = DIVISION(mv1738,mv1739);
setVector ve1740 = {mv1713[0],mv1722[0],mv1731[0]};
setVector ve1741 = {mv1716[0],mv1725[0],mv1734[0]};
dotVectors rc2[5] = <ve1740,ve1741>;

//rc2[6] = ((((-(len[1])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[2])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[16])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[18])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1742[1];
resetMv mv1743[1];
setVector ve1744 = {nen[1,2,3]};
setVector ve1745 = {nen[1,2,3]};
dotVectors mv1743[0] = <ve1744,ve1745>;
resetMv mv1746[1];
setMv mv1746[0] = nen[2];
resetMv mv1747[1];
setMv mv1747[0] = mv1743[0];
calculateMvCoeff mv1742[0] = DIVISION(mv1746,mv1747);
resetMv mv1748[1];
resetMv mv1749[1];
setVector ve1750 = {nen[1,2,3]};
setVector ve1751 = {nen[1,2,3]};
dotVectors mv1749[0] = <ve1750,ve1751>;
resetMv mv1752[1];
setMv mv1752[0] = nen[1];
resetMv mv1753[1];
setMv mv1753[0] = mv1749[0];
calculateMvCoeff mv1748[0] = DIVISION(mv1752,mv1753);
resetMv mv1754[1];
resetMv mv1755[1];
setVector ve1756 = {nen[1,2,3]};
setVector ve1757 = {nen[1,2,3]};
dotVectors mv1755[0] = <ve1756,ve1757>;
resetMv mv1758[1];
setMv mv1758[0] = nen[3];
resetMv mv1759[1];
setMv mv1759[0] = mv1755[0];
calculateMvCoeff mv1754[0] = DIVISION(mv1758,mv1759);
resetMv mv1760[1];
resetMv mv1761[1];
setVector ve1762 = {nen[1,2,3]};
setVector ve1763 = {nen[1,2,3]};
dotVectors mv1761[0] = <ve1762,ve1763>;
resetMv mv1764[1];
setMv mv1764[0] = nen[4];
resetMv mv1765[1];
setMv mv1765[0] = mv1761[0];
calculateMvCoeff mv1760[0] = DIVISION(mv1764,mv1765);
setVector ve1766 = {len[-1,2,-16,18]};
setVector ve1767 = {mv1742[0],mv1748[0],mv1754[0],mv1760[0]};
dotVectors rc2[6] = <ve1766,ve1767>;

//rc2[7] = ((((-(len[1])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[3])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[16])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[20])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1768[1];
resetMv mv1769[1];
setVector ve1770 = {nen[1,2,3]};
setVector ve1771 = {nen[1,2,3]};
dotVectors mv1769[0] = <ve1770,ve1771>;
resetMv mv1772[1];
setMv mv1772[0] = nen[3];
resetMv mv1773[1];
setMv mv1773[0] = mv1769[0];
calculateMvCoeff mv1768[0] = DIVISION(mv1772,mv1773);
resetMv mv1774[1];
resetMv mv1775[1];
setVector ve1776 = {nen[1,2,3]};
setVector ve1777 = {nen[1,2,3]};
dotVectors mv1775[0] = <ve1776,ve1777>;
resetMv mv1778[1];
setMv mv1778[0] = nen[1];
resetMv mv1779[1];
setMv mv1779[0] = mv1775[0];
calculateMvCoeff mv1774[0] = DIVISION(mv1778,mv1779);
resetMv mv1780[1];
resetMv mv1781[1];
setVector ve1782 = {nen[1,2,3]};
setVector ve1783 = {nen[1,2,3]};
dotVectors mv1781[0] = <ve1782,ve1783>;
resetMv mv1784[1];
setMv mv1784[0] = nen[2];
resetMv mv1785[1];
setMv mv1785[0] = mv1781[0];
calculateMvCoeff mv1780[0] = DIVISION(mv1784,mv1785);
resetMv mv1786[1];
resetMv mv1787[1];
setVector ve1788 = {nen[1,2,3]};
setVector ve1789 = {nen[1,2,3]};
dotVectors mv1787[0] = <ve1788,ve1789>;
resetMv mv1790[1];
setMv mv1790[0] = nen[4];
resetMv mv1791[1];
setMv mv1791[0] = mv1787[0];
calculateMvCoeff mv1786[0] = DIVISION(mv1790,mv1791);
setVector ve1792 = {len[-1,3,16,20]};
setVector ve1793 = {mv1768[0],mv1774[0],mv1780[0],mv1786[0]};
dotVectors rc2[7] = <ve1792,ve1793>;

//rc2[8] = (((((-(len[1])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[4])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[17])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[19])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[21])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1794[1];
resetMv mv1795[1];
setVector ve1796 = {nen[1,2,3]};
setVector ve1797 = {nen[1,2,3]};
dotVectors mv1795[0] = <ve1796,ve1797>;
resetMv mv1798[1];
setMv mv1798[0] = nen[4];
resetMv mv1799[1];
setMv mv1799[0] = mv1795[0];
calculateMvCoeff mv1794[0] = DIVISION(mv1798,mv1799);
resetMv mv1800[1];
resetMv mv1801[1];
setVector ve1802 = {nen[1,2,3]};
setVector ve1803 = {nen[1,2,3]};
dotVectors mv1801[0] = <ve1802,ve1803>;
resetMv mv1804[1];
setMv mv1804[0] = nen[1];
resetMv mv1805[1];
setMv mv1805[0] = mv1801[0];
calculateMvCoeff mv1800[0] = DIVISION(mv1804,mv1805);
resetMv mv1806[1];
resetMv mv1807[1];
setVector ve1808 = {nen[1,2,3]};
setVector ve1809 = {nen[1,2,3]};
dotVectors mv1807[0] = <ve1808,ve1809>;
resetMv mv1810[1];
setMv mv1810[0] = nen[2];
resetMv mv1811[1];
setMv mv1811[0] = mv1807[0];
calculateMvCoeff mv1806[0] = DIVISION(mv1810,mv1811);
resetMv mv1812[1];
resetMv mv1813[1];
setVector ve1814 = {nen[1,2,3]};
setVector ve1815 = {nen[1,2,3]};
dotVectors mv1813[0] = <ve1814,ve1815>;
resetMv mv1816[1];
setMv mv1816[0] = nen[3];
resetMv mv1817[1];
setMv mv1817[0] = mv1813[0];
calculateMvCoeff mv1812[0] = DIVISION(mv1816,mv1817);
resetMv mv1818[1];
resetMv mv1819[1];
setVector ve1820 = {nen[1,2,3]};
setVector ve1821 = {nen[1,2,3]};
dotVectors mv1819[0] = <ve1820,ve1821>;
resetMv mv1822[1];
setMv mv1822[0] = nen[4];
resetMv mv1823[1];
setMv mv1823[0] = mv1819[0];
calculateMvCoeff mv1818[0] = DIVISION(mv1822,mv1823);
setVector ve1824 = {len[-1,4,17,19,21]};
setVector ve1825 = {mv1794[0],mv1800[0],mv1806[0],mv1812[0],mv1818[0]};
dotVectors rc2[8] = <ve1824,ve1825>;

//rc2[9] = ((-((-(len[5])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[18])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[20])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1826[1];
resetMv mv1827[1];
setVector ve1828 = {nen[1,2,3]};
setVector ve1829 = {nen[1,2,3]};
dotVectors mv1827[0] = <ve1828,ve1829>;
resetMv mv1830[1];
setMv mv1830[0] = nen[1];
resetMv mv1831[1];
setMv mv1831[0] = mv1827[0];
calculateMvCoeff mv1826[0] = DIVISION(mv1830,mv1831);
resetMv mv1832[1];
resetMv mv1833[1];
setVector ve1834 = {nen[1,2,3]};
setVector ve1835 = {nen[1,2,3]};
dotVectors mv1833[0] = <ve1834,ve1835>;
resetMv mv1836[1];
setMv mv1836[0] = nen[2];
resetMv mv1837[1];
setMv mv1837[0] = mv1833[0];
calculateMvCoeff mv1832[0] = DIVISION(mv1836,mv1837);
resetMv mv1838[1];
resetMv mv1839[1];
setVector ve1840 = {nen[1,2,3]};
setVector ve1841 = {nen[1,2,3]};
dotVectors mv1839[0] = <ve1840,ve1841>;
resetMv mv1842[1];
setMv mv1842[0] = nen[3];
resetMv mv1843[1];
setMv mv1843[0] = mv1839[0];
calculateMvCoeff mv1838[0] = DIVISION(mv1842,mv1843);
setVector ve1844 = {len[5,18,20]};
setVector ve1845 = {mv1826[0],mv1832[0],mv1838[0]};
dotVectors rc2[9] = <ve1844,ve1845>;

//rc2[10] = ((((-(len[2])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[3])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[16])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[23])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1846[1];
resetMv mv1847[1];
setVector ve1848 = {nen[1,2,3]};
setVector ve1849 = {nen[1,2,3]};
dotVectors mv1847[0] = <ve1848,ve1849>;
resetMv mv1850[1];
setMv mv1850[0] = nen[3];
resetMv mv1851[1];
setMv mv1851[0] = mv1847[0];
calculateMvCoeff mv1846[0] = DIVISION(mv1850,mv1851);
resetMv mv1852[1];
resetMv mv1853[1];
setVector ve1854 = {nen[1,2,3]};
setVector ve1855 = {nen[1,2,3]};
dotVectors mv1853[0] = <ve1854,ve1855>;
resetMv mv1856[1];
setMv mv1856[0] = nen[2];
resetMv mv1857[1];
setMv mv1857[0] = mv1853[0];
calculateMvCoeff mv1852[0] = DIVISION(mv1856,mv1857);
resetMv mv1858[1];
resetMv mv1859[1];
setVector ve1860 = {nen[1,2,3]};
setVector ve1861 = {nen[1,2,3]};
dotVectors mv1859[0] = <ve1860,ve1861>;
resetMv mv1862[1];
setMv mv1862[0] = nen[1];
resetMv mv1863[1];
setMv mv1863[0] = mv1859[0];
calculateMvCoeff mv1858[0] = DIVISION(mv1862,mv1863);
resetMv mv1864[1];
resetMv mv1865[1];
setVector ve1866 = {nen[1,2,3]};
setVector ve1867 = {nen[1,2,3]};
dotVectors mv1865[0] = <ve1866,ve1867>;
resetMv mv1868[1];
setMv mv1868[0] = nen[4];
resetMv mv1869[1];
setMv mv1869[0] = mv1865[0];
calculateMvCoeff mv1864[0] = DIVISION(mv1868,mv1869);
setVector ve1870 = {len[-2,3,-16,23]};
setVector ve1871 = {mv1846[0],mv1852[0],mv1858[0],mv1864[0]};
dotVectors rc2[10] = <ve1870,ve1871>;

//rc2[11] = (((((-(len[2])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[4])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[17])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[22])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[24])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1872[1];
resetMv mv1873[1];
setVector ve1874 = {nen[1,2,3]};
setVector ve1875 = {nen[1,2,3]};
dotVectors mv1873[0] = <ve1874,ve1875>;
resetMv mv1876[1];
setMv mv1876[0] = nen[4];
resetMv mv1877[1];
setMv mv1877[0] = mv1873[0];
calculateMvCoeff mv1872[0] = DIVISION(mv1876,mv1877);
resetMv mv1878[1];
resetMv mv1879[1];
setVector ve1880 = {nen[1,2,3]};
setVector ve1881 = {nen[1,2,3]};
dotVectors mv1879[0] = <ve1880,ve1881>;
resetMv mv1882[1];
setMv mv1882[0] = nen[2];
resetMv mv1883[1];
setMv mv1883[0] = mv1879[0];
calculateMvCoeff mv1878[0] = DIVISION(mv1882,mv1883);
resetMv mv1884[1];
resetMv mv1885[1];
setVector ve1886 = {nen[1,2,3]};
setVector ve1887 = {nen[1,2,3]};
dotVectors mv1885[0] = <ve1886,ve1887>;
resetMv mv1888[1];
setMv mv1888[0] = nen[1];
resetMv mv1889[1];
setMv mv1889[0] = mv1885[0];
calculateMvCoeff mv1884[0] = DIVISION(mv1888,mv1889);
resetMv mv1890[1];
resetMv mv1891[1];
setVector ve1892 = {nen[1,2,3]};
setVector ve1893 = {nen[1,2,3]};
dotVectors mv1891[0] = <ve1892,ve1893>;
resetMv mv1894[1];
setMv mv1894[0] = nen[3];
resetMv mv1895[1];
setMv mv1895[0] = mv1891[0];
calculateMvCoeff mv1890[0] = DIVISION(mv1894,mv1895);
resetMv mv1896[1];
resetMv mv1897[1];
setVector ve1898 = {nen[1,2,3]};
setVector ve1899 = {nen[1,2,3]};
dotVectors mv1897[0] = <ve1898,ve1899>;
resetMv mv1900[1];
setMv mv1900[0] = nen[4];
resetMv mv1901[1];
setMv mv1901[0] = mv1897[0];
calculateMvCoeff mv1896[0] = DIVISION(mv1900,mv1901);
setVector ve1902 = {len[-2,4,-17,22,24]};
setVector ve1903 = {mv1872[0],mv1878[0],mv1884[0],mv1890[0],mv1896[0]};
dotVectors rc2[11] = <ve1902,ve1903>;

//rc2[12] = ((-((-(len[5])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[18])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[23])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1904[1];
resetMv mv1905[1];
setVector ve1906 = {nen[1,2,3]};
setVector ve1907 = {nen[1,2,3]};
dotVectors mv1905[0] = <ve1906,ve1907>;
resetMv mv1908[1];
setMv mv1908[0] = nen[2];
resetMv mv1909[1];
setMv mv1909[0] = mv1905[0];
calculateMvCoeff mv1904[0] = DIVISION(mv1908,mv1909);
resetMv mv1910[1];
resetMv mv1911[1];
setVector ve1912 = {nen[1,2,3]};
setVector ve1913 = {nen[1,2,3]};
dotVectors mv1911[0] = <ve1912,ve1913>;
resetMv mv1914[1];
setMv mv1914[0] = nen[1];
resetMv mv1915[1];
setMv mv1915[0] = mv1911[0];
calculateMvCoeff mv1910[0] = DIVISION(mv1914,mv1915);
resetMv mv1916[1];
resetMv mv1917[1];
setVector ve1918 = {nen[1,2,3]};
setVector ve1919 = {nen[1,2,3]};
dotVectors mv1917[0] = <ve1918,ve1919>;
resetMv mv1920[1];
setMv mv1920[0] = nen[3];
resetMv mv1921[1];
setMv mv1921[0] = mv1917[0];
calculateMvCoeff mv1916[0] = DIVISION(mv1920,mv1921);
setVector ve1922 = {len[5,-18,23]};
setVector ve1923 = {mv1904[0],mv1910[0],mv1916[0]};
dotVectors rc2[12] = <ve1922,ve1923>;

//rc2[13] = (((((-(len[3])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[4])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[19])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[22])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[25])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1924[1];
resetMv mv1925[1];
setVector ve1926 = {nen[1,2,3]};
setVector ve1927 = {nen[1,2,3]};
dotVectors mv1925[0] = <ve1926,ve1927>;
resetMv mv1928[1];
setMv mv1928[0] = nen[4];
resetMv mv1929[1];
setMv mv1929[0] = mv1925[0];
calculateMvCoeff mv1924[0] = DIVISION(mv1928,mv1929);
resetMv mv1930[1];
resetMv mv1931[1];
setVector ve1932 = {nen[1,2,3]};
setVector ve1933 = {nen[1,2,3]};
dotVectors mv1931[0] = <ve1932,ve1933>;
resetMv mv1934[1];
setMv mv1934[0] = nen[3];
resetMv mv1935[1];
setMv mv1935[0] = mv1931[0];
calculateMvCoeff mv1930[0] = DIVISION(mv1934,mv1935);
resetMv mv1936[1];
resetMv mv1937[1];
setVector ve1938 = {nen[1,2,3]};
setVector ve1939 = {nen[1,2,3]};
dotVectors mv1937[0] = <ve1938,ve1939>;
resetMv mv1940[1];
setMv mv1940[0] = nen[1];
resetMv mv1941[1];
setMv mv1941[0] = mv1937[0];
calculateMvCoeff mv1936[0] = DIVISION(mv1940,mv1941);
resetMv mv1942[1];
resetMv mv1943[1];
setVector ve1944 = {nen[1,2,3]};
setVector ve1945 = {nen[1,2,3]};
dotVectors mv1943[0] = <ve1944,ve1945>;
resetMv mv1946[1];
setMv mv1946[0] = nen[2];
resetMv mv1947[1];
setMv mv1947[0] = mv1943[0];
calculateMvCoeff mv1942[0] = DIVISION(mv1946,mv1947);
resetMv mv1948[1];
resetMv mv1949[1];
setVector ve1950 = {nen[1,2,3]};
setVector ve1951 = {nen[1,2,3]};
dotVectors mv1949[0] = <ve1950,ve1951>;
resetMv mv1952[1];
setMv mv1952[0] = nen[4];
resetMv mv1953[1];
setMv mv1953[0] = mv1949[0];
calculateMvCoeff mv1948[0] = DIVISION(mv1952,mv1953);
setVector ve1954 = {len[-3,4,-19,-22,25]};
setVector ve1955 = {mv1924[0],mv1930[0],mv1936[0],mv1942[0],mv1948[0]};
dotVectors rc2[13] = <ve1954,ve1955>;

//rc2[14] = ((-((-(len[5])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[20])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[23])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv1956[1];
resetMv mv1957[1];
setVector ve1958 = {nen[1,2,3]};
setVector ve1959 = {nen[1,2,3]};
dotVectors mv1957[0] = <ve1958,ve1959>;
resetMv mv1960[1];
setMv mv1960[0] = nen[3];
resetMv mv1961[1];
setMv mv1961[0] = mv1957[0];
calculateMvCoeff mv1956[0] = DIVISION(mv1960,mv1961);
resetMv mv1962[1];
resetMv mv1963[1];
setVector ve1964 = {nen[1,2,3]};
setVector ve1965 = {nen[1,2,3]};
dotVectors mv1963[0] = <ve1964,ve1965>;
resetMv mv1966[1];
setMv mv1966[0] = nen[1];
resetMv mv1967[1];
setMv mv1967[0] = mv1963[0];
calculateMvCoeff mv1962[0] = DIVISION(mv1966,mv1967);
resetMv mv1968[1];
resetMv mv1969[1];
setVector ve1970 = {nen[1,2,3]};
setVector ve1971 = {nen[1,2,3]};
dotVectors mv1969[0] = <ve1970,ve1971>;
resetMv mv1972[1];
setMv mv1972[0] = nen[2];
resetMv mv1973[1];
setMv mv1973[0] = mv1969[0];
calculateMvCoeff mv1968[0] = DIVISION(mv1972,mv1973);
setVector ve1974 = {len[5,-20,-23]};
setVector ve1975 = {mv1956[0],mv1962[0],mv1968[0]};
dotVectors rc2[14] = <ve1974,ve1975>;

//rc2[15] = (((-((-(len[5])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[21])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[24])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[25])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv1976[1];
resetMv mv1977[1];
setVector ve1978 = {nen[1,2,3]};
setVector ve1979 = {nen[1,2,3]};
dotVectors mv1977[0] = <ve1978,ve1979>;
resetMv mv1980[1];
setMv mv1980[0] = nen[4];
resetMv mv1981[1];
setMv mv1981[0] = mv1977[0];
calculateMvCoeff mv1976[0] = DIVISION(mv1980,mv1981);
resetMv mv1982[1];
resetMv mv1983[1];
setVector ve1984 = {nen[1,2,3]};
setVector ve1985 = {nen[1,2,3]};
dotVectors mv1983[0] = <ve1984,ve1985>;
resetMv mv1986[1];
setMv mv1986[0] = nen[1];
resetMv mv1987[1];
setMv mv1987[0] = mv1983[0];
calculateMvCoeff mv1982[0] = DIVISION(mv1986,mv1987);
resetMv mv1988[1];
resetMv mv1989[1];
setVector ve1990 = {nen[1,2,3]};
setVector ve1991 = {nen[1,2,3]};
dotVectors mv1989[0] = <ve1990,ve1991>;
resetMv mv1992[1];
setMv mv1992[0] = nen[2];
resetMv mv1993[1];
setMv mv1993[0] = mv1989[0];
calculateMvCoeff mv1988[0] = DIVISION(mv1992,mv1993);
resetMv mv1994[1];
resetMv mv1995[1];
setVector ve1996 = {nen[1,2,3]};
setVector ve1997 = {nen[1,2,3]};
dotVectors mv1995[0] = <ve1996,ve1997>;
resetMv mv1998[1];
setMv mv1998[0] = nen[3];
resetMv mv1999[1];
setMv mv1999[0] = mv1995[0];
calculateMvCoeff mv1994[0] = DIVISION(mv1998,mv1999);
setVector ve2000 = {len[5,-21,-24,-25]};
setVector ve2001 = {mv1976[0],mv1982[0],mv1988[0],mv1994[0]};
dotVectors rc2[15] = <ve2000,ve2001>;

//rc2[16] = ((((rcPpDual[6] - len[6]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[7] - len[7]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[10] - len[10]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[27])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2002[1];
setVector ve2003 = {rcPpDual[6],len[-6]};
dotVectors mv2002[0] = <ve2003>;
resetMv mv2004[1];
resetMv mv2005[1];
setVector ve2006 = {nen[1,2,3]};
setVector ve2007 = {nen[1,2,3]};
dotVectors mv2005[0] = <ve2006,ve2007>;
resetMv mv2008[1];
setMv mv2008[0] = nen[3];
resetMv mv2009[1];
setMv mv2009[0] = mv2005[0];
calculateMvCoeff mv2004[0] = DIVISION(mv2008,mv2009);
resetMv mv2010[1];
resetMv mv2011[1];
setVector ve2012 = {rcPpDual[7],len[-7]};
dotVectors mv2011[0] = <ve2012>;
setMv mv2010[0] = mv2011[-0];
resetMv mv2013[1];
resetMv mv2014[1];
setVector ve2015 = {nen[1,2,3]};
setVector ve2016 = {nen[1,2,3]};
dotVectors mv2014[0] = <ve2015,ve2016>;
resetMv mv2017[1];
setMv mv2017[0] = nen[2];
resetMv mv2018[1];
setMv mv2018[0] = mv2014[0];
calculateMvCoeff mv2013[0] = DIVISION(mv2017,mv2018);
resetMv mv2019[1];
setVector ve2020 = {rcPpDual[10],len[-10]};
dotVectors mv2019[0] = <ve2020>;
resetMv mv2021[1];
resetMv mv2022[1];
setVector ve2023 = {nen[1,2,3]};
setVector ve2024 = {nen[1,2,3]};
dotVectors mv2022[0] = <ve2023,ve2024>;
resetMv mv2025[1];
setMv mv2025[0] = nen[1];
resetMv mv2026[1];
setMv mv2026[0] = mv2022[0];
calculateMvCoeff mv2021[0] = DIVISION(mv2025,mv2026);
resetMv mv2027[1];
resetMv mv2028[1];
setVector ve2029 = {nen[1,2,3]};
setVector ve2030 = {nen[1,2,3]};
dotVectors mv2028[0] = <ve2029,ve2030>;
resetMv mv2031[1];
setMv mv2031[0] = nen[4];
resetMv mv2032[1];
setMv mv2032[0] = mv2028[0];
calculateMvCoeff mv2027[0] = DIVISION(mv2031,mv2032);
setVector ve2033 = {mv2002[0],mv2010[0],mv2019[0],len[27]};
setVector ve2034 = {mv2004[0],mv2013[0],mv2021[0],mv2027[0]};
dotVectors rc2[16] = <ve2033,ve2034>;

//rc2[17] = (((((rcPpDual[6] - len[6]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] - len[8]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[11] - len[11]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[26])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[28])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2035[1];
setVector ve2036 = {rcPpDual[6],len[-6]};
dotVectors mv2035[0] = <ve2036>;
resetMv mv2037[1];
resetMv mv2038[1];
setVector ve2039 = {nen[1,2,3]};
setVector ve2040 = {nen[1,2,3]};
dotVectors mv2038[0] = <ve2039,ve2040>;
resetMv mv2041[1];
setMv mv2041[0] = nen[4];
resetMv mv2042[1];
setMv mv2042[0] = mv2038[0];
calculateMvCoeff mv2037[0] = DIVISION(mv2041,mv2042);
resetMv mv2043[1];
resetMv mv2044[1];
setVector ve2045 = {rcPpDual[8],len[-8]};
dotVectors mv2044[0] = <ve2045>;
setMv mv2043[0] = mv2044[-0];
resetMv mv2046[1];
resetMv mv2047[1];
setVector ve2048 = {nen[1,2,3]};
setVector ve2049 = {nen[1,2,3]};
dotVectors mv2047[0] = <ve2048,ve2049>;
resetMv mv2050[1];
setMv mv2050[0] = nen[2];
resetMv mv2051[1];
setMv mv2051[0] = mv2047[0];
calculateMvCoeff mv2046[0] = DIVISION(mv2050,mv2051);
resetMv mv2052[1];
setVector ve2053 = {rcPpDual[11],len[-11]};
dotVectors mv2052[0] = <ve2053>;
resetMv mv2054[1];
resetMv mv2055[1];
setVector ve2056 = {nen[1,2,3]};
setVector ve2057 = {nen[1,2,3]};
dotVectors mv2055[0] = <ve2056,ve2057>;
resetMv mv2058[1];
setMv mv2058[0] = nen[1];
resetMv mv2059[1];
setMv mv2059[0] = mv2055[0];
calculateMvCoeff mv2054[0] = DIVISION(mv2058,mv2059);
resetMv mv2060[1];
resetMv mv2061[1];
setVector ve2062 = {nen[1,2,3]};
setVector ve2063 = {nen[1,2,3]};
dotVectors mv2061[0] = <ve2062,ve2063>;
resetMv mv2064[1];
setMv mv2064[0] = nen[3];
resetMv mv2065[1];
setMv mv2065[0] = mv2061[0];
calculateMvCoeff mv2060[0] = DIVISION(mv2064,mv2065);
resetMv mv2066[1];
resetMv mv2067[1];
setVector ve2068 = {nen[1,2,3]};
setVector ve2069 = {nen[1,2,3]};
dotVectors mv2067[0] = <ve2068,ve2069>;
resetMv mv2070[1];
setMv mv2070[0] = nen[4];
resetMv mv2071[1];
setMv mv2071[0] = mv2067[0];
calculateMvCoeff mv2066[0] = DIVISION(mv2070,mv2071);
setVector ve2072 = {mv2035[0],mv2043[0],mv2052[0],len[26,28]};
setVector ve2073 = {mv2037[0],mv2046[0],mv2054[0],mv2060[0],mv2066[0]};
dotVectors rc2[17] = <ve2072,ve2073>;

//rc2[18] = ((-((rcPpDual[9] - len[9]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[12] - len[12]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[27])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2074[1];
resetMv mv2075[1];
setVector ve2076 = {rcPpDual[9],len[-9]};
dotVectors mv2075[0] = <ve2076>;
setMv mv2074[0] = mv2075[-0];
resetMv mv2077[1];
resetMv mv2078[1];
setVector ve2079 = {nen[1,2,3]};
setVector ve2080 = {nen[1,2,3]};
dotVectors mv2078[0] = <ve2079,ve2080>;
resetMv mv2081[1];
setMv mv2081[0] = nen[2];
resetMv mv2082[1];
setMv mv2082[0] = mv2078[0];
calculateMvCoeff mv2077[0] = DIVISION(mv2081,mv2082);
resetMv mv2083[1];
setVector ve2084 = {rcPpDual[12],len[-12]};
dotVectors mv2083[0] = <ve2084>;
resetMv mv2085[1];
resetMv mv2086[1];
setVector ve2087 = {nen[1,2,3]};
setVector ve2088 = {nen[1,2,3]};
dotVectors mv2086[0] = <ve2087,ve2088>;
resetMv mv2089[1];
setMv mv2089[0] = nen[1];
resetMv mv2090[1];
setMv mv2090[0] = mv2086[0];
calculateMvCoeff mv2085[0] = DIVISION(mv2089,mv2090);
resetMv mv2091[1];
resetMv mv2092[1];
setVector ve2093 = {nen[1,2,3]};
setVector ve2094 = {nen[1,2,3]};
dotVectors mv2092[0] = <ve2093,ve2094>;
resetMv mv2095[1];
setMv mv2095[0] = nen[3];
resetMv mv2096[1];
setMv mv2096[0] = mv2092[0];
calculateMvCoeff mv2091[0] = DIVISION(mv2095,mv2096);
setVector ve2097 = {mv2074[0],mv2083[0],len[27]};
setVector ve2098 = {mv2077[0],mv2085[0],mv2091[0]};
dotVectors rc2[18] = <ve2097,ve2098>;

//rc2[19] = (((((rcPpDual[7] - len[7]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] - len[8]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[13] - len[13]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[26])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[29])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2099[1];
setVector ve2100 = {rcPpDual[7],len[-7]};
dotVectors mv2099[0] = <ve2100>;
resetMv mv2101[1];
resetMv mv2102[1];
setVector ve2103 = {nen[1,2,3]};
setVector ve2104 = {nen[1,2,3]};
dotVectors mv2102[0] = <ve2103,ve2104>;
resetMv mv2105[1];
setMv mv2105[0] = nen[4];
resetMv mv2106[1];
setMv mv2106[0] = mv2102[0];
calculateMvCoeff mv2101[0] = DIVISION(mv2105,mv2106);
resetMv mv2107[1];
resetMv mv2108[1];
setVector ve2109 = {rcPpDual[8],len[-8]};
dotVectors mv2108[0] = <ve2109>;
setMv mv2107[0] = mv2108[-0];
resetMv mv2110[1];
resetMv mv2111[1];
setVector ve2112 = {nen[1,2,3]};
setVector ve2113 = {nen[1,2,3]};
dotVectors mv2111[0] = <ve2112,ve2113>;
resetMv mv2114[1];
setMv mv2114[0] = nen[3];
resetMv mv2115[1];
setMv mv2115[0] = mv2111[0];
calculateMvCoeff mv2110[0] = DIVISION(mv2114,mv2115);
resetMv mv2116[1];
setVector ve2117 = {rcPpDual[13],len[-13]};
dotVectors mv2116[0] = <ve2117>;
resetMv mv2118[1];
resetMv mv2119[1];
setVector ve2120 = {nen[1,2,3]};
setVector ve2121 = {nen[1,2,3]};
dotVectors mv2119[0] = <ve2120,ve2121>;
resetMv mv2122[1];
setMv mv2122[0] = nen[1];
resetMv mv2123[1];
setMv mv2123[0] = mv2119[0];
calculateMvCoeff mv2118[0] = DIVISION(mv2122,mv2123);
resetMv mv2124[1];
resetMv mv2125[1];
setVector ve2126 = {nen[1,2,3]};
setVector ve2127 = {nen[1,2,3]};
dotVectors mv2125[0] = <ve2126,ve2127>;
resetMv mv2128[1];
setMv mv2128[0] = nen[2];
resetMv mv2129[1];
setMv mv2129[0] = mv2125[0];
calculateMvCoeff mv2124[0] = DIVISION(mv2128,mv2129);
resetMv mv2130[1];
resetMv mv2131[1];
setVector ve2132 = {nen[1,2,3]};
setVector ve2133 = {nen[1,2,3]};
dotVectors mv2131[0] = <ve2132,ve2133>;
resetMv mv2134[1];
setMv mv2134[0] = nen[4];
resetMv mv2135[1];
setMv mv2135[0] = mv2131[0];
calculateMvCoeff mv2130[0] = DIVISION(mv2134,mv2135);
setVector ve2136 = {mv2099[0],mv2107[0],mv2116[0],len[-26,29]};
setVector ve2137 = {mv2101[0],mv2110[0],mv2118[0],mv2124[0],mv2130[0]};
dotVectors rc2[19] = <ve2136,ve2137>;

//rc2[20] = ((-((rcPpDual[9] - len[9]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[14] - len[14]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[27])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2138[1];
resetMv mv2139[1];
setVector ve2140 = {rcPpDual[9],len[-9]};
dotVectors mv2139[0] = <ve2140>;
setMv mv2138[0] = mv2139[-0];
resetMv mv2141[1];
resetMv mv2142[1];
setVector ve2143 = {nen[1,2,3]};
setVector ve2144 = {nen[1,2,3]};
dotVectors mv2142[0] = <ve2143,ve2144>;
resetMv mv2145[1];
setMv mv2145[0] = nen[3];
resetMv mv2146[1];
setMv mv2146[0] = mv2142[0];
calculateMvCoeff mv2141[0] = DIVISION(mv2145,mv2146);
resetMv mv2147[1];
setVector ve2148 = {rcPpDual[14],len[-14]};
dotVectors mv2147[0] = <ve2148>;
resetMv mv2149[1];
resetMv mv2150[1];
setVector ve2151 = {nen[1,2,3]};
setVector ve2152 = {nen[1,2,3]};
dotVectors mv2150[0] = <ve2151,ve2152>;
resetMv mv2153[1];
setMv mv2153[0] = nen[1];
resetMv mv2154[1];
setMv mv2154[0] = mv2150[0];
calculateMvCoeff mv2149[0] = DIVISION(mv2153,mv2154);
resetMv mv2155[1];
resetMv mv2156[1];
setVector ve2157 = {nen[1,2,3]};
setVector ve2158 = {nen[1,2,3]};
dotVectors mv2156[0] = <ve2157,ve2158>;
resetMv mv2159[1];
setMv mv2159[0] = nen[2];
resetMv mv2160[1];
setMv mv2160[0] = mv2156[0];
calculateMvCoeff mv2155[0] = DIVISION(mv2159,mv2160);
setVector ve2161 = {mv2138[0],mv2147[0],len[-27]};
setVector ve2162 = {mv2141[0],mv2149[0],mv2155[0]};
dotVectors rc2[20] = <ve2161,ve2162>;

//rc2[21] = (((-((rcPpDual[9] - len[9]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] - len[15]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[28])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[29])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2163[1];
resetMv mv2164[1];
setVector ve2165 = {rcPpDual[9],len[-9]};
dotVectors mv2164[0] = <ve2165>;
setMv mv2163[0] = mv2164[-0];
resetMv mv2166[1];
resetMv mv2167[1];
setVector ve2168 = {nen[1,2,3]};
setVector ve2169 = {nen[1,2,3]};
dotVectors mv2167[0] = <ve2168,ve2169>;
resetMv mv2170[1];
setMv mv2170[0] = nen[4];
resetMv mv2171[1];
setMv mv2171[0] = mv2167[0];
calculateMvCoeff mv2166[0] = DIVISION(mv2170,mv2171);
resetMv mv2172[1];
setVector ve2173 = {rcPpDual[15],len[-15]};
dotVectors mv2172[0] = <ve2173>;
resetMv mv2174[1];
resetMv mv2175[1];
setVector ve2176 = {nen[1,2,3]};
setVector ve2177 = {nen[1,2,3]};
dotVectors mv2175[0] = <ve2176,ve2177>;
resetMv mv2178[1];
setMv mv2178[0] = nen[1];
resetMv mv2179[1];
setMv mv2179[0] = mv2175[0];
calculateMvCoeff mv2174[0] = DIVISION(mv2178,mv2179);
resetMv mv2180[1];
resetMv mv2181[1];
setVector ve2182 = {nen[1,2,3]};
setVector ve2183 = {nen[1,2,3]};
dotVectors mv2181[0] = <ve2182,ve2183>;
resetMv mv2184[1];
setMv mv2184[0] = nen[2];
resetMv mv2185[1];
setMv mv2185[0] = mv2181[0];
calculateMvCoeff mv2180[0] = DIVISION(mv2184,mv2185);
resetMv mv2186[1];
resetMv mv2187[1];
setVector ve2188 = {nen[1,2,3]};
setVector ve2189 = {nen[1,2,3]};
dotVectors mv2187[0] = <ve2188,ve2189>;
resetMv mv2190[1];
setMv mv2190[0] = nen[3];
resetMv mv2191[1];
setMv mv2191[0] = mv2187[0];
calculateMvCoeff mv2186[0] = DIVISION(mv2190,mv2191);
setVector ve2192 = {mv2163[0],mv2172[0],len[-28,-29]};
setVector ve2193 = {mv2166[0],mv2174[0],mv2180[0],mv2186[0]};
dotVectors rc2[21] = <ve2192,ve2193>;

//rc2[22] = (((((rcPpDual[10] - len[10]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[11] - len[11]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[13] - len[13]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[26])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[30])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2194[1];
setVector ve2195 = {rcPpDual[10],len[-10]};
dotVectors mv2194[0] = <ve2195>;
resetMv mv2196[1];
resetMv mv2197[1];
setVector ve2198 = {nen[1,2,3]};
setVector ve2199 = {nen[1,2,3]};
dotVectors mv2197[0] = <ve2198,ve2199>;
resetMv mv2200[1];
setMv mv2200[0] = nen[4];
resetMv mv2201[1];
setMv mv2201[0] = mv2197[0];
calculateMvCoeff mv2196[0] = DIVISION(mv2200,mv2201);
resetMv mv2202[1];
resetMv mv2203[1];
setVector ve2204 = {rcPpDual[11],len[-11]};
dotVectors mv2203[0] = <ve2204>;
setMv mv2202[0] = mv2203[-0];
resetMv mv2205[1];
resetMv mv2206[1];
setVector ve2207 = {nen[1,2,3]};
setVector ve2208 = {nen[1,2,3]};
dotVectors mv2206[0] = <ve2207,ve2208>;
resetMv mv2209[1];
setMv mv2209[0] = nen[3];
resetMv mv2210[1];
setMv mv2210[0] = mv2206[0];
calculateMvCoeff mv2205[0] = DIVISION(mv2209,mv2210);
resetMv mv2211[1];
setVector ve2212 = {rcPpDual[13],len[-13]};
dotVectors mv2211[0] = <ve2212>;
resetMv mv2213[1];
resetMv mv2214[1];
setVector ve2215 = {nen[1,2,3]};
setVector ve2216 = {nen[1,2,3]};
dotVectors mv2214[0] = <ve2215,ve2216>;
resetMv mv2217[1];
setMv mv2217[0] = nen[2];
resetMv mv2218[1];
setMv mv2218[0] = mv2214[0];
calculateMvCoeff mv2213[0] = DIVISION(mv2217,mv2218);
resetMv mv2219[1];
resetMv mv2220[1];
setVector ve2221 = {nen[1,2,3]};
setVector ve2222 = {nen[1,2,3]};
dotVectors mv2220[0] = <ve2221,ve2222>;
resetMv mv2223[1];
setMv mv2223[0] = nen[1];
resetMv mv2224[1];
setMv mv2224[0] = mv2220[0];
calculateMvCoeff mv2219[0] = DIVISION(mv2223,mv2224);
resetMv mv2225[1];
resetMv mv2226[1];
setVector ve2227 = {nen[1,2,3]};
setVector ve2228 = {nen[1,2,3]};
dotVectors mv2226[0] = <ve2227,ve2228>;
resetMv mv2229[1];
setMv mv2229[0] = nen[4];
resetMv mv2230[1];
setMv mv2230[0] = mv2226[0];
calculateMvCoeff mv2225[0] = DIVISION(mv2229,mv2230);
setVector ve2231 = {mv2194[0],mv2202[0],mv2211[0],len[26,30]};
setVector ve2232 = {mv2196[0],mv2205[0],mv2213[0],mv2219[0],mv2225[0]};
dotVectors rc2[22] = <ve2231,ve2232>;

//rc2[23] = ((-((rcPpDual[12] - len[12]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[14] - len[14]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[27])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2233[1];
resetMv mv2234[1];
setVector ve2235 = {rcPpDual[12],len[-12]};
dotVectors mv2234[0] = <ve2235>;
setMv mv2233[0] = mv2234[-0];
resetMv mv2236[1];
resetMv mv2237[1];
setVector ve2238 = {nen[1,2,3]};
setVector ve2239 = {nen[1,2,3]};
dotVectors mv2237[0] = <ve2238,ve2239>;
resetMv mv2240[1];
setMv mv2240[0] = nen[3];
resetMv mv2241[1];
setMv mv2241[0] = mv2237[0];
calculateMvCoeff mv2236[0] = DIVISION(mv2240,mv2241);
resetMv mv2242[1];
setVector ve2243 = {rcPpDual[14],len[-14]};
dotVectors mv2242[0] = <ve2243>;
resetMv mv2244[1];
resetMv mv2245[1];
setVector ve2246 = {nen[1,2,3]};
setVector ve2247 = {nen[1,2,3]};
dotVectors mv2245[0] = <ve2246,ve2247>;
resetMv mv2248[1];
setMv mv2248[0] = nen[2];
resetMv mv2249[1];
setMv mv2249[0] = mv2245[0];
calculateMvCoeff mv2244[0] = DIVISION(mv2248,mv2249);
resetMv mv2250[1];
resetMv mv2251[1];
setVector ve2252 = {nen[1,2,3]};
setVector ve2253 = {nen[1,2,3]};
dotVectors mv2251[0] = <ve2252,ve2253>;
resetMv mv2254[1];
setMv mv2254[0] = nen[1];
resetMv mv2255[1];
setMv mv2255[0] = mv2251[0];
calculateMvCoeff mv2250[0] = DIVISION(mv2254,mv2255);
setVector ve2256 = {mv2233[0],mv2242[0],len[27]};
setVector ve2257 = {mv2236[0],mv2244[0],mv2250[0]};
dotVectors rc2[23] = <ve2256,ve2257>;

//rc2[24] = (((-((rcPpDual[12] - len[12]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] - len[15]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[28])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[30])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2258[1];
resetMv mv2259[1];
setVector ve2260 = {rcPpDual[12],len[-12]};
dotVectors mv2259[0] = <ve2260>;
setMv mv2258[0] = mv2259[-0];
resetMv mv2261[1];
resetMv mv2262[1];
setVector ve2263 = {nen[1,2,3]};
setVector ve2264 = {nen[1,2,3]};
dotVectors mv2262[0] = <ve2263,ve2264>;
resetMv mv2265[1];
setMv mv2265[0] = nen[4];
resetMv mv2266[1];
setMv mv2266[0] = mv2262[0];
calculateMvCoeff mv2261[0] = DIVISION(mv2265,mv2266);
resetMv mv2267[1];
setVector ve2268 = {rcPpDual[15],len[-15]};
dotVectors mv2267[0] = <ve2268>;
resetMv mv2269[1];
resetMv mv2270[1];
setVector ve2271 = {nen[1,2,3]};
setVector ve2272 = {nen[1,2,3]};
dotVectors mv2270[0] = <ve2271,ve2272>;
resetMv mv2273[1];
setMv mv2273[0] = nen[2];
resetMv mv2274[1];
setMv mv2274[0] = mv2270[0];
calculateMvCoeff mv2269[0] = DIVISION(mv2273,mv2274);
resetMv mv2275[1];
resetMv mv2276[1];
setVector ve2277 = {nen[1,2,3]};
setVector ve2278 = {nen[1,2,3]};
dotVectors mv2276[0] = <ve2277,ve2278>;
resetMv mv2279[1];
setMv mv2279[0] = nen[1];
resetMv mv2280[1];
setMv mv2280[0] = mv2276[0];
calculateMvCoeff mv2275[0] = DIVISION(mv2279,mv2280);
resetMv mv2281[1];
resetMv mv2282[1];
setVector ve2283 = {nen[1,2,3]};
setVector ve2284 = {nen[1,2,3]};
dotVectors mv2282[0] = <ve2283,ve2284>;
resetMv mv2285[1];
setMv mv2285[0] = nen[3];
resetMv mv2286[1];
setMv mv2286[0] = mv2282[0];
calculateMvCoeff mv2281[0] = DIVISION(mv2285,mv2286);
setVector ve2287 = {mv2258[0],mv2267[0],len[28,-30]};
setVector ve2288 = {mv2261[0],mv2269[0],mv2275[0],mv2281[0]};
dotVectors rc2[24] = <ve2287,ve2288>;

//rc2[25] = (((-((rcPpDual[14] - len[14]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] - len[15]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[29])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[30])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2289[1];
resetMv mv2290[1];
setVector ve2291 = {rcPpDual[14],len[-14]};
dotVectors mv2290[0] = <ve2291>;
setMv mv2289[0] = mv2290[-0];
resetMv mv2292[1];
resetMv mv2293[1];
setVector ve2294 = {nen[1,2,3]};
setVector ve2295 = {nen[1,2,3]};
dotVectors mv2293[0] = <ve2294,ve2295>;
resetMv mv2296[1];
setMv mv2296[0] = nen[4];
resetMv mv2297[1];
setMv mv2297[0] = mv2293[0];
calculateMvCoeff mv2292[0] = DIVISION(mv2296,mv2297);
resetMv mv2298[1];
setVector ve2299 = {rcPpDual[15],len[-15]};
dotVectors mv2298[0] = <ve2299>;
resetMv mv2300[1];
resetMv mv2301[1];
setVector ve2302 = {nen[1,2,3]};
setVector ve2303 = {nen[1,2,3]};
dotVectors mv2301[0] = <ve2302,ve2303>;
resetMv mv2304[1];
setMv mv2304[0] = nen[3];
resetMv mv2305[1];
setMv mv2305[0] = mv2301[0];
calculateMvCoeff mv2300[0] = DIVISION(mv2304,mv2305);
resetMv mv2306[1];
resetMv mv2307[1];
setVector ve2308 = {nen[1,2,3]};
setVector ve2309 = {nen[1,2,3]};
dotVectors mv2307[0] = <ve2308,ve2309>;
resetMv mv2310[1];
setMv mv2310[0] = nen[1];
resetMv mv2311[1];
setMv mv2311[0] = mv2307[0];
calculateMvCoeff mv2306[0] = DIVISION(mv2310,mv2311);
resetMv mv2312[1];
resetMv mv2313[1];
setVector ve2314 = {nen[1,2,3]};
setVector ve2315 = {nen[1,2,3]};
dotVectors mv2313[0] = <ve2314,ve2315>;
resetMv mv2316[1];
setMv mv2316[0] = nen[2];
resetMv mv2317[1];
setMv mv2317[0] = mv2313[0];
calculateMvCoeff mv2312[0] = DIVISION(mv2316,mv2317);
setVector ve2318 = {mv2289[0],mv2298[0],len[29,30]};
setVector ve2319 = {mv2292[0],mv2300[0],mv2306[0],mv2312[0]};
dotVectors rc2[25] = <ve2318,ve2319>;

//rc2[26] = (((((-(len[16])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[17])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[19])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[22])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[31])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2320[1];
resetMv mv2321[1];
setVector ve2322 = {nen[1,2,3]};
setVector ve2323 = {nen[1,2,3]};
dotVectors mv2321[0] = <ve2322,ve2323>;
resetMv mv2324[1];
setMv mv2324[0] = nen[4];
resetMv mv2325[1];
setMv mv2325[0] = mv2321[0];
calculateMvCoeff mv2320[0] = DIVISION(mv2324,mv2325);
resetMv mv2326[1];
resetMv mv2327[1];
setVector ve2328 = {nen[1,2,3]};
setVector ve2329 = {nen[1,2,3]};
dotVectors mv2327[0] = <ve2328,ve2329>;
resetMv mv2330[1];
setMv mv2330[0] = nen[3];
resetMv mv2331[1];
setMv mv2331[0] = mv2327[0];
calculateMvCoeff mv2326[0] = DIVISION(mv2330,mv2331);
resetMv mv2332[1];
resetMv mv2333[1];
setVector ve2334 = {nen[1,2,3]};
setVector ve2335 = {nen[1,2,3]};
dotVectors mv2333[0] = <ve2334,ve2335>;
resetMv mv2336[1];
setMv mv2336[0] = nen[2];
resetMv mv2337[1];
setMv mv2337[0] = mv2333[0];
calculateMvCoeff mv2332[0] = DIVISION(mv2336,mv2337);
resetMv mv2338[1];
resetMv mv2339[1];
setVector ve2340 = {nen[1,2,3]};
setVector ve2341 = {nen[1,2,3]};
dotVectors mv2339[0] = <ve2340,ve2341>;
resetMv mv2342[1];
setMv mv2342[0] = nen[1];
resetMv mv2343[1];
setMv mv2343[0] = mv2339[0];
calculateMvCoeff mv2338[0] = DIVISION(mv2342,mv2343);
resetMv mv2344[1];
resetMv mv2345[1];
setVector ve2346 = {nen[1,2,3]};
setVector ve2347 = {nen[1,2,3]};
dotVectors mv2345[0] = <ve2346,ve2347>;
resetMv mv2348[1];
setMv mv2348[0] = nen[4];
resetMv mv2349[1];
setMv mv2349[0] = mv2345[0];
calculateMvCoeff mv2344[0] = DIVISION(mv2348,mv2349);
setVector ve2350 = {len[-16,17,-19,22,31]};
setVector ve2351 = {mv2320[0],mv2326[0],mv2332[0],mv2338[0],mv2344[0]};
dotVectors rc2[26] = <ve2350,ve2351>;

//rc2[27] = ((-((-(len[18])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[20])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[23])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2352[1];
resetMv mv2353[1];
setVector ve2354 = {nen[1,2,3]};
setVector ve2355 = {nen[1,2,3]};
dotVectors mv2353[0] = <ve2354,ve2355>;
resetMv mv2356[1];
setMv mv2356[0] = nen[3];
resetMv mv2357[1];
setMv mv2357[0] = mv2353[0];
calculateMvCoeff mv2352[0] = DIVISION(mv2356,mv2357);
resetMv mv2358[1];
resetMv mv2359[1];
setVector ve2360 = {nen[1,2,3]};
setVector ve2361 = {nen[1,2,3]};
dotVectors mv2359[0] = <ve2360,ve2361>;
resetMv mv2362[1];
setMv mv2362[0] = nen[2];
resetMv mv2363[1];
setMv mv2363[0] = mv2359[0];
calculateMvCoeff mv2358[0] = DIVISION(mv2362,mv2363);
resetMv mv2364[1];
resetMv mv2365[1];
setVector ve2366 = {nen[1,2,3]};
setVector ve2367 = {nen[1,2,3]};
dotVectors mv2365[0] = <ve2366,ve2367>;
resetMv mv2368[1];
setMv mv2368[0] = nen[1];
resetMv mv2369[1];
setMv mv2369[0] = mv2365[0];
calculateMvCoeff mv2364[0] = DIVISION(mv2368,mv2369);
setVector ve2370 = {len[18,-20,23]};
setVector ve2371 = {mv2352[0],mv2358[0],mv2364[0]};
dotVectors rc2[27] = <ve2370,ve2371>;

//rc2[28] = (((-((-(len[18])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[21])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[24])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[31])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2372[1];
resetMv mv2373[1];
setVector ve2374 = {nen[1,2,3]};
setVector ve2375 = {nen[1,2,3]};
dotVectors mv2373[0] = <ve2374,ve2375>;
resetMv mv2376[1];
setMv mv2376[0] = nen[4];
resetMv mv2377[1];
setMv mv2377[0] = mv2373[0];
calculateMvCoeff mv2372[0] = DIVISION(mv2376,mv2377);
resetMv mv2378[1];
resetMv mv2379[1];
setVector ve2380 = {nen[1,2,3]};
setVector ve2381 = {nen[1,2,3]};
dotVectors mv2379[0] = <ve2380,ve2381>;
resetMv mv2382[1];
setMv mv2382[0] = nen[2];
resetMv mv2383[1];
setMv mv2383[0] = mv2379[0];
calculateMvCoeff mv2378[0] = DIVISION(mv2382,mv2383);
resetMv mv2384[1];
resetMv mv2385[1];
setVector ve2386 = {nen[1,2,3]};
setVector ve2387 = {nen[1,2,3]};
dotVectors mv2385[0] = <ve2386,ve2387>;
resetMv mv2388[1];
setMv mv2388[0] = nen[1];
resetMv mv2389[1];
setMv mv2389[0] = mv2385[0];
calculateMvCoeff mv2384[0] = DIVISION(mv2388,mv2389);
resetMv mv2390[1];
resetMv mv2391[1];
setVector ve2392 = {nen[1,2,3]};
setVector ve2393 = {nen[1,2,3]};
dotVectors mv2391[0] = <ve2392,ve2393>;
resetMv mv2394[1];
setMv mv2394[0] = nen[3];
resetMv mv2395[1];
setMv mv2395[0] = mv2391[0];
calculateMvCoeff mv2390[0] = DIVISION(mv2394,mv2395);
setVector ve2396 = {len[18,-21,24,-31]};
setVector ve2397 = {mv2372[0],mv2378[0],mv2384[0],mv2390[0]};
dotVectors rc2[28] = <ve2396,ve2397>;

//rc2[29] = (((-((-(len[20])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[21])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[25])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[31])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2398[1];
resetMv mv2399[1];
setVector ve2400 = {nen[1,2,3]};
setVector ve2401 = {nen[1,2,3]};
dotVectors mv2399[0] = <ve2400,ve2401>;
resetMv mv2402[1];
setMv mv2402[0] = nen[4];
resetMv mv2403[1];
setMv mv2403[0] = mv2399[0];
calculateMvCoeff mv2398[0] = DIVISION(mv2402,mv2403);
resetMv mv2404[1];
resetMv mv2405[1];
setVector ve2406 = {nen[1,2,3]};
setVector ve2407 = {nen[1,2,3]};
dotVectors mv2405[0] = <ve2406,ve2407>;
resetMv mv2408[1];
setMv mv2408[0] = nen[3];
resetMv mv2409[1];
setMv mv2409[0] = mv2405[0];
calculateMvCoeff mv2404[0] = DIVISION(mv2408,mv2409);
resetMv mv2410[1];
resetMv mv2411[1];
setVector ve2412 = {nen[1,2,3]};
setVector ve2413 = {nen[1,2,3]};
dotVectors mv2411[0] = <ve2412,ve2413>;
resetMv mv2414[1];
setMv mv2414[0] = nen[1];
resetMv mv2415[1];
setMv mv2415[0] = mv2411[0];
calculateMvCoeff mv2410[0] = DIVISION(mv2414,mv2415);
resetMv mv2416[1];
resetMv mv2417[1];
setVector ve2418 = {nen[1,2,3]};
setVector ve2419 = {nen[1,2,3]};
dotVectors mv2417[0] = <ve2418,ve2419>;
resetMv mv2420[1];
setMv mv2420[0] = nen[2];
resetMv mv2421[1];
setMv mv2421[0] = mv2417[0];
calculateMvCoeff mv2416[0] = DIVISION(mv2420,mv2421);
setVector ve2422 = {len[20,-21,25,31]};
setVector ve2423 = {mv2398[0],mv2404[0],mv2410[0],mv2416[0]};
dotVectors rc2[29] = <ve2422,ve2423>;

//rc2[30] = (((-((-(len[23])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[24])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[25])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[31])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2424[1];
resetMv mv2425[1];
setVector ve2426 = {nen[1,2,3]};
setVector ve2427 = {nen[1,2,3]};
dotVectors mv2425[0] = <ve2426,ve2427>;
resetMv mv2428[1];
setMv mv2428[0] = nen[4];
resetMv mv2429[1];
setMv mv2429[0] = mv2425[0];
calculateMvCoeff mv2424[0] = DIVISION(mv2428,mv2429);
resetMv mv2430[1];
resetMv mv2431[1];
setVector ve2432 = {nen[1,2,3]};
setVector ve2433 = {nen[1,2,3]};
dotVectors mv2431[0] = <ve2432,ve2433>;
resetMv mv2434[1];
setMv mv2434[0] = nen[3];
resetMv mv2435[1];
setMv mv2435[0] = mv2431[0];
calculateMvCoeff mv2430[0] = DIVISION(mv2434,mv2435);
resetMv mv2436[1];
resetMv mv2437[1];
setVector ve2438 = {nen[1,2,3]};
setVector ve2439 = {nen[1,2,3]};
dotVectors mv2437[0] = <ve2438,ve2439>;
resetMv mv2440[1];
setMv mv2440[0] = nen[2];
resetMv mv2441[1];
setMv mv2441[0] = mv2437[0];
calculateMvCoeff mv2436[0] = DIVISION(mv2440,mv2441);
resetMv mv2442[1];
resetMv mv2443[1];
setVector ve2444 = {nen[1,2,3]};
setVector ve2445 = {nen[1,2,3]};
dotVectors mv2443[0] = <ve2444,ve2445>;
resetMv mv2446[1];
setMv mv2446[0] = nen[1];
resetMv mv2447[1];
setMv mv2447[0] = mv2443[0];
calculateMvCoeff mv2442[0] = DIVISION(mv2446,mv2447);
setVector ve2448 = {len[23,-24,25,-31]};
setVector ve2449 = {mv2424[0],mv2430[0],mv2436[0],mv2442[0]};
dotVectors rc2[30] = <ve2448,ve2449>;

//rc2[31] = (((-((-(len[27])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[28])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[29])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[30])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2450[1];
resetMv mv2451[1];
setVector ve2452 = {nen[1,2,3]};
setVector ve2453 = {nen[1,2,3]};
dotVectors mv2451[0] = <ve2452,ve2453>;
resetMv mv2454[1];
setMv mv2454[0] = nen[4];
resetMv mv2455[1];
setMv mv2455[0] = mv2451[0];
calculateMvCoeff mv2450[0] = DIVISION(mv2454,mv2455);
resetMv mv2456[1];
resetMv mv2457[1];
setVector ve2458 = {nen[1,2,3]};
setVector ve2459 = {nen[1,2,3]};
dotVectors mv2457[0] = <ve2458,ve2459>;
resetMv mv2460[1];
setMv mv2460[0] = nen[3];
resetMv mv2461[1];
setMv mv2461[0] = mv2457[0];
calculateMvCoeff mv2456[0] = DIVISION(mv2460,mv2461);
resetMv mv2462[1];
resetMv mv2463[1];
setVector ve2464 = {nen[1,2,3]};
setVector ve2465 = {nen[1,2,3]};
dotVectors mv2463[0] = <ve2464,ve2465>;
resetMv mv2466[1];
setMv mv2466[0] = nen[2];
resetMv mv2467[1];
setMv mv2467[0] = mv2463[0];
calculateMvCoeff mv2462[0] = DIVISION(mv2466,mv2467);
resetMv mv2468[1];
resetMv mv2469[1];
setVector ve2470 = {nen[1,2,3]};
setVector ve2471 = {nen[1,2,3]};
dotVectors mv2469[0] = <ve2470,ve2471>;
resetMv mv2472[1];
setMv mv2472[0] = nen[1];
resetMv mv2473[1];
setMv mv2473[0] = mv2469[0];
calculateMvCoeff mv2468[0] = DIVISION(mv2472,mv2473);
setVector ve2474 = {len[27,-28,29,-30]};
setVector ve2475 = {mv2450[0],mv2456[0],mv2462[0],mv2468[0]};
dotVectors rc2[31] = <ve2474,ve2475>;

//rc2N[1] = ((((((((((((((((-(rc2[0])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[2])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[3])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[5])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[6])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[7])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[9])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[10])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[12])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[14])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[16])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[18])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[20])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[23])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[27])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv rc2N[32];
resetMv mv2476[1];
resetMv mv2477[1];
setVector ve2478 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2479 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2477[0] = <ve2478,ve2479>;
resetMv mv2480[1];
setMv mv2480[0] = rc2[-9];
resetMv mv2481[1];
setMv mv2481[0] = mv2477[0];
calculateMvCoeff mv2476[0] = DIVISION(mv2480,mv2481);
resetMv mv2482[1];
resetMv mv2483[1];
setVector ve2484 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2485 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2483[0] = <ve2484,ve2485>;
resetMv mv2486[1];
setMv mv2486[0] = rc2[-5];
resetMv mv2487[1];
setMv mv2487[0] = mv2483[0];
calculateMvCoeff mv2482[0] = DIVISION(mv2486,mv2487);
resetMv mv2488[1];
resetMv mv2489[1];
setVector ve2490 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2491 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2489[0] = <ve2490,ve2491>;
resetMv mv2492[1];
setMv mv2492[0] = rc2[18];
resetMv mv2493[1];
setMv mv2493[0] = mv2489[0];
calculateMvCoeff mv2488[0] = DIVISION(mv2492,mv2493);
resetMv mv2494[1];
resetMv mv2495[1];
setVector ve2496 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2497 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2495[0] = <ve2496,ve2497>;
resetMv mv2498[1];
setMv mv2498[0] = rc2[20];
resetMv mv2499[1];
setMv mv2499[0] = mv2495[0];
calculateMvCoeff mv2494[0] = DIVISION(mv2498,mv2499);
resetMv mv2500[1];
resetMv mv2501[1];
setVector ve2502 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2503 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2501[0] = <ve2502,ve2503>;
resetMv mv2504[1];
setMv mv2504[0] = rc2[21];
resetMv mv2505[1];
setMv mv2505[0] = mv2501[0];
calculateMvCoeff mv2500[0] = DIVISION(mv2504,mv2505);
resetMv mv2506[1];
resetMv mv2507[1];
setVector ve2508 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2509 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2507[0] = <ve2508,ve2509>;
resetMv mv2510[1];
setMv mv2510[0] = rc2[-12];
resetMv mv2511[1];
setMv mv2511[0] = mv2507[0];
calculateMvCoeff mv2506[0] = DIVISION(mv2510,mv2511);
resetMv mv2512[1];
resetMv mv2513[1];
setVector ve2514 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2515 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2513[0] = <ve2514,ve2515>;
resetMv mv2516[1];
setMv mv2516[0] = rc2[-14];
resetMv mv2517[1];
setMv mv2517[0] = mv2513[0];
calculateMvCoeff mv2512[0] = DIVISION(mv2516,mv2517);
resetMv mv2518[1];
resetMv mv2519[1];
setVector ve2520 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2521 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2519[0] = <ve2520,ve2521>;
resetMv mv2522[1];
setMv mv2522[0] = rc2[-15];
resetMv mv2523[1];
setMv mv2523[0] = mv2519[0];
calculateMvCoeff mv2518[0] = DIVISION(mv2522,mv2523);
resetMv mv2524[1];
resetMv mv2525[1];
setVector ve2526 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2527 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2525[0] = <ve2526,ve2527>;
resetMv mv2528[1];
setMv mv2528[0] = rc2[27];
resetMv mv2529[1];
setMv mv2529[0] = mv2525[0];
calculateMvCoeff mv2524[0] = DIVISION(mv2528,mv2529);
resetMv mv2530[1];
resetMv mv2531[1];
setVector ve2532 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2533 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2531[0] = <ve2532,ve2533>;
resetMv mv2534[1];
setMv mv2534[0] = rc2[28];
resetMv mv2535[1];
setMv mv2535[0] = mv2531[0];
calculateMvCoeff mv2530[0] = DIVISION(mv2534,mv2535);
resetMv mv2536[1];
resetMv mv2537[1];
setVector ve2538 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2539 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2537[0] = <ve2538,ve2539>;
resetMv mv2540[1];
setMv mv2540[0] = rc2[29];
resetMv mv2541[1];
setMv mv2541[0] = mv2537[0];
calculateMvCoeff mv2536[0] = DIVISION(mv2540,mv2541);
resetMv mv2542[1];
resetMv mv2543[1];
setVector ve2544 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2545 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2543[0] = <ve2544,ve2545>;
resetMv mv2546[1];
setMv mv2546[0] = rc2[23];
resetMv mv2547[1];
setMv mv2547[0] = mv2543[0];
calculateMvCoeff mv2542[0] = DIVISION(mv2546,mv2547);
resetMv mv2548[1];
resetMv mv2549[1];
setVector ve2550 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2551 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2549[0] = <ve2550,ve2551>;
resetMv mv2552[1];
setMv mv2552[0] = rc2[24];
resetMv mv2553[1];
setMv mv2553[0] = mv2549[0];
calculateMvCoeff mv2548[0] = DIVISION(mv2552,mv2553);
resetMv mv2554[1];
resetMv mv2555[1];
setVector ve2556 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2557 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2555[0] = <ve2556,ve2557>;
resetMv mv2558[1];
setMv mv2558[0] = rc2[25];
resetMv mv2559[1];
setMv mv2559[0] = mv2555[0];
calculateMvCoeff mv2554[0] = DIVISION(mv2558,mv2559);
resetMv mv2560[1];
resetMv mv2561[1];
setVector ve2562 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2563 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2561[0] = <ve2562,ve2563>;
resetMv mv2564[1];
setMv mv2564[0] = rc2[-31];
resetMv mv2565[1];
setMv mv2565[0] = mv2561[0];
calculateMvCoeff mv2560[0] = DIVISION(mv2564,mv2565);
resetMv mv2566[1];
resetMv mv2567[1];
setVector ve2568 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2569 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2567[0] = <ve2568,ve2569>;
resetMv mv2570[1];
setMv mv2570[0] = rc2[30];
resetMv mv2571[1];
setMv mv2571[0] = mv2567[0];
calculateMvCoeff mv2566[0] = DIVISION(mv2570,mv2571);
setVector ve2572 = {rc2[-0,-1,2,3,-5,-6,-7,9,10,-12,-14,16,-18,-20,23,-27]};
setVector ve2573 = {mv2476[0],mv2482[0],mv2488[0],mv2494[0],mv2500[0],mv2506[0],mv2512[0],mv2518[0],mv2524[0],mv2530[0],mv2536[0],mv2542[0],mv2548[0],mv2554[0],mv2560[0],mv2566[0]};
dotVectors rc2N[1] = <ve2572,ve2573>;

//rc2N[2] = ((((((((((((((((-(rc2[0])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[2])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[3])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[5])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[6])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[7])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[9])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[10])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[12])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[14])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[16])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[18])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[20])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[23])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[27])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))
resetMv mv2574[1];
resetMv mv2575[1];
setVector ve2576 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2577 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2575[0] = <ve2576,ve2577>;
resetMv mv2578[1];
setMv mv2578[0] = rc2[-12];
resetMv mv2579[1];
setMv mv2579[0] = mv2575[0];
calculateMvCoeff mv2574[0] = DIVISION(mv2578,mv2579);
resetMv mv2580[1];
resetMv mv2581[1];
setVector ve2582 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2583 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2581[0] = <ve2582,ve2583>;
resetMv mv2584[1];
setMv mv2584[0] = rc2[18];
resetMv mv2585[1];
setMv mv2585[0] = mv2581[0];
calculateMvCoeff mv2580[0] = DIVISION(mv2584,mv2585);
resetMv mv2586[1];
resetMv mv2587[1];
setVector ve2588 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2589 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2587[0] = <ve2588,ve2589>;
resetMv mv2590[1];
setMv mv2590[0] = rc2[-5];
resetMv mv2591[1];
setMv mv2591[0] = mv2587[0];
calculateMvCoeff mv2586[0] = DIVISION(mv2590,mv2591);
resetMv mv2592[1];
resetMv mv2593[1];
setVector ve2594 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2595 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2593[0] = <ve2594,ve2595>;
resetMv mv2596[1];
setMv mv2596[0] = rc2[23];
resetMv mv2597[1];
setMv mv2597[0] = mv2593[0];
calculateMvCoeff mv2592[0] = DIVISION(mv2596,mv2597);
resetMv mv2598[1];
resetMv mv2599[1];
setVector ve2600 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2601 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2599[0] = <ve2600,ve2601>;
resetMv mv2602[1];
setMv mv2602[0] = rc2[24];
resetMv mv2603[1];
setMv mv2603[0] = mv2599[0];
calculateMvCoeff mv2598[0] = DIVISION(mv2602,mv2603);
resetMv mv2604[1];
resetMv mv2605[1];
setVector ve2606 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2607 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2605[0] = <ve2606,ve2607>;
resetMv mv2608[1];
setMv mv2608[0] = rc2[-9];
resetMv mv2609[1];
setMv mv2609[0] = mv2605[0];
calculateMvCoeff mv2604[0] = DIVISION(mv2608,mv2609);
resetMv mv2610[1];
resetMv mv2611[1];
setVector ve2612 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2613 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2611[0] = <ve2612,ve2613>;
resetMv mv2614[1];
setMv mv2614[0] = rc2[27];
resetMv mv2615[1];
setMv mv2615[0] = mv2611[0];
calculateMvCoeff mv2610[0] = DIVISION(mv2614,mv2615);
resetMv mv2616[1];
resetMv mv2617[1];
setVector ve2618 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2619 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2617[0] = <ve2618,ve2619>;
resetMv mv2620[1];
setMv mv2620[0] = rc2[28];
resetMv mv2621[1];
setMv mv2621[0] = mv2617[0];
calculateMvCoeff mv2616[0] = DIVISION(mv2620,mv2621);
resetMv mv2622[1];
resetMv mv2623[1];
setVector ve2624 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2625 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2623[0] = <ve2624,ve2625>;
resetMv mv2626[1];
setMv mv2626[0] = rc2[-14];
resetMv mv2627[1];
setMv mv2627[0] = mv2623[0];
calculateMvCoeff mv2622[0] = DIVISION(mv2626,mv2627);
resetMv mv2628[1];
resetMv mv2629[1];
setVector ve2630 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2631 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2629[0] = <ve2630,ve2631>;
resetMv mv2632[1];
setMv mv2632[0] = rc2[-15];
resetMv mv2633[1];
setMv mv2633[0] = mv2629[0];
calculateMvCoeff mv2628[0] = DIVISION(mv2632,mv2633);
resetMv mv2634[1];
resetMv mv2635[1];
setVector ve2636 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2637 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2635[0] = <ve2636,ve2637>;
resetMv mv2638[1];
setMv mv2638[0] = rc2[30];
resetMv mv2639[1];
setMv mv2639[0] = mv2635[0];
calculateMvCoeff mv2634[0] = DIVISION(mv2638,mv2639);
resetMv mv2640[1];
resetMv mv2641[1];
setVector ve2642 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2643 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2641[0] = <ve2642,ve2643>;
resetMv mv2644[1];
setMv mv2644[0] = rc2[20];
resetMv mv2645[1];
setMv mv2645[0] = mv2641[0];
calculateMvCoeff mv2640[0] = DIVISION(mv2644,mv2645);
resetMv mv2646[1];
resetMv mv2647[1];
setVector ve2648 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2649 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2647[0] = <ve2648,ve2649>;
resetMv mv2650[1];
setMv mv2650[0] = rc2[21];
resetMv mv2651[1];
setMv mv2651[0] = mv2647[0];
calculateMvCoeff mv2646[0] = DIVISION(mv2650,mv2651);
resetMv mv2652[1];
resetMv mv2653[1];
setVector ve2654 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2655 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2653[0] = <ve2654,ve2655>;
resetMv mv2656[1];
setMv mv2656[0] = rc2[-31];
resetMv mv2657[1];
setMv mv2657[0] = mv2653[0];
calculateMvCoeff mv2652[0] = DIVISION(mv2656,mv2657);
resetMv mv2658[1];
resetMv mv2659[1];
setVector ve2660 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2661 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2659[0] = <ve2660,ve2661>;
resetMv mv2662[1];
setMv mv2662[0] = rc2[25];
resetMv mv2663[1];
setMv mv2663[0] = mv2659[0];
calculateMvCoeff mv2658[0] = DIVISION(mv2662,mv2663);
resetMv mv2664[1];
resetMv mv2665[1];
setVector ve2666 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2667 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2665[0] = <ve2666,ve2667>;
resetMv mv2668[1];
setMv mv2668[0] = rc2[29];
resetMv mv2669[1];
setMv mv2669[0] = mv2665[0];
calculateMvCoeff mv2664[0] = DIVISION(mv2668,mv2669);
setVector ve2670 = {rc2[-0,-1,-2,3,-5,6,-7,9,-10,12,-14,-16,18,-20,-23,27]};
setVector ve2671 = {mv2574[0],mv2580[0],mv2586[0],mv2592[0],mv2598[0],mv2604[0],mv2610[0],mv2616[0],mv2622[0],mv2628[0],mv2634[0],mv2640[0],mv2646[0],mv2652[0],mv2658[0],mv2664[0]};
dotVectors rc2N[2] = <ve2670,ve2671>;

//rc2N[3] = ((((((((((((((((-(rc2[0])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[2])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[3])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[5])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[6])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[7])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[9])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[10])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[12])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[14])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[16])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[18])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[20])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[23])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[27])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv mv2672[1];
resetMv mv2673[1];
setVector ve2674 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2675 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2673[0] = <ve2674,ve2675>;
resetMv mv2676[1];
setMv mv2676[0] = rc2[-14];
resetMv mv2677[1];
setMv mv2677[0] = mv2673[0];
calculateMvCoeff mv2672[0] = DIVISION(mv2676,mv2677);
resetMv mv2678[1];
resetMv mv2679[1];
setVector ve2680 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2681 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2679[0] = <ve2680,ve2681>;
resetMv mv2682[1];
setMv mv2682[0] = rc2[20];
resetMv mv2683[1];
setMv mv2683[0] = mv2679[0];
calculateMvCoeff mv2678[0] = DIVISION(mv2682,mv2683);
resetMv mv2684[1];
resetMv mv2685[1];
setVector ve2686 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2687 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2685[0] = <ve2686,ve2687>;
resetMv mv2688[1];
setMv mv2688[0] = rc2[23];
resetMv mv2689[1];
setMv mv2689[0] = mv2685[0];
calculateMvCoeff mv2684[0] = DIVISION(mv2688,mv2689);
resetMv mv2690[1];
resetMv mv2691[1];
setVector ve2692 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2693 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2691[0] = <ve2692,ve2693>;
resetMv mv2694[1];
setMv mv2694[0] = rc2[-5];
resetMv mv2695[1];
setMv mv2695[0] = mv2691[0];
calculateMvCoeff mv2690[0] = DIVISION(mv2694,mv2695);
resetMv mv2696[1];
resetMv mv2697[1];
setVector ve2698 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2699 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2697[0] = <ve2698,ve2699>;
resetMv mv2700[1];
setMv mv2700[0] = rc2[25];
resetMv mv2701[1];
setMv mv2701[0] = mv2697[0];
calculateMvCoeff mv2696[0] = DIVISION(mv2700,mv2701);
resetMv mv2702[1];
resetMv mv2703[1];
setVector ve2704 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2705 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2703[0] = <ve2704,ve2705>;
resetMv mv2706[1];
setMv mv2706[0] = rc2[27];
resetMv mv2707[1];
setMv mv2707[0] = mv2703[0];
calculateMvCoeff mv2702[0] = DIVISION(mv2706,mv2707);
resetMv mv2708[1];
resetMv mv2709[1];
setVector ve2710 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2711 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2709[0] = <ve2710,ve2711>;
resetMv mv2712[1];
setMv mv2712[0] = rc2[-9];
resetMv mv2713[1];
setMv mv2713[0] = mv2709[0];
calculateMvCoeff mv2708[0] = DIVISION(mv2712,mv2713);
resetMv mv2714[1];
resetMv mv2715[1];
setVector ve2716 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2717 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2715[0] = <ve2716,ve2717>;
resetMv mv2718[1];
setMv mv2718[0] = rc2[29];
resetMv mv2719[1];
setMv mv2719[0] = mv2715[0];
calculateMvCoeff mv2714[0] = DIVISION(mv2718,mv2719);
resetMv mv2720[1];
resetMv mv2721[1];
setVector ve2722 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2723 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2721[0] = <ve2722,ve2723>;
resetMv mv2724[1];
setMv mv2724[0] = rc2[-12];
resetMv mv2725[1];
setMv mv2725[0] = mv2721[0];
calculateMvCoeff mv2720[0] = DIVISION(mv2724,mv2725);
resetMv mv2726[1];
resetMv mv2727[1];
setVector ve2728 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2729 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2727[0] = <ve2728,ve2729>;
resetMv mv2730[1];
setMv mv2730[0] = rc2[30];
resetMv mv2731[1];
setMv mv2731[0] = mv2727[0];
calculateMvCoeff mv2726[0] = DIVISION(mv2730,mv2731);
resetMv mv2732[1];
resetMv mv2733[1];
setVector ve2734 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2735 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2733[0] = <ve2734,ve2735>;
resetMv mv2736[1];
setMv mv2736[0] = rc2[-15];
resetMv mv2737[1];
setMv mv2737[0] = mv2733[0];
calculateMvCoeff mv2732[0] = DIVISION(mv2736,mv2737);
resetMv mv2738[1];
resetMv mv2739[1];
setVector ve2740 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2741 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2739[0] = <ve2740,ve2741>;
resetMv mv2742[1];
setMv mv2742[0] = rc2[18];
resetMv mv2743[1];
setMv mv2743[0] = mv2739[0];
calculateMvCoeff mv2738[0] = DIVISION(mv2742,mv2743);
resetMv mv2744[1];
resetMv mv2745[1];
setVector ve2746 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2747 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2745[0] = <ve2746,ve2747>;
resetMv mv2748[1];
setMv mv2748[0] = rc2[-31];
resetMv mv2749[1];
setMv mv2749[0] = mv2745[0];
calculateMvCoeff mv2744[0] = DIVISION(mv2748,mv2749);
resetMv mv2750[1];
resetMv mv2751[1];
setVector ve2752 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2753 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2751[0] = <ve2752,ve2753>;
resetMv mv2754[1];
setMv mv2754[0] = rc2[21];
resetMv mv2755[1];
setMv mv2755[0] = mv2751[0];
calculateMvCoeff mv2750[0] = DIVISION(mv2754,mv2755);
resetMv mv2756[1];
resetMv mv2757[1];
setVector ve2758 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2759 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2757[0] = <ve2758,ve2759>;
resetMv mv2760[1];
setMv mv2760[0] = rc2[24];
resetMv mv2761[1];
setMv mv2761[0] = mv2757[0];
calculateMvCoeff mv2756[0] = DIVISION(mv2760,mv2761);
resetMv mv2762[1];
resetMv mv2763[1];
setVector ve2764 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2765 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2763[0] = <ve2764,ve2765>;
resetMv mv2766[1];
setMv mv2766[0] = rc2[28];
resetMv mv2767[1];
setMv mv2767[0] = mv2763[0];
calculateMvCoeff mv2762[0] = DIVISION(mv2766,mv2767);
setVector ve2768 = {rc2[-0,-1,-2,-3,-5,6,7,9,10,12,14,16,18,20,23,-27]};
setVector ve2769 = {mv2672[0],mv2678[0],mv2684[0],mv2690[0],mv2696[0],mv2702[0],mv2708[0],mv2714[0],mv2720[0],mv2726[0],mv2732[0],mv2738[0],mv2744[0],mv2750[0],mv2756[0],mv2762[0]};
dotVectors rc2N[3] = <ve2768,ve2769>;

//rc2N[4] = ((((((((((((((((((((((((-(rc2[0])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[2])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[3])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[4])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[6])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[7])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[8])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[10])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[11])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[13])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[15])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[16])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[17])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[19])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[21])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[22])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[24])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[25])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[26])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[28])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[29])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[30])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[31])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv mv2770[1];
resetMv mv2771[1];
setVector ve2772 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2773 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2771[0] = <ve2772,ve2773>;
resetMv mv2774[1];
setMv mv2774[0] = rc2[-15];
resetMv mv2775[1];
setMv mv2775[0] = mv2771[0];
calculateMvCoeff mv2770[0] = DIVISION(mv2774,mv2775);
resetMv mv2776[1];
resetMv mv2777[1];
setVector ve2778 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2779 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2777[0] = <ve2778,ve2779>;
resetMv mv2780[1];
setMv mv2780[0] = rc2[21];
resetMv mv2781[1];
setMv mv2781[0] = mv2777[0];
calculateMvCoeff mv2776[0] = DIVISION(mv2780,mv2781);
resetMv mv2782[1];
resetMv mv2783[1];
setVector ve2784 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2785 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2783[0] = <ve2784,ve2785>;
resetMv mv2786[1];
setMv mv2786[0] = rc2[24];
resetMv mv2787[1];
setMv mv2787[0] = mv2783[0];
calculateMvCoeff mv2782[0] = DIVISION(mv2786,mv2787);
resetMv mv2788[1];
resetMv mv2789[1];
setVector ve2790 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2791 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2789[0] = <ve2790,ve2791>;
resetMv mv2792[1];
setMv mv2792[0] = rc2[25];
resetMv mv2793[1];
setMv mv2793[0] = mv2789[0];
calculateMvCoeff mv2788[0] = DIVISION(mv2792,mv2793);
resetMv mv2794[1];
resetMv mv2795[1];
setVector ve2796 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2797 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2795[0] = <ve2796,ve2797>;
resetMv mv2798[1];
setMv mv2798[0] = rc2[-5];
resetMv mv2799[1];
setMv mv2799[0] = mv2795[0];
calculateMvCoeff mv2794[0] = DIVISION(mv2798,mv2799);
resetMv mv2800[1];
resetMv mv2801[1];
setVector ve2802 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2803 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2801[0] = <ve2802,ve2803>;
resetMv mv2804[1];
setMv mv2804[0] = rc2[28];
resetMv mv2805[1];
setMv mv2805[0] = mv2801[0];
calculateMvCoeff mv2800[0] = DIVISION(mv2804,mv2805);
resetMv mv2806[1];
resetMv mv2807[1];
setVector ve2808 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2809 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2807[0] = <ve2808,ve2809>;
resetMv mv2810[1];
setMv mv2810[0] = rc2[29];
resetMv mv2811[1];
setMv mv2811[0] = mv2807[0];
calculateMvCoeff mv2806[0] = DIVISION(mv2810,mv2811);
resetMv mv2812[1];
resetMv mv2813[1];
setVector ve2814 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2815 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2813[0] = <ve2814,ve2815>;
resetMv mv2816[1];
setMv mv2816[0] = rc2[-9];
resetMv mv2817[1];
setMv mv2817[0] = mv2813[0];
calculateMvCoeff mv2812[0] = DIVISION(mv2816,mv2817);
resetMv mv2818[1];
resetMv mv2819[1];
setVector ve2820 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2821 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2819[0] = <ve2820,ve2821>;
resetMv mv2822[1];
setMv mv2822[0] = rc2[30];
resetMv mv2823[1];
setMv mv2823[0] = mv2819[0];
calculateMvCoeff mv2818[0] = DIVISION(mv2822,mv2823);
resetMv mv2824[1];
resetMv mv2825[1];
setVector ve2826 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2827 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2825[0] = <ve2826,ve2827>;
resetMv mv2828[1];
setMv mv2828[0] = rc2[-12];
resetMv mv2829[1];
setMv mv2829[0] = mv2825[0];
calculateMvCoeff mv2824[0] = DIVISION(mv2828,mv2829);
resetMv mv2830[1];
resetMv mv2831[1];
setVector ve2832 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2833 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2831[0] = <ve2832,ve2833>;
resetMv mv2834[1];
setMv mv2834[0] = rc2[-14];
resetMv mv2835[1];
setMv mv2835[0] = mv2831[0];
calculateMvCoeff mv2830[0] = DIVISION(mv2834,mv2835);
resetMv mv2836[1];
resetMv mv2837[1];
setVector ve2838 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2839 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2837[0] = <ve2838,ve2839>;
resetMv mv2840[1];
setMv mv2840[0] = rc2[-15];
resetMv mv2841[1];
setMv mv2841[0] = mv2837[0];
calculateMvCoeff mv2836[0] = DIVISION(mv2840,mv2841);
resetMv mv2842[1];
resetMv mv2843[1];
setVector ve2844 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2845 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2843[0] = <ve2844,ve2845>;
resetMv mv2846[1];
setMv mv2846[0] = rc2[-31];
resetMv mv2847[1];
setMv mv2847[0] = mv2843[0];
calculateMvCoeff mv2842[0] = DIVISION(mv2846,mv2847);
resetMv mv2848[1];
resetMv mv2849[1];
setVector ve2850 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2851 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2849[0] = <ve2850,ve2851>;
resetMv mv2852[1];
setMv mv2852[0] = rc2[18];
resetMv mv2853[1];
setMv mv2853[0] = mv2849[0];
calculateMvCoeff mv2848[0] = DIVISION(mv2852,mv2853);
resetMv mv2854[1];
resetMv mv2855[1];
setVector ve2856 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2857 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2855[0] = <ve2856,ve2857>;
resetMv mv2858[1];
setMv mv2858[0] = rc2[20];
resetMv mv2859[1];
setMv mv2859[0] = mv2855[0];
calculateMvCoeff mv2854[0] = DIVISION(mv2858,mv2859);
resetMv mv2860[1];
resetMv mv2861[1];
setVector ve2862 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2863 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2861[0] = <ve2862,ve2863>;
resetMv mv2864[1];
setMv mv2864[0] = rc2[21];
resetMv mv2865[1];
setMv mv2865[0] = mv2861[0];
calculateMvCoeff mv2860[0] = DIVISION(mv2864,mv2865);
resetMv mv2866[1];
resetMv mv2867[1];
setVector ve2868 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2869 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2867[0] = <ve2868,ve2869>;
resetMv mv2870[1];
setMv mv2870[0] = rc2[23];
resetMv mv2871[1];
setMv mv2871[0] = mv2867[0];
calculateMvCoeff mv2866[0] = DIVISION(mv2870,mv2871);
resetMv mv2872[1];
resetMv mv2873[1];
setVector ve2874 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2875 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2873[0] = <ve2874,ve2875>;
resetMv mv2876[1];
setMv mv2876[0] = rc2[24];
resetMv mv2877[1];
setMv mv2877[0] = mv2873[0];
calculateMvCoeff mv2872[0] = DIVISION(mv2876,mv2877);
resetMv mv2878[1];
resetMv mv2879[1];
setVector ve2880 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2881 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2879[0] = <ve2880,ve2881>;
resetMv mv2882[1];
setMv mv2882[0] = rc2[25];
resetMv mv2883[1];
setMv mv2883[0] = mv2879[0];
calculateMvCoeff mv2878[0] = DIVISION(mv2882,mv2883);
resetMv mv2884[1];
resetMv mv2885[1];
setVector ve2886 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2887 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2885[0] = <ve2886,ve2887>;
resetMv mv2888[1];
setMv mv2888[0] = rc2[27];
resetMv mv2889[1];
setMv mv2889[0] = mv2885[0];
calculateMvCoeff mv2884[0] = DIVISION(mv2888,mv2889);
resetMv mv2890[1];
resetMv mv2891[1];
setVector ve2892 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2893 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2891[0] = <ve2892,ve2893>;
resetMv mv2894[1];
setMv mv2894[0] = rc2[28];
resetMv mv2895[1];
setMv mv2895[0] = mv2891[0];
calculateMvCoeff mv2890[0] = DIVISION(mv2894,mv2895);
resetMv mv2896[1];
resetMv mv2897[1];
setVector ve2898 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2899 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2897[0] = <ve2898,ve2899>;
resetMv mv2900[1];
setMv mv2900[0] = rc2[29];
resetMv mv2901[1];
setMv mv2901[0] = mv2897[0];
calculateMvCoeff mv2896[0] = DIVISION(mv2900,mv2901);
resetMv mv2902[1];
resetMv mv2903[1];
setVector ve2904 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2905 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2903[0] = <ve2904,ve2905>;
resetMv mv2906[1];
setMv mv2906[0] = rc2[30];
resetMv mv2907[1];
setMv mv2907[0] = mv2903[0];
calculateMvCoeff mv2902[0] = DIVISION(mv2906,mv2907);
resetMv mv2908[1];
resetMv mv2909[1];
setVector ve2910 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2911 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2909[0] = <ve2910,ve2911>;
resetMv mv2912[1];
setMv mv2912[0] = rc2[-31];
resetMv mv2913[1];
setMv mv2913[0] = mv2909[0];
calculateMvCoeff mv2908[0] = DIVISION(mv2912,mv2913);
setVector ve2914 = {rc2[-0,-1,-2,-3,-4,6,7,8,10,11,13,15,16,17,19,21,22,24,25,-26,-28,-29,-30,-31]};
setVector ve2915 = {mv2770[0],mv2776[0],mv2782[0],mv2788[0],mv2794[0],mv2800[0],mv2806[0],mv2812[0],mv2818[0],mv2824[0],mv2830[0],mv2836[0],mv2842[0],mv2848[0],mv2854[0],mv2860[0],mv2866[0],mv2872[0],mv2878[0],mv2884[0],mv2890[0],mv2896[0],mv2902[0],mv2908[0]};
dotVectors rc2N[4] = <ve2914,ve2915>;

//rc2N[5] = ((((((((-(rc2[5])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + (-((-(rc2[9])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[12])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[14])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[18])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[20])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[23])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[27])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv mv2916[1];
resetMv mv2917[1];
setVector ve2918 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2919 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2917[0] = <ve2918,ve2919>;
resetMv mv2920[1];
setMv mv2920[0] = rc2[-5];
resetMv mv2921[1];
setMv mv2921[0] = mv2917[0];
calculateMvCoeff mv2916[0] = DIVISION(mv2920,mv2921);
resetMv mv2922[1];
resetMv mv2923[1];
setVector ve2924 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2925 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2923[0] = <ve2924,ve2925>;
resetMv mv2926[1];
setMv mv2926[0] = rc2[-9];
resetMv mv2927[1];
setMv mv2927[0] = mv2923[0];
calculateMvCoeff mv2922[0] = DIVISION(mv2926,mv2927);
resetMv mv2928[1];
resetMv mv2929[1];
setVector ve2930 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2931 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2929[0] = <ve2930,ve2931>;
resetMv mv2932[1];
setMv mv2932[0] = rc2[-12];
resetMv mv2933[1];
setMv mv2933[0] = mv2929[0];
calculateMvCoeff mv2928[0] = DIVISION(mv2932,mv2933);
resetMv mv2934[1];
resetMv mv2935[1];
setVector ve2936 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2937 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2935[0] = <ve2936,ve2937>;
resetMv mv2938[1];
setMv mv2938[0] = rc2[-14];
resetMv mv2939[1];
setMv mv2939[0] = mv2935[0];
calculateMvCoeff mv2934[0] = DIVISION(mv2938,mv2939);
resetMv mv2940[1];
resetMv mv2941[1];
setVector ve2942 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2943 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2941[0] = <ve2942,ve2943>;
resetMv mv2944[1];
setMv mv2944[0] = rc2[18];
resetMv mv2945[1];
setMv mv2945[0] = mv2941[0];
calculateMvCoeff mv2940[0] = DIVISION(mv2944,mv2945);
resetMv mv2946[1];
resetMv mv2947[1];
setVector ve2948 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2949 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2947[0] = <ve2948,ve2949>;
resetMv mv2950[1];
setMv mv2950[0] = rc2[20];
resetMv mv2951[1];
setMv mv2951[0] = mv2947[0];
calculateMvCoeff mv2946[0] = DIVISION(mv2950,mv2951);
resetMv mv2952[1];
resetMv mv2953[1];
setVector ve2954 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2955 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2953[0] = <ve2954,ve2955>;
resetMv mv2956[1];
setMv mv2956[0] = rc2[23];
resetMv mv2957[1];
setMv mv2957[0] = mv2953[0];
calculateMvCoeff mv2952[0] = DIVISION(mv2956,mv2957);
resetMv mv2958[1];
resetMv mv2959[1];
setVector ve2960 = {rc2[-5,-9,-12,-14,18,20,23,27]};
setVector ve2961 = {rc2[-5,-9,-12,-14,18,20,23,27]};
dotVectors mv2959[0] = <ve2960,ve2961>;
resetMv mv2962[1];
setMv mv2962[0] = rc2[27];
resetMv mv2963[1];
setMv mv2963[0] = mv2959[0];
calculateMvCoeff mv2958[0] = DIVISION(mv2962,mv2963);
setVector ve2964 = {rc2[-5,9,12,14,18,20,23,-27]};
setVector ve2965 = {mv2916[0],mv2922[0],mv2928[0],mv2934[0],mv2940[0],mv2946[0],mv2952[0],mv2958[0]};
dotVectors rc2N[5] = <ve2964,ve2965>;

//temp3[0] = -2.0 * (((((rc1N[1] * sat1[1]) + (rc1N[2] * sat1[2])) + (rc1N[3] * sat1[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat1[4])))
resetMv temp3[32];
resetMv mv2966[1];
setVector ve2967 = {rc1N[1,2,3,-4,-5]};
setVector ve2968 = {sat1[1,2,3],1.0,sat1[4]};
dotVectors mv2966[0] = <ve2967,ve2968>;
setVector ve2969 = {-2.0};
setVector ve2970 = {mv2966[0]};
dotVectors temp3[0] = <ve2969,ve2970>;

//temp4 = sqrt(temp3)
resetMv temp4[32];
calculateMv temp4 = SQRT(temp3);

//z11[0] = temp4[0] - inputsVector[0]
resetMv z11[32];
setVector ve2971 = {temp4[0],inputsVector[-0]};
dotVectors z11[0] = <ve2971>;

//temp5[0] = -2.0 * (((((rc2N[1] * sat1[1]) + (rc2N[2] * sat1[2])) + (rc2N[3] * sat1[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat1[4])))
resetMv temp5[32];
resetMv mv2972[1];
setVector ve2973 = {rc2N[1,2,3,-4,-5]};
setVector ve2974 = {sat1[1,2,3],1.0,sat1[4]};
dotVectors mv2972[0] = <ve2973,ve2974>;
setVector ve2975 = {-2.0};
setVector ve2976 = {mv2972[0]};
dotVectors temp5[0] = <ve2975,ve2976>;

//temp6 = sqrt(temp5)
resetMv temp6[32];
calculateMv temp6 = SQRT(temp5);

//z12[0] = temp6[0] - inputsVector[0]
resetMv z12[32];
setVector ve2977 = {temp6[0],inputsVector[-0]};
dotVectors z12[0] = <ve2977>;

//temp7[0] = -2.0 * (((((rc1N[1] * sat2[1]) + (rc1N[2] * sat2[2])) + (rc1N[3] * sat2[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat2[4])))
resetMv temp7[32];
resetMv mv2978[1];
setVector ve2979 = {rc1N[1,2,3,-4,-5]};
setVector ve2980 = {sat2[1,2,3],1.0,sat2[4]};
dotVectors mv2978[0] = <ve2979,ve2980>;
setVector ve2981 = {-2.0};
setVector ve2982 = {mv2978[0]};
dotVectors temp7[0] = <ve2981,ve2982>;

//temp8 = sqrt(temp7)
resetMv temp8[32];
calculateMv temp8 = SQRT(temp7);

//z21[0] = temp8[0] - inputsVector[1]
resetMv z21[32];
setVector ve2983 = {temp8[0],inputsVector[-1]};
dotVectors z21[0] = <ve2983>;

//temp9[0] = -2.0 * (((((rc2N[1] * sat2[1]) + (rc2N[2] * sat2[2])) + (rc2N[3] * sat2[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat2[4])))
resetMv temp9[32];
resetMv mv2984[1];
setVector ve2985 = {rc2N[1,2,3,-4,-5]};
setVector ve2986 = {sat2[1,2,3],1.0,sat2[4]};
dotVectors mv2984[0] = <ve2985,ve2986>;
setVector ve2987 = {-2.0};
setVector ve2988 = {mv2984[0]};
dotVectors temp9[0] = <ve2987,ve2988>;

//temp10 = sqrt(temp9)
resetMv temp10[32];
calculateMv temp10 = SQRT(temp9);

//z22[0] = temp10[0] - inputsVector[1]
resetMv z22[32];
setVector ve2989 = {temp10[0],inputsVector[-1]};
dotVectors z22[0] = <ve2989>;

//temp11[0] = -2.0 * (((((rc1N[1] * sat3[1]) + (rc1N[2] * sat3[2])) + (rc1N[3] * sat3[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat3[4])))
resetMv temp11[32];
resetMv mv2990[1];
setVector ve2991 = {rc1N[1,2,3,-4,-5]};
setVector ve2992 = {sat3[1,2,3],1.0,sat3[4]};
dotVectors mv2990[0] = <ve2991,ve2992>;
setVector ve2993 = {-2.0};
setVector ve2994 = {mv2990[0]};
dotVectors temp11[0] = <ve2993,ve2994>;

//temp12 = sqrt(temp11)
resetMv temp12[32];
calculateMv temp12 = SQRT(temp11);

//z31[0] = temp12[0] - inputsVector[2]
resetMv z31[32];
setVector ve2995 = {temp12[0],inputsVector[-2]};
dotVectors z31[0] = <ve2995>;

//temp13[0] = -2.0 * (((((rc2N[1] * sat3[1]) + (rc2N[2] * sat3[2])) + (rc2N[3] * sat3[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat3[4])))
resetMv temp13[32];
resetMv mv2996[1];
setVector ve2997 = {rc2N[1,2,3,-4,-5]};
setVector ve2998 = {sat3[1,2,3],1.0,sat3[4]};
dotVectors mv2996[0] = <ve2997,ve2998>;
setVector ve2999 = {-2.0};
setVector ve3000 = {mv2996[0]};
dotVectors temp13[0] = <ve2999,ve3000>;

//temp14 = sqrt(temp13)
resetMv temp14[32];
calculateMv temp14 = SQRT(temp13);

//z32[0] = temp14[0] - inputsVector[2]
resetMv z32[32];
setVector ve3001 = {temp14[0],inputsVector[-2]};
dotVectors z32[0] = <ve3001>;

