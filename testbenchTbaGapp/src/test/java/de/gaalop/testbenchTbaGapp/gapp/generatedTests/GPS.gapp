//sat1[1] = inputsVector[3]
assignInputsVector inputsVector = [d1,d2,d3,sat1x,sat1y,sat1z,sat2x,sat2y,sat2z,sat3x,sat3y,sat3z];
resetMv sat1[32];
setMv sat1[1,2,3] = inputsVector[3,4,5];

//sat1[2] = inputsVector[4]

//sat1[3] = inputsVector[5]

//sat1[4] = 0.5 * (((inputsVector[3] * inputsVector[3]) + (inputsVector[4] * inputsVector[4])) + (inputsVector[5] * inputsVector[5]))
resetMv tempmv0[1];
setVector ve1 = {inputsVector[3,4,5]};
setVector ve2 = {inputsVector[3,4,5]};
dotVectors tempmv0[0] = <ve1,ve2>;
setVector ve3 = {0.5};
setVector ve4 = {tempmv0[0]};
dotVectors sat1[4] = <ve3,ve4>;

//sat1[5] = 1.0
assignMv sat1[5] = [1.0];

//sat2[1] = inputsVector[6]
resetMv sat2[32];
setMv sat2[1,2,3] = inputsVector[6,7,8];

//sat2[2] = inputsVector[7]

//sat2[3] = inputsVector[8]

//sat2[4] = 0.5 * (((inputsVector[6] * inputsVector[6]) + (inputsVector[7] * inputsVector[7])) + (inputsVector[8] * inputsVector[8]))
resetMv tempmv5[1];
setVector ve6 = {inputsVector[6,7,8]};
setVector ve7 = {inputsVector[6,7,8]};
dotVectors tempmv5[0] = <ve6,ve7>;
setVector ve8 = {0.5};
setVector ve9 = {tempmv5[0]};
dotVectors sat2[4] = <ve8,ve9>;

//sat2[5] = 1.0
assignMv sat2[5] = [1.0];

//sat3[1] = inputsVector[9]
resetMv sat3[32];
setMv sat3[1,2,3] = inputsVector[9,10,11];

//sat3[2] = inputsVector[10]

//sat3[3] = inputsVector[11]

//sat3[4] = 0.5 * (((inputsVector[9] * inputsVector[9]) + (inputsVector[10] * inputsVector[10])) + (inputsVector[11] * inputsVector[11]))
resetMv tempmv10[1];
setVector ve11 = {inputsVector[9,10,11]};
setVector ve12 = {inputsVector[9,10,11]};
dotVectors tempmv10[0] = <ve11,ve12>;
setVector ve13 = {0.5};
setVector ve14 = {tempmv10[0]};
dotVectors sat3[4] = <ve13,ve14>;

//sat3[5] = 1.0
assignMv sat3[5] = [1.0];

//sph1[1] = sat1[1]
resetMv sph1[32];
setMv sph1[1,2,3] = sat1[1,2,3];

//sph1[2] = sat1[2]

//sph1[3] = sat1[3]

//sph1[4] = sat1[4] - ((0.5 * inputsVector[0]) * inputsVector[0])
setVector ve15 = {sat1[4],-0.5};
setVector ve16 = {1.0,inputsVector[0]};
setVector ve17 = {1.0,inputsVector[0]};
dotVectors sph1[4] = <ve15,ve16,ve17>;

//sph1[5] = 1.0
assignMv sph1[5] = [1.0];

//sph2[1] = sat2[1]
resetMv sph2[32];
setMv sph2[1,2,3] = sat2[1,2,3];

//sph2[2] = sat2[2]

//sph2[3] = sat2[3]

//sph2[4] = sat2[4] - ((0.5 * inputsVector[1]) * inputsVector[1])
setVector ve18 = {sat2[4],-0.5};
setVector ve19 = {1.0,inputsVector[1]};
setVector ve20 = {1.0,inputsVector[1]};
dotVectors sph2[4] = <ve18,ve19,ve20>;

//sph2[5] = 1.0
assignMv sph2[5] = [1.0];

//sph3[1] = sat3[1]
resetMv sph3[32];
setMv sph3[1,2,3] = sat3[1,2,3];

//sph3[2] = sat3[2]

//sph3[3] = sat3[3]

//sph3[4] = sat3[4] - ((0.5 * inputsVector[2]) * inputsVector[2])
setVector ve21 = {sat3[4],-0.5};
setVector ve22 = {1.0,inputsVector[2]};
setVector ve23 = {1.0,inputsVector[2]};
dotVectors sph3[4] = <ve21,ve22,ve23>;

//sph3[5] = 1.0
assignMv sph3[5] = [1.0];

//rcPp[16] = ((((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) * sph3[3]) + (-(((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) * sph3[2]))) + (((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) * sph3[1])
resetMv rcPp[32];
resetMv tempmv24[1];
setVector ve25 = {sph1[1,-2]};
setVector ve26 = {sph2[2,1]};
dotVectors tempmv24[0] = <ve25,ve26>;
resetMv tempmv27[1];
resetMv tempmv28[1];
setVector ve29 = {sph1[1,-3]};
setVector ve30 = {sph2[3,1]};
dotVectors tempmv28[0] = <ve29,ve30>;
setMv tempmv27[0] = tempmv28[-0];
resetMv tempmv31[1];
setVector ve32 = {sph1[2,-3]};
setVector ve33 = {sph2[3,2]};
dotVectors tempmv31[0] = <ve32,ve33>;
setVector ve34 = {tempmv24[0],tempmv27[0],tempmv31[0]};
setVector ve35 = {sph3[3,2,1]};
dotVectors rcPp[16] = <ve34,ve35>;

//rcPp[17] = ((((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) * sph3[4]) + (-(((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) * sph3[2]))) + (((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) * sph3[1])
resetMv tempmv36[1];
setVector ve37 = {sph1[1,-2]};
setVector ve38 = {sph2[2,1]};
dotVectors tempmv36[0] = <ve37,ve38>;
resetMv tempmv39[1];
resetMv tempmv40[1];
setVector ve41 = {sph1[1,-4]};
setVector ve42 = {sph2[4,1]};
dotVectors tempmv40[0] = <ve41,ve42>;
setMv tempmv39[0] = tempmv40[-0];
resetMv tempmv43[1];
setVector ve44 = {sph1[2,-4]};
setVector ve45 = {sph2[4,2]};
dotVectors tempmv43[0] = <ve44,ve45>;
setVector ve46 = {tempmv36[0],tempmv39[0],tempmv43[0]};
setVector ve47 = {sph3[4,2,1]};
dotVectors rcPp[17] = <ve46,ve47>;

//rcPp[18] = (((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[2]))) + ((sph1[2] + (-(sph2[2]))) * sph3[1])
resetMv tempmv48[1];
resetMv tempmv49[1];
setVector ve50 = {sph1[1],sph2[-1]};
dotVectors tempmv49[0] = <ve50>;
setMv tempmv48[0] = tempmv49[-0];
resetMv tempmv51[1];
setVector ve52 = {sph1[2],sph2[-2]};
dotVectors tempmv51[0] = <ve52>;
setVector ve53 = {sph1[1,-2],tempmv48[0],tempmv51[0]};
setVector ve54 = {sph2[2,1],sph3[2,1]};
dotVectors rcPp[18] = <ve53,ve54>;

//rcPp[19] = ((((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) * sph3[4]) + (-(((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) * sph3[3]))) + (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) * sph3[1])
resetMv tempmv55[1];
setVector ve56 = {sph1[1,-3]};
setVector ve57 = {sph2[3,1]};
dotVectors tempmv55[0] = <ve56,ve57>;
resetMv tempmv58[1];
resetMv tempmv59[1];
setVector ve60 = {sph1[1,-4]};
setVector ve61 = {sph2[4,1]};
dotVectors tempmv59[0] = <ve60,ve61>;
setMv tempmv58[0] = tempmv59[-0];
resetMv tempmv62[1];
setVector ve63 = {sph1[3,-4]};
setVector ve64 = {sph2[4,3]};
dotVectors tempmv62[0] = <ve63,ve64>;
setVector ve65 = {tempmv55[0],tempmv58[0],tempmv62[0]};
setVector ve66 = {sph3[4,3,1]};
dotVectors rcPp[19] = <ve65,ve66>;

//rcPp[20] = (((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[3]))) + ((sph1[3] + (-(sph2[3]))) * sph3[1])
resetMv tempmv67[1];
resetMv tempmv68[1];
setVector ve69 = {sph1[1],sph2[-1]};
dotVectors tempmv68[0] = <ve69>;
setMv tempmv67[0] = tempmv68[-0];
resetMv tempmv70[1];
setVector ve71 = {sph1[3],sph2[-3]};
dotVectors tempmv70[0] = <ve71>;
setVector ve72 = {sph1[1,-3],tempmv67[0],tempmv70[0]};
setVector ve73 = {sph2[3,1],sph3[3,1]};
dotVectors rcPp[20] = <ve72,ve73>;

//rcPp[21] = (((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[1])
resetMv tempmv74[1];
resetMv tempmv75[1];
setVector ve76 = {sph1[1],sph2[-1]};
dotVectors tempmv75[0] = <ve76>;
setMv tempmv74[0] = tempmv75[-0];
resetMv tempmv77[1];
setVector ve78 = {sph1[4],sph2[-4]};
dotVectors tempmv77[0] = <ve78>;
setVector ve79 = {sph1[1,-4],tempmv74[0],tempmv77[0]};
setVector ve80 = {sph2[4,1],sph3[4,1]};
dotVectors rcPp[21] = <ve79,ve80>;

//rcPp[22] = ((((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) * sph3[4]) + (-(((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) * sph3[3]))) + (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) * sph3[2])
resetMv tempmv81[1];
setVector ve82 = {sph1[2,-3]};
setVector ve83 = {sph2[3,2]};
dotVectors tempmv81[0] = <ve82,ve83>;
resetMv tempmv84[1];
resetMv tempmv85[1];
setVector ve86 = {sph1[2,-4]};
setVector ve87 = {sph2[4,2]};
dotVectors tempmv85[0] = <ve86,ve87>;
setMv tempmv84[0] = tempmv85[-0];
resetMv tempmv88[1];
setVector ve89 = {sph1[3,-4]};
setVector ve90 = {sph2[4,3]};
dotVectors tempmv88[0] = <ve89,ve90>;
setVector ve91 = {tempmv81[0],tempmv84[0],tempmv88[0]};
setVector ve92 = {sph3[4,3,2]};
dotVectors rcPp[22] = <ve91,ve92>;

//rcPp[23] = (((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) + (-((sph1[2] + (-(sph2[2]))) * sph3[3]))) + ((sph1[3] + (-(sph2[3]))) * sph3[2])
resetMv tempmv93[1];
resetMv tempmv94[1];
setVector ve95 = {sph1[2],sph2[-2]};
dotVectors tempmv94[0] = <ve95>;
setMv tempmv93[0] = tempmv94[-0];
resetMv tempmv96[1];
setVector ve97 = {sph1[3],sph2[-3]};
dotVectors tempmv96[0] = <ve97>;
setVector ve98 = {sph1[2,-3],tempmv93[0],tempmv96[0]};
setVector ve99 = {sph2[3,2],sph3[3,2]};
dotVectors rcPp[23] = <ve98,ve99>;

//rcPp[24] = (((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) + (-((sph1[2] + (-(sph2[2]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[2])
resetMv tempmv100[1];
resetMv tempmv101[1];
setVector ve102 = {sph1[2],sph2[-2]};
dotVectors tempmv101[0] = <ve102>;
setMv tempmv100[0] = tempmv101[-0];
resetMv tempmv103[1];
setVector ve104 = {sph1[4],sph2[-4]};
dotVectors tempmv103[0] = <ve104>;
setVector ve105 = {sph1[2,-4],tempmv100[0],tempmv103[0]};
setVector ve106 = {sph2[4,2],sph3[4,2]};
dotVectors rcPp[24] = <ve105,ve106>;

//rcPp[25] = (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) + (-((sph1[3] + (-(sph2[3]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[3])
resetMv tempmv107[1];
resetMv tempmv108[1];
setVector ve109 = {sph1[3],sph2[-3]};
dotVectors tempmv108[0] = <ve109>;
setMv tempmv107[0] = tempmv108[-0];
resetMv tempmv110[1];
setVector ve111 = {sph1[4],sph2[-4]};
dotVectors tempmv110[0] = <ve111>;
setVector ve112 = {sph1[3,-4],tempmv107[0],tempmv110[0]};
setVector ve113 = {sph2[4,3],sph3[4,3]};
dotVectors rcPp[25] = <ve112,ve113>;

//len[0] = sqrt(sqrt(abs(((((((((((-(rcPp[16] * rcPp[16])) + (rcPp[17] * rcPp[18])) + (rcPp[18] * rcPp[17])) + (rcPp[19] * rcPp[20])) + (rcPp[20] * rcPp[19])) + (rcPp[21] * rcPp[21])) + (rcPp[22] * rcPp[23])) + (rcPp[23] * rcPp[22])) + (rcPp[24] * rcPp[24])) + (rcPp[25] * rcPp[25])) * ((((((((((-(rcPp[16] * rcPp[16])) + (rcPp[17] * rcPp[18])) + (rcPp[18] * rcPp[17])) + (rcPp[19] * rcPp[20])) + (rcPp[20] * rcPp[19])) + (rcPp[21] * rcPp[21])) + (rcPp[22] * rcPp[23])) + (rcPp[23] * rcPp[22])) + (rcPp[24] * rcPp[24])) + (rcPp[25] * rcPp[25])))))
resetMv len[32];
resetMv tempmv114[1];
resetMv tempmv115[1];
resetMv tempmv116[1];
resetMv tempmv117[1];
setVector ve118 = {rcPp[-16,17,18,19,20,21,22,23,24,25]};
setVector ve119 = {rcPp[16,18,17,20,19,21,23,22,24,25]};
dotVectors tempmv117[0] = <ve118,ve119>;
resetMv tempmv120[1];
setVector ve121 = {rcPp[-16,17,18,19,20,21,22,23,24,25]};
setVector ve122 = {rcPp[16,18,17,20,19,21,23,22,24,25]};
dotVectors tempmv120[0] = <ve121,ve122>;
setVector ve123 = {tempmv117[0]};
setVector ve124 = {tempmv120[0]};
dotVectors tempmv116[0] = <ve123,ve124>;
resetMv tempmv125[1];
setMv tempmv125[0] = tempmv116[0];
calculateMvCoeff tempmv115[0] = ABS(tempmv125);
resetMv tempmv126[1];
setMv tempmv126[0] = tempmv115[0];
calculateMvCoeff tempmv114[0] = SQRT(tempmv126);
resetMv tempmv127[1];
setMv tempmv127[0] = tempmv114[0];
calculateMvCoeff len[0] = SQRT(tempmv127);

//rcPpDual[6] = -(rcPp[25])
resetMv rcPpDual[32];
setMv rcPpDual[6,7,8,9,10,11,12,13,14,15] = rcPp[-25,24,-22,23,-21,19,-20,-17,18,16];

//rcPpDual[7] = rcPp[24]

//rcPpDual[8] = -(rcPp[22])

//rcPpDual[9] = rcPp[23]

//rcPpDual[10] = -(rcPp[21])

//rcPpDual[11] = rcPp[19]

//rcPpDual[12] = -(rcPp[20])

//rcPpDual[13] = -(rcPp[17])

//rcPpDual[14] = rcPp[18]

//rcPpDual[15] = rcPp[16]

//nen[1] = rcPpDual[9]
resetMv nen[32];
setMv nen[1,2,3,4] = rcPpDual[9,12,14,15];

//nen[2] = rcPpDual[12]

//nen[3] = rcPpDual[14]

//nen[4] = rcPpDual[15]

//rc1[1] = (((len[0] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (rcPpDual[6] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[7] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(rcPpDual[9] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv rc1[32];
resetMv tempmv128[1];
resetMv tempmv129[1];
setVector ve130 = {nen[1,2,3]};
setVector ve131 = {nen[1,2,3]};
dotVectors tempmv129[0] = <ve130,ve131>;
resetMv tempmv132[1];
setMv tempmv132[0] = nen[1];
resetMv tempmv133[1];
setMv tempmv133[0] = tempmv129[0];
calculateMvCoeff tempmv128[0] = DIVISION(tempmv132,tempmv133);
resetMv tempmv134[1];
resetMv tempmv135[1];
setVector ve136 = {nen[1,2,3]};
setVector ve137 = {nen[1,2,3]};
dotVectors tempmv135[0] = <ve136,ve137>;
resetMv tempmv138[1];
setMv tempmv138[0] = nen[2];
resetMv tempmv139[1];
setMv tempmv139[0] = tempmv135[0];
calculateMvCoeff tempmv134[0] = DIVISION(tempmv138,tempmv139);
resetMv tempmv140[1];
resetMv tempmv141[1];
setVector ve142 = {nen[1,2,3]};
setVector ve143 = {nen[1,2,3]};
dotVectors tempmv141[0] = <ve142,ve143>;
resetMv tempmv144[1];
setMv tempmv144[0] = nen[3];
resetMv tempmv145[1];
setMv tempmv145[0] = tempmv141[0];
calculateMvCoeff tempmv140[0] = DIVISION(tempmv144,tempmv145);
resetMv tempmv146[1];
resetMv tempmv147[1];
setVector ve148 = {nen[1,2,3]};
setVector ve149 = {nen[1,2,3]};
dotVectors tempmv147[0] = <ve148,ve149>;
resetMv tempmv150[1];
setMv tempmv150[0] = nen[4];
resetMv tempmv151[1];
setMv tempmv151[0] = tempmv147[0];
calculateMvCoeff tempmv146[0] = DIVISION(tempmv150,tempmv151);
setVector ve152 = {len[0],rcPpDual[6,7,-9]};
setVector ve153 = {tempmv128[0],tempmv134[0],tempmv140[0],tempmv146[0]};
dotVectors rc1[1] = <ve152,ve153>;

//rc1[2] = (((len[0] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[6] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[10] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(rcPpDual[12] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv154[1];
resetMv tempmv155[1];
setVector ve156 = {nen[1,2,3]};
setVector ve157 = {nen[1,2,3]};
dotVectors tempmv155[0] = <ve156,ve157>;
resetMv tempmv158[1];
setMv tempmv158[0] = nen[2];
resetMv tempmv159[1];
setMv tempmv159[0] = tempmv155[0];
calculateMvCoeff tempmv154[0] = DIVISION(tempmv158,tempmv159);
resetMv tempmv160[1];
resetMv tempmv161[1];
setVector ve162 = {nen[1,2,3]};
setVector ve163 = {nen[1,2,3]};
dotVectors tempmv161[0] = <ve162,ve163>;
resetMv tempmv164[1];
setMv tempmv164[0] = nen[1];
resetMv tempmv165[1];
setMv tempmv165[0] = tempmv161[0];
calculateMvCoeff tempmv160[0] = DIVISION(tempmv164,tempmv165);
resetMv tempmv166[1];
resetMv tempmv167[1];
setVector ve168 = {nen[1,2,3]};
setVector ve169 = {nen[1,2,3]};
dotVectors tempmv167[0] = <ve168,ve169>;
resetMv tempmv170[1];
setMv tempmv170[0] = nen[3];
resetMv tempmv171[1];
setMv tempmv171[0] = tempmv167[0];
calculateMvCoeff tempmv166[0] = DIVISION(tempmv170,tempmv171);
resetMv tempmv172[1];
resetMv tempmv173[1];
setVector ve174 = {nen[1,2,3]};
setVector ve175 = {nen[1,2,3]};
dotVectors tempmv173[0] = <ve174,ve175>;
resetMv tempmv176[1];
setMv tempmv176[0] = nen[4];
resetMv tempmv177[1];
setMv tempmv177[0] = tempmv173[0];
calculateMvCoeff tempmv172[0] = DIVISION(tempmv176,tempmv177);
setVector ve178 = {len[0],rcPpDual[-6,10,-12]};
setVector ve179 = {tempmv154[0],tempmv160[0],tempmv166[0],tempmv172[0]};
dotVectors rc1[2] = <ve178,ve179>;

//rc1[3] = (((len[0] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[7] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[10] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[14] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv180[1];
resetMv tempmv181[1];
setVector ve182 = {nen[1,2,3]};
setVector ve183 = {nen[1,2,3]};
dotVectors tempmv181[0] = <ve182,ve183>;
resetMv tempmv184[1];
setMv tempmv184[0] = nen[3];
resetMv tempmv185[1];
setMv tempmv185[0] = tempmv181[0];
calculateMvCoeff tempmv180[0] = DIVISION(tempmv184,tempmv185);
resetMv tempmv186[1];
resetMv tempmv187[1];
setVector ve188 = {nen[1,2,3]};
setVector ve189 = {nen[1,2,3]};
dotVectors tempmv187[0] = <ve188,ve189>;
resetMv tempmv190[1];
setMv tempmv190[0] = nen[1];
resetMv tempmv191[1];
setMv tempmv191[0] = tempmv187[0];
calculateMvCoeff tempmv186[0] = DIVISION(tempmv190,tempmv191);
resetMv tempmv192[1];
resetMv tempmv193[1];
setVector ve194 = {nen[1,2,3]};
setVector ve195 = {nen[1,2,3]};
dotVectors tempmv193[0] = <ve194,ve195>;
resetMv tempmv196[1];
setMv tempmv196[0] = nen[2];
resetMv tempmv197[1];
setMv tempmv197[0] = tempmv193[0];
calculateMvCoeff tempmv192[0] = DIVISION(tempmv196,tempmv197);
resetMv tempmv198[1];
resetMv tempmv199[1];
setVector ve200 = {nen[1,2,3]};
setVector ve201 = {nen[1,2,3]};
dotVectors tempmv199[0] = <ve200,ve201>;
resetMv tempmv202[1];
setMv tempmv202[0] = nen[4];
resetMv tempmv203[1];
setMv tempmv203[0] = tempmv199[0];
calculateMvCoeff tempmv198[0] = DIVISION(tempmv202,tempmv203);
setVector ve204 = {len[0],rcPpDual[-7,-10,-14]};
setVector ve205 = {tempmv180[0],tempmv186[0],tempmv192[0],tempmv198[0]};
dotVectors rc1[3] = <ve204,ve205>;

//rc1[4] = ((((len[0] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[8] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[11] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[13] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[15] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv206[1];
resetMv tempmv207[1];
setVector ve208 = {nen[1,2,3]};
setVector ve209 = {nen[1,2,3]};
dotVectors tempmv207[0] = <ve208,ve209>;
resetMv tempmv210[1];
setMv tempmv210[0] = nen[4];
resetMv tempmv211[1];
setMv tempmv211[0] = tempmv207[0];
calculateMvCoeff tempmv206[0] = DIVISION(tempmv210,tempmv211);
resetMv tempmv212[1];
resetMv tempmv213[1];
setVector ve214 = {nen[1,2,3]};
setVector ve215 = {nen[1,2,3]};
dotVectors tempmv213[0] = <ve214,ve215>;
resetMv tempmv216[1];
setMv tempmv216[0] = nen[1];
resetMv tempmv217[1];
setMv tempmv217[0] = tempmv213[0];
calculateMvCoeff tempmv212[0] = DIVISION(tempmv216,tempmv217);
resetMv tempmv218[1];
resetMv tempmv219[1];
setVector ve220 = {nen[1,2,3]};
setVector ve221 = {nen[1,2,3]};
dotVectors tempmv219[0] = <ve220,ve221>;
resetMv tempmv222[1];
setMv tempmv222[0] = nen[2];
resetMv tempmv223[1];
setMv tempmv223[0] = tempmv219[0];
calculateMvCoeff tempmv218[0] = DIVISION(tempmv222,tempmv223);
resetMv tempmv224[1];
resetMv tempmv225[1];
setVector ve226 = {nen[1,2,3]};
setVector ve227 = {nen[1,2,3]};
dotVectors tempmv225[0] = <ve226,ve227>;
resetMv tempmv228[1];
setMv tempmv228[0] = nen[3];
resetMv tempmv229[1];
setMv tempmv229[0] = tempmv225[0];
calculateMvCoeff tempmv224[0] = DIVISION(tempmv228,tempmv229);
resetMv tempmv230[1];
resetMv tempmv231[1];
setVector ve232 = {nen[1,2,3]};
setVector ve233 = {nen[1,2,3]};
dotVectors tempmv231[0] = <ve232,ve233>;
resetMv tempmv234[1];
setMv tempmv234[0] = nen[4];
resetMv tempmv235[1];
setMv tempmv235[0] = tempmv231[0];
calculateMvCoeff tempmv230[0] = DIVISION(tempmv234,tempmv235);
setVector ve236 = {len[0],rcPpDual[-8,-11,-13,-15]};
setVector ve237 = {tempmv206[0],tempmv212[0],tempmv218[0],tempmv224[0],tempmv230[0]};
dotVectors rc1[4] = <ve236,ve237>;

//rc1[5] = ((-(rcPpDual[9] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(rcPpDual[12] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[14] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv238[1];
resetMv tempmv239[1];
setVector ve240 = {nen[1,2,3]};
setVector ve241 = {nen[1,2,3]};
dotVectors tempmv239[0] = <ve240,ve241>;
resetMv tempmv242[1];
setMv tempmv242[0] = nen[1];
resetMv tempmv243[1];
setMv tempmv243[0] = tempmv239[0];
calculateMvCoeff tempmv238[0] = DIVISION(tempmv242,tempmv243);
resetMv tempmv244[1];
resetMv tempmv245[1];
setVector ve246 = {nen[1,2,3]};
setVector ve247 = {nen[1,2,3]};
dotVectors tempmv245[0] = <ve246,ve247>;
resetMv tempmv248[1];
setMv tempmv248[0] = nen[2];
resetMv tempmv249[1];
setMv tempmv249[0] = tempmv245[0];
calculateMvCoeff tempmv244[0] = DIVISION(tempmv248,tempmv249);
resetMv tempmv250[1];
resetMv tempmv251[1];
setVector ve252 = {nen[1,2,3]};
setVector ve253 = {nen[1,2,3]};
dotVectors tempmv251[0] = <ve252,ve253>;
resetMv tempmv254[1];
setMv tempmv254[0] = nen[3];
resetMv tempmv255[1];
setMv tempmv255[0] = tempmv251[0];
calculateMvCoeff tempmv250[0] = DIVISION(tempmv254,tempmv255);
setVector ve256 = {rcPpDual[-9,-12,-14]};
setVector ve257 = {tempmv238[0],tempmv244[0],tempmv250[0]};
dotVectors rc1[5] = <ve256,ve257>;

//rc1[16] = ((rcPpDual[6] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[7] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[10] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv258[1];
resetMv tempmv259[1];
setVector ve260 = {nen[1,2,3]};
setVector ve261 = {nen[1,2,3]};
dotVectors tempmv259[0] = <ve260,ve261>;
resetMv tempmv262[1];
setMv tempmv262[0] = nen[3];
resetMv tempmv263[1];
setMv tempmv263[0] = tempmv259[0];
calculateMvCoeff tempmv258[0] = DIVISION(tempmv262,tempmv263);
resetMv tempmv264[1];
resetMv tempmv265[1];
setVector ve266 = {nen[1,2,3]};
setVector ve267 = {nen[1,2,3]};
dotVectors tempmv265[0] = <ve266,ve267>;
resetMv tempmv268[1];
setMv tempmv268[0] = nen[2];
resetMv tempmv269[1];
setMv tempmv269[0] = tempmv265[0];
calculateMvCoeff tempmv264[0] = DIVISION(tempmv268,tempmv269);
resetMv tempmv270[1];
resetMv tempmv271[1];
setVector ve272 = {nen[1,2,3]};
setVector ve273 = {nen[1,2,3]};
dotVectors tempmv271[0] = <ve272,ve273>;
resetMv tempmv274[1];
setMv tempmv274[0] = nen[1];
resetMv tempmv275[1];
setMv tempmv275[0] = tempmv271[0];
calculateMvCoeff tempmv270[0] = DIVISION(tempmv274,tempmv275);
setVector ve276 = {rcPpDual[6,-7,10]};
setVector ve277 = {tempmv258[0],tempmv264[0],tempmv270[0]};
dotVectors rc1[16] = <ve276,ve277>;

//rc1[17] = ((rcPpDual[6] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[8] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[11] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv278[1];
resetMv tempmv279[1];
setVector ve280 = {nen[1,2,3]};
setVector ve281 = {nen[1,2,3]};
dotVectors tempmv279[0] = <ve280,ve281>;
resetMv tempmv282[1];
setMv tempmv282[0] = nen[4];
resetMv tempmv283[1];
setMv tempmv283[0] = tempmv279[0];
calculateMvCoeff tempmv278[0] = DIVISION(tempmv282,tempmv283);
resetMv tempmv284[1];
resetMv tempmv285[1];
setVector ve286 = {nen[1,2,3]};
setVector ve287 = {nen[1,2,3]};
dotVectors tempmv285[0] = <ve286,ve287>;
resetMv tempmv288[1];
setMv tempmv288[0] = nen[2];
resetMv tempmv289[1];
setMv tempmv289[0] = tempmv285[0];
calculateMvCoeff tempmv284[0] = DIVISION(tempmv288,tempmv289);
resetMv tempmv290[1];
resetMv tempmv291[1];
setVector ve292 = {nen[1,2,3]};
setVector ve293 = {nen[1,2,3]};
dotVectors tempmv291[0] = <ve292,ve293>;
resetMv tempmv294[1];
setMv tempmv294[0] = nen[1];
resetMv tempmv295[1];
setMv tempmv295[0] = tempmv291[0];
calculateMvCoeff tempmv290[0] = DIVISION(tempmv294,tempmv295);
setVector ve296 = {rcPpDual[6,-8,11]};
setVector ve297 = {tempmv278[0],tempmv284[0],tempmv290[0]};
dotVectors rc1[17] = <ve296,ve297>;

//rc1[18] = (-(rcPpDual[9] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[12] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv298[1];
resetMv tempmv299[1];
setVector ve300 = {nen[1,2,3]};
setVector ve301 = {nen[1,2,3]};
dotVectors tempmv299[0] = <ve300,ve301>;
resetMv tempmv302[1];
setMv tempmv302[0] = nen[2];
resetMv tempmv303[1];
setMv tempmv303[0] = tempmv299[0];
calculateMvCoeff tempmv298[0] = DIVISION(tempmv302,tempmv303);
resetMv tempmv304[1];
resetMv tempmv305[1];
setVector ve306 = {nen[1,2,3]};
setVector ve307 = {nen[1,2,3]};
dotVectors tempmv305[0] = <ve306,ve307>;
resetMv tempmv308[1];
setMv tempmv308[0] = nen[1];
resetMv tempmv309[1];
setMv tempmv309[0] = tempmv305[0];
calculateMvCoeff tempmv304[0] = DIVISION(tempmv308,tempmv309);
setVector ve310 = {rcPpDual[-9,12]};
setVector ve311 = {tempmv298[0],tempmv304[0]};
dotVectors rc1[18] = <ve310,ve311>;

//rc1[19] = ((rcPpDual[7] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[8] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[13] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv312[1];
resetMv tempmv313[1];
setVector ve314 = {nen[1,2,3]};
setVector ve315 = {nen[1,2,3]};
dotVectors tempmv313[0] = <ve314,ve315>;
resetMv tempmv316[1];
setMv tempmv316[0] = nen[4];
resetMv tempmv317[1];
setMv tempmv317[0] = tempmv313[0];
calculateMvCoeff tempmv312[0] = DIVISION(tempmv316,tempmv317);
resetMv tempmv318[1];
resetMv tempmv319[1];
setVector ve320 = {nen[1,2,3]};
setVector ve321 = {nen[1,2,3]};
dotVectors tempmv319[0] = <ve320,ve321>;
resetMv tempmv322[1];
setMv tempmv322[0] = nen[3];
resetMv tempmv323[1];
setMv tempmv323[0] = tempmv319[0];
calculateMvCoeff tempmv318[0] = DIVISION(tempmv322,tempmv323);
resetMv tempmv324[1];
resetMv tempmv325[1];
setVector ve326 = {nen[1,2,3]};
setVector ve327 = {nen[1,2,3]};
dotVectors tempmv325[0] = <ve326,ve327>;
resetMv tempmv328[1];
setMv tempmv328[0] = nen[1];
resetMv tempmv329[1];
setMv tempmv329[0] = tempmv325[0];
calculateMvCoeff tempmv324[0] = DIVISION(tempmv328,tempmv329);
setVector ve330 = {rcPpDual[7,-8,13]};
setVector ve331 = {tempmv312[0],tempmv318[0],tempmv324[0]};
dotVectors rc1[19] = <ve330,ve331>;

//rc1[20] = (-(rcPpDual[9] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[14] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv332[1];
resetMv tempmv333[1];
setVector ve334 = {nen[1,2,3]};
setVector ve335 = {nen[1,2,3]};
dotVectors tempmv333[0] = <ve334,ve335>;
resetMv tempmv336[1];
setMv tempmv336[0] = nen[3];
resetMv tempmv337[1];
setMv tempmv337[0] = tempmv333[0];
calculateMvCoeff tempmv332[0] = DIVISION(tempmv336,tempmv337);
resetMv tempmv338[1];
resetMv tempmv339[1];
setVector ve340 = {nen[1,2,3]};
setVector ve341 = {nen[1,2,3]};
dotVectors tempmv339[0] = <ve340,ve341>;
resetMv tempmv342[1];
setMv tempmv342[0] = nen[1];
resetMv tempmv343[1];
setMv tempmv343[0] = tempmv339[0];
calculateMvCoeff tempmv338[0] = DIVISION(tempmv342,tempmv343);
setVector ve344 = {rcPpDual[-9,14]};
setVector ve345 = {tempmv332[0],tempmv338[0]};
dotVectors rc1[20] = <ve344,ve345>;

//rc1[21] = (-(rcPpDual[9] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[15] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv346[1];
resetMv tempmv347[1];
setVector ve348 = {nen[1,2,3]};
setVector ve349 = {nen[1,2,3]};
dotVectors tempmv347[0] = <ve348,ve349>;
resetMv tempmv350[1];
setMv tempmv350[0] = nen[4];
resetMv tempmv351[1];
setMv tempmv351[0] = tempmv347[0];
calculateMvCoeff tempmv346[0] = DIVISION(tempmv350,tempmv351);
resetMv tempmv352[1];
resetMv tempmv353[1];
setVector ve354 = {nen[1,2,3]};
setVector ve355 = {nen[1,2,3]};
dotVectors tempmv353[0] = <ve354,ve355>;
resetMv tempmv356[1];
setMv tempmv356[0] = nen[1];
resetMv tempmv357[1];
setMv tempmv357[0] = tempmv353[0];
calculateMvCoeff tempmv352[0] = DIVISION(tempmv356,tempmv357);
setVector ve358 = {rcPpDual[-9,15]};
setVector ve359 = {tempmv346[0],tempmv352[0]};
dotVectors rc1[21] = <ve358,ve359>;

//rc1[22] = ((rcPpDual[10] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[11] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[13] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv360[1];
resetMv tempmv361[1];
setVector ve362 = {nen[1,2,3]};
setVector ve363 = {nen[1,2,3]};
dotVectors tempmv361[0] = <ve362,ve363>;
resetMv tempmv364[1];
setMv tempmv364[0] = nen[4];
resetMv tempmv365[1];
setMv tempmv365[0] = tempmv361[0];
calculateMvCoeff tempmv360[0] = DIVISION(tempmv364,tempmv365);
resetMv tempmv366[1];
resetMv tempmv367[1];
setVector ve368 = {nen[1,2,3]};
setVector ve369 = {nen[1,2,3]};
dotVectors tempmv367[0] = <ve368,ve369>;
resetMv tempmv370[1];
setMv tempmv370[0] = nen[3];
resetMv tempmv371[1];
setMv tempmv371[0] = tempmv367[0];
calculateMvCoeff tempmv366[0] = DIVISION(tempmv370,tempmv371);
resetMv tempmv372[1];
resetMv tempmv373[1];
setVector ve374 = {nen[1,2,3]};
setVector ve375 = {nen[1,2,3]};
dotVectors tempmv373[0] = <ve374,ve375>;
resetMv tempmv376[1];
setMv tempmv376[0] = nen[2];
resetMv tempmv377[1];
setMv tempmv377[0] = tempmv373[0];
calculateMvCoeff tempmv372[0] = DIVISION(tempmv376,tempmv377);
setVector ve378 = {rcPpDual[10,-11,13]};
setVector ve379 = {tempmv360[0],tempmv366[0],tempmv372[0]};
dotVectors rc1[22] = <ve378,ve379>;

//rc1[23] = (-(rcPpDual[12] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[14] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv380[1];
resetMv tempmv381[1];
setVector ve382 = {nen[1,2,3]};
setVector ve383 = {nen[1,2,3]};
dotVectors tempmv381[0] = <ve382,ve383>;
resetMv tempmv384[1];
setMv tempmv384[0] = nen[3];
resetMv tempmv385[1];
setMv tempmv385[0] = tempmv381[0];
calculateMvCoeff tempmv380[0] = DIVISION(tempmv384,tempmv385);
resetMv tempmv386[1];
resetMv tempmv387[1];
setVector ve388 = {nen[1,2,3]};
setVector ve389 = {nen[1,2,3]};
dotVectors tempmv387[0] = <ve388,ve389>;
resetMv tempmv390[1];
setMv tempmv390[0] = nen[2];
resetMv tempmv391[1];
setMv tempmv391[0] = tempmv387[0];
calculateMvCoeff tempmv386[0] = DIVISION(tempmv390,tempmv391);
setVector ve392 = {rcPpDual[-12,14]};
setVector ve393 = {tempmv380[0],tempmv386[0]};
dotVectors rc1[23] = <ve392,ve393>;

//rc1[24] = (-(rcPpDual[12] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[15] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv394[1];
resetMv tempmv395[1];
setVector ve396 = {nen[1,2,3]};
setVector ve397 = {nen[1,2,3]};
dotVectors tempmv395[0] = <ve396,ve397>;
resetMv tempmv398[1];
setMv tempmv398[0] = nen[4];
resetMv tempmv399[1];
setMv tempmv399[0] = tempmv395[0];
calculateMvCoeff tempmv394[0] = DIVISION(tempmv398,tempmv399);
resetMv tempmv400[1];
resetMv tempmv401[1];
setVector ve402 = {nen[1,2,3]};
setVector ve403 = {nen[1,2,3]};
dotVectors tempmv401[0] = <ve402,ve403>;
resetMv tempmv404[1];
setMv tempmv404[0] = nen[2];
resetMv tempmv405[1];
setMv tempmv405[0] = tempmv401[0];
calculateMvCoeff tempmv400[0] = DIVISION(tempmv404,tempmv405);
setVector ve406 = {rcPpDual[-12,15]};
setVector ve407 = {tempmv394[0],tempmv400[0]};
dotVectors rc1[24] = <ve406,ve407>;

//rc1[25] = (-(rcPpDual[14] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[15] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv408[1];
resetMv tempmv409[1];
setVector ve410 = {nen[1,2,3]};
setVector ve411 = {nen[1,2,3]};
dotVectors tempmv409[0] = <ve410,ve411>;
resetMv tempmv412[1];
setMv tempmv412[0] = nen[4];
resetMv tempmv413[1];
setMv tempmv413[0] = tempmv409[0];
calculateMvCoeff tempmv408[0] = DIVISION(tempmv412,tempmv413);
resetMv tempmv414[1];
resetMv tempmv415[1];
setVector ve416 = {nen[1,2,3]};
setVector ve417 = {nen[1,2,3]};
dotVectors tempmv415[0] = <ve416,ve417>;
resetMv tempmv418[1];
setMv tempmv418[0] = nen[3];
resetMv tempmv419[1];
setMv tempmv419[0] = tempmv415[0];
calculateMvCoeff tempmv414[0] = DIVISION(tempmv418,tempmv419);
setVector ve420 = {rcPpDual[-14,15]};
setVector ve421 = {tempmv408[0],tempmv414[0]};
dotVectors rc1[25] = <ve420,ve421>;

//rc1N[1] = (((((((-(rc1[1])) * ((-(rc1[5])) / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))) + (-((-(rc1[2])) * (rc1[18] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[3])) * (rc1[20] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + ((-(rc1[5])) * (rc1[21] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (-((-(rc1[16])) * (rc1[23] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + ((-(rc1[18])) * (rc1[24] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + ((-(rc1[20])) * (rc1[25] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))
resetMv rc1N[32];
resetMv tempmv422[1];
resetMv tempmv423[1];
setVector ve424 = {rc1[-5,18,20,23]};
setVector ve425 = {rc1[-5,18,20,23]};
dotVectors tempmv423[0] = <ve424,ve425>;
resetMv tempmv426[1];
setMv tempmv426[0] = rc1[-5];
resetMv tempmv427[1];
setMv tempmv427[0] = tempmv423[0];
calculateMvCoeff tempmv422[0] = DIVISION(tempmv426,tempmv427);
resetMv tempmv428[1];
resetMv tempmv429[1];
setVector ve430 = {rc1[-5,18,20,23]};
setVector ve431 = {rc1[-5,18,20,23]};
dotVectors tempmv429[0] = <ve430,ve431>;
resetMv tempmv432[1];
setMv tempmv432[0] = rc1[18];
resetMv tempmv433[1];
setMv tempmv433[0] = tempmv429[0];
calculateMvCoeff tempmv428[0] = DIVISION(tempmv432,tempmv433);
resetMv tempmv434[1];
resetMv tempmv435[1];
setVector ve436 = {rc1[-5,18,20,23]};
setVector ve437 = {rc1[-5,18,20,23]};
dotVectors tempmv435[0] = <ve436,ve437>;
resetMv tempmv438[1];
setMv tempmv438[0] = rc1[20];
resetMv tempmv439[1];
setMv tempmv439[0] = tempmv435[0];
calculateMvCoeff tempmv434[0] = DIVISION(tempmv438,tempmv439);
resetMv tempmv440[1];
resetMv tempmv441[1];
setVector ve442 = {rc1[-5,18,20,23]};
setVector ve443 = {rc1[-5,18,20,23]};
dotVectors tempmv441[0] = <ve442,ve443>;
resetMv tempmv444[1];
setMv tempmv444[0] = rc1[21];
resetMv tempmv445[1];
setMv tempmv445[0] = tempmv441[0];
calculateMvCoeff tempmv440[0] = DIVISION(tempmv444,tempmv445);
resetMv tempmv446[1];
resetMv tempmv447[1];
setVector ve448 = {rc1[-5,18,20,23]};
setVector ve449 = {rc1[-5,18,20,23]};
dotVectors tempmv447[0] = <ve448,ve449>;
resetMv tempmv450[1];
setMv tempmv450[0] = rc1[23];
resetMv tempmv451[1];
setMv tempmv451[0] = tempmv447[0];
calculateMvCoeff tempmv446[0] = DIVISION(tempmv450,tempmv451);
resetMv tempmv452[1];
resetMv tempmv453[1];
setVector ve454 = {rc1[-5,18,20,23]};
setVector ve455 = {rc1[-5,18,20,23]};
dotVectors tempmv453[0] = <ve454,ve455>;
resetMv tempmv456[1];
setMv tempmv456[0] = rc1[24];
resetMv tempmv457[1];
setMv tempmv457[0] = tempmv453[0];
calculateMvCoeff tempmv452[0] = DIVISION(tempmv456,tempmv457);
resetMv tempmv458[1];
resetMv tempmv459[1];
setVector ve460 = {rc1[-5,18,20,23]};
setVector ve461 = {rc1[-5,18,20,23]};
dotVectors tempmv459[0] = <ve460,ve461>;
resetMv tempmv462[1];
setMv tempmv462[0] = rc1[25];
resetMv tempmv463[1];
setMv tempmv463[0] = tempmv459[0];
calculateMvCoeff tempmv458[0] = DIVISION(tempmv462,tempmv463);
setVector ve464 = {rc1[-1,2,3,-5,16,-18,-20]};
setVector ve465 = {tempmv422[0],tempmv428[0],tempmv434[0],tempmv440[0],tempmv446[0],tempmv452[0],tempmv458[0]};
dotVectors rc1N[1] = <ve464,ve465>;

//rc1N[2] = (((((((-(rc1[1])) * (rc1[18] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))) + ((-(rc1[2])) * ((-(rc1[5])) / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (-((-(rc1[3])) * (rc1[23] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + ((-(rc1[5])) * (rc1[24] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + ((-(rc1[16])) * (rc1[20] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (-((-(rc1[18])) * (rc1[21] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + ((-(rc1[23])) * (rc1[25] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))
resetMv tempmv466[1];
resetMv tempmv467[1];
setVector ve468 = {rc1[-5,18,20,23]};
setVector ve469 = {rc1[-5,18,20,23]};
dotVectors tempmv467[0] = <ve468,ve469>;
resetMv tempmv470[1];
setMv tempmv470[0] = rc1[18];
resetMv tempmv471[1];
setMv tempmv471[0] = tempmv467[0];
calculateMvCoeff tempmv466[0] = DIVISION(tempmv470,tempmv471);
resetMv tempmv472[1];
resetMv tempmv473[1];
setVector ve474 = {rc1[-5,18,20,23]};
setVector ve475 = {rc1[-5,18,20,23]};
dotVectors tempmv473[0] = <ve474,ve475>;
resetMv tempmv476[1];
setMv tempmv476[0] = rc1[-5];
resetMv tempmv477[1];
setMv tempmv477[0] = tempmv473[0];
calculateMvCoeff tempmv472[0] = DIVISION(tempmv476,tempmv477);
resetMv tempmv478[1];
resetMv tempmv479[1];
setVector ve480 = {rc1[-5,18,20,23]};
setVector ve481 = {rc1[-5,18,20,23]};
dotVectors tempmv479[0] = <ve480,ve481>;
resetMv tempmv482[1];
setMv tempmv482[0] = rc1[23];
resetMv tempmv483[1];
setMv tempmv483[0] = tempmv479[0];
calculateMvCoeff tempmv478[0] = DIVISION(tempmv482,tempmv483);
resetMv tempmv484[1];
resetMv tempmv485[1];
setVector ve486 = {rc1[-5,18,20,23]};
setVector ve487 = {rc1[-5,18,20,23]};
dotVectors tempmv485[0] = <ve486,ve487>;
resetMv tempmv488[1];
setMv tempmv488[0] = rc1[24];
resetMv tempmv489[1];
setMv tempmv489[0] = tempmv485[0];
calculateMvCoeff tempmv484[0] = DIVISION(tempmv488,tempmv489);
resetMv tempmv490[1];
resetMv tempmv491[1];
setVector ve492 = {rc1[-5,18,20,23]};
setVector ve493 = {rc1[-5,18,20,23]};
dotVectors tempmv491[0] = <ve492,ve493>;
resetMv tempmv494[1];
setMv tempmv494[0] = rc1[20];
resetMv tempmv495[1];
setMv tempmv495[0] = tempmv491[0];
calculateMvCoeff tempmv490[0] = DIVISION(tempmv494,tempmv495);
resetMv tempmv496[1];
resetMv tempmv497[1];
setVector ve498 = {rc1[-5,18,20,23]};
setVector ve499 = {rc1[-5,18,20,23]};
dotVectors tempmv497[0] = <ve498,ve499>;
resetMv tempmv500[1];
setMv tempmv500[0] = rc1[21];
resetMv tempmv501[1];
setMv tempmv501[0] = tempmv497[0];
calculateMvCoeff tempmv496[0] = DIVISION(tempmv500,tempmv501);
resetMv tempmv502[1];
resetMv tempmv503[1];
setVector ve504 = {rc1[-5,18,20,23]};
setVector ve505 = {rc1[-5,18,20,23]};
dotVectors tempmv503[0] = <ve504,ve505>;
resetMv tempmv506[1];
setMv tempmv506[0] = rc1[25];
resetMv tempmv507[1];
setMv tempmv507[0] = tempmv503[0];
calculateMvCoeff tempmv502[0] = DIVISION(tempmv506,tempmv507);
setVector ve508 = {rc1[-1,-2,3,-5,-16,18,-23]};
setVector ve509 = {tempmv466[0],tempmv472[0],tempmv478[0],tempmv484[0],tempmv490[0],tempmv496[0],tempmv502[0]};
dotVectors rc1N[2] = <ve508,ve509>;

//rc1N[3] = (((((((-(rc1[1])) * (rc1[20] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))) + ((-(rc1[2])) * (rc1[23] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + ((-(rc1[3])) * ((-(rc1[5])) / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + ((-(rc1[5])) * (rc1[25] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (-((-(rc1[16])) * (rc1[18] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[20])) * (rc1[21] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[23])) * (rc1[24] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))
resetMv tempmv510[1];
resetMv tempmv511[1];
setVector ve512 = {rc1[-5,18,20,23]};
setVector ve513 = {rc1[-5,18,20,23]};
dotVectors tempmv511[0] = <ve512,ve513>;
resetMv tempmv514[1];
setMv tempmv514[0] = rc1[20];
resetMv tempmv515[1];
setMv tempmv515[0] = tempmv511[0];
calculateMvCoeff tempmv510[0] = DIVISION(tempmv514,tempmv515);
resetMv tempmv516[1];
resetMv tempmv517[1];
setVector ve518 = {rc1[-5,18,20,23]};
setVector ve519 = {rc1[-5,18,20,23]};
dotVectors tempmv517[0] = <ve518,ve519>;
resetMv tempmv520[1];
setMv tempmv520[0] = rc1[23];
resetMv tempmv521[1];
setMv tempmv521[0] = tempmv517[0];
calculateMvCoeff tempmv516[0] = DIVISION(tempmv520,tempmv521);
resetMv tempmv522[1];
resetMv tempmv523[1];
setVector ve524 = {rc1[-5,18,20,23]};
setVector ve525 = {rc1[-5,18,20,23]};
dotVectors tempmv523[0] = <ve524,ve525>;
resetMv tempmv526[1];
setMv tempmv526[0] = rc1[-5];
resetMv tempmv527[1];
setMv tempmv527[0] = tempmv523[0];
calculateMvCoeff tempmv522[0] = DIVISION(tempmv526,tempmv527);
resetMv tempmv528[1];
resetMv tempmv529[1];
setVector ve530 = {rc1[-5,18,20,23]};
setVector ve531 = {rc1[-5,18,20,23]};
dotVectors tempmv529[0] = <ve530,ve531>;
resetMv tempmv532[1];
setMv tempmv532[0] = rc1[25];
resetMv tempmv533[1];
setMv tempmv533[0] = tempmv529[0];
calculateMvCoeff tempmv528[0] = DIVISION(tempmv532,tempmv533);
resetMv tempmv534[1];
resetMv tempmv535[1];
setVector ve536 = {rc1[-5,18,20,23]};
setVector ve537 = {rc1[-5,18,20,23]};
dotVectors tempmv535[0] = <ve536,ve537>;
resetMv tempmv538[1];
setMv tempmv538[0] = rc1[18];
resetMv tempmv539[1];
setMv tempmv539[0] = tempmv535[0];
calculateMvCoeff tempmv534[0] = DIVISION(tempmv538,tempmv539);
resetMv tempmv540[1];
resetMv tempmv541[1];
setVector ve542 = {rc1[-5,18,20,23]};
setVector ve543 = {rc1[-5,18,20,23]};
dotVectors tempmv541[0] = <ve542,ve543>;
resetMv tempmv544[1];
setMv tempmv544[0] = rc1[21];
resetMv tempmv545[1];
setMv tempmv545[0] = tempmv541[0];
calculateMvCoeff tempmv540[0] = DIVISION(tempmv544,tempmv545);
resetMv tempmv546[1];
resetMv tempmv547[1];
setVector ve548 = {rc1[-5,18,20,23]};
setVector ve549 = {rc1[-5,18,20,23]};
dotVectors tempmv547[0] = <ve548,ve549>;
resetMv tempmv550[1];
setMv tempmv550[0] = rc1[24];
resetMv tempmv551[1];
setMv tempmv551[0] = tempmv547[0];
calculateMvCoeff tempmv546[0] = DIVISION(tempmv550,tempmv551);
setVector ve552 = {rc1[-1,-2,-3,-5,16,20,23]};
setVector ve553 = {tempmv510[0],tempmv516[0],tempmv522[0],tempmv528[0],tempmv534[0],tempmv540[0],tempmv546[0]};
dotVectors rc1N[3] = <ve552,ve553>;

//rc1N[4] = ((((((((((-(rc1[1])) * (rc1[21] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))) + ((-(rc1[2])) * (rc1[24] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + ((-(rc1[3])) * (rc1[25] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + ((-(rc1[4])) * ((-(rc1[5])) / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23])))))) + (-((-(rc1[17])) * (rc1[18] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[19])) * (rc1[20] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[21])) * (rc1[21] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[22])) * (rc1[23] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[24])) * (rc1[24] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[25])) * (rc1[25] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))
resetMv tempmv554[1];
resetMv tempmv555[1];
setVector ve556 = {rc1[-5,18,20,23]};
setVector ve557 = {rc1[-5,18,20,23]};
dotVectors tempmv555[0] = <ve556,ve557>;
resetMv tempmv558[1];
setMv tempmv558[0] = rc1[21];
resetMv tempmv559[1];
setMv tempmv559[0] = tempmv555[0];
calculateMvCoeff tempmv554[0] = DIVISION(tempmv558,tempmv559);
resetMv tempmv560[1];
resetMv tempmv561[1];
setVector ve562 = {rc1[-5,18,20,23]};
setVector ve563 = {rc1[-5,18,20,23]};
dotVectors tempmv561[0] = <ve562,ve563>;
resetMv tempmv564[1];
setMv tempmv564[0] = rc1[24];
resetMv tempmv565[1];
setMv tempmv565[0] = tempmv561[0];
calculateMvCoeff tempmv560[0] = DIVISION(tempmv564,tempmv565);
resetMv tempmv566[1];
resetMv tempmv567[1];
setVector ve568 = {rc1[-5,18,20,23]};
setVector ve569 = {rc1[-5,18,20,23]};
dotVectors tempmv567[0] = <ve568,ve569>;
resetMv tempmv570[1];
setMv tempmv570[0] = rc1[25];
resetMv tempmv571[1];
setMv tempmv571[0] = tempmv567[0];
calculateMvCoeff tempmv566[0] = DIVISION(tempmv570,tempmv571);
resetMv tempmv572[1];
resetMv tempmv573[1];
setVector ve574 = {rc1[-5,18,20,23]};
setVector ve575 = {rc1[-5,18,20,23]};
dotVectors tempmv573[0] = <ve574,ve575>;
resetMv tempmv576[1];
setMv tempmv576[0] = rc1[-5];
resetMv tempmv577[1];
setMv tempmv577[0] = tempmv573[0];
calculateMvCoeff tempmv572[0] = DIVISION(tempmv576,tempmv577);
resetMv tempmv578[1];
resetMv tempmv579[1];
setVector ve580 = {rc1[-5,18,20,23]};
setVector ve581 = {rc1[-5,18,20,23]};
dotVectors tempmv579[0] = <ve580,ve581>;
resetMv tempmv582[1];
setMv tempmv582[0] = rc1[18];
resetMv tempmv583[1];
setMv tempmv583[0] = tempmv579[0];
calculateMvCoeff tempmv578[0] = DIVISION(tempmv582,tempmv583);
resetMv tempmv584[1];
resetMv tempmv585[1];
setVector ve586 = {rc1[-5,18,20,23]};
setVector ve587 = {rc1[-5,18,20,23]};
dotVectors tempmv585[0] = <ve586,ve587>;
resetMv tempmv588[1];
setMv tempmv588[0] = rc1[20];
resetMv tempmv589[1];
setMv tempmv589[0] = tempmv585[0];
calculateMvCoeff tempmv584[0] = DIVISION(tempmv588,tempmv589);
resetMv tempmv590[1];
resetMv tempmv591[1];
setVector ve592 = {rc1[-5,18,20,23]};
setVector ve593 = {rc1[-5,18,20,23]};
dotVectors tempmv591[0] = <ve592,ve593>;
resetMv tempmv594[1];
setMv tempmv594[0] = rc1[21];
resetMv tempmv595[1];
setMv tempmv595[0] = tempmv591[0];
calculateMvCoeff tempmv590[0] = DIVISION(tempmv594,tempmv595);
resetMv tempmv596[1];
resetMv tempmv597[1];
setVector ve598 = {rc1[-5,18,20,23]};
setVector ve599 = {rc1[-5,18,20,23]};
dotVectors tempmv597[0] = <ve598,ve599>;
resetMv tempmv600[1];
setMv tempmv600[0] = rc1[23];
resetMv tempmv601[1];
setMv tempmv601[0] = tempmv597[0];
calculateMvCoeff tempmv596[0] = DIVISION(tempmv600,tempmv601);
resetMv tempmv602[1];
resetMv tempmv603[1];
setVector ve604 = {rc1[-5,18,20,23]};
setVector ve605 = {rc1[-5,18,20,23]};
dotVectors tempmv603[0] = <ve604,ve605>;
resetMv tempmv606[1];
setMv tempmv606[0] = rc1[24];
resetMv tempmv607[1];
setMv tempmv607[0] = tempmv603[0];
calculateMvCoeff tempmv602[0] = DIVISION(tempmv606,tempmv607);
resetMv tempmv608[1];
resetMv tempmv609[1];
setVector ve610 = {rc1[-5,18,20,23]};
setVector ve611 = {rc1[-5,18,20,23]};
dotVectors tempmv609[0] = <ve610,ve611>;
resetMv tempmv612[1];
setMv tempmv612[0] = rc1[25];
resetMv tempmv613[1];
setMv tempmv613[0] = tempmv609[0];
calculateMvCoeff tempmv608[0] = DIVISION(tempmv612,tempmv613);
setVector ve614 = {rc1[-1,-2,-3,-4,17,19,21,22,24,25]};
setVector ve615 = {tempmv554[0],tempmv560[0],tempmv566[0],tempmv572[0],tempmv578[0],tempmv584[0],tempmv590[0],tempmv596[0],tempmv602[0],tempmv608[0]};
dotVectors rc1N[4] = <ve614,ve615>;

//rc1N[5] = ((((-(rc1[5])) * ((-(rc1[5])) / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))) + (-((-(rc1[18])) * (rc1[18] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[20])) * (rc1[20] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))) + (-((-(rc1[23])) * (rc1[23] / (((((-(rc1[5])) * (-(rc1[5]))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))))))
resetMv tempmv616[1];
resetMv tempmv617[1];
setVector ve618 = {rc1[-5,18,20,23]};
setVector ve619 = {rc1[-5,18,20,23]};
dotVectors tempmv617[0] = <ve618,ve619>;
resetMv tempmv620[1];
setMv tempmv620[0] = rc1[-5];
resetMv tempmv621[1];
setMv tempmv621[0] = tempmv617[0];
calculateMvCoeff tempmv616[0] = DIVISION(tempmv620,tempmv621);
resetMv tempmv622[1];
resetMv tempmv623[1];
setVector ve624 = {rc1[-5,18,20,23]};
setVector ve625 = {rc1[-5,18,20,23]};
dotVectors tempmv623[0] = <ve624,ve625>;
resetMv tempmv626[1];
setMv tempmv626[0] = rc1[18];
resetMv tempmv627[1];
setMv tempmv627[0] = tempmv623[0];
calculateMvCoeff tempmv622[0] = DIVISION(tempmv626,tempmv627);
resetMv tempmv628[1];
resetMv tempmv629[1];
setVector ve630 = {rc1[-5,18,20,23]};
setVector ve631 = {rc1[-5,18,20,23]};
dotVectors tempmv629[0] = <ve630,ve631>;
resetMv tempmv632[1];
setMv tempmv632[0] = rc1[20];
resetMv tempmv633[1];
setMv tempmv633[0] = tempmv629[0];
calculateMvCoeff tempmv628[0] = DIVISION(tempmv632,tempmv633);
resetMv tempmv634[1];
resetMv tempmv635[1];
setVector ve636 = {rc1[-5,18,20,23]};
setVector ve637 = {rc1[-5,18,20,23]};
dotVectors tempmv635[0] = <ve636,ve637>;
resetMv tempmv638[1];
setMv tempmv638[0] = rc1[23];
resetMv tempmv639[1];
setMv tempmv639[0] = tempmv635[0];
calculateMvCoeff tempmv634[0] = DIVISION(tempmv638,tempmv639);
setVector ve640 = {rc1[-5,18,20,23]};
setVector ve641 = {tempmv616[0],tempmv622[0],tempmv628[0],tempmv634[0]};
dotVectors rc1N[5] = <ve640,ve641>;

//rc2[1] = ((((-(len[0])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (rcPpDual[6] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[7] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(rcPpDual[9] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv rc2[32];
resetMv tempmv642[1];
resetMv tempmv643[1];
setVector ve644 = {nen[1,2,3]};
setVector ve645 = {nen[1,2,3]};
dotVectors tempmv643[0] = <ve644,ve645>;
resetMv tempmv646[1];
setMv tempmv646[0] = nen[1];
resetMv tempmv647[1];
setMv tempmv647[0] = tempmv643[0];
calculateMvCoeff tempmv642[0] = DIVISION(tempmv646,tempmv647);
resetMv tempmv648[1];
resetMv tempmv649[1];
setVector ve650 = {nen[1,2,3]};
setVector ve651 = {nen[1,2,3]};
dotVectors tempmv649[0] = <ve650,ve651>;
resetMv tempmv652[1];
setMv tempmv652[0] = nen[2];
resetMv tempmv653[1];
setMv tempmv653[0] = tempmv649[0];
calculateMvCoeff tempmv648[0] = DIVISION(tempmv652,tempmv653);
resetMv tempmv654[1];
resetMv tempmv655[1];
setVector ve656 = {nen[1,2,3]};
setVector ve657 = {nen[1,2,3]};
dotVectors tempmv655[0] = <ve656,ve657>;
resetMv tempmv658[1];
setMv tempmv658[0] = nen[3];
resetMv tempmv659[1];
setMv tempmv659[0] = tempmv655[0];
calculateMvCoeff tempmv654[0] = DIVISION(tempmv658,tempmv659);
resetMv tempmv660[1];
resetMv tempmv661[1];
setVector ve662 = {nen[1,2,3]};
setVector ve663 = {nen[1,2,3]};
dotVectors tempmv661[0] = <ve662,ve663>;
resetMv tempmv664[1];
setMv tempmv664[0] = nen[4];
resetMv tempmv665[1];
setMv tempmv665[0] = tempmv661[0];
calculateMvCoeff tempmv660[0] = DIVISION(tempmv664,tempmv665);
setVector ve666 = {len[-0],rcPpDual[6,7,-9]};
setVector ve667 = {tempmv642[0],tempmv648[0],tempmv654[0],tempmv660[0]};
dotVectors rc2[1] = <ve666,ve667>;

//rc2[2] = ((((-(len[0])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[6] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[10] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(rcPpDual[12] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv668[1];
resetMv tempmv669[1];
setVector ve670 = {nen[1,2,3]};
setVector ve671 = {nen[1,2,3]};
dotVectors tempmv669[0] = <ve670,ve671>;
resetMv tempmv672[1];
setMv tempmv672[0] = nen[2];
resetMv tempmv673[1];
setMv tempmv673[0] = tempmv669[0];
calculateMvCoeff tempmv668[0] = DIVISION(tempmv672,tempmv673);
resetMv tempmv674[1];
resetMv tempmv675[1];
setVector ve676 = {nen[1,2,3]};
setVector ve677 = {nen[1,2,3]};
dotVectors tempmv675[0] = <ve676,ve677>;
resetMv tempmv678[1];
setMv tempmv678[0] = nen[1];
resetMv tempmv679[1];
setMv tempmv679[0] = tempmv675[0];
calculateMvCoeff tempmv674[0] = DIVISION(tempmv678,tempmv679);
resetMv tempmv680[1];
resetMv tempmv681[1];
setVector ve682 = {nen[1,2,3]};
setVector ve683 = {nen[1,2,3]};
dotVectors tempmv681[0] = <ve682,ve683>;
resetMv tempmv684[1];
setMv tempmv684[0] = nen[3];
resetMv tempmv685[1];
setMv tempmv685[0] = tempmv681[0];
calculateMvCoeff tempmv680[0] = DIVISION(tempmv684,tempmv685);
resetMv tempmv686[1];
resetMv tempmv687[1];
setVector ve688 = {nen[1,2,3]};
setVector ve689 = {nen[1,2,3]};
dotVectors tempmv687[0] = <ve688,ve689>;
resetMv tempmv690[1];
setMv tempmv690[0] = nen[4];
resetMv tempmv691[1];
setMv tempmv691[0] = tempmv687[0];
calculateMvCoeff tempmv686[0] = DIVISION(tempmv690,tempmv691);
setVector ve692 = {len[-0],rcPpDual[-6,10,-12]};
setVector ve693 = {tempmv668[0],tempmv674[0],tempmv680[0],tempmv686[0]};
dotVectors rc2[2] = <ve692,ve693>;

//rc2[3] = ((((-(len[0])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[7] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[10] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[14] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv694[1];
resetMv tempmv695[1];
setVector ve696 = {nen[1,2,3]};
setVector ve697 = {nen[1,2,3]};
dotVectors tempmv695[0] = <ve696,ve697>;
resetMv tempmv698[1];
setMv tempmv698[0] = nen[3];
resetMv tempmv699[1];
setMv tempmv699[0] = tempmv695[0];
calculateMvCoeff tempmv694[0] = DIVISION(tempmv698,tempmv699);
resetMv tempmv700[1];
resetMv tempmv701[1];
setVector ve702 = {nen[1,2,3]};
setVector ve703 = {nen[1,2,3]};
dotVectors tempmv701[0] = <ve702,ve703>;
resetMv tempmv704[1];
setMv tempmv704[0] = nen[1];
resetMv tempmv705[1];
setMv tempmv705[0] = tempmv701[0];
calculateMvCoeff tempmv700[0] = DIVISION(tempmv704,tempmv705);
resetMv tempmv706[1];
resetMv tempmv707[1];
setVector ve708 = {nen[1,2,3]};
setVector ve709 = {nen[1,2,3]};
dotVectors tempmv707[0] = <ve708,ve709>;
resetMv tempmv710[1];
setMv tempmv710[0] = nen[2];
resetMv tempmv711[1];
setMv tempmv711[0] = tempmv707[0];
calculateMvCoeff tempmv706[0] = DIVISION(tempmv710,tempmv711);
resetMv tempmv712[1];
resetMv tempmv713[1];
setVector ve714 = {nen[1,2,3]};
setVector ve715 = {nen[1,2,3]};
dotVectors tempmv713[0] = <ve714,ve715>;
resetMv tempmv716[1];
setMv tempmv716[0] = nen[4];
resetMv tempmv717[1];
setMv tempmv717[0] = tempmv713[0];
calculateMvCoeff tempmv712[0] = DIVISION(tempmv716,tempmv717);
setVector ve718 = {len[-0],rcPpDual[-7,-10,-14]};
setVector ve719 = {tempmv694[0],tempmv700[0],tempmv706[0],tempmv712[0]};
dotVectors rc2[3] = <ve718,ve719>;

//rc2[4] = (((((-(len[0])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[8] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[11] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[13] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[15] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv720[1];
resetMv tempmv721[1];
setVector ve722 = {nen[1,2,3]};
setVector ve723 = {nen[1,2,3]};
dotVectors tempmv721[0] = <ve722,ve723>;
resetMv tempmv724[1];
setMv tempmv724[0] = nen[4];
resetMv tempmv725[1];
setMv tempmv725[0] = tempmv721[0];
calculateMvCoeff tempmv720[0] = DIVISION(tempmv724,tempmv725);
resetMv tempmv726[1];
resetMv tempmv727[1];
setVector ve728 = {nen[1,2,3]};
setVector ve729 = {nen[1,2,3]};
dotVectors tempmv727[0] = <ve728,ve729>;
resetMv tempmv730[1];
setMv tempmv730[0] = nen[1];
resetMv tempmv731[1];
setMv tempmv731[0] = tempmv727[0];
calculateMvCoeff tempmv726[0] = DIVISION(tempmv730,tempmv731);
resetMv tempmv732[1];
resetMv tempmv733[1];
setVector ve734 = {nen[1,2,3]};
setVector ve735 = {nen[1,2,3]};
dotVectors tempmv733[0] = <ve734,ve735>;
resetMv tempmv736[1];
setMv tempmv736[0] = nen[2];
resetMv tempmv737[1];
setMv tempmv737[0] = tempmv733[0];
calculateMvCoeff tempmv732[0] = DIVISION(tempmv736,tempmv737);
resetMv tempmv738[1];
resetMv tempmv739[1];
setVector ve740 = {nen[1,2,3]};
setVector ve741 = {nen[1,2,3]};
dotVectors tempmv739[0] = <ve740,ve741>;
resetMv tempmv742[1];
setMv tempmv742[0] = nen[3];
resetMv tempmv743[1];
setMv tempmv743[0] = tempmv739[0];
calculateMvCoeff tempmv738[0] = DIVISION(tempmv742,tempmv743);
resetMv tempmv744[1];
resetMv tempmv745[1];
setVector ve746 = {nen[1,2,3]};
setVector ve747 = {nen[1,2,3]};
dotVectors tempmv745[0] = <ve746,ve747>;
resetMv tempmv748[1];
setMv tempmv748[0] = nen[4];
resetMv tempmv749[1];
setMv tempmv749[0] = tempmv745[0];
calculateMvCoeff tempmv744[0] = DIVISION(tempmv748,tempmv749);
setVector ve750 = {len[-0],rcPpDual[-8,-11,-13,-15]};
setVector ve751 = {tempmv720[0],tempmv726[0],tempmv732[0],tempmv738[0],tempmv744[0]};
dotVectors rc2[4] = <ve750,ve751>;

//rc2[5] = ((-(rcPpDual[9] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(rcPpDual[12] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(rcPpDual[14] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv tempmv752[1];
resetMv tempmv753[1];
setVector ve754 = {nen[1,2,3]};
setVector ve755 = {nen[1,2,3]};
dotVectors tempmv753[0] = <ve754,ve755>;
resetMv tempmv756[1];
setMv tempmv756[0] = nen[1];
resetMv tempmv757[1];
setMv tempmv757[0] = tempmv753[0];
calculateMvCoeff tempmv752[0] = DIVISION(tempmv756,tempmv757);
resetMv tempmv758[1];
resetMv tempmv759[1];
setVector ve760 = {nen[1,2,3]};
setVector ve761 = {nen[1,2,3]};
dotVectors tempmv759[0] = <ve760,ve761>;
resetMv tempmv762[1];
setMv tempmv762[0] = nen[2];
resetMv tempmv763[1];
setMv tempmv763[0] = tempmv759[0];
calculateMvCoeff tempmv758[0] = DIVISION(tempmv762,tempmv763);
resetMv tempmv764[1];
resetMv tempmv765[1];
setVector ve766 = {nen[1,2,3]};
setVector ve767 = {nen[1,2,3]};
dotVectors tempmv765[0] = <ve766,ve767>;
resetMv tempmv768[1];
setMv tempmv768[0] = nen[3];
resetMv tempmv769[1];
setMv tempmv769[0] = tempmv765[0];
calculateMvCoeff tempmv764[0] = DIVISION(tempmv768,tempmv769);
setVector ve770 = {rcPpDual[-9,-12,-14]};
setVector ve771 = {tempmv752[0],tempmv758[0],tempmv764[0]};
dotVectors rc2[5] = <ve770,ve771>;

//rc2[16] = ((rcPpDual[6] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[7] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[10] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv772[1];
resetMv tempmv773[1];
setVector ve774 = {nen[1,2,3]};
setVector ve775 = {nen[1,2,3]};
dotVectors tempmv773[0] = <ve774,ve775>;
resetMv tempmv776[1];
setMv tempmv776[0] = nen[3];
resetMv tempmv777[1];
setMv tempmv777[0] = tempmv773[0];
calculateMvCoeff tempmv772[0] = DIVISION(tempmv776,tempmv777);
resetMv tempmv778[1];
resetMv tempmv779[1];
setVector ve780 = {nen[1,2,3]};
setVector ve781 = {nen[1,2,3]};
dotVectors tempmv779[0] = <ve780,ve781>;
resetMv tempmv782[1];
setMv tempmv782[0] = nen[2];
resetMv tempmv783[1];
setMv tempmv783[0] = tempmv779[0];
calculateMvCoeff tempmv778[0] = DIVISION(tempmv782,tempmv783);
resetMv tempmv784[1];
resetMv tempmv785[1];
setVector ve786 = {nen[1,2,3]};
setVector ve787 = {nen[1,2,3]};
dotVectors tempmv785[0] = <ve786,ve787>;
resetMv tempmv788[1];
setMv tempmv788[0] = nen[1];
resetMv tempmv789[1];
setMv tempmv789[0] = tempmv785[0];
calculateMvCoeff tempmv784[0] = DIVISION(tempmv788,tempmv789);
setVector ve790 = {rcPpDual[6,-7,10]};
setVector ve791 = {tempmv772[0],tempmv778[0],tempmv784[0]};
dotVectors rc2[16] = <ve790,ve791>;

//rc2[17] = ((rcPpDual[6] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[8] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[11] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv792[1];
resetMv tempmv793[1];
setVector ve794 = {nen[1,2,3]};
setVector ve795 = {nen[1,2,3]};
dotVectors tempmv793[0] = <ve794,ve795>;
resetMv tempmv796[1];
setMv tempmv796[0] = nen[4];
resetMv tempmv797[1];
setMv tempmv797[0] = tempmv793[0];
calculateMvCoeff tempmv792[0] = DIVISION(tempmv796,tempmv797);
resetMv tempmv798[1];
resetMv tempmv799[1];
setVector ve800 = {nen[1,2,3]};
setVector ve801 = {nen[1,2,3]};
dotVectors tempmv799[0] = <ve800,ve801>;
resetMv tempmv802[1];
setMv tempmv802[0] = nen[2];
resetMv tempmv803[1];
setMv tempmv803[0] = tempmv799[0];
calculateMvCoeff tempmv798[0] = DIVISION(tempmv802,tempmv803);
resetMv tempmv804[1];
resetMv tempmv805[1];
setVector ve806 = {nen[1,2,3]};
setVector ve807 = {nen[1,2,3]};
dotVectors tempmv805[0] = <ve806,ve807>;
resetMv tempmv808[1];
setMv tempmv808[0] = nen[1];
resetMv tempmv809[1];
setMv tempmv809[0] = tempmv805[0];
calculateMvCoeff tempmv804[0] = DIVISION(tempmv808,tempmv809);
setVector ve810 = {rcPpDual[6,-8,11]};
setVector ve811 = {tempmv792[0],tempmv798[0],tempmv804[0]};
dotVectors rc2[17] = <ve810,ve811>;

//rc2[18] = (-(rcPpDual[9] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[12] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv812[1];
resetMv tempmv813[1];
setVector ve814 = {nen[1,2,3]};
setVector ve815 = {nen[1,2,3]};
dotVectors tempmv813[0] = <ve814,ve815>;
resetMv tempmv816[1];
setMv tempmv816[0] = nen[2];
resetMv tempmv817[1];
setMv tempmv817[0] = tempmv813[0];
calculateMvCoeff tempmv812[0] = DIVISION(tempmv816,tempmv817);
resetMv tempmv818[1];
resetMv tempmv819[1];
setVector ve820 = {nen[1,2,3]};
setVector ve821 = {nen[1,2,3]};
dotVectors tempmv819[0] = <ve820,ve821>;
resetMv tempmv822[1];
setMv tempmv822[0] = nen[1];
resetMv tempmv823[1];
setMv tempmv823[0] = tempmv819[0];
calculateMvCoeff tempmv818[0] = DIVISION(tempmv822,tempmv823);
setVector ve824 = {rcPpDual[-9,12]};
setVector ve825 = {tempmv812[0],tempmv818[0]};
dotVectors rc2[18] = <ve824,ve825>;

//rc2[19] = ((rcPpDual[7] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[8] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[13] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv826[1];
resetMv tempmv827[1];
setVector ve828 = {nen[1,2,3]};
setVector ve829 = {nen[1,2,3]};
dotVectors tempmv827[0] = <ve828,ve829>;
resetMv tempmv830[1];
setMv tempmv830[0] = nen[4];
resetMv tempmv831[1];
setMv tempmv831[0] = tempmv827[0];
calculateMvCoeff tempmv826[0] = DIVISION(tempmv830,tempmv831);
resetMv tempmv832[1];
resetMv tempmv833[1];
setVector ve834 = {nen[1,2,3]};
setVector ve835 = {nen[1,2,3]};
dotVectors tempmv833[0] = <ve834,ve835>;
resetMv tempmv836[1];
setMv tempmv836[0] = nen[3];
resetMv tempmv837[1];
setMv tempmv837[0] = tempmv833[0];
calculateMvCoeff tempmv832[0] = DIVISION(tempmv836,tempmv837);
resetMv tempmv838[1];
resetMv tempmv839[1];
setVector ve840 = {nen[1,2,3]};
setVector ve841 = {nen[1,2,3]};
dotVectors tempmv839[0] = <ve840,ve841>;
resetMv tempmv842[1];
setMv tempmv842[0] = nen[1];
resetMv tempmv843[1];
setMv tempmv843[0] = tempmv839[0];
calculateMvCoeff tempmv838[0] = DIVISION(tempmv842,tempmv843);
setVector ve844 = {rcPpDual[7,-8,13]};
setVector ve845 = {tempmv826[0],tempmv832[0],tempmv838[0]};
dotVectors rc2[19] = <ve844,ve845>;

//rc2[20] = (-(rcPpDual[9] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[14] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv846[1];
resetMv tempmv847[1];
setVector ve848 = {nen[1,2,3]};
setVector ve849 = {nen[1,2,3]};
dotVectors tempmv847[0] = <ve848,ve849>;
resetMv tempmv850[1];
setMv tempmv850[0] = nen[3];
resetMv tempmv851[1];
setMv tempmv851[0] = tempmv847[0];
calculateMvCoeff tempmv846[0] = DIVISION(tempmv850,tempmv851);
resetMv tempmv852[1];
resetMv tempmv853[1];
setVector ve854 = {nen[1,2,3]};
setVector ve855 = {nen[1,2,3]};
dotVectors tempmv853[0] = <ve854,ve855>;
resetMv tempmv856[1];
setMv tempmv856[0] = nen[1];
resetMv tempmv857[1];
setMv tempmv857[0] = tempmv853[0];
calculateMvCoeff tempmv852[0] = DIVISION(tempmv856,tempmv857);
setVector ve858 = {rcPpDual[-9,14]};
setVector ve859 = {tempmv846[0],tempmv852[0]};
dotVectors rc2[20] = <ve858,ve859>;

//rc2[21] = (-(rcPpDual[9] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[15] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv860[1];
resetMv tempmv861[1];
setVector ve862 = {nen[1,2,3]};
setVector ve863 = {nen[1,2,3]};
dotVectors tempmv861[0] = <ve862,ve863>;
resetMv tempmv864[1];
setMv tempmv864[0] = nen[4];
resetMv tempmv865[1];
setMv tempmv865[0] = tempmv861[0];
calculateMvCoeff tempmv860[0] = DIVISION(tempmv864,tempmv865);
resetMv tempmv866[1];
resetMv tempmv867[1];
setVector ve868 = {nen[1,2,3]};
setVector ve869 = {nen[1,2,3]};
dotVectors tempmv867[0] = <ve868,ve869>;
resetMv tempmv870[1];
setMv tempmv870[0] = nen[1];
resetMv tempmv871[1];
setMv tempmv871[0] = tempmv867[0];
calculateMvCoeff tempmv866[0] = DIVISION(tempmv870,tempmv871);
setVector ve872 = {rcPpDual[-9,15]};
setVector ve873 = {tempmv860[0],tempmv866[0]};
dotVectors rc2[21] = <ve872,ve873>;

//rc2[22] = ((rcPpDual[10] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(rcPpDual[11] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (rcPpDual[13] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv874[1];
resetMv tempmv875[1];
setVector ve876 = {nen[1,2,3]};
setVector ve877 = {nen[1,2,3]};
dotVectors tempmv875[0] = <ve876,ve877>;
resetMv tempmv878[1];
setMv tempmv878[0] = nen[4];
resetMv tempmv879[1];
setMv tempmv879[0] = tempmv875[0];
calculateMvCoeff tempmv874[0] = DIVISION(tempmv878,tempmv879);
resetMv tempmv880[1];
resetMv tempmv881[1];
setVector ve882 = {nen[1,2,3]};
setVector ve883 = {nen[1,2,3]};
dotVectors tempmv881[0] = <ve882,ve883>;
resetMv tempmv884[1];
setMv tempmv884[0] = nen[3];
resetMv tempmv885[1];
setMv tempmv885[0] = tempmv881[0];
calculateMvCoeff tempmv880[0] = DIVISION(tempmv884,tempmv885);
resetMv tempmv886[1];
resetMv tempmv887[1];
setVector ve888 = {nen[1,2,3]};
setVector ve889 = {nen[1,2,3]};
dotVectors tempmv887[0] = <ve888,ve889>;
resetMv tempmv890[1];
setMv tempmv890[0] = nen[2];
resetMv tempmv891[1];
setMv tempmv891[0] = tempmv887[0];
calculateMvCoeff tempmv886[0] = DIVISION(tempmv890,tempmv891);
setVector ve892 = {rcPpDual[10,-11,13]};
setVector ve893 = {tempmv874[0],tempmv880[0],tempmv886[0]};
dotVectors rc2[22] = <ve892,ve893>;

//rc2[23] = (-(rcPpDual[12] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[14] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv894[1];
resetMv tempmv895[1];
setVector ve896 = {nen[1,2,3]};
setVector ve897 = {nen[1,2,3]};
dotVectors tempmv895[0] = <ve896,ve897>;
resetMv tempmv898[1];
setMv tempmv898[0] = nen[3];
resetMv tempmv899[1];
setMv tempmv899[0] = tempmv895[0];
calculateMvCoeff tempmv894[0] = DIVISION(tempmv898,tempmv899);
resetMv tempmv900[1];
resetMv tempmv901[1];
setVector ve902 = {nen[1,2,3]};
setVector ve903 = {nen[1,2,3]};
dotVectors tempmv901[0] = <ve902,ve903>;
resetMv tempmv904[1];
setMv tempmv904[0] = nen[2];
resetMv tempmv905[1];
setMv tempmv905[0] = tempmv901[0];
calculateMvCoeff tempmv900[0] = DIVISION(tempmv904,tempmv905);
setVector ve906 = {rcPpDual[-12,14]};
setVector ve907 = {tempmv894[0],tempmv900[0]};
dotVectors rc2[23] = <ve906,ve907>;

//rc2[24] = (-(rcPpDual[12] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[15] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv908[1];
resetMv tempmv909[1];
setVector ve910 = {nen[1,2,3]};
setVector ve911 = {nen[1,2,3]};
dotVectors tempmv909[0] = <ve910,ve911>;
resetMv tempmv912[1];
setMv tempmv912[0] = nen[4];
resetMv tempmv913[1];
setMv tempmv913[0] = tempmv909[0];
calculateMvCoeff tempmv908[0] = DIVISION(tempmv912,tempmv913);
resetMv tempmv914[1];
resetMv tempmv915[1];
setVector ve916 = {nen[1,2,3]};
setVector ve917 = {nen[1,2,3]};
dotVectors tempmv915[0] = <ve916,ve917>;
resetMv tempmv918[1];
setMv tempmv918[0] = nen[2];
resetMv tempmv919[1];
setMv tempmv919[0] = tempmv915[0];
calculateMvCoeff tempmv914[0] = DIVISION(tempmv918,tempmv919);
setVector ve920 = {rcPpDual[-12,15]};
setVector ve921 = {tempmv908[0],tempmv914[0]};
dotVectors rc2[24] = <ve920,ve921>;

//rc2[25] = (-(rcPpDual[14] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (rcPpDual[15] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv tempmv922[1];
resetMv tempmv923[1];
setVector ve924 = {nen[1,2,3]};
setVector ve925 = {nen[1,2,3]};
dotVectors tempmv923[0] = <ve924,ve925>;
resetMv tempmv926[1];
setMv tempmv926[0] = nen[4];
resetMv tempmv927[1];
setMv tempmv927[0] = tempmv923[0];
calculateMvCoeff tempmv922[0] = DIVISION(tempmv926,tempmv927);
resetMv tempmv928[1];
resetMv tempmv929[1];
setVector ve930 = {nen[1,2,3]};
setVector ve931 = {nen[1,2,3]};
dotVectors tempmv929[0] = <ve930,ve931>;
resetMv tempmv932[1];
setMv tempmv932[0] = nen[3];
resetMv tempmv933[1];
setMv tempmv933[0] = tempmv929[0];
calculateMvCoeff tempmv928[0] = DIVISION(tempmv932,tempmv933);
setVector ve934 = {rcPpDual[-14,15]};
setVector ve935 = {tempmv922[0],tempmv928[0]};
dotVectors rc2[25] = <ve934,ve935>;

//rc2N[1] = (((((((-(rc2[1])) * ((-(rc2[5])) / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))) + (-((-(rc2[2])) * (rc2[18] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[3])) * (rc2[20] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + ((-(rc2[5])) * (rc2[21] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (-((-(rc2[16])) * (rc2[23] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + ((-(rc2[18])) * (rc2[24] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + ((-(rc2[20])) * (rc2[25] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))
resetMv rc2N[32];
resetMv tempmv936[1];
resetMv tempmv937[1];
setVector ve938 = {rc2[-5,18,20,23]};
setVector ve939 = {rc2[-5,18,20,23]};
dotVectors tempmv937[0] = <ve938,ve939>;
resetMv tempmv940[1];
setMv tempmv940[0] = rc2[-5];
resetMv tempmv941[1];
setMv tempmv941[0] = tempmv937[0];
calculateMvCoeff tempmv936[0] = DIVISION(tempmv940,tempmv941);
resetMv tempmv942[1];
resetMv tempmv943[1];
setVector ve944 = {rc2[-5,18,20,23]};
setVector ve945 = {rc2[-5,18,20,23]};
dotVectors tempmv943[0] = <ve944,ve945>;
resetMv tempmv946[1];
setMv tempmv946[0] = rc2[18];
resetMv tempmv947[1];
setMv tempmv947[0] = tempmv943[0];
calculateMvCoeff tempmv942[0] = DIVISION(tempmv946,tempmv947);
resetMv tempmv948[1];
resetMv tempmv949[1];
setVector ve950 = {rc2[-5,18,20,23]};
setVector ve951 = {rc2[-5,18,20,23]};
dotVectors tempmv949[0] = <ve950,ve951>;
resetMv tempmv952[1];
setMv tempmv952[0] = rc2[20];
resetMv tempmv953[1];
setMv tempmv953[0] = tempmv949[0];
calculateMvCoeff tempmv948[0] = DIVISION(tempmv952,tempmv953);
resetMv tempmv954[1];
resetMv tempmv955[1];
setVector ve956 = {rc2[-5,18,20,23]};
setVector ve957 = {rc2[-5,18,20,23]};
dotVectors tempmv955[0] = <ve956,ve957>;
resetMv tempmv958[1];
setMv tempmv958[0] = rc2[21];
resetMv tempmv959[1];
setMv tempmv959[0] = tempmv955[0];
calculateMvCoeff tempmv954[0] = DIVISION(tempmv958,tempmv959);
resetMv tempmv960[1];
resetMv tempmv961[1];
setVector ve962 = {rc2[-5,18,20,23]};
setVector ve963 = {rc2[-5,18,20,23]};
dotVectors tempmv961[0] = <ve962,ve963>;
resetMv tempmv964[1];
setMv tempmv964[0] = rc2[23];
resetMv tempmv965[1];
setMv tempmv965[0] = tempmv961[0];
calculateMvCoeff tempmv960[0] = DIVISION(tempmv964,tempmv965);
resetMv tempmv966[1];
resetMv tempmv967[1];
setVector ve968 = {rc2[-5,18,20,23]};
setVector ve969 = {rc2[-5,18,20,23]};
dotVectors tempmv967[0] = <ve968,ve969>;
resetMv tempmv970[1];
setMv tempmv970[0] = rc2[24];
resetMv tempmv971[1];
setMv tempmv971[0] = tempmv967[0];
calculateMvCoeff tempmv966[0] = DIVISION(tempmv970,tempmv971);
resetMv tempmv972[1];
resetMv tempmv973[1];
setVector ve974 = {rc2[-5,18,20,23]};
setVector ve975 = {rc2[-5,18,20,23]};
dotVectors tempmv973[0] = <ve974,ve975>;
resetMv tempmv976[1];
setMv tempmv976[0] = rc2[25];
resetMv tempmv977[1];
setMv tempmv977[0] = tempmv973[0];
calculateMvCoeff tempmv972[0] = DIVISION(tempmv976,tempmv977);
setVector ve978 = {rc2[-1,2,3,-5,16,-18,-20]};
setVector ve979 = {tempmv936[0],tempmv942[0],tempmv948[0],tempmv954[0],tempmv960[0],tempmv966[0],tempmv972[0]};
dotVectors rc2N[1] = <ve978,ve979>;

//rc2N[2] = (((((((-(rc2[1])) * (rc2[18] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))) + ((-(rc2[2])) * ((-(rc2[5])) / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (-((-(rc2[3])) * (rc2[23] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + ((-(rc2[5])) * (rc2[24] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + ((-(rc2[16])) * (rc2[20] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (-((-(rc2[18])) * (rc2[21] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + ((-(rc2[23])) * (rc2[25] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))
resetMv tempmv980[1];
resetMv tempmv981[1];
setVector ve982 = {rc2[-5,18,20,23]};
setVector ve983 = {rc2[-5,18,20,23]};
dotVectors tempmv981[0] = <ve982,ve983>;
resetMv tempmv984[1];
setMv tempmv984[0] = rc2[18];
resetMv tempmv985[1];
setMv tempmv985[0] = tempmv981[0];
calculateMvCoeff tempmv980[0] = DIVISION(tempmv984,tempmv985);
resetMv tempmv986[1];
resetMv tempmv987[1];
setVector ve988 = {rc2[-5,18,20,23]};
setVector ve989 = {rc2[-5,18,20,23]};
dotVectors tempmv987[0] = <ve988,ve989>;
resetMv tempmv990[1];
setMv tempmv990[0] = rc2[-5];
resetMv tempmv991[1];
setMv tempmv991[0] = tempmv987[0];
calculateMvCoeff tempmv986[0] = DIVISION(tempmv990,tempmv991);
resetMv tempmv992[1];
resetMv tempmv993[1];
setVector ve994 = {rc2[-5,18,20,23]};
setVector ve995 = {rc2[-5,18,20,23]};
dotVectors tempmv993[0] = <ve994,ve995>;
resetMv tempmv996[1];
setMv tempmv996[0] = rc2[23];
resetMv tempmv997[1];
setMv tempmv997[0] = tempmv993[0];
calculateMvCoeff tempmv992[0] = DIVISION(tempmv996,tempmv997);
resetMv tempmv998[1];
resetMv tempmv999[1];
setVector ve1000 = {rc2[-5,18,20,23]};
setVector ve1001 = {rc2[-5,18,20,23]};
dotVectors tempmv999[0] = <ve1000,ve1001>;
resetMv tempmv1002[1];
setMv tempmv1002[0] = rc2[24];
resetMv tempmv1003[1];
setMv tempmv1003[0] = tempmv999[0];
calculateMvCoeff tempmv998[0] = DIVISION(tempmv1002,tempmv1003);
resetMv tempmv1004[1];
resetMv tempmv1005[1];
setVector ve1006 = {rc2[-5,18,20,23]};
setVector ve1007 = {rc2[-5,18,20,23]};
dotVectors tempmv1005[0] = <ve1006,ve1007>;
resetMv tempmv1008[1];
setMv tempmv1008[0] = rc2[20];
resetMv tempmv1009[1];
setMv tempmv1009[0] = tempmv1005[0];
calculateMvCoeff tempmv1004[0] = DIVISION(tempmv1008,tempmv1009);
resetMv tempmv1010[1];
resetMv tempmv1011[1];
setVector ve1012 = {rc2[-5,18,20,23]};
setVector ve1013 = {rc2[-5,18,20,23]};
dotVectors tempmv1011[0] = <ve1012,ve1013>;
resetMv tempmv1014[1];
setMv tempmv1014[0] = rc2[21];
resetMv tempmv1015[1];
setMv tempmv1015[0] = tempmv1011[0];
calculateMvCoeff tempmv1010[0] = DIVISION(tempmv1014,tempmv1015);
resetMv tempmv1016[1];
resetMv tempmv1017[1];
setVector ve1018 = {rc2[-5,18,20,23]};
setVector ve1019 = {rc2[-5,18,20,23]};
dotVectors tempmv1017[0] = <ve1018,ve1019>;
resetMv tempmv1020[1];
setMv tempmv1020[0] = rc2[25];
resetMv tempmv1021[1];
setMv tempmv1021[0] = tempmv1017[0];
calculateMvCoeff tempmv1016[0] = DIVISION(tempmv1020,tempmv1021);
setVector ve1022 = {rc2[-1,-2,3,-5,-16,18,-23]};
setVector ve1023 = {tempmv980[0],tempmv986[0],tempmv992[0],tempmv998[0],tempmv1004[0],tempmv1010[0],tempmv1016[0]};
dotVectors rc2N[2] = <ve1022,ve1023>;

//rc2N[3] = (((((((-(rc2[1])) * (rc2[20] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))) + ((-(rc2[2])) * (rc2[23] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + ((-(rc2[3])) * ((-(rc2[5])) / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + ((-(rc2[5])) * (rc2[25] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (-((-(rc2[16])) * (rc2[18] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[20])) * (rc2[21] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[23])) * (rc2[24] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))
resetMv tempmv1024[1];
resetMv tempmv1025[1];
setVector ve1026 = {rc2[-5,18,20,23]};
setVector ve1027 = {rc2[-5,18,20,23]};
dotVectors tempmv1025[0] = <ve1026,ve1027>;
resetMv tempmv1028[1];
setMv tempmv1028[0] = rc2[20];
resetMv tempmv1029[1];
setMv tempmv1029[0] = tempmv1025[0];
calculateMvCoeff tempmv1024[0] = DIVISION(tempmv1028,tempmv1029);
resetMv tempmv1030[1];
resetMv tempmv1031[1];
setVector ve1032 = {rc2[-5,18,20,23]};
setVector ve1033 = {rc2[-5,18,20,23]};
dotVectors tempmv1031[0] = <ve1032,ve1033>;
resetMv tempmv1034[1];
setMv tempmv1034[0] = rc2[23];
resetMv tempmv1035[1];
setMv tempmv1035[0] = tempmv1031[0];
calculateMvCoeff tempmv1030[0] = DIVISION(tempmv1034,tempmv1035);
resetMv tempmv1036[1];
resetMv tempmv1037[1];
setVector ve1038 = {rc2[-5,18,20,23]};
setVector ve1039 = {rc2[-5,18,20,23]};
dotVectors tempmv1037[0] = <ve1038,ve1039>;
resetMv tempmv1040[1];
setMv tempmv1040[0] = rc2[-5];
resetMv tempmv1041[1];
setMv tempmv1041[0] = tempmv1037[0];
calculateMvCoeff tempmv1036[0] = DIVISION(tempmv1040,tempmv1041);
resetMv tempmv1042[1];
resetMv tempmv1043[1];
setVector ve1044 = {rc2[-5,18,20,23]};
setVector ve1045 = {rc2[-5,18,20,23]};
dotVectors tempmv1043[0] = <ve1044,ve1045>;
resetMv tempmv1046[1];
setMv tempmv1046[0] = rc2[25];
resetMv tempmv1047[1];
setMv tempmv1047[0] = tempmv1043[0];
calculateMvCoeff tempmv1042[0] = DIVISION(tempmv1046,tempmv1047);
resetMv tempmv1048[1];
resetMv tempmv1049[1];
setVector ve1050 = {rc2[-5,18,20,23]};
setVector ve1051 = {rc2[-5,18,20,23]};
dotVectors tempmv1049[0] = <ve1050,ve1051>;
resetMv tempmv1052[1];
setMv tempmv1052[0] = rc2[18];
resetMv tempmv1053[1];
setMv tempmv1053[0] = tempmv1049[0];
calculateMvCoeff tempmv1048[0] = DIVISION(tempmv1052,tempmv1053);
resetMv tempmv1054[1];
resetMv tempmv1055[1];
setVector ve1056 = {rc2[-5,18,20,23]};
setVector ve1057 = {rc2[-5,18,20,23]};
dotVectors tempmv1055[0] = <ve1056,ve1057>;
resetMv tempmv1058[1];
setMv tempmv1058[0] = rc2[21];
resetMv tempmv1059[1];
setMv tempmv1059[0] = tempmv1055[0];
calculateMvCoeff tempmv1054[0] = DIVISION(tempmv1058,tempmv1059);
resetMv tempmv1060[1];
resetMv tempmv1061[1];
setVector ve1062 = {rc2[-5,18,20,23]};
setVector ve1063 = {rc2[-5,18,20,23]};
dotVectors tempmv1061[0] = <ve1062,ve1063>;
resetMv tempmv1064[1];
setMv tempmv1064[0] = rc2[24];
resetMv tempmv1065[1];
setMv tempmv1065[0] = tempmv1061[0];
calculateMvCoeff tempmv1060[0] = DIVISION(tempmv1064,tempmv1065);
setVector ve1066 = {rc2[-1,-2,-3,-5,16,20,23]};
setVector ve1067 = {tempmv1024[0],tempmv1030[0],tempmv1036[0],tempmv1042[0],tempmv1048[0],tempmv1054[0],tempmv1060[0]};
dotVectors rc2N[3] = <ve1066,ve1067>;

//rc2N[4] = ((((((((((-(rc2[1])) * (rc2[21] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))) + ((-(rc2[2])) * (rc2[24] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + ((-(rc2[3])) * (rc2[25] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + ((-(rc2[4])) * ((-(rc2[5])) / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23])))))) + (-((-(rc2[17])) * (rc2[18] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[19])) * (rc2[20] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[21])) * (rc2[21] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[22])) * (rc2[23] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[24])) * (rc2[24] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[25])) * (rc2[25] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))
resetMv tempmv1068[1];
resetMv tempmv1069[1];
setVector ve1070 = {rc2[-5,18,20,23]};
setVector ve1071 = {rc2[-5,18,20,23]};
dotVectors tempmv1069[0] = <ve1070,ve1071>;
resetMv tempmv1072[1];
setMv tempmv1072[0] = rc2[21];
resetMv tempmv1073[1];
setMv tempmv1073[0] = tempmv1069[0];
calculateMvCoeff tempmv1068[0] = DIVISION(tempmv1072,tempmv1073);
resetMv tempmv1074[1];
resetMv tempmv1075[1];
setVector ve1076 = {rc2[-5,18,20,23]};
setVector ve1077 = {rc2[-5,18,20,23]};
dotVectors tempmv1075[0] = <ve1076,ve1077>;
resetMv tempmv1078[1];
setMv tempmv1078[0] = rc2[24];
resetMv tempmv1079[1];
setMv tempmv1079[0] = tempmv1075[0];
calculateMvCoeff tempmv1074[0] = DIVISION(tempmv1078,tempmv1079);
resetMv tempmv1080[1];
resetMv tempmv1081[1];
setVector ve1082 = {rc2[-5,18,20,23]};
setVector ve1083 = {rc2[-5,18,20,23]};
dotVectors tempmv1081[0] = <ve1082,ve1083>;
resetMv tempmv1084[1];
setMv tempmv1084[0] = rc2[25];
resetMv tempmv1085[1];
setMv tempmv1085[0] = tempmv1081[0];
calculateMvCoeff tempmv1080[0] = DIVISION(tempmv1084,tempmv1085);
resetMv tempmv1086[1];
resetMv tempmv1087[1];
setVector ve1088 = {rc2[-5,18,20,23]};
setVector ve1089 = {rc2[-5,18,20,23]};
dotVectors tempmv1087[0] = <ve1088,ve1089>;
resetMv tempmv1090[1];
setMv tempmv1090[0] = rc2[-5];
resetMv tempmv1091[1];
setMv tempmv1091[0] = tempmv1087[0];
calculateMvCoeff tempmv1086[0] = DIVISION(tempmv1090,tempmv1091);
resetMv tempmv1092[1];
resetMv tempmv1093[1];
setVector ve1094 = {rc2[-5,18,20,23]};
setVector ve1095 = {rc2[-5,18,20,23]};
dotVectors tempmv1093[0] = <ve1094,ve1095>;
resetMv tempmv1096[1];
setMv tempmv1096[0] = rc2[18];
resetMv tempmv1097[1];
setMv tempmv1097[0] = tempmv1093[0];
calculateMvCoeff tempmv1092[0] = DIVISION(tempmv1096,tempmv1097);
resetMv tempmv1098[1];
resetMv tempmv1099[1];
setVector ve1100 = {rc2[-5,18,20,23]};
setVector ve1101 = {rc2[-5,18,20,23]};
dotVectors tempmv1099[0] = <ve1100,ve1101>;
resetMv tempmv1102[1];
setMv tempmv1102[0] = rc2[20];
resetMv tempmv1103[1];
setMv tempmv1103[0] = tempmv1099[0];
calculateMvCoeff tempmv1098[0] = DIVISION(tempmv1102,tempmv1103);
resetMv tempmv1104[1];
resetMv tempmv1105[1];
setVector ve1106 = {rc2[-5,18,20,23]};
setVector ve1107 = {rc2[-5,18,20,23]};
dotVectors tempmv1105[0] = <ve1106,ve1107>;
resetMv tempmv1108[1];
setMv tempmv1108[0] = rc2[21];
resetMv tempmv1109[1];
setMv tempmv1109[0] = tempmv1105[0];
calculateMvCoeff tempmv1104[0] = DIVISION(tempmv1108,tempmv1109);
resetMv tempmv1110[1];
resetMv tempmv1111[1];
setVector ve1112 = {rc2[-5,18,20,23]};
setVector ve1113 = {rc2[-5,18,20,23]};
dotVectors tempmv1111[0] = <ve1112,ve1113>;
resetMv tempmv1114[1];
setMv tempmv1114[0] = rc2[23];
resetMv tempmv1115[1];
setMv tempmv1115[0] = tempmv1111[0];
calculateMvCoeff tempmv1110[0] = DIVISION(tempmv1114,tempmv1115);
resetMv tempmv1116[1];
resetMv tempmv1117[1];
setVector ve1118 = {rc2[-5,18,20,23]};
setVector ve1119 = {rc2[-5,18,20,23]};
dotVectors tempmv1117[0] = <ve1118,ve1119>;
resetMv tempmv1120[1];
setMv tempmv1120[0] = rc2[24];
resetMv tempmv1121[1];
setMv tempmv1121[0] = tempmv1117[0];
calculateMvCoeff tempmv1116[0] = DIVISION(tempmv1120,tempmv1121);
resetMv tempmv1122[1];
resetMv tempmv1123[1];
setVector ve1124 = {rc2[-5,18,20,23]};
setVector ve1125 = {rc2[-5,18,20,23]};
dotVectors tempmv1123[0] = <ve1124,ve1125>;
resetMv tempmv1126[1];
setMv tempmv1126[0] = rc2[25];
resetMv tempmv1127[1];
setMv tempmv1127[0] = tempmv1123[0];
calculateMvCoeff tempmv1122[0] = DIVISION(tempmv1126,tempmv1127);
setVector ve1128 = {rc2[-1,-2,-3,-4,17,19,21,22,24,25]};
setVector ve1129 = {tempmv1068[0],tempmv1074[0],tempmv1080[0],tempmv1086[0],tempmv1092[0],tempmv1098[0],tempmv1104[0],tempmv1110[0],tempmv1116[0],tempmv1122[0]};
dotVectors rc2N[4] = <ve1128,ve1129>;

//rc2N[5] = ((((-(rc2[5])) * ((-(rc2[5])) / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))) + (-((-(rc2[18])) * (rc2[18] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[20])) * (rc2[20] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))) + (-((-(rc2[23])) * (rc2[23] / (((((-(rc2[5])) * (-(rc2[5]))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))))))
resetMv tempmv1130[1];
resetMv tempmv1131[1];
setVector ve1132 = {rc2[-5,18,20,23]};
setVector ve1133 = {rc2[-5,18,20,23]};
dotVectors tempmv1131[0] = <ve1132,ve1133>;
resetMv tempmv1134[1];
setMv tempmv1134[0] = rc2[-5];
resetMv tempmv1135[1];
setMv tempmv1135[0] = tempmv1131[0];
calculateMvCoeff tempmv1130[0] = DIVISION(tempmv1134,tempmv1135);
resetMv tempmv1136[1];
resetMv tempmv1137[1];
setVector ve1138 = {rc2[-5,18,20,23]};
setVector ve1139 = {rc2[-5,18,20,23]};
dotVectors tempmv1137[0] = <ve1138,ve1139>;
resetMv tempmv1140[1];
setMv tempmv1140[0] = rc2[18];
resetMv tempmv1141[1];
setMv tempmv1141[0] = tempmv1137[0];
calculateMvCoeff tempmv1136[0] = DIVISION(tempmv1140,tempmv1141);
resetMv tempmv1142[1];
resetMv tempmv1143[1];
setVector ve1144 = {rc2[-5,18,20,23]};
setVector ve1145 = {rc2[-5,18,20,23]};
dotVectors tempmv1143[0] = <ve1144,ve1145>;
resetMv tempmv1146[1];
setMv tempmv1146[0] = rc2[20];
resetMv tempmv1147[1];
setMv tempmv1147[0] = tempmv1143[0];
calculateMvCoeff tempmv1142[0] = DIVISION(tempmv1146,tempmv1147);
resetMv tempmv1148[1];
resetMv tempmv1149[1];
setVector ve1150 = {rc2[-5,18,20,23]};
setVector ve1151 = {rc2[-5,18,20,23]};
dotVectors tempmv1149[0] = <ve1150,ve1151>;
resetMv tempmv1152[1];
setMv tempmv1152[0] = rc2[23];
resetMv tempmv1153[1];
setMv tempmv1153[0] = tempmv1149[0];
calculateMvCoeff tempmv1148[0] = DIVISION(tempmv1152,tempmv1153);
setVector ve1154 = {rc2[-5,18,20,23]};
setVector ve1155 = {tempmv1130[0],tempmv1136[0],tempmv1142[0],tempmv1148[0]};
dotVectors rc2N[5] = <ve1154,ve1155>;

//z11[0] = (sqrt(-2.0 * (((((rc1N[1] * sat1[1]) + (rc1N[2] * sat1[2])) + (rc1N[3] * sat1[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat1[4]))))) - inputsVector[0]
resetMv z11[32];
resetMv tempmv1156[1];
resetMv tempmv1157[1];
resetMv tempmv1158[1];
setVector ve1159 = {rc1N[1,2,3,-4,-5]};
setVector ve1160 = {sat1[1,2,3],1.0,sat1[4]};
dotVectors tempmv1158[0] = <ve1159,ve1160>;
setVector ve1161 = {-2.0};
setVector ve1162 = {tempmv1158[0]};
dotVectors tempmv1157[0] = <ve1161,ve1162>;
resetMv tempmv1163[1];
setMv tempmv1163[0] = tempmv1157[0];
calculateMvCoeff tempmv1156[0] = SQRT(tempmv1163);
setVector ve1164 = {tempmv1156[0],inputsVector[-0]};
dotVectors z11[0] = <ve1164>;

//z12[0] = (sqrt(-2.0 * (((((rc2N[1] * sat1[1]) + (rc2N[2] * sat1[2])) + (rc2N[3] * sat1[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat1[4]))))) - inputsVector[0]
resetMv z12[32];
resetMv tempmv1165[1];
resetMv tempmv1166[1];
resetMv tempmv1167[1];
setVector ve1168 = {rc2N[1,2,3,-4,-5]};
setVector ve1169 = {sat1[1,2,3],1.0,sat1[4]};
dotVectors tempmv1167[0] = <ve1168,ve1169>;
setVector ve1170 = {-2.0};
setVector ve1171 = {tempmv1167[0]};
dotVectors tempmv1166[0] = <ve1170,ve1171>;
resetMv tempmv1172[1];
setMv tempmv1172[0] = tempmv1166[0];
calculateMvCoeff tempmv1165[0] = SQRT(tempmv1172);
setVector ve1173 = {tempmv1165[0],inputsVector[-0]};
dotVectors z12[0] = <ve1173>;

//z21[0] = (sqrt(-2.0 * (((((rc1N[1] * sat2[1]) + (rc1N[2] * sat2[2])) + (rc1N[3] * sat2[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat2[4]))))) - inputsVector[1]
resetMv z21[32];
resetMv tempmv1174[1];
resetMv tempmv1175[1];
resetMv tempmv1176[1];
setVector ve1177 = {rc1N[1,2,3,-4,-5]};
setVector ve1178 = {sat2[1,2,3],1.0,sat2[4]};
dotVectors tempmv1176[0] = <ve1177,ve1178>;
setVector ve1179 = {-2.0};
setVector ve1180 = {tempmv1176[0]};
dotVectors tempmv1175[0] = <ve1179,ve1180>;
resetMv tempmv1181[1];
setMv tempmv1181[0] = tempmv1175[0];
calculateMvCoeff tempmv1174[0] = SQRT(tempmv1181);
setVector ve1182 = {tempmv1174[0],inputsVector[-1]};
dotVectors z21[0] = <ve1182>;

//z22[0] = (sqrt(-2.0 * (((((rc2N[1] * sat2[1]) + (rc2N[2] * sat2[2])) + (rc2N[3] * sat2[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat2[4]))))) - inputsVector[1]
resetMv z22[32];
resetMv tempmv1183[1];
resetMv tempmv1184[1];
resetMv tempmv1185[1];
setVector ve1186 = {rc2N[1,2,3,-4,-5]};
setVector ve1187 = {sat2[1,2,3],1.0,sat2[4]};
dotVectors tempmv1185[0] = <ve1186,ve1187>;
setVector ve1188 = {-2.0};
setVector ve1189 = {tempmv1185[0]};
dotVectors tempmv1184[0] = <ve1188,ve1189>;
resetMv tempmv1190[1];
setMv tempmv1190[0] = tempmv1184[0];
calculateMvCoeff tempmv1183[0] = SQRT(tempmv1190);
setVector ve1191 = {tempmv1183[0],inputsVector[-1]};
dotVectors z22[0] = <ve1191>;

//z31[0] = (sqrt(-2.0 * (((((rc1N[1] * sat3[1]) + (rc1N[2] * sat3[2])) + (rc1N[3] * sat3[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat3[4]))))) - inputsVector[2]
resetMv z31[32];
resetMv tempmv1192[1];
resetMv tempmv1193[1];
resetMv tempmv1194[1];
setVector ve1195 = {rc1N[1,2,3,-4,-5]};
setVector ve1196 = {sat3[1,2,3],1.0,sat3[4]};
dotVectors tempmv1194[0] = <ve1195,ve1196>;
setVector ve1197 = {-2.0};
setVector ve1198 = {tempmv1194[0]};
dotVectors tempmv1193[0] = <ve1197,ve1198>;
resetMv tempmv1199[1];
setMv tempmv1199[0] = tempmv1193[0];
calculateMvCoeff tempmv1192[0] = SQRT(tempmv1199);
setVector ve1200 = {tempmv1192[0],inputsVector[-2]};
dotVectors z31[0] = <ve1200>;

//z32[0] = (sqrt(-2.0 * (((((rc2N[1] * sat3[1]) + (rc2N[2] * sat3[2])) + (rc2N[3] * sat3[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat3[4]))))) - inputsVector[2]
resetMv z32[32];
resetMv tempmv1201[1];
resetMv tempmv1202[1];
resetMv tempmv1203[1];
setVector ve1204 = {rc2N[1,2,3,-4,-5]};
setVector ve1205 = {sat3[1,2,3],1.0,sat3[4]};
dotVectors tempmv1203[0] = <ve1204,ve1205>;
setVector ve1206 = {-2.0};
setVector ve1207 = {tempmv1203[0]};
dotVectors tempmv1202[0] = <ve1206,ve1207>;
resetMv tempmv1208[1];
setMv tempmv1208[0] = tempmv1202[0];
calculateMvCoeff tempmv1201[0] = SQRT(tempmv1208);
setVector ve1209 = {tempmv1201[0],inputsVector[-2]};
dotVectors z32[0] = <ve1209>;

