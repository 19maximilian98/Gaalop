//v1[1] = inputsVector[5]
assignVector inputsVector = [y1,y2,y3,x2,x3,x1];
resetMv v1[32];
setMv v1[1,2] = inputsVector[5,0];

//v1[2] = inputsVector[0]

//v2[1] = inputsVector[3]
resetMv v2[32];
setMv v2[1,2] = inputsVector[3,1];

//v2[2] = inputsVector[1]

//v3[1] = inputsVector[4]
resetMv v3[32];
setMv v3[1,2] = inputsVector[4,2];

//v3[2] = inputsVector[2]

//p1[1] = v1[1]
resetMv p1[32];
setMv p1[1,2] = v1[1,2];

//p1[2] = v1[2]

//p1[4] = ((v1[2] * v1[2]) / 2.0) + ((v1[1] * v1[1]) / 2.0)
resetMv mv0[1];
resetMv mv1[1];
setVector ve2 = v1[2];
setVector ve3 = v1[2];
dotVectors mv1[0] = <ve2,ve3>;
resetMv mv4[1];
setMv mv4[0] = mv1[0];
resetMv mv5[1];
assignMv mv5[0] = [2.0];
calculateMvCoeff mv0[0] = DIVISION(mv4,mv5);
resetMv mv6[1];
resetMv mv7[1];
setVector ve8 = v1[1];
setVector ve9 = v1[1];
dotVectors mv7[0] = <ve8,ve9>;
resetMv mv10[1];
setMv mv10[0] = mv7[0];
resetMv mv11[1];
assignMv mv11[0] = [2.0];
calculateMvCoeff mv6[0] = DIVISION(mv10,mv11);
resetMv mv13[2];
setMv mv13[1] = mv6[0];
setMv mv13[0] = mv0[0];
setVector ve12 = mv13[0,1];
dotVectors p1[4] = <ve12>;

//p1[5] = 1.0
assignMv p1[5] = [1.0];

//p1[17] = 0.0

//p2[1] = v2[1]
resetMv p2[32];
setMv p2[1,2] = v2[1,2];

//p2[2] = v2[2]

//p2[4] = ((v2[2] * v2[2]) / 2.0) + ((v2[1] * v2[1]) / 2.0)
resetMv mv14[1];
resetMv mv15[1];
setVector ve16 = v2[2];
setVector ve17 = v2[2];
dotVectors mv15[0] = <ve16,ve17>;
resetMv mv18[1];
setMv mv18[0] = mv15[0];
resetMv mv19[1];
assignMv mv19[0] = [2.0];
calculateMvCoeff mv14[0] = DIVISION(mv18,mv19);
resetMv mv20[1];
resetMv mv21[1];
setVector ve22 = v2[1];
setVector ve23 = v2[1];
dotVectors mv21[0] = <ve22,ve23>;
resetMv mv24[1];
setMv mv24[0] = mv21[0];
resetMv mv25[1];
assignMv mv25[0] = [2.0];
calculateMvCoeff mv20[0] = DIVISION(mv24,mv25);
resetMv mv27[2];
setMv mv27[1] = mv20[0];
setMv mv27[0] = mv14[0];
setVector ve26 = mv27[0,1];
dotVectors p2[4] = <ve26>;

//p2[5] = 1.0
assignMv p2[5] = [1.0];

//p2[17] = 0.0

//p3[1] = v3[1]
resetMv p3[32];
setMv p3[1,2] = v3[1,2];

//p3[2] = v3[2]

//p3[4] = ((v3[2] * v3[2]) / 2.0) + ((v3[1] * v3[1]) / 2.0)
resetMv mv28[1];
resetMv mv29[1];
setVector ve30 = v3[2];
setVector ve31 = v3[2];
dotVectors mv29[0] = <ve30,ve31>;
resetMv mv32[1];
setMv mv32[0] = mv29[0];
resetMv mv33[1];
assignMv mv33[0] = [2.0];
calculateMvCoeff mv28[0] = DIVISION(mv32,mv33);
resetMv mv34[1];
resetMv mv35[1];
setVector ve36 = v3[1];
setVector ve37 = v3[1];
dotVectors mv35[0] = <ve36,ve37>;
resetMv mv38[1];
setMv mv38[0] = mv35[0];
resetMv mv39[1];
assignMv mv39[0] = [2.0];
calculateMvCoeff mv34[0] = DIVISION(mv38,mv39);
resetMv mv41[2];
setMv mv41[0] = mv28[0];
setMv mv41[1] = mv34[0];
setVector ve40 = mv41[0,1];
dotVectors p3[4] = <ve40>;

//p3[5] = 1.0
assignMv p3[5] = [1.0];

//p3[17] = 0.0

//c[7] = (((((p2[2] * p3[4]) - (p1[2] * p3[4])) - (p2[4] * p3[2])) + (p1[4] * p3[2])) + (p1[2] * p2[4])) - (p1[4] * p2[2])
resetMv c[32];
resetMv mv43[6];
setMv mv43[0,2] = p2[2,-4];
setMv mv43[1,3,4,5] = p1[-2,4,2,-4];
setVector ve42 = mv43[0,1,2,3,4,5];
resetMv mv45[6];
setMv mv45[0,1,2,3] = p3[4,4,2,2];
setMv mv45[4,5] = p2[4,2];
setVector ve44 = mv45[0,1,2,3,4,5];
dotVectors c[7] = <ve42,ve44>;

//c[10] = (((((-(p2[1] * p3[4])) + (p1[1] * p3[4])) + (p2[4] * p3[1])) - (p1[4] * p3[1])) - (p1[1] * p2[4])) + (p1[4] * p2[1])
resetMv mv47[6];
setMv mv47[0,2] = p2[-1,4];
setMv mv47[1,3,4,5] = p1[1,-4,-1,4];
setVector ve46 = mv47[0,1,2,3,4,5];
resetMv mv49[6];
setMv mv49[0,1,2,3] = p3[4,4,1,1];
setMv mv49[4,5] = p2[4,1];
setVector ve48 = mv49[0,1,2,3,4,5];
dotVectors c[10] = <ve46,ve48>;

//c[13] = (((((-((p1[1] * p2[2]) * p3[4])) + ((p1[2] * p2[1]) * p3[4])) + ((p1[1] * p2[4]) * p3[2])) - ((p1[4] * p2[1]) * p3[2])) - ((p1[2] * p2[4]) * p3[1])) + ((p1[4] * p2[2]) * p3[1])
setVector ve50 = p1[-1,2,1,-4,-2,4];
setVector ve51 = p2[2,1,4,1,4,2];
setVector ve52 = p3[4,4,2,2,1,1];
dotVectors c[13] = <ve50,ve51,ve52>;

//c[14] = (((((p2[1] * p3[2]) - (p1[1] * p3[2])) - (p2[2] * p3[1])) + (p1[2] * p3[1])) + (p1[1] * p2[2])) - (p1[2] * p2[1])
resetMv mv54[6];
setMv mv54[0,2] = p2[1,-2];
setMv mv54[1,3,4,5] = p1[-1,2,1,-2];
setVector ve53 = mv54[0,1,2,3,4,5];
resetMv mv56[6];
setMv mv56[0,1,2,3] = p3[2,2,1,1];
setMv mv56[4,5] = p2[2,1];
setVector ve55 = mv56[0,1,2,3,4,5];
dotVectors c[14] = <ve53,ve55>;

//ma[1] = (2 * c[14]) * c[7]
resetMv ma[32];
resetMv mv58[1];
assignMv mv58[0] = [2.0];
setVector ve57 = mv58[0];
setVector ve59 = c[14];
setVector ve60 = c[7];
dotVectors ma[1] = <ve57,ve59,ve60>;

//ma[2] = (2 * c[10]) * c[14]
resetMv mv62[1];
assignMv mv62[0] = [2.0];
setVector ve61 = mv62[0];
setVector ve63 = c[10];
setVector ve64 = c[14];
dotVectors ma[2] = <ve61,ve63,ve64>;

//ma[4] = (-(c[7] * c[7])) - (c[10] * c[10])
setVector ve65 = c[-7,-10];
setVector ve66 = c[7,10];
dotVectors ma[4] = <ve65,ve66>;

//ma[5] = -(2 * (c[14] * c[14]))
resetMv mv67[1];
resetMv mv69[1];
assignMv mv69[0] = [2.0];
setVector ve68 = mv69[0];
setVector ve70 = c[14];
setVector ve71 = c[14];
dotVectors mv67[0] = <ve68,ve70,ve71>;
setMv ma[5] = mv67[-0];

//ma[17] = 0

//ma[21] = 0

//ma[24] = 0

//m[1] = (ma[1] / ma[5]) - (0 / ma[5])
resetMv m[32];
resetMv mv72[1];
resetMv mv73[1];
setMv mv73[0] = ma[1];
resetMv mv74[1];
setMv mv74[0] = ma[5];
calculateMvCoeff mv72[0] = DIVISION(mv73,mv74);
resetMv mv75[1];
resetMv mv76[1];
resetMv mv77[1];
resetMv mv78[1];
setMv mv78[0] = ma[5];
calculateMvCoeff mv76[0] = DIVISION(mv77,mv78);
setMv mv75[0] = mv76[-0];
resetMv mv80[2];
setMv mv80[1] = mv75[0];
setMv mv80[0] = mv72[0];
setVector ve79 = mv80[0,1];
dotVectors m[1] = <ve79>;

//m[2] = (ma[2] / ma[5]) - (0 / ma[5])
resetMv mv81[1];
resetMv mv82[1];
setMv mv82[0] = ma[2];
resetMv mv83[1];
setMv mv83[0] = ma[5];
calculateMvCoeff mv81[0] = DIVISION(mv82,mv83);
resetMv mv84[1];
resetMv mv85[1];
resetMv mv86[1];
resetMv mv87[1];
setMv mv87[0] = ma[5];
calculateMvCoeff mv85[0] = DIVISION(mv86,mv87);
setMv mv84[0] = mv85[-0];
resetMv mv89[2];
setMv mv89[0] = mv81[0];
setMv mv89[1] = mv84[0];
setVector ve88 = mv89[0,1];
dotVectors m[2] = <ve88>;

//m[4] = ((((ma[4] / ma[5]) + (0.0 / (ma[5] * ma[5]))) - (0 / (ma[5] * ma[5]))) + (0.0 / (ma[5] * ma[5]))) - (0 / (ma[5] * ma[5]))
resetMv mv90[1];
resetMv mv91[1];
setMv mv91[0] = ma[4];
resetMv mv92[1];
setMv mv92[0] = ma[5];
calculateMvCoeff mv90[0] = DIVISION(mv91,mv92);
resetMv mv93[1];
resetMv mv94[1];
setVector ve95 = ma[5];
setVector ve96 = ma[5];
dotVectors mv94[0] = <ve95,ve96>;
resetMv mv97[1];
resetMv mv98[1];
setMv mv98[0] = mv94[0];
calculateMvCoeff mv93[0] = DIVISION(mv97,mv98);
resetMv mv99[1];
resetMv mv100[1];
resetMv mv101[1];
setVector ve102 = ma[5];
setVector ve103 = ma[5];
dotVectors mv101[0] = <ve102,ve103>;
resetMv mv104[1];
resetMv mv105[1];
setMv mv105[0] = mv101[0];
calculateMvCoeff mv100[0] = DIVISION(mv104,mv105);
setMv mv99[0] = mv100[-0];
resetMv mv106[1];
resetMv mv107[1];
setVector ve108 = ma[5];
setVector ve109 = ma[5];
dotVectors mv107[0] = <ve108,ve109>;
resetMv mv110[1];
resetMv mv111[1];
setMv mv111[0] = mv107[0];
calculateMvCoeff mv106[0] = DIVISION(mv110,mv111);
resetMv mv112[1];
resetMv mv113[1];
resetMv mv114[1];
setVector ve115 = ma[5];
setVector ve116 = ma[5];
dotVectors mv114[0] = <ve115,ve116>;
resetMv mv117[1];
resetMv mv118[1];
setMv mv118[0] = mv114[0];
calculateMvCoeff mv113[0] = DIVISION(mv117,mv118);
setMv mv112[0] = mv113[-0];
resetMv mv120[5];
setMv mv120[3] = mv106[0];
setMv mv120[4] = mv112[0];
setMv mv120[1] = mv93[0];
setMv mv120[0] = mv90[0];
setMv mv120[2] = mv99[0];
setVector ve119 = mv120[0,1,2,3,4];
dotVectors m[4] = <ve119>;

//m[5] = 1
assignMv m[5] = [1.0];

//temp0[0] = ((-((c[7] * c[7]) / (c[14] * c[14]))) + ((2 * c[13]) / c[14])) - ((c[10] * c[10]) / (c[14] * c[14]))
resetMv temp0[32];
resetMv mv121[1];
resetMv mv122[1];
resetMv mv123[1];
setVector ve124 = c[7];
setVector ve125 = c[7];
dotVectors mv123[0] = <ve124,ve125>;
resetMv mv126[1];
setVector ve127 = c[14];
setVector ve128 = c[14];
dotVectors mv126[0] = <ve127,ve128>;
resetMv mv129[1];
setMv mv129[0] = mv123[0];
resetMv mv130[1];
setMv mv130[0] = mv126[0];
calculateMvCoeff mv122[0] = DIVISION(mv129,mv130);
setMv mv121[0] = mv122[-0];
resetMv mv131[1];
resetMv mv132[1];
resetMv mv134[1];
assignMv mv134[0] = [2.0];
setVector ve133 = mv134[0];
setVector ve135 = c[13];
dotVectors mv132[0] = <ve133,ve135>;
resetMv mv136[1];
setMv mv136[0] = mv132[0];
resetMv mv137[1];
setMv mv137[0] = c[14];
calculateMvCoeff mv131[0] = DIVISION(mv136,mv137);
resetMv mv138[1];
resetMv mv139[1];
resetMv mv140[1];
setVector ve141 = c[10];
setVector ve142 = c[10];
dotVectors mv140[0] = <ve141,ve142>;
resetMv mv143[1];
setVector ve144 = c[14];
setVector ve145 = c[14];
dotVectors mv143[0] = <ve144,ve145>;
resetMv mv146[1];
setMv mv146[0] = mv140[0];
resetMv mv147[1];
setMv mv147[0] = mv143[0];
calculateMvCoeff mv139[0] = DIVISION(mv146,mv147);
setMv mv138[0] = mv139[-0];
resetMv mv149[3];
setMv mv149[2] = mv138[0];
setMv mv149[1] = mv131[0];
setMv mv149[0] = mv121[0];
setVector ve148 = mv149[0,1,2];
dotVectors temp0[0] = <ve148>;

//temp1 = abs(temp0)
resetMv temp1[32];
calculateMv temp1 = ABS(temp0);

//temp2 = sqrt(temp1)
resetMv temp2[32];
calculateMv temp2 = SQRT(temp1);

//r[0] = temp2[0]
resetMv r[32];
setMv r[0] = temp2[0];

