//sat1[4] = ((inputsVector[10] * inputsVector[10]) + ((inputsVector[9] * inputsVector[9]) + (inputsVector[7] * inputsVector[7]))) / 2.0
assignVector inputsVector = [d1,d2,d3,sat3x,sat3y,sat3z,sat2y,sat1z,sat2x,sat1y,sat1x,sat2z];
resetMv sat1[32];
resetMv mv0[1];
setVector ve1 = inputsVector[10,9,7];
setVector ve2 = inputsVector[10,9,7];
dotVectors mv0[0] = <ve1,ve2>;
resetMv mv3[1];
setMv mv3[0] = mv0[0];
resetMv mv4[1];
assignMv mv4[0] = [2.0];
calculateMv sat1 = DIVISION(mv3,mv4);

//sat2[4] = ((inputsVector[8] * inputsVector[8]) + ((inputsVector[6] * inputsVector[6]) + (inputsVector[11] * inputsVector[11]))) / 2.0
resetMv sat2[32];
resetMv mv5[1];
setVector ve6 = inputsVector[8,6,11];
setVector ve7 = inputsVector[8,6,11];
dotVectors mv5[0] = <ve6,ve7>;
resetMv mv8[1];
setMv mv8[0] = mv5[0];
resetMv mv9[1];
assignMv mv9[0] = [2.0];
calculateMv sat2 = DIVISION(mv8,mv9);

//sat3[4] = ((inputsVector[3] * inputsVector[3]) + ((inputsVector[4] * inputsVector[4]) + (inputsVector[5] * inputsVector[5]))) / 2.0
resetMv sat3[32];
resetMv mv10[1];
setVector ve11 = inputsVector[3,4,5];
setVector ve12 = inputsVector[3,4,5];
dotVectors mv10[0] = <ve11,ve12>;
resetMv mv13[1];
setMv mv13[0] = mv10[0];
resetMv mv14[1];
assignMv mv14[0] = [2.0];
calculateMv sat3 = DIVISION(mv13,mv14);

//sph1[4] = sat1[4] - ((inputsVector[0] / 2.0) * inputsVector[0])
resetMv sph1[32];
resetMv mv15[1];
resetMv mv16[1];
resetMv mv17[1];
setMv mv17[0] = inputsVector[0];
resetMv mv18[1];
assignMv mv18[0] = [2.0];
calculateMv mv16 = DIVISION(mv17,mv18);
setMv mv15[0] = mv16[-0];
resetMv mv20[2];
setMv mv20[0] = sat1[4];
setMv mv20[1] = mv15[0];
setVector ve19 = mv20[0,1];
resetMv mv22[2];
setMv mv22[1] = inputsVector[0];
assignMv mv22[0] = [1.0];
setVector ve21 = mv22[0,1];
dotVectors sph1[4] = <ve19,ve21>;

//sph2[4] = sat2[4] - ((inputsVector[1] / 2.0) * inputsVector[1])
resetMv sph2[32];
resetMv mv23[1];
resetMv mv24[1];
resetMv mv25[1];
setMv mv25[0] = inputsVector[1];
resetMv mv26[1];
assignMv mv26[0] = [2.0];
calculateMv mv24 = DIVISION(mv25,mv26);
setMv mv23[0] = mv24[-0];
resetMv mv28[2];
setMv mv28[0] = sat2[4];
setMv mv28[1] = mv23[0];
setVector ve27 = mv28[0,1];
resetMv mv30[2];
setMv mv30[1] = inputsVector[1];
assignMv mv30[0] = [1.0];
setVector ve29 = mv30[0,1];
dotVectors sph2[4] = <ve27,ve29>;

//sph3[4] = sat3[4] - ((inputsVector[2] / 2.0) * inputsVector[2])
resetMv sph3[32];
resetMv mv31[1];
resetMv mv32[1];
resetMv mv33[1];
setMv mv33[0] = inputsVector[2];
resetMv mv34[1];
assignMv mv34[0] = [2.0];
calculateMv mv32 = DIVISION(mv33,mv34);
setMv mv31[0] = mv32[-0];
resetMv mv36[2];
setMv mv36[1] = mv31[0];
setMv mv36[0] = sat3[4];
setVector ve35 = mv36[0,1];
resetMv mv38[2];
setMv mv38[1] = inputsVector[2];
assignMv mv38[0] = [1.0];
setVector ve37 = mv38[0,1];
dotVectors sph3[4] = <ve35,ve37>;

//rcPp[16] = ((((inputsVector[10] * inputsVector[6]) + (-(inputsVector[9] * inputsVector[8]))) * inputsVector[5]) + (-(((inputsVector[10] * inputsVector[11]) + (-(inputsVector[7] * inputsVector[8]))) * inputsVector[4]))) + (((inputsVector[9] * inputsVector[11]) + (-(inputsVector[7] * inputsVector[6]))) * inputsVector[3])
resetMv rcPp[32];
resetMv mv39[1];
setVector ve40 = inputsVector[10,-9];
setVector ve41 = inputsVector[6,8];
dotVectors mv39[0] = <ve40,ve41>;
resetMv mv42[1];
resetMv mv43[1];
setVector ve44 = inputsVector[10,-7];
setVector ve45 = inputsVector[11,8];
dotVectors mv43[0] = <ve44,ve45>;
setMv mv42[0] = mv43[-0];
resetMv mv46[1];
setVector ve47 = inputsVector[9,-7];
setVector ve48 = inputsVector[11,6];
dotVectors mv46[0] = <ve47,ve48>;
resetMv mv50[3];
setMv mv50[1] = mv42[0];
setMv mv50[0] = mv39[0];
setMv mv50[2] = mv46[0];
setVector ve49 = mv50[0,1,2];
setVector ve51 = inputsVector[5,4,3];
dotVectors rcPp[16] = <ve49,ve51>;

//rcPp[17] = ((((inputsVector[10] * inputsVector[6]) + (-(inputsVector[9] * inputsVector[8]))) * sph3[4]) + (-(((inputsVector[10] * sph2[4]) + (-(sph1[4] * inputsVector[8]))) * inputsVector[4]))) + (((inputsVector[9] * sph2[4]) + (-(sph1[4] * inputsVector[6]))) * inputsVector[3])
resetMv mv52[1];
setVector ve53 = inputsVector[10,-9];
setVector ve54 = inputsVector[6,8];
dotVectors mv52[0] = <ve53,ve54>;
resetMv mv55[1];
resetMv mv56[1];
resetMv mv58[2];
setMv mv58[0] = inputsVector[10];
setMv mv58[1] = sph1[-4];
setVector ve57 = mv58[0,1];
resetMv mv60[2];
setMv mv60[1] = inputsVector[8];
setMv mv60[0] = sph2[4];
setVector ve59 = mv60[0,1];
dotVectors mv56[0] = <ve57,ve59>;
setMv mv55[0] = mv56[-0];
resetMv mv61[1];
resetMv mv63[2];
setMv mv63[0] = inputsVector[9];
setMv mv63[1] = sph1[-4];
setVector ve62 = mv63[0,1];
resetMv mv65[2];
setMv mv65[1] = inputsVector[6];
setMv mv65[0] = sph2[4];
setVector ve64 = mv65[0,1];
dotVectors mv61[0] = <ve62,ve64>;
resetMv mv67[3];
setMv mv67[1] = mv55[0];
setMv mv67[2] = mv61[0];
setMv mv67[0] = mv52[0];
setVector ve66 = mv67[0,1,2];
resetMv mv69[3];
setMv mv69[1,2] = inputsVector[4,3];
setMv mv69[0] = sph3[4];
setVector ve68 = mv69[0,1,2];
dotVectors rcPp[17] = <ve66,ve68>;

//rcPp[18] = (((inputsVector[10] * inputsVector[6]) + (-(inputsVector[9] * inputsVector[8]))) + (-((inputsVector[10] + (-(inputsVector[8]))) * inputsVector[4]))) + ((inputsVector[9] + (-(inputsVector[6]))) * inputsVector[3])
resetMv mv70[1];
resetMv mv71[1];
setVector ve72 = inputsVector[10,-8];
dotVectors mv71[0] = <ve72>;
setMv mv70[0] = mv71[-0];
resetMv mv73[1];
setVector ve74 = inputsVector[9,-6];
dotVectors mv73[0] = <ve74>;
resetMv mv76[4];
setMv mv76[0,1] = inputsVector[10,-9];
setMv mv76[2] = mv70[0];
setMv mv76[3] = mv73[0];
setVector ve75 = mv76[0,1,2,3];
setVector ve77 = inputsVector[6,8,4,3];
dotVectors rcPp[18] = <ve75,ve77>;

//rcPp[19] = ((((inputsVector[10] * inputsVector[11]) + (-(inputsVector[7] * inputsVector[8]))) * sph3[4]) + (-(((inputsVector[10] * sph2[4]) + (-(sph1[4] * inputsVector[8]))) * inputsVector[5]))) + (((inputsVector[7] * sph2[4]) + (-(sph1[4] * inputsVector[11]))) * inputsVector[3])
resetMv mv78[1];
setVector ve79 = inputsVector[10,-7];
setVector ve80 = inputsVector[11,8];
dotVectors mv78[0] = <ve79,ve80>;
resetMv mv81[1];
resetMv mv82[1];
resetMv mv84[2];
setMv mv84[0] = inputsVector[10];
setMv mv84[1] = sph1[-4];
setVector ve83 = mv84[0,1];
resetMv mv86[2];
setMv mv86[1] = inputsVector[8];
setMv mv86[0] = sph2[4];
setVector ve85 = mv86[0,1];
dotVectors mv82[0] = <ve83,ve85>;
setMv mv81[0] = mv82[-0];
resetMv mv87[1];
resetMv mv89[2];
setMv mv89[0] = inputsVector[7];
setMv mv89[1] = sph1[-4];
setVector ve88 = mv89[0,1];
resetMv mv91[2];
setMv mv91[1] = inputsVector[11];
setMv mv91[0] = sph2[4];
setVector ve90 = mv91[0,1];
dotVectors mv87[0] = <ve88,ve90>;
resetMv mv93[3];
setMv mv93[2] = mv87[0];
setMv mv93[0] = mv78[0];
setMv mv93[1] = mv81[0];
setVector ve92 = mv93[0,1,2];
resetMv mv95[3];
setMv mv95[1,2] = inputsVector[5,3];
setMv mv95[0] = sph3[4];
setVector ve94 = mv95[0,1,2];
dotVectors rcPp[19] = <ve92,ve94>;

//rcPp[20] = (((inputsVector[10] * inputsVector[11]) + (-(inputsVector[7] * inputsVector[8]))) + (-((inputsVector[10] + (-(inputsVector[8]))) * inputsVector[5]))) + ((inputsVector[7] + (-(inputsVector[11]))) * inputsVector[3])
resetMv mv96[1];
resetMv mv97[1];
setVector ve98 = inputsVector[10,-8];
dotVectors mv97[0] = <ve98>;
setMv mv96[0] = mv97[-0];
resetMv mv99[1];
setVector ve100 = inputsVector[7,-11];
dotVectors mv99[0] = <ve100>;
resetMv mv102[4];
setMv mv102[2] = mv96[0];
setMv mv102[0,1] = inputsVector[10,-7];
setMv mv102[3] = mv99[0];
setVector ve101 = mv102[0,1,2,3];
setVector ve103 = inputsVector[11,8,5,3];
dotVectors rcPp[20] = <ve101,ve103>;

//rcPp[21] = (((inputsVector[10] * sph2[4]) + (-(sph1[4] * inputsVector[8]))) + (-((inputsVector[10] + (-(inputsVector[8]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * inputsVector[3])
resetMv mv104[1];
resetMv mv105[1];
setVector ve106 = inputsVector[10,-8];
dotVectors mv105[0] = <ve106>;
setMv mv104[0] = mv105[-0];
resetMv mv107[1];
resetMv mv109[2];
setMv mv109[0] = sph1[4];
setMv mv109[1] = sph2[-4];
setVector ve108 = mv109[0,1];
dotVectors mv107[0] = <ve108>;
resetMv mv111[4];
setMv mv111[3] = mv107[0];
setMv mv111[2] = mv104[0];
setMv mv111[0] = inputsVector[10];
setMv mv111[1] = sph1[-4];
setVector ve110 = mv111[0,1,2,3];
resetMv mv113[4];
setMv mv113[1,3] = inputsVector[8,3];
setMv mv113[2] = sph3[4];
setMv mv113[0] = sph2[4];
setVector ve112 = mv113[0,1,2,3];
dotVectors rcPp[21] = <ve110,ve112>;

//rcPp[22] = ((((inputsVector[9] * inputsVector[11]) + (-(inputsVector[7] * inputsVector[6]))) * sph3[4]) + (-(((inputsVector[9] * sph2[4]) + (-(sph1[4] * inputsVector[6]))) * inputsVector[5]))) + (((inputsVector[7] * sph2[4]) + (-(sph1[4] * inputsVector[11]))) * inputsVector[4])
resetMv mv114[1];
setVector ve115 = inputsVector[9,-7];
setVector ve116 = inputsVector[11,6];
dotVectors mv114[0] = <ve115,ve116>;
resetMv mv117[1];
resetMv mv118[1];
resetMv mv120[2];
setMv mv120[0] = inputsVector[9];
setMv mv120[1] = sph1[-4];
setVector ve119 = mv120[0,1];
resetMv mv122[2];
setMv mv122[1] = inputsVector[6];
setMv mv122[0] = sph2[4];
setVector ve121 = mv122[0,1];
dotVectors mv118[0] = <ve119,ve121>;
setMv mv117[0] = mv118[-0];
resetMv mv123[1];
resetMv mv125[2];
setMv mv125[0] = inputsVector[7];
setMv mv125[1] = sph1[-4];
setVector ve124 = mv125[0,1];
resetMv mv127[2];
setMv mv127[1] = inputsVector[11];
setMv mv127[0] = sph2[4];
setVector ve126 = mv127[0,1];
dotVectors mv123[0] = <ve124,ve126>;
resetMv mv129[3];
setMv mv129[2] = mv123[0];
setMv mv129[0] = mv114[0];
setMv mv129[1] = mv117[0];
setVector ve128 = mv129[0,1,2];
resetMv mv131[3];
setMv mv131[1,2] = inputsVector[5,4];
setMv mv131[0] = sph3[4];
setVector ve130 = mv131[0,1,2];
dotVectors rcPp[22] = <ve128,ve130>;

//rcPp[23] = (((inputsVector[9] * inputsVector[11]) + (-(inputsVector[7] * inputsVector[6]))) + (-((inputsVector[9] + (-(inputsVector[6]))) * inputsVector[5]))) + ((inputsVector[7] + (-(inputsVector[11]))) * inputsVector[4])
resetMv mv132[1];
resetMv mv133[1];
setVector ve134 = inputsVector[9,-6];
dotVectors mv133[0] = <ve134>;
setMv mv132[0] = mv133[-0];
resetMv mv135[1];
setVector ve136 = inputsVector[7,-11];
dotVectors mv135[0] = <ve136>;
resetMv mv138[4];
setMv mv138[3] = mv135[0];
setMv mv138[0,1] = inputsVector[9,-7];
setMv mv138[2] = mv132[0];
setVector ve137 = mv138[0,1,2,3];
setVector ve139 = inputsVector[11,6,5,4];
dotVectors rcPp[23] = <ve137,ve139>;

//rcPp[24] = (((inputsVector[9] * sph2[4]) + (-(sph1[4] * inputsVector[6]))) + (-((inputsVector[9] + (-(inputsVector[6]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * inputsVector[4])
resetMv mv140[1];
resetMv mv141[1];
setVector ve142 = inputsVector[9,-6];
dotVectors mv141[0] = <ve142>;
setMv mv140[0] = mv141[-0];
resetMv mv143[1];
resetMv mv145[2];
setMv mv145[0] = sph1[4];
setMv mv145[1] = sph2[-4];
setVector ve144 = mv145[0,1];
dotVectors mv143[0] = <ve144>;
resetMv mv147[4];
setMv mv147[0] = inputsVector[9];
setMv mv147[1] = sph1[-4];
setMv mv147[2] = mv140[0];
setMv mv147[3] = mv143[0];
setVector ve146 = mv147[0,1,2,3];
resetMv mv149[4];
setMv mv149[1,3] = inputsVector[6,4];
setMv mv149[2] = sph3[4];
setMv mv149[0] = sph2[4];
setVector ve148 = mv149[0,1,2,3];
dotVectors rcPp[24] = <ve146,ve148>;

//rcPp[25] = (((inputsVector[7] * sph2[4]) + (-(sph1[4] * inputsVector[11]))) + (-((inputsVector[7] + (-(inputsVector[11]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * inputsVector[5])
resetMv mv150[1];
resetMv mv151[1];
setVector ve152 = inputsVector[7,-11];
dotVectors mv151[0] = <ve152>;
setMv mv150[0] = mv151[-0];
resetMv mv153[1];
resetMv mv155[2];
setMv mv155[0] = sph1[4];
setMv mv155[1] = sph2[-4];
setVector ve154 = mv155[0,1];
dotVectors mv153[0] = <ve154>;
resetMv mv157[4];
setMv mv157[0] = inputsVector[7];
setMv mv157[1] = sph1[-4];
setMv mv157[3] = mv153[0];
setMv mv157[2] = mv150[0];
setVector ve156 = mv157[0,1,2,3];
resetMv mv159[4];
setMv mv159[1,3] = inputsVector[11,5];
setMv mv159[2] = sph3[4];
setMv mv159[0] = sph2[4];
setVector ve158 = mv159[0,1,2,3];
dotVectors rcPp[25] = <ve156,ve158>;

//temp0[0] = (((((((((-(rcPp[16] * rcPp[16])) + (rcPp[17] * rcPp[18])) + (rcPp[18] * rcPp[17])) + (rcPp[19] * rcPp[20])) + (rcPp[20] * rcPp[19])) + (rcPp[21] * rcPp[21])) + (rcPp[22] * rcPp[23])) + (rcPp[23] * rcPp[22])) + (rcPp[24] * rcPp[24])) + (rcPp[25] * rcPp[25])
resetMv temp0[32];
setVector ve160 = rcPp[-16,17,18,19,20,21,22,23,24,25];
setVector ve161 = rcPp[16,18,17,20,19,21,23,22,24,25];
dotVectors temp0[0] = <ve160,ve161>;

//temp1 = abs(temp0)
resetMv temp1[32];
calculateMv temp1 = ABS(temp0);

//temp2 = sqrt(temp1)
resetMv temp2[32];
calculateMv temp2 = SQRT(temp1);

//rcPpDual[6] = -(rcPp[25])
resetMv rcPpDual[32];
setMv rcPpDual[6,8,10,12,13] = rcPp[-25,-22,-21,-20,-17];

//rcPpDual[8] = -(rcPp[22])

//rcPpDual[10] = -(rcPp[21])

//rcPpDual[12] = -(rcPp[20])

//rcPpDual[13] = -(rcPp[17])

//rc1[0] = (((temp2[1] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (temp2[2] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (temp2[3] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[5] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv rc1[32];
resetMv mv162[1];
resetMv mv163[1];
resetMv mv165[3];
setMv mv165[0,2] = rcPp[23,18];
setMv mv165[1] = rcPpDual[12];
setVector ve164 = mv165[0,1,2];
resetMv mv167[3];
setMv mv167[0,2] = rcPp[23,18];
setMv mv167[1] = rcPpDual[12];
setVector ve166 = mv167[0,1,2];
dotVectors mv163[0] = <ve164,ve166>;
resetMv mv168[1];
setMv mv168[0] = rcPp[23];
resetMv mv169[1];
setMv mv169[0] = mv163[0];
calculateMv mv162 = DIVISION(mv168,mv169);
resetMv mv170[1];
resetMv mv171[1];
resetMv mv173[3];
setMv mv173[0,2] = rcPp[23,18];
setMv mv173[1] = rcPpDual[12];
setVector ve172 = mv173[0,1,2];
resetMv mv175[3];
setMv mv175[0,2] = rcPp[23,18];
setMv mv175[1] = rcPpDual[12];
setVector ve174 = mv175[0,1,2];
dotVectors mv171[0] = <ve172,ve174>;
resetMv mv176[1];
setMv mv176[0] = rcPpDual[12];
resetMv mv177[1];
setMv mv177[0] = mv171[0];
calculateMv mv170 = DIVISION(mv176,mv177);
resetMv mv178[1];
resetMv mv179[1];
resetMv mv181[3];
setMv mv181[0,2] = rcPp[23,18];
setMv mv181[1] = rcPpDual[12];
setVector ve180 = mv181[0,1,2];
resetMv mv183[3];
setMv mv183[0,2] = rcPp[23,18];
setMv mv183[1] = rcPpDual[12];
setVector ve182 = mv183[0,1,2];
dotVectors mv179[0] = <ve180,ve182>;
resetMv mv184[1];
setMv mv184[0] = rcPp[18];
resetMv mv185[1];
setMv mv185[0] = mv179[0];
calculateMv mv178 = DIVISION(mv184,mv185);
resetMv mv186[1];
resetMv mv187[1];
resetMv mv189[3];
setMv mv189[0,2] = rcPp[23,18];
setMv mv189[1] = rcPpDual[12];
setVector ve188 = mv189[0,1,2];
resetMv mv191[3];
setMv mv191[0,2] = rcPp[23,18];
setMv mv191[1] = rcPpDual[12];
setVector ve190 = mv191[0,1,2];
dotVectors mv187[0] = <ve188,ve190>;
resetMv mv192[1];
setMv mv192[0] = rcPp[16];
resetMv mv193[1];
setMv mv193[0] = mv187[0];
calculateMv mv186 = DIVISION(mv192,mv193);
setVector ve194 = temp2[1,2,3,-5];
resetMv mv196[4];
setMv mv196[1] = mv170[0];
setMv mv196[3] = mv186[0];
setMv mv196[0] = mv162[0];
setMv mv196[2] = mv178[0];
setVector ve195 = mv196[0,1,2,3];
dotVectors rc1[0] = <ve194,ve195>;

//rc1[1] = (((temp2[0] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + ((rcPpDual[6] + temp2[6]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((rcPp[24] + temp2[7]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((rcPp[23] + temp2[9]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv197[1];
resetMv mv198[1];
resetMv mv200[3];
setMv mv200[0,2] = rcPp[23,18];
setMv mv200[1] = rcPpDual[12];
setVector ve199 = mv200[0,1,2];
resetMv mv202[3];
setMv mv202[0,2] = rcPp[23,18];
setMv mv202[1] = rcPpDual[12];
setVector ve201 = mv202[0,1,2];
dotVectors mv198[0] = <ve199,ve201>;
resetMv mv203[1];
setMv mv203[0] = rcPp[23];
resetMv mv204[1];
setMv mv204[0] = mv198[0];
calculateMv mv197 = DIVISION(mv203,mv204);
resetMv mv205[1];
resetMv mv207[2];
setMv mv207[1] = temp2[6];
setMv mv207[0] = rcPpDual[6];
setVector ve206 = mv207[0,1];
dotVectors mv205[0] = <ve206>;
resetMv mv208[1];
resetMv mv209[1];
resetMv mv211[3];
setMv mv211[0,2] = rcPp[23,18];
setMv mv211[1] = rcPpDual[12];
setVector ve210 = mv211[0,1,2];
resetMv mv213[3];
setMv mv213[0,2] = rcPp[23,18];
setMv mv213[1] = rcPpDual[12];
setVector ve212 = mv213[0,1,2];
dotVectors mv209[0] = <ve210,ve212>;
resetMv mv214[1];
setMv mv214[0] = rcPpDual[12];
resetMv mv215[1];
setMv mv215[0] = mv209[0];
calculateMv mv208 = DIVISION(mv214,mv215);
resetMv mv216[1];
resetMv mv218[2];
setMv mv218[1] = temp2[7];
setMv mv218[0] = rcPp[24];
setVector ve217 = mv218[0,1];
dotVectors mv216[0] = <ve217>;
resetMv mv219[1];
resetMv mv220[1];
resetMv mv222[3];
setMv mv222[0,2] = rcPp[23,18];
setMv mv222[1] = rcPpDual[12];
setVector ve221 = mv222[0,1,2];
resetMv mv224[3];
setMv mv224[0,2] = rcPp[23,18];
setMv mv224[1] = rcPpDual[12];
setVector ve223 = mv224[0,1,2];
dotVectors mv220[0] = <ve221,ve223>;
resetMv mv225[1];
setMv mv225[0] = rcPp[18];
resetMv mv226[1];
setMv mv226[0] = mv220[0];
calculateMv mv219 = DIVISION(mv225,mv226);
resetMv mv227[1];
resetMv mv228[1];
resetMv mv230[2];
setMv mv230[1] = temp2[9];
setMv mv230[0] = rcPp[23];
setVector ve229 = mv230[0,1];
dotVectors mv228[0] = <ve229>;
setMv mv227[0] = mv228[-0];
resetMv mv231[1];
resetMv mv232[1];
resetMv mv234[3];
setMv mv234[0,2] = rcPp[23,18];
setMv mv234[1] = rcPpDual[12];
setVector ve233 = mv234[0,1,2];
resetMv mv236[3];
setMv mv236[0,2] = rcPp[23,18];
setMv mv236[1] = rcPpDual[12];
setVector ve235 = mv236[0,1,2];
dotVectors mv232[0] = <ve233,ve235>;
resetMv mv237[1];
setMv mv237[0] = rcPp[16];
resetMv mv238[1];
setMv mv238[0] = mv232[0];
calculateMv mv231 = DIVISION(mv237,mv238);
resetMv mv240[4];
setMv mv240[0] = temp2[0];
setMv mv240[1] = mv205[0];
setMv mv240[3] = mv227[0];
setMv mv240[2] = mv216[0];
setVector ve239 = mv240[0,1,2,3];
resetMv mv242[4];
setMv mv242[0] = mv197[0];
setMv mv242[2] = mv219[0];
setMv mv242[3] = mv231[0];
setMv mv242[1] = mv208[0];
setVector ve241 = mv242[0,1,2,3];
dotVectors rc1[1] = <ve239,ve241>;

//rc1[2] = (((temp2[0] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((rcPpDual[6] + temp2[6]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((rcPpDual[10] + temp2[10]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((rcPpDual[12] + temp2[12]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv243[1];
resetMv mv244[1];
resetMv mv246[3];
setMv mv246[0,2] = rcPp[23,18];
setMv mv246[1] = rcPpDual[12];
setVector ve245 = mv246[0,1,2];
resetMv mv248[3];
setMv mv248[0,2] = rcPp[23,18];
setMv mv248[1] = rcPpDual[12];
setVector ve247 = mv248[0,1,2];
dotVectors mv244[0] = <ve245,ve247>;
resetMv mv249[1];
setMv mv249[0] = rcPpDual[12];
resetMv mv250[1];
setMv mv250[0] = mv244[0];
calculateMv mv243 = DIVISION(mv249,mv250);
resetMv mv251[1];
resetMv mv252[1];
resetMv mv254[2];
setMv mv254[1] = temp2[6];
setMv mv254[0] = rcPpDual[6];
setVector ve253 = mv254[0,1];
dotVectors mv252[0] = <ve253>;
setMv mv251[0] = mv252[-0];
resetMv mv255[1];
resetMv mv256[1];
resetMv mv258[3];
setMv mv258[0,2] = rcPp[23,18];
setMv mv258[1] = rcPpDual[12];
setVector ve257 = mv258[0,1,2];
resetMv mv260[3];
setMv mv260[0,2] = rcPp[23,18];
setMv mv260[1] = rcPpDual[12];
setVector ve259 = mv260[0,1,2];
dotVectors mv256[0] = <ve257,ve259>;
resetMv mv261[1];
setMv mv261[0] = rcPp[23];
resetMv mv262[1];
setMv mv262[0] = mv256[0];
calculateMv mv255 = DIVISION(mv261,mv262);
resetMv mv263[1];
resetMv mv265[2];
setMv mv265[1] = temp2[10];
setMv mv265[0] = rcPpDual[10];
setVector ve264 = mv265[0,1];
dotVectors mv263[0] = <ve264>;
resetMv mv266[1];
resetMv mv267[1];
resetMv mv269[3];
setMv mv269[0,2] = rcPp[23,18];
setMv mv269[1] = rcPpDual[12];
setVector ve268 = mv269[0,1,2];
resetMv mv271[3];
setMv mv271[0,2] = rcPp[23,18];
setMv mv271[1] = rcPpDual[12];
setVector ve270 = mv271[0,1,2];
dotVectors mv267[0] = <ve268,ve270>;
resetMv mv272[1];
setMv mv272[0] = rcPp[18];
resetMv mv273[1];
setMv mv273[0] = mv267[0];
calculateMv mv266 = DIVISION(mv272,mv273);
resetMv mv274[1];
resetMv mv275[1];
resetMv mv277[2];
setMv mv277[1] = temp2[12];
setMv mv277[0] = rcPpDual[12];
setVector ve276 = mv277[0,1];
dotVectors mv275[0] = <ve276>;
setMv mv274[0] = mv275[-0];
resetMv mv278[1];
resetMv mv279[1];
resetMv mv281[3];
setMv mv281[0,2] = rcPp[23,18];
setMv mv281[1] = rcPpDual[12];
setVector ve280 = mv281[0,1,2];
resetMv mv283[3];
setMv mv283[0,2] = rcPp[23,18];
setMv mv283[1] = rcPpDual[12];
setVector ve282 = mv283[0,1,2];
dotVectors mv279[0] = <ve280,ve282>;
resetMv mv284[1];
setMv mv284[0] = rcPp[16];
resetMv mv285[1];
setMv mv285[0] = mv279[0];
calculateMv mv278 = DIVISION(mv284,mv285);
resetMv mv287[4];
setMv mv287[3] = mv274[0];
setMv mv287[0] = temp2[0];
setMv mv287[1] = mv251[0];
setMv mv287[2] = mv263[0];
setVector ve286 = mv287[0,1,2,3];
resetMv mv289[4];
setMv mv289[2] = mv266[0];
setMv mv289[1] = mv255[0];
setMv mv289[0] = mv243[0];
setMv mv289[3] = mv278[0];
setVector ve288 = mv289[0,1,2,3];
dotVectors rc1[2] = <ve286,ve288>;

//rc1[3] = (((temp2[0] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((rcPp[24] + temp2[7]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((rcPpDual[10] + temp2[10]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((rcPp[18] + temp2[14]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv290[1];
resetMv mv291[1];
resetMv mv293[3];
setMv mv293[0,2] = rcPp[23,18];
setMv mv293[1] = rcPpDual[12];
setVector ve292 = mv293[0,1,2];
resetMv mv295[3];
setMv mv295[0,2] = rcPp[23,18];
setMv mv295[1] = rcPpDual[12];
setVector ve294 = mv295[0,1,2];
dotVectors mv291[0] = <ve292,ve294>;
resetMv mv296[1];
setMv mv296[0] = rcPp[18];
resetMv mv297[1];
setMv mv297[0] = mv291[0];
calculateMv mv290 = DIVISION(mv296,mv297);
resetMv mv298[1];
resetMv mv299[1];
resetMv mv301[2];
setMv mv301[1] = temp2[7];
setMv mv301[0] = rcPp[24];
setVector ve300 = mv301[0,1];
dotVectors mv299[0] = <ve300>;
setMv mv298[0] = mv299[-0];
resetMv mv302[1];
resetMv mv303[1];
resetMv mv305[3];
setMv mv305[0,2] = rcPp[23,18];
setMv mv305[1] = rcPpDual[12];
setVector ve304 = mv305[0,1,2];
resetMv mv307[3];
setMv mv307[0,2] = rcPp[23,18];
setMv mv307[1] = rcPpDual[12];
setVector ve306 = mv307[0,1,2];
dotVectors mv303[0] = <ve304,ve306>;
resetMv mv308[1];
setMv mv308[0] = rcPp[23];
resetMv mv309[1];
setMv mv309[0] = mv303[0];
calculateMv mv302 = DIVISION(mv308,mv309);
resetMv mv310[1];
resetMv mv311[1];
resetMv mv313[2];
setMv mv313[1] = temp2[10];
setMv mv313[0] = rcPpDual[10];
setVector ve312 = mv313[0,1];
dotVectors mv311[0] = <ve312>;
setMv mv310[0] = mv311[-0];
resetMv mv314[1];
resetMv mv315[1];
resetMv mv317[3];
setMv mv317[0,2] = rcPp[23,18];
setMv mv317[1] = rcPpDual[12];
setVector ve316 = mv317[0,1,2];
resetMv mv319[3];
setMv mv319[0,2] = rcPp[23,18];
setMv mv319[1] = rcPpDual[12];
setVector ve318 = mv319[0,1,2];
dotVectors mv315[0] = <ve316,ve318>;
resetMv mv320[1];
setMv mv320[0] = rcPpDual[12];
resetMv mv321[1];
setMv mv321[0] = mv315[0];
calculateMv mv314 = DIVISION(mv320,mv321);
resetMv mv322[1];
resetMv mv323[1];
resetMv mv325[2];
setMv mv325[1] = temp2[14];
setMv mv325[0] = rcPp[18];
setVector ve324 = mv325[0,1];
dotVectors mv323[0] = <ve324>;
setMv mv322[0] = mv323[-0];
resetMv mv326[1];
resetMv mv327[1];
resetMv mv329[3];
setMv mv329[0,2] = rcPp[23,18];
setMv mv329[1] = rcPpDual[12];
setVector ve328 = mv329[0,1,2];
resetMv mv331[3];
setMv mv331[0,2] = rcPp[23,18];
setMv mv331[1] = rcPpDual[12];
setVector ve330 = mv331[0,1,2];
dotVectors mv327[0] = <ve328,ve330>;
resetMv mv332[1];
setMv mv332[0] = rcPp[16];
resetMv mv333[1];
setMv mv333[0] = mv327[0];
calculateMv mv326 = DIVISION(mv332,mv333);
resetMv mv335[4];
setMv mv335[1] = mv298[0];
setMv mv335[0] = temp2[0];
setMv mv335[2] = mv310[0];
setMv mv335[3] = mv322[0];
setVector ve334 = mv335[0,1,2,3];
resetMv mv337[4];
setMv mv337[0] = mv290[0];
setMv mv337[1] = mv302[0];
setMv mv337[2] = mv314[0];
setMv mv337[3] = mv326[0];
setVector ve336 = mv337[0,1,2,3];
dotVectors rc1[3] = <ve334,ve336>;

//rc1[4] = ((((temp2[0] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((rcPpDual[8] + temp2[8]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((rcPp[19] + temp2[11]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((rcPpDual[13] + temp2[13]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((rcPp[16] + temp2[15]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv338[1];
resetMv mv339[1];
resetMv mv341[3];
setMv mv341[0,2] = rcPp[23,18];
setMv mv341[1] = rcPpDual[12];
setVector ve340 = mv341[0,1,2];
resetMv mv343[3];
setMv mv343[0,2] = rcPp[23,18];
setMv mv343[1] = rcPpDual[12];
setVector ve342 = mv343[0,1,2];
dotVectors mv339[0] = <ve340,ve342>;
resetMv mv344[1];
setMv mv344[0] = rcPp[16];
resetMv mv345[1];
setMv mv345[0] = mv339[0];
calculateMv mv338 = DIVISION(mv344,mv345);
resetMv mv346[1];
resetMv mv347[1];
resetMv mv349[2];
setMv mv349[1] = temp2[8];
setMv mv349[0] = rcPpDual[8];
setVector ve348 = mv349[0,1];
dotVectors mv347[0] = <ve348>;
setMv mv346[0] = mv347[-0];
resetMv mv350[1];
resetMv mv351[1];
resetMv mv353[3];
setMv mv353[0,2] = rcPp[23,18];
setMv mv353[1] = rcPpDual[12];
setVector ve352 = mv353[0,1,2];
resetMv mv355[3];
setMv mv355[0,2] = rcPp[23,18];
setMv mv355[1] = rcPpDual[12];
setVector ve354 = mv355[0,1,2];
dotVectors mv351[0] = <ve352,ve354>;
resetMv mv356[1];
setMv mv356[0] = rcPp[23];
resetMv mv357[1];
setMv mv357[0] = mv351[0];
calculateMv mv350 = DIVISION(mv356,mv357);
resetMv mv358[1];
resetMv mv359[1];
resetMv mv361[2];
setMv mv361[1] = temp2[11];
setMv mv361[0] = rcPp[19];
setVector ve360 = mv361[0,1];
dotVectors mv359[0] = <ve360>;
setMv mv358[0] = mv359[-0];
resetMv mv362[1];
resetMv mv363[1];
resetMv mv365[3];
setMv mv365[0,2] = rcPp[23,18];
setMv mv365[1] = rcPpDual[12];
setVector ve364 = mv365[0,1,2];
resetMv mv367[3];
setMv mv367[0,2] = rcPp[23,18];
setMv mv367[1] = rcPpDual[12];
setVector ve366 = mv367[0,1,2];
dotVectors mv363[0] = <ve364,ve366>;
resetMv mv368[1];
setMv mv368[0] = rcPpDual[12];
resetMv mv369[1];
setMv mv369[0] = mv363[0];
calculateMv mv362 = DIVISION(mv368,mv369);
resetMv mv370[1];
resetMv mv371[1];
resetMv mv373[2];
setMv mv373[1] = temp2[13];
setMv mv373[0] = rcPpDual[13];
setVector ve372 = mv373[0,1];
dotVectors mv371[0] = <ve372>;
setMv mv370[0] = mv371[-0];
resetMv mv374[1];
resetMv mv375[1];
resetMv mv377[3];
setMv mv377[0,2] = rcPp[23,18];
setMv mv377[1] = rcPpDual[12];
setVector ve376 = mv377[0,1,2];
resetMv mv379[3];
setMv mv379[0,2] = rcPp[23,18];
setMv mv379[1] = rcPpDual[12];
setVector ve378 = mv379[0,1,2];
dotVectors mv375[0] = <ve376,ve378>;
resetMv mv380[1];
setMv mv380[0] = rcPp[18];
resetMv mv381[1];
setMv mv381[0] = mv375[0];
calculateMv mv374 = DIVISION(mv380,mv381);
resetMv mv382[1];
resetMv mv383[1];
resetMv mv385[2];
setMv mv385[1] = temp2[15];
setMv mv385[0] = rcPp[16];
setVector ve384 = mv385[0,1];
dotVectors mv383[0] = <ve384>;
setMv mv382[0] = mv383[-0];
resetMv mv386[1];
resetMv mv387[1];
resetMv mv389[3];
setMv mv389[0,2] = rcPp[23,18];
setMv mv389[1] = rcPpDual[12];
setVector ve388 = mv389[0,1,2];
resetMv mv391[3];
setMv mv391[0,2] = rcPp[23,18];
setMv mv391[1] = rcPpDual[12];
setVector ve390 = mv391[0,1,2];
dotVectors mv387[0] = <ve388,ve390>;
resetMv mv392[1];
setMv mv392[0] = rcPp[16];
resetMv mv393[1];
setMv mv393[0] = mv387[0];
calculateMv mv386 = DIVISION(mv392,mv393);
resetMv mv395[5];
setMv mv395[1] = mv346[0];
setMv mv395[0] = temp2[0];
setMv mv395[2] = mv358[0];
setMv mv395[3] = mv370[0];
setMv mv395[4] = mv382[0];
setVector ve394 = mv395[0,1,2,3,4];
resetMv mv397[5];
setMv mv397[4] = mv386[0];
setMv mv397[0] = mv338[0];
setMv mv397[3] = mv374[0];
setMv mv397[2] = mv362[0];
setMv mv397[1] = mv350[0];
setVector ve396 = mv397[0,1,2,3,4];
dotVectors rc1[4] = <ve394,ve396>;

//rc1[5] = ((-((rcPp[23] + temp2[9]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((rcPpDual[12] + temp2[12]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((rcPp[18] + temp2[14]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv398[1];
resetMv mv399[1];
resetMv mv401[2];
setMv mv401[1] = temp2[9];
setMv mv401[0] = rcPp[23];
setVector ve400 = mv401[0,1];
dotVectors mv399[0] = <ve400>;
setMv mv398[0] = mv399[-0];
resetMv mv402[1];
resetMv mv403[1];
resetMv mv405[3];
setMv mv405[0,2] = rcPp[23,18];
setMv mv405[1] = rcPpDual[12];
setVector ve404 = mv405[0,1,2];
resetMv mv407[3];
setMv mv407[0,2] = rcPp[23,18];
setMv mv407[1] = rcPpDual[12];
setVector ve406 = mv407[0,1,2];
dotVectors mv403[0] = <ve404,ve406>;
resetMv mv408[1];
setMv mv408[0] = rcPp[23];
resetMv mv409[1];
setMv mv409[0] = mv403[0];
calculateMv mv402 = DIVISION(mv408,mv409);
resetMv mv410[1];
resetMv mv411[1];
resetMv mv413[2];
setMv mv413[1] = temp2[12];
setMv mv413[0] = rcPpDual[12];
setVector ve412 = mv413[0,1];
dotVectors mv411[0] = <ve412>;
setMv mv410[0] = mv411[-0];
resetMv mv414[1];
resetMv mv415[1];
resetMv mv417[3];
setMv mv417[0,2] = rcPp[23,18];
setMv mv417[1] = rcPpDual[12];
setVector ve416 = mv417[0,1,2];
resetMv mv419[3];
setMv mv419[0,2] = rcPp[23,18];
setMv mv419[1] = rcPpDual[12];
setVector ve418 = mv419[0,1,2];
dotVectors mv415[0] = <ve416,ve418>;
resetMv mv420[1];
setMv mv420[0] = rcPpDual[12];
resetMv mv421[1];
setMv mv421[0] = mv415[0];
calculateMv mv414 = DIVISION(mv420,mv421);
resetMv mv422[1];
resetMv mv423[1];
resetMv mv425[2];
setMv mv425[1] = temp2[14];
setMv mv425[0] = rcPp[18];
setVector ve424 = mv425[0,1];
dotVectors mv423[0] = <ve424>;
setMv mv422[0] = mv423[-0];
resetMv mv426[1];
resetMv mv427[1];
resetMv mv429[3];
setMv mv429[0,2] = rcPp[23,18];
setMv mv429[1] = rcPpDual[12];
setVector ve428 = mv429[0,1,2];
resetMv mv431[3];
setMv mv431[0,2] = rcPp[23,18];
setMv mv431[1] = rcPpDual[12];
setVector ve430 = mv431[0,1,2];
dotVectors mv427[0] = <ve428,ve430>;
resetMv mv432[1];
setMv mv432[0] = rcPp[18];
resetMv mv433[1];
setMv mv433[0] = mv427[0];
calculateMv mv426 = DIVISION(mv432,mv433);
resetMv mv435[3];
setMv mv435[2] = mv422[0];
setMv mv435[0] = mv398[0];
setMv mv435[1] = mv410[0];
setVector ve434 = mv435[0,1,2];
resetMv mv437[3];
setMv mv437[2] = mv426[0];
setMv mv437[1] = mv414[0];
setMv mv437[0] = mv402[0];
setVector ve436 = mv437[0,1,2];
dotVectors rc1[5] = <ve434,ve436>;

//rc1[6] = (((temp2[1] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-(temp2[2] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (temp2[16] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[18] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv438[1];
resetMv mv439[1];
resetMv mv441[3];
setMv mv441[0,2] = rcPp[23,18];
setMv mv441[1] = rcPpDual[12];
setVector ve440 = mv441[0,1,2];
resetMv mv443[3];
setMv mv443[0,2] = rcPp[23,18];
setMv mv443[1] = rcPpDual[12];
setVector ve442 = mv443[0,1,2];
dotVectors mv439[0] = <ve440,ve442>;
resetMv mv444[1];
setMv mv444[0] = rcPpDual[12];
resetMv mv445[1];
setMv mv445[0] = mv439[0];
calculateMv mv438 = DIVISION(mv444,mv445);
resetMv mv446[1];
resetMv mv447[1];
resetMv mv449[3];
setMv mv449[0,2] = rcPp[23,18];
setMv mv449[1] = rcPpDual[12];
setVector ve448 = mv449[0,1,2];
resetMv mv451[3];
setMv mv451[0,2] = rcPp[23,18];
setMv mv451[1] = rcPpDual[12];
setVector ve450 = mv451[0,1,2];
dotVectors mv447[0] = <ve448,ve450>;
resetMv mv452[1];
setMv mv452[0] = rcPp[23];
resetMv mv453[1];
setMv mv453[0] = mv447[0];
calculateMv mv446 = DIVISION(mv452,mv453);
resetMv mv454[1];
resetMv mv455[1];
resetMv mv457[3];
setMv mv457[0,2] = rcPp[23,18];
setMv mv457[1] = rcPpDual[12];
setVector ve456 = mv457[0,1,2];
resetMv mv459[3];
setMv mv459[0,2] = rcPp[23,18];
setMv mv459[1] = rcPpDual[12];
setVector ve458 = mv459[0,1,2];
dotVectors mv455[0] = <ve456,ve458>;
resetMv mv460[1];
setMv mv460[0] = rcPp[18];
resetMv mv461[1];
setMv mv461[0] = mv455[0];
calculateMv mv454 = DIVISION(mv460,mv461);
resetMv mv462[1];
resetMv mv463[1];
resetMv mv465[3];
setMv mv465[0,2] = rcPp[23,18];
setMv mv465[1] = rcPpDual[12];
setVector ve464 = mv465[0,1,2];
resetMv mv467[3];
setMv mv467[0,2] = rcPp[23,18];
setMv mv467[1] = rcPpDual[12];
setVector ve466 = mv467[0,1,2];
dotVectors mv463[0] = <ve464,ve466>;
resetMv mv468[1];
setMv mv468[0] = rcPp[16];
resetMv mv469[1];
setMv mv469[0] = mv463[0];
calculateMv mv462 = DIVISION(mv468,mv469);
setVector ve470 = temp2[1,-2,16,-18];
resetMv mv472[4];
setMv mv472[3] = mv462[0];
setMv mv472[1] = mv446[0];
setMv mv472[0] = mv438[0];
setMv mv472[2] = mv454[0];
setVector ve471 = mv472[0,1,2,3];
dotVectors rc1[6] = <ve470,ve471>;

//rc1[7] = (((temp2[1] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-(temp2[3] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-(temp2[16] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-(temp2[20] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv473[1];
resetMv mv474[1];
resetMv mv476[3];
setMv mv476[0,2] = rcPp[23,18];
setMv mv476[1] = rcPpDual[12];
setVector ve475 = mv476[0,1,2];
resetMv mv478[3];
setMv mv478[0,2] = rcPp[23,18];
setMv mv478[1] = rcPpDual[12];
setVector ve477 = mv478[0,1,2];
dotVectors mv474[0] = <ve475,ve477>;
resetMv mv479[1];
setMv mv479[0] = rcPp[18];
resetMv mv480[1];
setMv mv480[0] = mv474[0];
calculateMv mv473 = DIVISION(mv479,mv480);
resetMv mv481[1];
resetMv mv482[1];
resetMv mv484[3];
setMv mv484[0,2] = rcPp[23,18];
setMv mv484[1] = rcPpDual[12];
setVector ve483 = mv484[0,1,2];
resetMv mv486[3];
setMv mv486[0,2] = rcPp[23,18];
setMv mv486[1] = rcPpDual[12];
setVector ve485 = mv486[0,1,2];
dotVectors mv482[0] = <ve483,ve485>;
resetMv mv487[1];
setMv mv487[0] = rcPp[23];
resetMv mv488[1];
setMv mv488[0] = mv482[0];
calculateMv mv481 = DIVISION(mv487,mv488);
resetMv mv489[1];
resetMv mv490[1];
resetMv mv492[3];
setMv mv492[0,2] = rcPp[23,18];
setMv mv492[1] = rcPpDual[12];
setVector ve491 = mv492[0,1,2];
resetMv mv494[3];
setMv mv494[0,2] = rcPp[23,18];
setMv mv494[1] = rcPpDual[12];
setVector ve493 = mv494[0,1,2];
dotVectors mv490[0] = <ve491,ve493>;
resetMv mv495[1];
setMv mv495[0] = rcPpDual[12];
resetMv mv496[1];
setMv mv496[0] = mv490[0];
calculateMv mv489 = DIVISION(mv495,mv496);
resetMv mv497[1];
resetMv mv498[1];
resetMv mv500[3];
setMv mv500[0,2] = rcPp[23,18];
setMv mv500[1] = rcPpDual[12];
setVector ve499 = mv500[0,1,2];
resetMv mv502[3];
setMv mv502[0,2] = rcPp[23,18];
setMv mv502[1] = rcPpDual[12];
setVector ve501 = mv502[0,1,2];
dotVectors mv498[0] = <ve499,ve501>;
resetMv mv503[1];
setMv mv503[0] = rcPp[16];
resetMv mv504[1];
setMv mv504[0] = mv498[0];
calculateMv mv497 = DIVISION(mv503,mv504);
setVector ve505 = temp2[1,-3,-16,-20];
resetMv mv507[4];
setMv mv507[1] = mv481[0];
setMv mv507[0] = mv473[0];
setMv mv507[3] = mv497[0];
setMv mv507[2] = mv489[0];
setVector ve506 = mv507[0,1,2,3];
dotVectors rc1[7] = <ve505,ve506>;

//rc1[8] = ((((temp2[1] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-(temp2[4] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-(temp2[17] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-(temp2[19] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-(temp2[21] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv508[1];
resetMv mv509[1];
resetMv mv511[3];
setMv mv511[0,2] = rcPp[23,18];
setMv mv511[1] = rcPpDual[12];
setVector ve510 = mv511[0,1,2];
resetMv mv513[3];
setMv mv513[0,2] = rcPp[23,18];
setMv mv513[1] = rcPpDual[12];
setVector ve512 = mv513[0,1,2];
dotVectors mv509[0] = <ve510,ve512>;
resetMv mv514[1];
setMv mv514[0] = rcPp[16];
resetMv mv515[1];
setMv mv515[0] = mv509[0];
calculateMv mv508 = DIVISION(mv514,mv515);
resetMv mv516[1];
resetMv mv517[1];
resetMv mv519[3];
setMv mv519[0,2] = rcPp[23,18];
setMv mv519[1] = rcPpDual[12];
setVector ve518 = mv519[0,1,2];
resetMv mv521[3];
setMv mv521[0,2] = rcPp[23,18];
setMv mv521[1] = rcPpDual[12];
setVector ve520 = mv521[0,1,2];
dotVectors mv517[0] = <ve518,ve520>;
resetMv mv522[1];
setMv mv522[0] = rcPp[23];
resetMv mv523[1];
setMv mv523[0] = mv517[0];
calculateMv mv516 = DIVISION(mv522,mv523);
resetMv mv524[1];
resetMv mv525[1];
resetMv mv527[3];
setMv mv527[0,2] = rcPp[23,18];
setMv mv527[1] = rcPpDual[12];
setVector ve526 = mv527[0,1,2];
resetMv mv529[3];
setMv mv529[0,2] = rcPp[23,18];
setMv mv529[1] = rcPpDual[12];
setVector ve528 = mv529[0,1,2];
dotVectors mv525[0] = <ve526,ve528>;
resetMv mv530[1];
setMv mv530[0] = rcPpDual[12];
resetMv mv531[1];
setMv mv531[0] = mv525[0];
calculateMv mv524 = DIVISION(mv530,mv531);
resetMv mv532[1];
resetMv mv533[1];
resetMv mv535[3];
setMv mv535[0,2] = rcPp[23,18];
setMv mv535[1] = rcPpDual[12];
setVector ve534 = mv535[0,1,2];
resetMv mv537[3];
setMv mv537[0,2] = rcPp[23,18];
setMv mv537[1] = rcPpDual[12];
setVector ve536 = mv537[0,1,2];
dotVectors mv533[0] = <ve534,ve536>;
resetMv mv538[1];
setMv mv538[0] = rcPp[18];
resetMv mv539[1];
setMv mv539[0] = mv533[0];
calculateMv mv532 = DIVISION(mv538,mv539);
resetMv mv540[1];
resetMv mv541[1];
resetMv mv543[3];
setMv mv543[0,2] = rcPp[23,18];
setMv mv543[1] = rcPpDual[12];
setVector ve542 = mv543[0,1,2];
resetMv mv545[3];
setMv mv545[0,2] = rcPp[23,18];
setMv mv545[1] = rcPpDual[12];
setVector ve544 = mv545[0,1,2];
dotVectors mv541[0] = <ve542,ve544>;
resetMv mv546[1];
setMv mv546[0] = rcPp[16];
resetMv mv547[1];
setMv mv547[0] = mv541[0];
calculateMv mv540 = DIVISION(mv546,mv547);
setVector ve548 = temp2[1,-4,-17,-19,-21];
resetMv mv550[5];
setMv mv550[2] = mv524[0];
setMv mv550[0] = mv508[0];
setMv mv550[1] = mv516[0];
setMv mv550[4] = mv540[0];
setMv mv550[3] = mv532[0];
setVector ve549 = mv550[0,1,2,3,4];
dotVectors rc1[8] = <ve548,ve549>;

//rc1[9] = ((-(temp2[5] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[18] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-(temp2[20] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv551[1];
resetMv mv552[1];
resetMv mv554[3];
setMv mv554[0,2] = rcPp[23,18];
setMv mv554[1] = rcPpDual[12];
setVector ve553 = mv554[0,1,2];
resetMv mv556[3];
setMv mv556[0,2] = rcPp[23,18];
setMv mv556[1] = rcPpDual[12];
setVector ve555 = mv556[0,1,2];
dotVectors mv552[0] = <ve553,ve555>;
resetMv mv557[1];
setMv mv557[0] = rcPp[23];
resetMv mv558[1];
setMv mv558[0] = mv552[0];
calculateMv mv551 = DIVISION(mv557,mv558);
resetMv mv559[1];
resetMv mv560[1];
resetMv mv562[3];
setMv mv562[0,2] = rcPp[23,18];
setMv mv562[1] = rcPpDual[12];
setVector ve561 = mv562[0,1,2];
resetMv mv564[3];
setMv mv564[0,2] = rcPp[23,18];
setMv mv564[1] = rcPpDual[12];
setVector ve563 = mv564[0,1,2];
dotVectors mv560[0] = <ve561,ve563>;
resetMv mv565[1];
setMv mv565[0] = rcPpDual[12];
resetMv mv566[1];
setMv mv566[0] = mv560[0];
calculateMv mv559 = DIVISION(mv565,mv566);
resetMv mv567[1];
resetMv mv568[1];
resetMv mv570[3];
setMv mv570[0,2] = rcPp[23,18];
setMv mv570[1] = rcPpDual[12];
setVector ve569 = mv570[0,1,2];
resetMv mv572[3];
setMv mv572[0,2] = rcPp[23,18];
setMv mv572[1] = rcPpDual[12];
setVector ve571 = mv572[0,1,2];
dotVectors mv568[0] = <ve569,ve571>;
resetMv mv573[1];
setMv mv573[0] = rcPp[18];
resetMv mv574[1];
setMv mv574[0] = mv568[0];
calculateMv mv567 = DIVISION(mv573,mv574);
setVector ve575 = temp2[-5,-18,-20];
resetMv mv577[3];
setMv mv577[1] = mv559[0];
setMv mv577[0] = mv551[0];
setMv mv577[2] = mv567[0];
setVector ve576 = mv577[0,1,2];
dotVectors rc1[9] = <ve575,ve576>;

//rc1[10] = (((temp2[2] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-(temp2[3] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (temp2[16] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[23] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv578[1];
resetMv mv579[1];
resetMv mv581[3];
setMv mv581[0,2] = rcPp[23,18];
setMv mv581[1] = rcPpDual[12];
setVector ve580 = mv581[0,1,2];
resetMv mv583[3];
setMv mv583[0,2] = rcPp[23,18];
setMv mv583[1] = rcPpDual[12];
setVector ve582 = mv583[0,1,2];
dotVectors mv579[0] = <ve580,ve582>;
resetMv mv584[1];
setMv mv584[0] = rcPp[18];
resetMv mv585[1];
setMv mv585[0] = mv579[0];
calculateMv mv578 = DIVISION(mv584,mv585);
resetMv mv586[1];
resetMv mv587[1];
resetMv mv589[3];
setMv mv589[0,2] = rcPp[23,18];
setMv mv589[1] = rcPpDual[12];
setVector ve588 = mv589[0,1,2];
resetMv mv591[3];
setMv mv591[0,2] = rcPp[23,18];
setMv mv591[1] = rcPpDual[12];
setVector ve590 = mv591[0,1,2];
dotVectors mv587[0] = <ve588,ve590>;
resetMv mv592[1];
setMv mv592[0] = rcPpDual[12];
resetMv mv593[1];
setMv mv593[0] = mv587[0];
calculateMv mv586 = DIVISION(mv592,mv593);
resetMv mv594[1];
resetMv mv595[1];
resetMv mv597[3];
setMv mv597[0,2] = rcPp[23,18];
setMv mv597[1] = rcPpDual[12];
setVector ve596 = mv597[0,1,2];
resetMv mv599[3];
setMv mv599[0,2] = rcPp[23,18];
setMv mv599[1] = rcPpDual[12];
setVector ve598 = mv599[0,1,2];
dotVectors mv595[0] = <ve596,ve598>;
resetMv mv600[1];
setMv mv600[0] = rcPp[23];
resetMv mv601[1];
setMv mv601[0] = mv595[0];
calculateMv mv594 = DIVISION(mv600,mv601);
resetMv mv602[1];
resetMv mv603[1];
resetMv mv605[3];
setMv mv605[0,2] = rcPp[23,18];
setMv mv605[1] = rcPpDual[12];
setVector ve604 = mv605[0,1,2];
resetMv mv607[3];
setMv mv607[0,2] = rcPp[23,18];
setMv mv607[1] = rcPpDual[12];
setVector ve606 = mv607[0,1,2];
dotVectors mv603[0] = <ve604,ve606>;
resetMv mv608[1];
setMv mv608[0] = rcPp[16];
resetMv mv609[1];
setMv mv609[0] = mv603[0];
calculateMv mv602 = DIVISION(mv608,mv609);
setVector ve610 = temp2[2,-3,16,-23];
resetMv mv612[4];
setMv mv612[0] = mv578[0];
setMv mv612[1] = mv586[0];
setMv mv612[3] = mv602[0];
setMv mv612[2] = mv594[0];
setVector ve611 = mv612[0,1,2,3];
dotVectors rc1[10] = <ve610,ve611>;

//rc1[11] = ((((temp2[2] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-(temp2[4] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (temp2[17] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[22] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-(temp2[24] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv613[1];
resetMv mv614[1];
resetMv mv616[3];
setMv mv616[0,2] = rcPp[23,18];
setMv mv616[1] = rcPpDual[12];
setVector ve615 = mv616[0,1,2];
resetMv mv618[3];
setMv mv618[0,2] = rcPp[23,18];
setMv mv618[1] = rcPpDual[12];
setVector ve617 = mv618[0,1,2];
dotVectors mv614[0] = <ve615,ve617>;
resetMv mv619[1];
setMv mv619[0] = rcPp[16];
resetMv mv620[1];
setMv mv620[0] = mv614[0];
calculateMv mv613 = DIVISION(mv619,mv620);
resetMv mv621[1];
resetMv mv622[1];
resetMv mv624[3];
setMv mv624[0,2] = rcPp[23,18];
setMv mv624[1] = rcPpDual[12];
setVector ve623 = mv624[0,1,2];
resetMv mv626[3];
setMv mv626[0,2] = rcPp[23,18];
setMv mv626[1] = rcPpDual[12];
setVector ve625 = mv626[0,1,2];
dotVectors mv622[0] = <ve623,ve625>;
resetMv mv627[1];
setMv mv627[0] = rcPpDual[12];
resetMv mv628[1];
setMv mv628[0] = mv622[0];
calculateMv mv621 = DIVISION(mv627,mv628);
resetMv mv629[1];
resetMv mv630[1];
resetMv mv632[3];
setMv mv632[0,2] = rcPp[23,18];
setMv mv632[1] = rcPpDual[12];
setVector ve631 = mv632[0,1,2];
resetMv mv634[3];
setMv mv634[0,2] = rcPp[23,18];
setMv mv634[1] = rcPpDual[12];
setVector ve633 = mv634[0,1,2];
dotVectors mv630[0] = <ve631,ve633>;
resetMv mv635[1];
setMv mv635[0] = rcPp[23];
resetMv mv636[1];
setMv mv636[0] = mv630[0];
calculateMv mv629 = DIVISION(mv635,mv636);
resetMv mv637[1];
resetMv mv638[1];
resetMv mv640[3];
setMv mv640[0,2] = rcPp[23,18];
setMv mv640[1] = rcPpDual[12];
setVector ve639 = mv640[0,1,2];
resetMv mv642[3];
setMv mv642[0,2] = rcPp[23,18];
setMv mv642[1] = rcPpDual[12];
setVector ve641 = mv642[0,1,2];
dotVectors mv638[0] = <ve639,ve641>;
resetMv mv643[1];
setMv mv643[0] = rcPp[18];
resetMv mv644[1];
setMv mv644[0] = mv638[0];
calculateMv mv637 = DIVISION(mv643,mv644);
resetMv mv645[1];
resetMv mv646[1];
resetMv mv648[3];
setMv mv648[0,2] = rcPp[23,18];
setMv mv648[1] = rcPpDual[12];
setVector ve647 = mv648[0,1,2];
resetMv mv650[3];
setMv mv650[0,2] = rcPp[23,18];
setMv mv650[1] = rcPpDual[12];
setVector ve649 = mv650[0,1,2];
dotVectors mv646[0] = <ve647,ve649>;
resetMv mv651[1];
setMv mv651[0] = rcPp[16];
resetMv mv652[1];
setMv mv652[0] = mv646[0];
calculateMv mv645 = DIVISION(mv651,mv652);
setVector ve653 = temp2[2,-4,17,-22,-24];
resetMv mv655[5];
setMv mv655[2] = mv629[0];
setMv mv655[3] = mv637[0];
setMv mv655[0] = mv613[0];
setMv mv655[1] = mv621[0];
setMv mv655[4] = mv645[0];
setVector ve654 = mv655[0,1,2,3,4];
dotVectors rc1[11] = <ve653,ve654>;

//rc1[12] = ((-(temp2[5] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (temp2[18] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[23] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv656[1];
resetMv mv657[1];
resetMv mv659[3];
setMv mv659[0,2] = rcPp[23,18];
setMv mv659[1] = rcPpDual[12];
setVector ve658 = mv659[0,1,2];
resetMv mv661[3];
setMv mv661[0,2] = rcPp[23,18];
setMv mv661[1] = rcPpDual[12];
setVector ve660 = mv661[0,1,2];
dotVectors mv657[0] = <ve658,ve660>;
resetMv mv662[1];
setMv mv662[0] = rcPpDual[12];
resetMv mv663[1];
setMv mv663[0] = mv657[0];
calculateMv mv656 = DIVISION(mv662,mv663);
resetMv mv664[1];
resetMv mv665[1];
resetMv mv667[3];
setMv mv667[0,2] = rcPp[23,18];
setMv mv667[1] = rcPpDual[12];
setVector ve666 = mv667[0,1,2];
resetMv mv669[3];
setMv mv669[0,2] = rcPp[23,18];
setMv mv669[1] = rcPpDual[12];
setVector ve668 = mv669[0,1,2];
dotVectors mv665[0] = <ve666,ve668>;
resetMv mv670[1];
setMv mv670[0] = rcPp[23];
resetMv mv671[1];
setMv mv671[0] = mv665[0];
calculateMv mv664 = DIVISION(mv670,mv671);
resetMv mv672[1];
resetMv mv673[1];
resetMv mv675[3];
setMv mv675[0,2] = rcPp[23,18];
setMv mv675[1] = rcPpDual[12];
setVector ve674 = mv675[0,1,2];
resetMv mv677[3];
setMv mv677[0,2] = rcPp[23,18];
setMv mv677[1] = rcPpDual[12];
setVector ve676 = mv677[0,1,2];
dotVectors mv673[0] = <ve674,ve676>;
resetMv mv678[1];
setMv mv678[0] = rcPp[18];
resetMv mv679[1];
setMv mv679[0] = mv673[0];
calculateMv mv672 = DIVISION(mv678,mv679);
setVector ve680 = temp2[-5,18,-23];
resetMv mv682[3];
setMv mv682[2] = mv672[0];
setMv mv682[0] = mv656[0];
setMv mv682[1] = mv664[0];
setVector ve681 = mv682[0,1,2];
dotVectors rc1[12] = <ve680,ve681>;

//rc1[13] = ((((temp2[3] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-(temp2[4] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (temp2[19] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (temp2[22] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[25] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv683[1];
resetMv mv684[1];
resetMv mv686[3];
setMv mv686[0,2] = rcPp[23,18];
setMv mv686[1] = rcPpDual[12];
setVector ve685 = mv686[0,1,2];
resetMv mv688[3];
setMv mv688[0,2] = rcPp[23,18];
setMv mv688[1] = rcPpDual[12];
setVector ve687 = mv688[0,1,2];
dotVectors mv684[0] = <ve685,ve687>;
resetMv mv689[1];
setMv mv689[0] = rcPp[16];
resetMv mv690[1];
setMv mv690[0] = mv684[0];
calculateMv mv683 = DIVISION(mv689,mv690);
resetMv mv691[1];
resetMv mv692[1];
resetMv mv694[3];
setMv mv694[0,2] = rcPp[23,18];
setMv mv694[1] = rcPpDual[12];
setVector ve693 = mv694[0,1,2];
resetMv mv696[3];
setMv mv696[0,2] = rcPp[23,18];
setMv mv696[1] = rcPpDual[12];
setVector ve695 = mv696[0,1,2];
dotVectors mv692[0] = <ve693,ve695>;
resetMv mv697[1];
setMv mv697[0] = rcPp[18];
resetMv mv698[1];
setMv mv698[0] = mv692[0];
calculateMv mv691 = DIVISION(mv697,mv698);
resetMv mv699[1];
resetMv mv700[1];
resetMv mv702[3];
setMv mv702[0,2] = rcPp[23,18];
setMv mv702[1] = rcPpDual[12];
setVector ve701 = mv702[0,1,2];
resetMv mv704[3];
setMv mv704[0,2] = rcPp[23,18];
setMv mv704[1] = rcPpDual[12];
setVector ve703 = mv704[0,1,2];
dotVectors mv700[0] = <ve701,ve703>;
resetMv mv705[1];
setMv mv705[0] = rcPp[23];
resetMv mv706[1];
setMv mv706[0] = mv700[0];
calculateMv mv699 = DIVISION(mv705,mv706);
resetMv mv707[1];
resetMv mv708[1];
resetMv mv710[3];
setMv mv710[0,2] = rcPp[23,18];
setMv mv710[1] = rcPpDual[12];
setVector ve709 = mv710[0,1,2];
resetMv mv712[3];
setMv mv712[0,2] = rcPp[23,18];
setMv mv712[1] = rcPpDual[12];
setVector ve711 = mv712[0,1,2];
dotVectors mv708[0] = <ve709,ve711>;
resetMv mv713[1];
setMv mv713[0] = rcPpDual[12];
resetMv mv714[1];
setMv mv714[0] = mv708[0];
calculateMv mv707 = DIVISION(mv713,mv714);
resetMv mv715[1];
resetMv mv716[1];
resetMv mv718[3];
setMv mv718[0,2] = rcPp[23,18];
setMv mv718[1] = rcPpDual[12];
setVector ve717 = mv718[0,1,2];
resetMv mv720[3];
setMv mv720[0,2] = rcPp[23,18];
setMv mv720[1] = rcPpDual[12];
setVector ve719 = mv720[0,1,2];
dotVectors mv716[0] = <ve717,ve719>;
resetMv mv721[1];
setMv mv721[0] = rcPp[16];
resetMv mv722[1];
setMv mv722[0] = mv716[0];
calculateMv mv715 = DIVISION(mv721,mv722);
setVector ve723 = temp2[3,-4,19,22,-25];
resetMv mv725[5];
setMv mv725[3] = mv707[0];
setMv mv725[1] = mv691[0];
setMv mv725[4] = mv715[0];
setMv mv725[0] = mv683[0];
setMv mv725[2] = mv699[0];
setVector ve724 = mv725[0,1,2,3,4];
dotVectors rc1[13] = <ve723,ve724>;

//rc1[14] = ((-(temp2[5] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (temp2[20] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (temp2[23] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))
resetMv mv726[1];
resetMv mv727[1];
resetMv mv729[3];
setMv mv729[0,2] = rcPp[23,18];
setMv mv729[1] = rcPpDual[12];
setVector ve728 = mv729[0,1,2];
resetMv mv731[3];
setMv mv731[0,2] = rcPp[23,18];
setMv mv731[1] = rcPpDual[12];
setVector ve730 = mv731[0,1,2];
dotVectors mv727[0] = <ve728,ve730>;
resetMv mv732[1];
setMv mv732[0] = rcPp[18];
resetMv mv733[1];
setMv mv733[0] = mv727[0];
calculateMv mv726 = DIVISION(mv732,mv733);
resetMv mv734[1];
resetMv mv735[1];
resetMv mv737[3];
setMv mv737[0,2] = rcPp[23,18];
setMv mv737[1] = rcPpDual[12];
setVector ve736 = mv737[0,1,2];
resetMv mv739[3];
setMv mv739[0,2] = rcPp[23,18];
setMv mv739[1] = rcPpDual[12];
setVector ve738 = mv739[0,1,2];
dotVectors mv735[0] = <ve736,ve738>;
resetMv mv740[1];
setMv mv740[0] = rcPp[23];
resetMv mv741[1];
setMv mv741[0] = mv735[0];
calculateMv mv734 = DIVISION(mv740,mv741);
resetMv mv742[1];
resetMv mv743[1];
resetMv mv745[3];
setMv mv745[0,2] = rcPp[23,18];
setMv mv745[1] = rcPpDual[12];
setVector ve744 = mv745[0,1,2];
resetMv mv747[3];
setMv mv747[0,2] = rcPp[23,18];
setMv mv747[1] = rcPpDual[12];
setVector ve746 = mv747[0,1,2];
dotVectors mv743[0] = <ve744,ve746>;
resetMv mv748[1];
setMv mv748[0] = rcPpDual[12];
resetMv mv749[1];
setMv mv749[0] = mv743[0];
calculateMv mv742 = DIVISION(mv748,mv749);
setVector ve750 = temp2[-5,20,23];
resetMv mv752[3];
setMv mv752[1] = mv734[0];
setMv mv752[2] = mv742[0];
setMv mv752[0] = mv726[0];
setVector ve751 = mv752[0,1,2];
dotVectors rc1[14] = <ve750,ve751>;

//rc1[15] = (((-(temp2[5] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (temp2[21] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (temp2[24] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (temp2[25] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))
resetMv mv753[1];
resetMv mv754[1];
resetMv mv756[3];
setMv mv756[0,2] = rcPp[23,18];
setMv mv756[1] = rcPpDual[12];
setVector ve755 = mv756[0,1,2];
resetMv mv758[3];
setMv mv758[0,2] = rcPp[23,18];
setMv mv758[1] = rcPpDual[12];
setVector ve757 = mv758[0,1,2];
dotVectors mv754[0] = <ve755,ve757>;
resetMv mv759[1];
setMv mv759[0] = rcPp[16];
resetMv mv760[1];
setMv mv760[0] = mv754[0];
calculateMv mv753 = DIVISION(mv759,mv760);
resetMv mv761[1];
resetMv mv762[1];
resetMv mv764[3];
setMv mv764[0,2] = rcPp[23,18];
setMv mv764[1] = rcPpDual[12];
setVector ve763 = mv764[0,1,2];
resetMv mv766[3];
setMv mv766[0,2] = rcPp[23,18];
setMv mv766[1] = rcPpDual[12];
setVector ve765 = mv766[0,1,2];
dotVectors mv762[0] = <ve763,ve765>;
resetMv mv767[1];
setMv mv767[0] = rcPp[23];
resetMv mv768[1];
setMv mv768[0] = mv762[0];
calculateMv mv761 = DIVISION(mv767,mv768);
resetMv mv769[1];
resetMv mv770[1];
resetMv mv772[3];
setMv mv772[0,2] = rcPp[23,18];
setMv mv772[1] = rcPpDual[12];
setVector ve771 = mv772[0,1,2];
resetMv mv774[3];
setMv mv774[0,2] = rcPp[23,18];
setMv mv774[1] = rcPpDual[12];
setVector ve773 = mv774[0,1,2];
dotVectors mv770[0] = <ve771,ve773>;
resetMv mv775[1];
setMv mv775[0] = rcPpDual[12];
resetMv mv776[1];
setMv mv776[0] = mv770[0];
calculateMv mv769 = DIVISION(mv775,mv776);
resetMv mv777[1];
resetMv mv778[1];
resetMv mv780[3];
setMv mv780[0,2] = rcPp[23,18];
setMv mv780[1] = rcPpDual[12];
setVector ve779 = mv780[0,1,2];
resetMv mv782[3];
setMv mv782[0,2] = rcPp[23,18];
setMv mv782[1] = rcPpDual[12];
setVector ve781 = mv782[0,1,2];
dotVectors mv778[0] = <ve779,ve781>;
resetMv mv783[1];
setMv mv783[0] = rcPp[18];
resetMv mv784[1];
setMv mv784[0] = mv778[0];
calculateMv mv777 = DIVISION(mv783,mv784);
setVector ve785 = temp2[-5,21,24,25];
resetMv mv787[4];
setMv mv787[1] = mv761[0];
setMv mv787[0] = mv753[0];
setMv mv787[2] = mv769[0];
setMv mv787[3] = mv777[0];
setVector ve786 = mv787[0,1,2,3];
dotVectors rc1[15] = <ve785,ve786>;

//rc1[16] = ((((rcPpDual[6] + temp2[6]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((rcPp[24] + temp2[7]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((rcPpDual[10] + temp2[10]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[27] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv788[1];
resetMv mv790[2];
setMv mv790[1] = temp2[6];
setMv mv790[0] = rcPpDual[6];
setVector ve789 = mv790[0,1];
dotVectors mv788[0] = <ve789>;
resetMv mv791[1];
resetMv mv792[1];
resetMv mv794[3];
setMv mv794[0,2] = rcPp[23,18];
setMv mv794[1] = rcPpDual[12];
setVector ve793 = mv794[0,1,2];
resetMv mv796[3];
setMv mv796[0,2] = rcPp[23,18];
setMv mv796[1] = rcPpDual[12];
setVector ve795 = mv796[0,1,2];
dotVectors mv792[0] = <ve793,ve795>;
resetMv mv797[1];
setMv mv797[0] = rcPp[18];
resetMv mv798[1];
setMv mv798[0] = mv792[0];
calculateMv mv791 = DIVISION(mv797,mv798);
resetMv mv799[1];
resetMv mv800[1];
resetMv mv802[2];
setMv mv802[1] = temp2[7];
setMv mv802[0] = rcPp[24];
setVector ve801 = mv802[0,1];
dotVectors mv800[0] = <ve801>;
setMv mv799[0] = mv800[-0];
resetMv mv803[1];
resetMv mv804[1];
resetMv mv806[3];
setMv mv806[0,2] = rcPp[23,18];
setMv mv806[1] = rcPpDual[12];
setVector ve805 = mv806[0,1,2];
resetMv mv808[3];
setMv mv808[0,2] = rcPp[23,18];
setMv mv808[1] = rcPpDual[12];
setVector ve807 = mv808[0,1,2];
dotVectors mv804[0] = <ve805,ve807>;
resetMv mv809[1];
setMv mv809[0] = rcPpDual[12];
resetMv mv810[1];
setMv mv810[0] = mv804[0];
calculateMv mv803 = DIVISION(mv809,mv810);
resetMv mv811[1];
resetMv mv813[2];
setMv mv813[1] = temp2[10];
setMv mv813[0] = rcPpDual[10];
setVector ve812 = mv813[0,1];
dotVectors mv811[0] = <ve812>;
resetMv mv814[1];
resetMv mv815[1];
resetMv mv817[3];
setMv mv817[0,2] = rcPp[23,18];
setMv mv817[1] = rcPpDual[12];
setVector ve816 = mv817[0,1,2];
resetMv mv819[3];
setMv mv819[0,2] = rcPp[23,18];
setMv mv819[1] = rcPpDual[12];
setVector ve818 = mv819[0,1,2];
dotVectors mv815[0] = <ve816,ve818>;
resetMv mv820[1];
setMv mv820[0] = rcPp[23];
resetMv mv821[1];
setMv mv821[0] = mv815[0];
calculateMv mv814 = DIVISION(mv820,mv821);
resetMv mv822[1];
resetMv mv823[1];
resetMv mv825[3];
setMv mv825[0,2] = rcPp[23,18];
setMv mv825[1] = rcPpDual[12];
setVector ve824 = mv825[0,1,2];
resetMv mv827[3];
setMv mv827[0,2] = rcPp[23,18];
setMv mv827[1] = rcPpDual[12];
setVector ve826 = mv827[0,1,2];
dotVectors mv823[0] = <ve824,ve826>;
resetMv mv828[1];
setMv mv828[0] = rcPp[16];
resetMv mv829[1];
setMv mv829[0] = mv823[0];
calculateMv mv822 = DIVISION(mv828,mv829);
resetMv mv831[4];
setMv mv831[2] = mv811[0];
setMv mv831[3] = temp2[-27];
setMv mv831[0] = mv788[0];
setMv mv831[1] = mv799[0];
setVector ve830 = mv831[0,1,2,3];
resetMv mv833[4];
setMv mv833[3] = mv822[0];
setMv mv833[1] = mv803[0];
setMv mv833[0] = mv791[0];
setMv mv833[2] = mv814[0];
setVector ve832 = mv833[0,1,2,3];
dotVectors rc1[16] = <ve830,ve832>;

//rc1[17] = (((((rcPpDual[6] + temp2[6]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((rcPpDual[8] + temp2[8]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((rcPp[19] + temp2[11]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[26] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-(temp2[28] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv834[1];
resetMv mv836[2];
setMv mv836[1] = temp2[6];
setMv mv836[0] = rcPpDual[6];
setVector ve835 = mv836[0,1];
dotVectors mv834[0] = <ve835>;
resetMv mv837[1];
resetMv mv838[1];
resetMv mv840[3];
setMv mv840[0,2] = rcPp[23,18];
setMv mv840[1] = rcPpDual[12];
setVector ve839 = mv840[0,1,2];
resetMv mv842[3];
setMv mv842[0,2] = rcPp[23,18];
setMv mv842[1] = rcPpDual[12];
setVector ve841 = mv842[0,1,2];
dotVectors mv838[0] = <ve839,ve841>;
resetMv mv843[1];
setMv mv843[0] = rcPp[16];
resetMv mv844[1];
setMv mv844[0] = mv838[0];
calculateMv mv837 = DIVISION(mv843,mv844);
resetMv mv845[1];
resetMv mv846[1];
resetMv mv848[2];
setMv mv848[1] = temp2[8];
setMv mv848[0] = rcPpDual[8];
setVector ve847 = mv848[0,1];
dotVectors mv846[0] = <ve847>;
setMv mv845[0] = mv846[-0];
resetMv mv849[1];
resetMv mv850[1];
resetMv mv852[3];
setMv mv852[0,2] = rcPp[23,18];
setMv mv852[1] = rcPpDual[12];
setVector ve851 = mv852[0,1,2];
resetMv mv854[3];
setMv mv854[0,2] = rcPp[23,18];
setMv mv854[1] = rcPpDual[12];
setVector ve853 = mv854[0,1,2];
dotVectors mv850[0] = <ve851,ve853>;
resetMv mv855[1];
setMv mv855[0] = rcPpDual[12];
resetMv mv856[1];
setMv mv856[0] = mv850[0];
calculateMv mv849 = DIVISION(mv855,mv856);
resetMv mv857[1];
resetMv mv859[2];
setMv mv859[1] = temp2[11];
setMv mv859[0] = rcPp[19];
setVector ve858 = mv859[0,1];
dotVectors mv857[0] = <ve858>;
resetMv mv860[1];
resetMv mv861[1];
resetMv mv863[3];
setMv mv863[0,2] = rcPp[23,18];
setMv mv863[1] = rcPpDual[12];
setVector ve862 = mv863[0,1,2];
resetMv mv865[3];
setMv mv865[0,2] = rcPp[23,18];
setMv mv865[1] = rcPpDual[12];
setVector ve864 = mv865[0,1,2];
dotVectors mv861[0] = <ve862,ve864>;
resetMv mv866[1];
setMv mv866[0] = rcPp[23];
resetMv mv867[1];
setMv mv867[0] = mv861[0];
calculateMv mv860 = DIVISION(mv866,mv867);
resetMv mv868[1];
resetMv mv869[1];
resetMv mv871[3];
setMv mv871[0,2] = rcPp[23,18];
setMv mv871[1] = rcPpDual[12];
setVector ve870 = mv871[0,1,2];
resetMv mv873[3];
setMv mv873[0,2] = rcPp[23,18];
setMv mv873[1] = rcPpDual[12];
setVector ve872 = mv873[0,1,2];
dotVectors mv869[0] = <ve870,ve872>;
resetMv mv874[1];
setMv mv874[0] = rcPp[18];
resetMv mv875[1];
setMv mv875[0] = mv869[0];
calculateMv mv868 = DIVISION(mv874,mv875);
resetMv mv876[1];
resetMv mv877[1];
resetMv mv879[3];
setMv mv879[0,2] = rcPp[23,18];
setMv mv879[1] = rcPpDual[12];
setVector ve878 = mv879[0,1,2];
resetMv mv881[3];
setMv mv881[0,2] = rcPp[23,18];
setMv mv881[1] = rcPpDual[12];
setVector ve880 = mv881[0,1,2];
dotVectors mv877[0] = <ve878,ve880>;
resetMv mv882[1];
setMv mv882[0] = rcPp[16];
resetMv mv883[1];
setMv mv883[0] = mv877[0];
calculateMv mv876 = DIVISION(mv882,mv883);
resetMv mv885[5];
setMv mv885[3,4] = temp2[-26,-28];
setMv mv885[2] = mv857[0];
setMv mv885[1] = mv845[0];
setMv mv885[0] = mv834[0];
setVector ve884 = mv885[0,1,2,3,4];
resetMv mv887[5];
setMv mv887[3] = mv868[0];
setMv mv887[0] = mv837[0];
setMv mv887[2] = mv860[0];
setMv mv887[4] = mv876[0];
setMv mv887[1] = mv849[0];
setVector ve886 = mv887[0,1,2,3,4];
dotVectors rc1[17] = <ve884,ve886>;

//rc1[18] = ((-((rcPp[23] + temp2[9]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((rcPpDual[12] + temp2[12]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[27] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv888[1];
resetMv mv889[1];
resetMv mv891[2];
setMv mv891[1] = temp2[9];
setMv mv891[0] = rcPp[23];
setVector ve890 = mv891[0,1];
dotVectors mv889[0] = <ve890>;
setMv mv888[0] = mv889[-0];
resetMv mv892[1];
resetMv mv893[1];
resetMv mv895[3];
setMv mv895[0,2] = rcPp[23,18];
setMv mv895[1] = rcPpDual[12];
setVector ve894 = mv895[0,1,2];
resetMv mv897[3];
setMv mv897[0,2] = rcPp[23,18];
setMv mv897[1] = rcPpDual[12];
setVector ve896 = mv897[0,1,2];
dotVectors mv893[0] = <ve894,ve896>;
resetMv mv898[1];
setMv mv898[0] = rcPpDual[12];
resetMv mv899[1];
setMv mv899[0] = mv893[0];
calculateMv mv892 = DIVISION(mv898,mv899);
resetMv mv900[1];
resetMv mv902[2];
setMv mv902[1] = temp2[12];
setMv mv902[0] = rcPpDual[12];
setVector ve901 = mv902[0,1];
dotVectors mv900[0] = <ve901>;
resetMv mv903[1];
resetMv mv904[1];
resetMv mv906[3];
setMv mv906[0,2] = rcPp[23,18];
setMv mv906[1] = rcPpDual[12];
setVector ve905 = mv906[0,1,2];
resetMv mv908[3];
setMv mv908[0,2] = rcPp[23,18];
setMv mv908[1] = rcPpDual[12];
setVector ve907 = mv908[0,1,2];
dotVectors mv904[0] = <ve905,ve907>;
resetMv mv909[1];
setMv mv909[0] = rcPp[23];
resetMv mv910[1];
setMv mv910[0] = mv904[0];
calculateMv mv903 = DIVISION(mv909,mv910);
resetMv mv911[1];
resetMv mv912[1];
resetMv mv914[3];
setMv mv914[0,2] = rcPp[23,18];
setMv mv914[1] = rcPpDual[12];
setVector ve913 = mv914[0,1,2];
resetMv mv916[3];
setMv mv916[0,2] = rcPp[23,18];
setMv mv916[1] = rcPpDual[12];
setVector ve915 = mv916[0,1,2];
dotVectors mv912[0] = <ve913,ve915>;
resetMv mv917[1];
setMv mv917[0] = rcPp[18];
resetMv mv918[1];
setMv mv918[0] = mv912[0];
calculateMv mv911 = DIVISION(mv917,mv918);
resetMv mv920[3];
setMv mv920[2] = temp2[-27];
setMv mv920[1] = mv900[0];
setMv mv920[0] = mv888[0];
setVector ve919 = mv920[0,1,2];
resetMv mv922[3];
setMv mv922[2] = mv911[0];
setMv mv922[0] = mv892[0];
setMv mv922[1] = mv903[0];
setVector ve921 = mv922[0,1,2];
dotVectors rc1[18] = <ve919,ve921>;

//rc1[19] = (((((rcPp[24] + temp2[7]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((rcPpDual[8] + temp2[8]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((rcPpDual[13] + temp2[13]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (temp2[26] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[29] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv923[1];
resetMv mv925[2];
setMv mv925[1] = temp2[7];
setMv mv925[0] = rcPp[24];
setVector ve924 = mv925[0,1];
dotVectors mv923[0] = <ve924>;
resetMv mv926[1];
resetMv mv927[1];
resetMv mv929[3];
setMv mv929[0,2] = rcPp[23,18];
setMv mv929[1] = rcPpDual[12];
setVector ve928 = mv929[0,1,2];
resetMv mv931[3];
setMv mv931[0,2] = rcPp[23,18];
setMv mv931[1] = rcPpDual[12];
setVector ve930 = mv931[0,1,2];
dotVectors mv927[0] = <ve928,ve930>;
resetMv mv932[1];
setMv mv932[0] = rcPp[16];
resetMv mv933[1];
setMv mv933[0] = mv927[0];
calculateMv mv926 = DIVISION(mv932,mv933);
resetMv mv934[1];
resetMv mv935[1];
resetMv mv937[2];
setMv mv937[1] = temp2[8];
setMv mv937[0] = rcPpDual[8];
setVector ve936 = mv937[0,1];
dotVectors mv935[0] = <ve936>;
setMv mv934[0] = mv935[-0];
resetMv mv938[1];
resetMv mv939[1];
resetMv mv941[3];
setMv mv941[0,2] = rcPp[23,18];
setMv mv941[1] = rcPpDual[12];
setVector ve940 = mv941[0,1,2];
resetMv mv943[3];
setMv mv943[0,2] = rcPp[23,18];
setMv mv943[1] = rcPpDual[12];
setVector ve942 = mv943[0,1,2];
dotVectors mv939[0] = <ve940,ve942>;
resetMv mv944[1];
setMv mv944[0] = rcPp[18];
resetMv mv945[1];
setMv mv945[0] = mv939[0];
calculateMv mv938 = DIVISION(mv944,mv945);
resetMv mv946[1];
resetMv mv948[2];
setMv mv948[1] = temp2[13];
setMv mv948[0] = rcPpDual[13];
setVector ve947 = mv948[0,1];
dotVectors mv946[0] = <ve947>;
resetMv mv949[1];
resetMv mv950[1];
resetMv mv952[3];
setMv mv952[0,2] = rcPp[23,18];
setMv mv952[1] = rcPpDual[12];
setVector ve951 = mv952[0,1,2];
resetMv mv954[3];
setMv mv954[0,2] = rcPp[23,18];
setMv mv954[1] = rcPpDual[12];
setVector ve953 = mv954[0,1,2];
dotVectors mv950[0] = <ve951,ve953>;
resetMv mv955[1];
setMv mv955[0] = rcPp[23];
resetMv mv956[1];
setMv mv956[0] = mv950[0];
calculateMv mv949 = DIVISION(mv955,mv956);
resetMv mv957[1];
resetMv mv958[1];
resetMv mv960[3];
setMv mv960[0,2] = rcPp[23,18];
setMv mv960[1] = rcPpDual[12];
setVector ve959 = mv960[0,1,2];
resetMv mv962[3];
setMv mv962[0,2] = rcPp[23,18];
setMv mv962[1] = rcPpDual[12];
setVector ve961 = mv962[0,1,2];
dotVectors mv958[0] = <ve959,ve961>;
resetMv mv963[1];
setMv mv963[0] = rcPpDual[12];
resetMv mv964[1];
setMv mv964[0] = mv958[0];
calculateMv mv957 = DIVISION(mv963,mv964);
resetMv mv965[1];
resetMv mv966[1];
resetMv mv968[3];
setMv mv968[0,2] = rcPp[23,18];
setMv mv968[1] = rcPpDual[12];
setVector ve967 = mv968[0,1,2];
resetMv mv970[3];
setMv mv970[0,2] = rcPp[23,18];
setMv mv970[1] = rcPpDual[12];
setVector ve969 = mv970[0,1,2];
dotVectors mv966[0] = <ve967,ve969>;
resetMv mv971[1];
setMv mv971[0] = rcPp[16];
resetMv mv972[1];
setMv mv972[0] = mv966[0];
calculateMv mv965 = DIVISION(mv971,mv972);
resetMv mv974[5];
setMv mv974[0] = mv923[0];
setMv mv974[3,4] = temp2[26,-29];
setMv mv974[2] = mv946[0];
setMv mv974[1] = mv934[0];
setVector ve973 = mv974[0,1,2,3,4];
resetMv mv976[5];
setMv mv976[4] = mv965[0];
setMv mv976[0] = mv926[0];
setMv mv976[1] = mv938[0];
setMv mv976[3] = mv957[0];
setMv mv976[2] = mv949[0];
setVector ve975 = mv976[0,1,2,3,4];
dotVectors rc1[19] = <ve973,ve975>;

//rc1[20] = ((-((rcPp[23] + temp2[9]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((rcPp[18] + temp2[14]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (temp2[27] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))
resetMv mv977[1];
resetMv mv978[1];
resetMv mv980[2];
setMv mv980[1] = temp2[9];
setMv mv980[0] = rcPp[23];
setVector ve979 = mv980[0,1];
dotVectors mv978[0] = <ve979>;
setMv mv977[0] = mv978[-0];
resetMv mv981[1];
resetMv mv982[1];
resetMv mv984[3];
setMv mv984[0,2] = rcPp[23,18];
setMv mv984[1] = rcPpDual[12];
setVector ve983 = mv984[0,1,2];
resetMv mv986[3];
setMv mv986[0,2] = rcPp[23,18];
setMv mv986[1] = rcPpDual[12];
setVector ve985 = mv986[0,1,2];
dotVectors mv982[0] = <ve983,ve985>;
resetMv mv987[1];
setMv mv987[0] = rcPp[18];
resetMv mv988[1];
setMv mv988[0] = mv982[0];
calculateMv mv981 = DIVISION(mv987,mv988);
resetMv mv989[1];
resetMv mv991[2];
setMv mv991[1] = temp2[14];
setMv mv991[0] = rcPp[18];
setVector ve990 = mv991[0,1];
dotVectors mv989[0] = <ve990>;
resetMv mv992[1];
resetMv mv993[1];
resetMv mv995[3];
setMv mv995[0,2] = rcPp[23,18];
setMv mv995[1] = rcPpDual[12];
setVector ve994 = mv995[0,1,2];
resetMv mv997[3];
setMv mv997[0,2] = rcPp[23,18];
setMv mv997[1] = rcPpDual[12];
setVector ve996 = mv997[0,1,2];
dotVectors mv993[0] = <ve994,ve996>;
resetMv mv998[1];
setMv mv998[0] = rcPp[23];
resetMv mv999[1];
setMv mv999[0] = mv993[0];
calculateMv mv992 = DIVISION(mv998,mv999);
resetMv mv1000[1];
resetMv mv1001[1];
resetMv mv1003[3];
setMv mv1003[0,2] = rcPp[23,18];
setMv mv1003[1] = rcPpDual[12];
setVector ve1002 = mv1003[0,1,2];
resetMv mv1005[3];
setMv mv1005[0,2] = rcPp[23,18];
setMv mv1005[1] = rcPpDual[12];
setVector ve1004 = mv1005[0,1,2];
dotVectors mv1001[0] = <ve1002,ve1004>;
resetMv mv1006[1];
setMv mv1006[0] = rcPpDual[12];
resetMv mv1007[1];
setMv mv1007[0] = mv1001[0];
calculateMv mv1000 = DIVISION(mv1006,mv1007);
resetMv mv1009[3];
setMv mv1009[0] = mv977[0];
setMv mv1009[2] = temp2[27];
setMv mv1009[1] = mv989[0];
setVector ve1008 = mv1009[0,1,2];
resetMv mv1011[3];
setMv mv1011[2] = mv1000[0];
setMv mv1011[0] = mv981[0];
setMv mv1011[1] = mv992[0];
setVector ve1010 = mv1011[0,1,2];
dotVectors rc1[20] = <ve1008,ve1010>;

//rc1[21] = (((-((rcPp[23] + temp2[9]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((rcPp[16] + temp2[15]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (temp2[28] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (temp2[29] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))
resetMv mv1012[1];
resetMv mv1013[1];
resetMv mv1015[2];
setMv mv1015[1] = temp2[9];
setMv mv1015[0] = rcPp[23];
setVector ve1014 = mv1015[0,1];
dotVectors mv1013[0] = <ve1014>;
setMv mv1012[0] = mv1013[-0];
resetMv mv1016[1];
resetMv mv1017[1];
resetMv mv1019[3];
setMv mv1019[0,2] = rcPp[23,18];
setMv mv1019[1] = rcPpDual[12];
setVector ve1018 = mv1019[0,1,2];
resetMv mv1021[3];
setMv mv1021[0,2] = rcPp[23,18];
setMv mv1021[1] = rcPpDual[12];
setVector ve1020 = mv1021[0,1,2];
dotVectors mv1017[0] = <ve1018,ve1020>;
resetMv mv1022[1];
setMv mv1022[0] = rcPp[16];
resetMv mv1023[1];
setMv mv1023[0] = mv1017[0];
calculateMv mv1016 = DIVISION(mv1022,mv1023);
resetMv mv1024[1];
resetMv mv1026[2];
setMv mv1026[1] = temp2[15];
setMv mv1026[0] = rcPp[16];
setVector ve1025 = mv1026[0,1];
dotVectors mv1024[0] = <ve1025>;
resetMv mv1027[1];
resetMv mv1028[1];
resetMv mv1030[3];
setMv mv1030[0,2] = rcPp[23,18];
setMv mv1030[1] = rcPpDual[12];
setVector ve1029 = mv1030[0,1,2];
resetMv mv1032[3];
setMv mv1032[0,2] = rcPp[23,18];
setMv mv1032[1] = rcPpDual[12];
setVector ve1031 = mv1032[0,1,2];
dotVectors mv1028[0] = <ve1029,ve1031>;
resetMv mv1033[1];
setMv mv1033[0] = rcPp[23];
resetMv mv1034[1];
setMv mv1034[0] = mv1028[0];
calculateMv mv1027 = DIVISION(mv1033,mv1034);
resetMv mv1035[1];
resetMv mv1036[1];
resetMv mv1038[3];
setMv mv1038[0,2] = rcPp[23,18];
setMv mv1038[1] = rcPpDual[12];
setVector ve1037 = mv1038[0,1,2];
resetMv mv1040[3];
setMv mv1040[0,2] = rcPp[23,18];
setMv mv1040[1] = rcPpDual[12];
setVector ve1039 = mv1040[0,1,2];
dotVectors mv1036[0] = <ve1037,ve1039>;
resetMv mv1041[1];
setMv mv1041[0] = rcPpDual[12];
resetMv mv1042[1];
setMv mv1042[0] = mv1036[0];
calculateMv mv1035 = DIVISION(mv1041,mv1042);
resetMv mv1043[1];
resetMv mv1044[1];
resetMv mv1046[3];
setMv mv1046[0,2] = rcPp[23,18];
setMv mv1046[1] = rcPpDual[12];
setVector ve1045 = mv1046[0,1,2];
resetMv mv1048[3];
setMv mv1048[0,2] = rcPp[23,18];
setMv mv1048[1] = rcPpDual[12];
setVector ve1047 = mv1048[0,1,2];
dotVectors mv1044[0] = <ve1045,ve1047>;
resetMv mv1049[1];
setMv mv1049[0] = rcPp[18];
resetMv mv1050[1];
setMv mv1050[0] = mv1044[0];
calculateMv mv1043 = DIVISION(mv1049,mv1050);
resetMv mv1052[4];
setMv mv1052[1] = mv1024[0];
setMv mv1052[2,3] = temp2[28,29];
setMv mv1052[0] = mv1012[0];
setVector ve1051 = mv1052[0,1,2,3];
resetMv mv1054[4];
setMv mv1054[0] = mv1016[0];
setMv mv1054[2] = mv1035[0];
setMv mv1054[1] = mv1027[0];
setMv mv1054[3] = mv1043[0];
setVector ve1053 = mv1054[0,1,2,3];
dotVectors rc1[21] = <ve1051,ve1053>;

//rc1[22] = (((((rcPpDual[10] + temp2[10]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((rcPp[19] + temp2[11]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((rcPpDual[13] + temp2[13]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[26] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-(temp2[30] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv1055[1];
resetMv mv1057[2];
setMv mv1057[1] = temp2[10];
setMv mv1057[0] = rcPpDual[10];
setVector ve1056 = mv1057[0,1];
dotVectors mv1055[0] = <ve1056>;
resetMv mv1058[1];
resetMv mv1059[1];
resetMv mv1061[3];
setMv mv1061[0,2] = rcPp[23,18];
setMv mv1061[1] = rcPpDual[12];
setVector ve1060 = mv1061[0,1,2];
resetMv mv1063[3];
setMv mv1063[0,2] = rcPp[23,18];
setMv mv1063[1] = rcPpDual[12];
setVector ve1062 = mv1063[0,1,2];
dotVectors mv1059[0] = <ve1060,ve1062>;
resetMv mv1064[1];
setMv mv1064[0] = rcPp[16];
resetMv mv1065[1];
setMv mv1065[0] = mv1059[0];
calculateMv mv1058 = DIVISION(mv1064,mv1065);
resetMv mv1066[1];
resetMv mv1067[1];
resetMv mv1069[2];
setMv mv1069[1] = temp2[11];
setMv mv1069[0] = rcPp[19];
setVector ve1068 = mv1069[0,1];
dotVectors mv1067[0] = <ve1068>;
setMv mv1066[0] = mv1067[-0];
resetMv mv1070[1];
resetMv mv1071[1];
resetMv mv1073[3];
setMv mv1073[0,2] = rcPp[23,18];
setMv mv1073[1] = rcPpDual[12];
setVector ve1072 = mv1073[0,1,2];
resetMv mv1075[3];
setMv mv1075[0,2] = rcPp[23,18];
setMv mv1075[1] = rcPpDual[12];
setVector ve1074 = mv1075[0,1,2];
dotVectors mv1071[0] = <ve1072,ve1074>;
resetMv mv1076[1];
setMv mv1076[0] = rcPp[18];
resetMv mv1077[1];
setMv mv1077[0] = mv1071[0];
calculateMv mv1070 = DIVISION(mv1076,mv1077);
resetMv mv1078[1];
resetMv mv1080[2];
setMv mv1080[1] = temp2[13];
setMv mv1080[0] = rcPpDual[13];
setVector ve1079 = mv1080[0,1];
dotVectors mv1078[0] = <ve1079>;
resetMv mv1081[1];
resetMv mv1082[1];
resetMv mv1084[3];
setMv mv1084[0,2] = rcPp[23,18];
setMv mv1084[1] = rcPpDual[12];
setVector ve1083 = mv1084[0,1,2];
resetMv mv1086[3];
setMv mv1086[0,2] = rcPp[23,18];
setMv mv1086[1] = rcPpDual[12];
setVector ve1085 = mv1086[0,1,2];
dotVectors mv1082[0] = <ve1083,ve1085>;
resetMv mv1087[1];
setMv mv1087[0] = rcPpDual[12];
resetMv mv1088[1];
setMv mv1088[0] = mv1082[0];
calculateMv mv1081 = DIVISION(mv1087,mv1088);
resetMv mv1089[1];
resetMv mv1090[1];
resetMv mv1092[3];
setMv mv1092[0,2] = rcPp[23,18];
setMv mv1092[1] = rcPpDual[12];
setVector ve1091 = mv1092[0,1,2];
resetMv mv1094[3];
setMv mv1094[0,2] = rcPp[23,18];
setMv mv1094[1] = rcPpDual[12];
setVector ve1093 = mv1094[0,1,2];
dotVectors mv1090[0] = <ve1091,ve1093>;
resetMv mv1095[1];
setMv mv1095[0] = rcPp[23];
resetMv mv1096[1];
setMv mv1096[0] = mv1090[0];
calculateMv mv1089 = DIVISION(mv1095,mv1096);
resetMv mv1097[1];
resetMv mv1098[1];
resetMv mv1100[3];
setMv mv1100[0,2] = rcPp[23,18];
setMv mv1100[1] = rcPpDual[12];
setVector ve1099 = mv1100[0,1,2];
resetMv mv1102[3];
setMv mv1102[0,2] = rcPp[23,18];
setMv mv1102[1] = rcPpDual[12];
setVector ve1101 = mv1102[0,1,2];
dotVectors mv1098[0] = <ve1099,ve1101>;
resetMv mv1103[1];
setMv mv1103[0] = rcPp[16];
resetMv mv1104[1];
setMv mv1104[0] = mv1098[0];
calculateMv mv1097 = DIVISION(mv1103,mv1104);
resetMv mv1106[5];
setMv mv1106[3,4] = temp2[-26,-30];
setMv mv1106[0] = mv1055[0];
setMv mv1106[1] = mv1066[0];
setMv mv1106[2] = mv1078[0];
setVector ve1105 = mv1106[0,1,2,3,4];
resetMv mv1108[5];
setMv mv1108[3] = mv1089[0];
setMv mv1108[1] = mv1070[0];
setMv mv1108[2] = mv1081[0];
setMv mv1108[0] = mv1058[0];
setMv mv1108[4] = mv1097[0];
setVector ve1107 = mv1108[0,1,2,3,4];
dotVectors rc1[22] = <ve1105,ve1107>;

//rc1[23] = ((-((rcPpDual[12] + temp2[12]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((rcPp[18] + temp2[14]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[27] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv1109[1];
resetMv mv1110[1];
resetMv mv1112[2];
setMv mv1112[1] = temp2[12];
setMv mv1112[0] = rcPpDual[12];
setVector ve1111 = mv1112[0,1];
dotVectors mv1110[0] = <ve1111>;
setMv mv1109[0] = mv1110[-0];
resetMv mv1113[1];
resetMv mv1114[1];
resetMv mv1116[3];
setMv mv1116[0,2] = rcPp[23,18];
setMv mv1116[1] = rcPpDual[12];
setVector ve1115 = mv1116[0,1,2];
resetMv mv1118[3];
setMv mv1118[0,2] = rcPp[23,18];
setMv mv1118[1] = rcPpDual[12];
setVector ve1117 = mv1118[0,1,2];
dotVectors mv1114[0] = <ve1115,ve1117>;
resetMv mv1119[1];
setMv mv1119[0] = rcPp[18];
resetMv mv1120[1];
setMv mv1120[0] = mv1114[0];
calculateMv mv1113 = DIVISION(mv1119,mv1120);
resetMv mv1121[1];
resetMv mv1123[2];
setMv mv1123[1] = temp2[14];
setMv mv1123[0] = rcPp[18];
setVector ve1122 = mv1123[0,1];
dotVectors mv1121[0] = <ve1122>;
resetMv mv1124[1];
resetMv mv1125[1];
resetMv mv1127[3];
setMv mv1127[0,2] = rcPp[23,18];
setMv mv1127[1] = rcPpDual[12];
setVector ve1126 = mv1127[0,1,2];
resetMv mv1129[3];
setMv mv1129[0,2] = rcPp[23,18];
setMv mv1129[1] = rcPpDual[12];
setVector ve1128 = mv1129[0,1,2];
dotVectors mv1125[0] = <ve1126,ve1128>;
resetMv mv1130[1];
setMv mv1130[0] = rcPpDual[12];
resetMv mv1131[1];
setMv mv1131[0] = mv1125[0];
calculateMv mv1124 = DIVISION(mv1130,mv1131);
resetMv mv1132[1];
resetMv mv1133[1];
resetMv mv1135[3];
setMv mv1135[0,2] = rcPp[23,18];
setMv mv1135[1] = rcPpDual[12];
setVector ve1134 = mv1135[0,1,2];
resetMv mv1137[3];
setMv mv1137[0,2] = rcPp[23,18];
setMv mv1137[1] = rcPpDual[12];
setVector ve1136 = mv1137[0,1,2];
dotVectors mv1133[0] = <ve1134,ve1136>;
resetMv mv1138[1];
setMv mv1138[0] = rcPp[23];
resetMv mv1139[1];
setMv mv1139[0] = mv1133[0];
calculateMv mv1132 = DIVISION(mv1138,mv1139);
resetMv mv1141[3];
setMv mv1141[2] = temp2[-27];
setMv mv1141[0] = mv1109[0];
setMv mv1141[1] = mv1121[0];
setVector ve1140 = mv1141[0,1,2];
resetMv mv1143[3];
setMv mv1143[0] = mv1113[0];
setMv mv1143[1] = mv1124[0];
setMv mv1143[2] = mv1132[0];
setVector ve1142 = mv1143[0,1,2];
dotVectors rc1[23] = <ve1140,ve1142>;

//rc1[24] = (((-((rcPpDual[12] + temp2[12]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((rcPp[16] + temp2[15]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[28] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (temp2[30] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))
resetMv mv1144[1];
resetMv mv1145[1];
resetMv mv1147[2];
setMv mv1147[1] = temp2[12];
setMv mv1147[0] = rcPpDual[12];
setVector ve1146 = mv1147[0,1];
dotVectors mv1145[0] = <ve1146>;
setMv mv1144[0] = mv1145[-0];
resetMv mv1148[1];
resetMv mv1149[1];
resetMv mv1151[3];
setMv mv1151[0,2] = rcPp[23,18];
setMv mv1151[1] = rcPpDual[12];
setVector ve1150 = mv1151[0,1,2];
resetMv mv1153[3];
setMv mv1153[0,2] = rcPp[23,18];
setMv mv1153[1] = rcPpDual[12];
setVector ve1152 = mv1153[0,1,2];
dotVectors mv1149[0] = <ve1150,ve1152>;
resetMv mv1154[1];
setMv mv1154[0] = rcPp[16];
resetMv mv1155[1];
setMv mv1155[0] = mv1149[0];
calculateMv mv1148 = DIVISION(mv1154,mv1155);
resetMv mv1156[1];
resetMv mv1158[2];
setMv mv1158[1] = temp2[15];
setMv mv1158[0] = rcPp[16];
setVector ve1157 = mv1158[0,1];
dotVectors mv1156[0] = <ve1157>;
resetMv mv1159[1];
resetMv mv1160[1];
resetMv mv1162[3];
setMv mv1162[0,2] = rcPp[23,18];
setMv mv1162[1] = rcPpDual[12];
setVector ve1161 = mv1162[0,1,2];
resetMv mv1164[3];
setMv mv1164[0,2] = rcPp[23,18];
setMv mv1164[1] = rcPpDual[12];
setVector ve1163 = mv1164[0,1,2];
dotVectors mv1160[0] = <ve1161,ve1163>;
resetMv mv1165[1];
setMv mv1165[0] = rcPpDual[12];
resetMv mv1166[1];
setMv mv1166[0] = mv1160[0];
calculateMv mv1159 = DIVISION(mv1165,mv1166);
resetMv mv1167[1];
resetMv mv1168[1];
resetMv mv1170[3];
setMv mv1170[0,2] = rcPp[23,18];
setMv mv1170[1] = rcPpDual[12];
setVector ve1169 = mv1170[0,1,2];
resetMv mv1172[3];
setMv mv1172[0,2] = rcPp[23,18];
setMv mv1172[1] = rcPpDual[12];
setVector ve1171 = mv1172[0,1,2];
dotVectors mv1168[0] = <ve1169,ve1171>;
resetMv mv1173[1];
setMv mv1173[0] = rcPp[23];
resetMv mv1174[1];
setMv mv1174[0] = mv1168[0];
calculateMv mv1167 = DIVISION(mv1173,mv1174);
resetMv mv1175[1];
resetMv mv1176[1];
resetMv mv1178[3];
setMv mv1178[0,2] = rcPp[23,18];
setMv mv1178[1] = rcPpDual[12];
setVector ve1177 = mv1178[0,1,2];
resetMv mv1180[3];
setMv mv1180[0,2] = rcPp[23,18];
setMv mv1180[1] = rcPpDual[12];
setVector ve1179 = mv1180[0,1,2];
dotVectors mv1176[0] = <ve1177,ve1179>;
resetMv mv1181[1];
setMv mv1181[0] = rcPp[18];
resetMv mv1182[1];
setMv mv1182[0] = mv1176[0];
calculateMv mv1175 = DIVISION(mv1181,mv1182);
resetMv mv1184[4];
setMv mv1184[2,3] = temp2[-28,30];
setMv mv1184[0] = mv1144[0];
setMv mv1184[1] = mv1156[0];
setVector ve1183 = mv1184[0,1,2,3];
resetMv mv1186[4];
setMv mv1186[2] = mv1167[0];
setMv mv1186[1] = mv1159[0];
setMv mv1186[3] = mv1175[0];
setMv mv1186[0] = mv1148[0];
setVector ve1185 = mv1186[0,1,2,3];
dotVectors rc1[24] = <ve1183,ve1185>;

//rc1[25] = (((-((rcPp[18] + temp2[14]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((rcPp[16] + temp2[15]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[29] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-(temp2[30] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv1187[1];
resetMv mv1188[1];
resetMv mv1190[2];
setMv mv1190[1] = temp2[14];
setMv mv1190[0] = rcPp[18];
setVector ve1189 = mv1190[0,1];
dotVectors mv1188[0] = <ve1189>;
setMv mv1187[0] = mv1188[-0];
resetMv mv1191[1];
resetMv mv1192[1];
resetMv mv1194[3];
setMv mv1194[0,2] = rcPp[23,18];
setMv mv1194[1] = rcPpDual[12];
setVector ve1193 = mv1194[0,1,2];
resetMv mv1196[3];
setMv mv1196[0,2] = rcPp[23,18];
setMv mv1196[1] = rcPpDual[12];
setVector ve1195 = mv1196[0,1,2];
dotVectors mv1192[0] = <ve1193,ve1195>;
resetMv mv1197[1];
setMv mv1197[0] = rcPp[16];
resetMv mv1198[1];
setMv mv1198[0] = mv1192[0];
calculateMv mv1191 = DIVISION(mv1197,mv1198);
resetMv mv1199[1];
resetMv mv1201[2];
setMv mv1201[1] = temp2[15];
setMv mv1201[0] = rcPp[16];
setVector ve1200 = mv1201[0,1];
dotVectors mv1199[0] = <ve1200>;
resetMv mv1202[1];
resetMv mv1203[1];
resetMv mv1205[3];
setMv mv1205[0,2] = rcPp[23,18];
setMv mv1205[1] = rcPpDual[12];
setVector ve1204 = mv1205[0,1,2];
resetMv mv1207[3];
setMv mv1207[0,2] = rcPp[23,18];
setMv mv1207[1] = rcPpDual[12];
setVector ve1206 = mv1207[0,1,2];
dotVectors mv1203[0] = <ve1204,ve1206>;
resetMv mv1208[1];
setMv mv1208[0] = rcPp[18];
resetMv mv1209[1];
setMv mv1209[0] = mv1203[0];
calculateMv mv1202 = DIVISION(mv1208,mv1209);
resetMv mv1210[1];
resetMv mv1211[1];
resetMv mv1213[3];
setMv mv1213[0,2] = rcPp[23,18];
setMv mv1213[1] = rcPpDual[12];
setVector ve1212 = mv1213[0,1,2];
resetMv mv1215[3];
setMv mv1215[0,2] = rcPp[23,18];
setMv mv1215[1] = rcPpDual[12];
setVector ve1214 = mv1215[0,1,2];
dotVectors mv1211[0] = <ve1212,ve1214>;
resetMv mv1216[1];
setMv mv1216[0] = rcPp[23];
resetMv mv1217[1];
setMv mv1217[0] = mv1211[0];
calculateMv mv1210 = DIVISION(mv1216,mv1217);
resetMv mv1218[1];
resetMv mv1219[1];
resetMv mv1221[3];
setMv mv1221[0,2] = rcPp[23,18];
setMv mv1221[1] = rcPpDual[12];
setVector ve1220 = mv1221[0,1,2];
resetMv mv1223[3];
setMv mv1223[0,2] = rcPp[23,18];
setMv mv1223[1] = rcPpDual[12];
setVector ve1222 = mv1223[0,1,2];
dotVectors mv1219[0] = <ve1220,ve1222>;
resetMv mv1224[1];
setMv mv1224[0] = rcPpDual[12];
resetMv mv1225[1];
setMv mv1225[0] = mv1219[0];
calculateMv mv1218 = DIVISION(mv1224,mv1225);
resetMv mv1227[4];
setMv mv1227[2,3] = temp2[-29,-30];
setMv mv1227[0] = mv1187[0];
setMv mv1227[1] = mv1199[0];
setVector ve1226 = mv1227[0,1,2,3];
resetMv mv1229[4];
setMv mv1229[3] = mv1218[0];
setMv mv1229[1] = mv1202[0];
setMv mv1229[2] = mv1210[0];
setMv mv1229[0] = mv1191[0];
setVector ve1228 = mv1229[0,1,2,3];
dotVectors rc1[25] = <ve1226,ve1228>;

//rc1[26] = ((((temp2[16] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-(temp2[17] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (temp2[19] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[22] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-(temp2[31] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv1230[1];
resetMv mv1231[1];
resetMv mv1233[3];
setMv mv1233[0,2] = rcPp[23,18];
setMv mv1233[1] = rcPpDual[12];
setVector ve1232 = mv1233[0,1,2];
resetMv mv1235[3];
setMv mv1235[0,2] = rcPp[23,18];
setMv mv1235[1] = rcPpDual[12];
setVector ve1234 = mv1235[0,1,2];
dotVectors mv1231[0] = <ve1232,ve1234>;
resetMv mv1236[1];
setMv mv1236[0] = rcPp[16];
resetMv mv1237[1];
setMv mv1237[0] = mv1231[0];
calculateMv mv1230 = DIVISION(mv1236,mv1237);
resetMv mv1238[1];
resetMv mv1239[1];
resetMv mv1241[3];
setMv mv1241[0,2] = rcPp[23,18];
setMv mv1241[1] = rcPpDual[12];
setVector ve1240 = mv1241[0,1,2];
resetMv mv1243[3];
setMv mv1243[0,2] = rcPp[23,18];
setMv mv1243[1] = rcPpDual[12];
setVector ve1242 = mv1243[0,1,2];
dotVectors mv1239[0] = <ve1240,ve1242>;
resetMv mv1244[1];
setMv mv1244[0] = rcPp[18];
resetMv mv1245[1];
setMv mv1245[0] = mv1239[0];
calculateMv mv1238 = DIVISION(mv1244,mv1245);
resetMv mv1246[1];
resetMv mv1247[1];
resetMv mv1249[3];
setMv mv1249[0,2] = rcPp[23,18];
setMv mv1249[1] = rcPpDual[12];
setVector ve1248 = mv1249[0,1,2];
resetMv mv1251[3];
setMv mv1251[0,2] = rcPp[23,18];
setMv mv1251[1] = rcPpDual[12];
setVector ve1250 = mv1251[0,1,2];
dotVectors mv1247[0] = <ve1248,ve1250>;
resetMv mv1252[1];
setMv mv1252[0] = rcPpDual[12];
resetMv mv1253[1];
setMv mv1253[0] = mv1247[0];
calculateMv mv1246 = DIVISION(mv1252,mv1253);
resetMv mv1254[1];
resetMv mv1255[1];
resetMv mv1257[3];
setMv mv1257[0,2] = rcPp[23,18];
setMv mv1257[1] = rcPpDual[12];
setVector ve1256 = mv1257[0,1,2];
resetMv mv1259[3];
setMv mv1259[0,2] = rcPp[23,18];
setMv mv1259[1] = rcPpDual[12];
setVector ve1258 = mv1259[0,1,2];
dotVectors mv1255[0] = <ve1256,ve1258>;
resetMv mv1260[1];
setMv mv1260[0] = rcPp[23];
resetMv mv1261[1];
setMv mv1261[0] = mv1255[0];
calculateMv mv1254 = DIVISION(mv1260,mv1261);
resetMv mv1262[1];
resetMv mv1263[1];
resetMv mv1265[3];
setMv mv1265[0,2] = rcPp[23,18];
setMv mv1265[1] = rcPpDual[12];
setVector ve1264 = mv1265[0,1,2];
resetMv mv1267[3];
setMv mv1267[0,2] = rcPp[23,18];
setMv mv1267[1] = rcPpDual[12];
setVector ve1266 = mv1267[0,1,2];
dotVectors mv1263[0] = <ve1264,ve1266>;
resetMv mv1268[1];
setMv mv1268[0] = rcPp[16];
resetMv mv1269[1];
setMv mv1269[0] = mv1263[0];
calculateMv mv1262 = DIVISION(mv1268,mv1269);
setVector ve1270 = temp2[16,-17,19,-22,-31];
resetMv mv1272[5];
setMv mv1272[2] = mv1246[0];
setMv mv1272[3] = mv1254[0];
setMv mv1272[0] = mv1230[0];
setMv mv1272[4] = mv1262[0];
setMv mv1272[1] = mv1238[0];
setVector ve1271 = mv1272[0,1,2,3,4];
dotVectors rc1[26] = <ve1270,ve1271>;

//rc1[27] = ((-(temp2[18] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (temp2[20] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[23] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv1273[1];
resetMv mv1274[1];
resetMv mv1276[3];
setMv mv1276[0,2] = rcPp[23,18];
setMv mv1276[1] = rcPpDual[12];
setVector ve1275 = mv1276[0,1,2];
resetMv mv1278[3];
setMv mv1278[0,2] = rcPp[23,18];
setMv mv1278[1] = rcPpDual[12];
setVector ve1277 = mv1278[0,1,2];
dotVectors mv1274[0] = <ve1275,ve1277>;
resetMv mv1279[1];
setMv mv1279[0] = rcPp[18];
resetMv mv1280[1];
setMv mv1280[0] = mv1274[0];
calculateMv mv1273 = DIVISION(mv1279,mv1280);
resetMv mv1281[1];
resetMv mv1282[1];
resetMv mv1284[3];
setMv mv1284[0,2] = rcPp[23,18];
setMv mv1284[1] = rcPpDual[12];
setVector ve1283 = mv1284[0,1,2];
resetMv mv1286[3];
setMv mv1286[0,2] = rcPp[23,18];
setMv mv1286[1] = rcPpDual[12];
setVector ve1285 = mv1286[0,1,2];
dotVectors mv1282[0] = <ve1283,ve1285>;
resetMv mv1287[1];
setMv mv1287[0] = rcPpDual[12];
resetMv mv1288[1];
setMv mv1288[0] = mv1282[0];
calculateMv mv1281 = DIVISION(mv1287,mv1288);
resetMv mv1289[1];
resetMv mv1290[1];
resetMv mv1292[3];
setMv mv1292[0,2] = rcPp[23,18];
setMv mv1292[1] = rcPpDual[12];
setVector ve1291 = mv1292[0,1,2];
resetMv mv1294[3];
setMv mv1294[0,2] = rcPp[23,18];
setMv mv1294[1] = rcPpDual[12];
setVector ve1293 = mv1294[0,1,2];
dotVectors mv1290[0] = <ve1291,ve1293>;
resetMv mv1295[1];
setMv mv1295[0] = rcPp[23];
resetMv mv1296[1];
setMv mv1296[0] = mv1290[0];
calculateMv mv1289 = DIVISION(mv1295,mv1296);
setVector ve1297 = temp2[-18,20,-23];
resetMv mv1299[3];
setMv mv1299[1] = mv1281[0];
setMv mv1299[2] = mv1289[0];
setMv mv1299[0] = mv1273[0];
setVector ve1298 = mv1299[0,1,2];
dotVectors rc1[27] = <ve1297,ve1298>;

//rc1[28] = (((-(temp2[18] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (temp2[21] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[24] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (temp2[31] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))
resetMv mv1300[1];
resetMv mv1301[1];
resetMv mv1303[3];
setMv mv1303[0,2] = rcPp[23,18];
setMv mv1303[1] = rcPpDual[12];
setVector ve1302 = mv1303[0,1,2];
resetMv mv1305[3];
setMv mv1305[0,2] = rcPp[23,18];
setMv mv1305[1] = rcPpDual[12];
setVector ve1304 = mv1305[0,1,2];
dotVectors mv1301[0] = <ve1302,ve1304>;
resetMv mv1306[1];
setMv mv1306[0] = rcPp[16];
resetMv mv1307[1];
setMv mv1307[0] = mv1301[0];
calculateMv mv1300 = DIVISION(mv1306,mv1307);
resetMv mv1308[1];
resetMv mv1309[1];
resetMv mv1311[3];
setMv mv1311[0,2] = rcPp[23,18];
setMv mv1311[1] = rcPpDual[12];
setVector ve1310 = mv1311[0,1,2];
resetMv mv1313[3];
setMv mv1313[0,2] = rcPp[23,18];
setMv mv1313[1] = rcPpDual[12];
setVector ve1312 = mv1313[0,1,2];
dotVectors mv1309[0] = <ve1310,ve1312>;
resetMv mv1314[1];
setMv mv1314[0] = rcPpDual[12];
resetMv mv1315[1];
setMv mv1315[0] = mv1309[0];
calculateMv mv1308 = DIVISION(mv1314,mv1315);
resetMv mv1316[1];
resetMv mv1317[1];
resetMv mv1319[3];
setMv mv1319[0,2] = rcPp[23,18];
setMv mv1319[1] = rcPpDual[12];
setVector ve1318 = mv1319[0,1,2];
resetMv mv1321[3];
setMv mv1321[0,2] = rcPp[23,18];
setMv mv1321[1] = rcPpDual[12];
setVector ve1320 = mv1321[0,1,2];
dotVectors mv1317[0] = <ve1318,ve1320>;
resetMv mv1322[1];
setMv mv1322[0] = rcPp[23];
resetMv mv1323[1];
setMv mv1323[0] = mv1317[0];
calculateMv mv1316 = DIVISION(mv1322,mv1323);
resetMv mv1324[1];
resetMv mv1325[1];
resetMv mv1327[3];
setMv mv1327[0,2] = rcPp[23,18];
setMv mv1327[1] = rcPpDual[12];
setVector ve1326 = mv1327[0,1,2];
resetMv mv1329[3];
setMv mv1329[0,2] = rcPp[23,18];
setMv mv1329[1] = rcPpDual[12];
setVector ve1328 = mv1329[0,1,2];
dotVectors mv1325[0] = <ve1326,ve1328>;
resetMv mv1330[1];
setMv mv1330[0] = rcPp[18];
resetMv mv1331[1];
setMv mv1331[0] = mv1325[0];
calculateMv mv1324 = DIVISION(mv1330,mv1331);
setVector ve1332 = temp2[-18,21,-24,31];
resetMv mv1334[4];
setMv mv1334[2] = mv1316[0];
setMv mv1334[3] = mv1324[0];
setMv mv1334[1] = mv1308[0];
setMv mv1334[0] = mv1300[0];
setVector ve1333 = mv1334[0,1,2,3];
dotVectors rc1[28] = <ve1332,ve1333>;

//rc1[29] = (((-(temp2[20] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (temp2[21] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[25] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-(temp2[31] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv1335[1];
resetMv mv1336[1];
resetMv mv1338[3];
setMv mv1338[0,2] = rcPp[23,18];
setMv mv1338[1] = rcPpDual[12];
setVector ve1337 = mv1338[0,1,2];
resetMv mv1340[3];
setMv mv1340[0,2] = rcPp[23,18];
setMv mv1340[1] = rcPpDual[12];
setVector ve1339 = mv1340[0,1,2];
dotVectors mv1336[0] = <ve1337,ve1339>;
resetMv mv1341[1];
setMv mv1341[0] = rcPp[16];
resetMv mv1342[1];
setMv mv1342[0] = mv1336[0];
calculateMv mv1335 = DIVISION(mv1341,mv1342);
resetMv mv1343[1];
resetMv mv1344[1];
resetMv mv1346[3];
setMv mv1346[0,2] = rcPp[23,18];
setMv mv1346[1] = rcPpDual[12];
setVector ve1345 = mv1346[0,1,2];
resetMv mv1348[3];
setMv mv1348[0,2] = rcPp[23,18];
setMv mv1348[1] = rcPpDual[12];
setVector ve1347 = mv1348[0,1,2];
dotVectors mv1344[0] = <ve1345,ve1347>;
resetMv mv1349[1];
setMv mv1349[0] = rcPp[18];
resetMv mv1350[1];
setMv mv1350[0] = mv1344[0];
calculateMv mv1343 = DIVISION(mv1349,mv1350);
resetMv mv1351[1];
resetMv mv1352[1];
resetMv mv1354[3];
setMv mv1354[0,2] = rcPp[23,18];
setMv mv1354[1] = rcPpDual[12];
setVector ve1353 = mv1354[0,1,2];
resetMv mv1356[3];
setMv mv1356[0,2] = rcPp[23,18];
setMv mv1356[1] = rcPpDual[12];
setVector ve1355 = mv1356[0,1,2];
dotVectors mv1352[0] = <ve1353,ve1355>;
resetMv mv1357[1];
setMv mv1357[0] = rcPp[23];
resetMv mv1358[1];
setMv mv1358[0] = mv1352[0];
calculateMv mv1351 = DIVISION(mv1357,mv1358);
resetMv mv1359[1];
resetMv mv1360[1];
resetMv mv1362[3];
setMv mv1362[0,2] = rcPp[23,18];
setMv mv1362[1] = rcPpDual[12];
setVector ve1361 = mv1362[0,1,2];
resetMv mv1364[3];
setMv mv1364[0,2] = rcPp[23,18];
setMv mv1364[1] = rcPpDual[12];
setVector ve1363 = mv1364[0,1,2];
dotVectors mv1360[0] = <ve1361,ve1363>;
resetMv mv1365[1];
setMv mv1365[0] = rcPpDual[12];
resetMv mv1366[1];
setMv mv1366[0] = mv1360[0];
calculateMv mv1359 = DIVISION(mv1365,mv1366);
setVector ve1367 = temp2[-20,21,-25,-31];
resetMv mv1369[4];
setMv mv1369[1] = mv1343[0];
setMv mv1369[0] = mv1335[0];
setMv mv1369[3] = mv1359[0];
setMv mv1369[2] = mv1351[0];
setVector ve1368 = mv1369[0,1,2,3];
dotVectors rc1[29] = <ve1367,ve1368>;

//rc1[30] = (((-(temp2[23] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (temp2[24] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[25] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (temp2[31] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))
resetMv mv1370[1];
resetMv mv1371[1];
resetMv mv1373[3];
setMv mv1373[0,2] = rcPp[23,18];
setMv mv1373[1] = rcPpDual[12];
setVector ve1372 = mv1373[0,1,2];
resetMv mv1375[3];
setMv mv1375[0,2] = rcPp[23,18];
setMv mv1375[1] = rcPpDual[12];
setVector ve1374 = mv1375[0,1,2];
dotVectors mv1371[0] = <ve1372,ve1374>;
resetMv mv1376[1];
setMv mv1376[0] = rcPp[16];
resetMv mv1377[1];
setMv mv1377[0] = mv1371[0];
calculateMv mv1370 = DIVISION(mv1376,mv1377);
resetMv mv1378[1];
resetMv mv1379[1];
resetMv mv1381[3];
setMv mv1381[0,2] = rcPp[23,18];
setMv mv1381[1] = rcPpDual[12];
setVector ve1380 = mv1381[0,1,2];
resetMv mv1383[3];
setMv mv1383[0,2] = rcPp[23,18];
setMv mv1383[1] = rcPpDual[12];
setVector ve1382 = mv1383[0,1,2];
dotVectors mv1379[0] = <ve1380,ve1382>;
resetMv mv1384[1];
setMv mv1384[0] = rcPp[18];
resetMv mv1385[1];
setMv mv1385[0] = mv1379[0];
calculateMv mv1378 = DIVISION(mv1384,mv1385);
resetMv mv1386[1];
resetMv mv1387[1];
resetMv mv1389[3];
setMv mv1389[0,2] = rcPp[23,18];
setMv mv1389[1] = rcPpDual[12];
setVector ve1388 = mv1389[0,1,2];
resetMv mv1391[3];
setMv mv1391[0,2] = rcPp[23,18];
setMv mv1391[1] = rcPpDual[12];
setVector ve1390 = mv1391[0,1,2];
dotVectors mv1387[0] = <ve1388,ve1390>;
resetMv mv1392[1];
setMv mv1392[0] = rcPpDual[12];
resetMv mv1393[1];
setMv mv1393[0] = mv1387[0];
calculateMv mv1386 = DIVISION(mv1392,mv1393);
resetMv mv1394[1];
resetMv mv1395[1];
resetMv mv1397[3];
setMv mv1397[0,2] = rcPp[23,18];
setMv mv1397[1] = rcPpDual[12];
setVector ve1396 = mv1397[0,1,2];
resetMv mv1399[3];
setMv mv1399[0,2] = rcPp[23,18];
setMv mv1399[1] = rcPpDual[12];
setVector ve1398 = mv1399[0,1,2];
dotVectors mv1395[0] = <ve1396,ve1398>;
resetMv mv1400[1];
setMv mv1400[0] = rcPp[23];
resetMv mv1401[1];
setMv mv1401[0] = mv1395[0];
calculateMv mv1394 = DIVISION(mv1400,mv1401);
setVector ve1402 = temp2[-23,24,-25,31];
resetMv mv1404[4];
setMv mv1404[0] = mv1370[0];
setMv mv1404[3] = mv1394[0];
setMv mv1404[1] = mv1378[0];
setMv mv1404[2] = mv1386[0];
setVector ve1403 = mv1404[0,1,2,3];
dotVectors rc1[30] = <ve1402,ve1403>;

//rc1[31] = (((-(temp2[27] * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (temp2[28] * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-(temp2[29] * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (temp2[30] * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))
resetMv mv1405[1];
resetMv mv1406[1];
resetMv mv1408[3];
setMv mv1408[0,2] = rcPp[23,18];
setMv mv1408[1] = rcPpDual[12];
setVector ve1407 = mv1408[0,1,2];
resetMv mv1410[3];
setMv mv1410[0,2] = rcPp[23,18];
setMv mv1410[1] = rcPpDual[12];
setVector ve1409 = mv1410[0,1,2];
dotVectors mv1406[0] = <ve1407,ve1409>;
resetMv mv1411[1];
setMv mv1411[0] = rcPp[16];
resetMv mv1412[1];
setMv mv1412[0] = mv1406[0];
calculateMv mv1405 = DIVISION(mv1411,mv1412);
resetMv mv1413[1];
resetMv mv1414[1];
resetMv mv1416[3];
setMv mv1416[0,2] = rcPp[23,18];
setMv mv1416[1] = rcPpDual[12];
setVector ve1415 = mv1416[0,1,2];
resetMv mv1418[3];
setMv mv1418[0,2] = rcPp[23,18];
setMv mv1418[1] = rcPpDual[12];
setVector ve1417 = mv1418[0,1,2];
dotVectors mv1414[0] = <ve1415,ve1417>;
resetMv mv1419[1];
setMv mv1419[0] = rcPp[18];
resetMv mv1420[1];
setMv mv1420[0] = mv1414[0];
calculateMv mv1413 = DIVISION(mv1419,mv1420);
resetMv mv1421[1];
resetMv mv1422[1];
resetMv mv1424[3];
setMv mv1424[0,2] = rcPp[23,18];
setMv mv1424[1] = rcPpDual[12];
setVector ve1423 = mv1424[0,1,2];
resetMv mv1426[3];
setMv mv1426[0,2] = rcPp[23,18];
setMv mv1426[1] = rcPpDual[12];
setVector ve1425 = mv1426[0,1,2];
dotVectors mv1422[0] = <ve1423,ve1425>;
resetMv mv1427[1];
setMv mv1427[0] = rcPpDual[12];
resetMv mv1428[1];
setMv mv1428[0] = mv1422[0];
calculateMv mv1421 = DIVISION(mv1427,mv1428);
resetMv mv1429[1];
resetMv mv1430[1];
resetMv mv1432[3];
setMv mv1432[0,2] = rcPp[23,18];
setMv mv1432[1] = rcPpDual[12];
setVector ve1431 = mv1432[0,1,2];
resetMv mv1434[3];
setMv mv1434[0,2] = rcPp[23,18];
setMv mv1434[1] = rcPpDual[12];
setVector ve1433 = mv1434[0,1,2];
dotVectors mv1430[0] = <ve1431,ve1433>;
resetMv mv1435[1];
setMv mv1435[0] = rcPp[23];
resetMv mv1436[1];
setMv mv1436[0] = mv1430[0];
calculateMv mv1429 = DIVISION(mv1435,mv1436);
setVector ve1437 = temp2[-27,28,-29,30];
resetMv mv1439[4];
setMv mv1439[2] = mv1421[0];
setMv mv1439[1] = mv1413[0];
setMv mv1439[3] = mv1429[0];
setMv mv1439[0] = mv1405[0];
setVector ve1438 = mv1439[0,1,2,3];
dotVectors rc1[31] = <ve1437,ve1438>;

//rc1N[1] = ((((((((((((((((-(rc1[0])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[2])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[3])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[5])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[6])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[7])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[9])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[10])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[12])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[14])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[16])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[18])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[20])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[23])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[27])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv rc1N[32];
resetMv mv1440[1];
resetMv mv1441[1];
setVector ve1442 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1443 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1441[0] = <ve1442,ve1443>;
resetMv mv1444[1];
setMv mv1444[0] = rc1[-9];
resetMv mv1445[1];
setMv mv1445[0] = mv1441[0];
calculateMv mv1440 = DIVISION(mv1444,mv1445);
resetMv mv1446[1];
resetMv mv1447[1];
setVector ve1448 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1449 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1447[0] = <ve1448,ve1449>;
resetMv mv1450[1];
setMv mv1450[0] = rc1[-5];
resetMv mv1451[1];
setMv mv1451[0] = mv1447[0];
calculateMv mv1446 = DIVISION(mv1450,mv1451);
resetMv mv1452[1];
resetMv mv1453[1];
setVector ve1454 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1455 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1453[0] = <ve1454,ve1455>;
resetMv mv1456[1];
setMv mv1456[0] = rc1[18];
resetMv mv1457[1];
setMv mv1457[0] = mv1453[0];
calculateMv mv1452 = DIVISION(mv1456,mv1457);
resetMv mv1458[1];
resetMv mv1459[1];
setVector ve1460 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1461 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1459[0] = <ve1460,ve1461>;
resetMv mv1462[1];
setMv mv1462[0] = rc1[20];
resetMv mv1463[1];
setMv mv1463[0] = mv1459[0];
calculateMv mv1458 = DIVISION(mv1462,mv1463);
resetMv mv1464[1];
resetMv mv1465[1];
setVector ve1466 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1467 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1465[0] = <ve1466,ve1467>;
resetMv mv1468[1];
setMv mv1468[0] = rc1[21];
resetMv mv1469[1];
setMv mv1469[0] = mv1465[0];
calculateMv mv1464 = DIVISION(mv1468,mv1469);
resetMv mv1470[1];
resetMv mv1471[1];
setVector ve1472 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1473 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1471[0] = <ve1472,ve1473>;
resetMv mv1474[1];
setMv mv1474[0] = rc1[-12];
resetMv mv1475[1];
setMv mv1475[0] = mv1471[0];
calculateMv mv1470 = DIVISION(mv1474,mv1475);
resetMv mv1476[1];
resetMv mv1477[1];
setVector ve1478 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1479 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1477[0] = <ve1478,ve1479>;
resetMv mv1480[1];
setMv mv1480[0] = rc1[-14];
resetMv mv1481[1];
setMv mv1481[0] = mv1477[0];
calculateMv mv1476 = DIVISION(mv1480,mv1481);
resetMv mv1482[1];
resetMv mv1483[1];
setVector ve1484 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1485 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1483[0] = <ve1484,ve1485>;
resetMv mv1486[1];
setMv mv1486[0] = rc1[-15];
resetMv mv1487[1];
setMv mv1487[0] = mv1483[0];
calculateMv mv1482 = DIVISION(mv1486,mv1487);
resetMv mv1488[1];
resetMv mv1489[1];
setVector ve1490 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1491 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1489[0] = <ve1490,ve1491>;
resetMv mv1492[1];
setMv mv1492[0] = rc1[27];
resetMv mv1493[1];
setMv mv1493[0] = mv1489[0];
calculateMv mv1488 = DIVISION(mv1492,mv1493);
resetMv mv1494[1];
resetMv mv1495[1];
setVector ve1496 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1497 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1495[0] = <ve1496,ve1497>;
resetMv mv1498[1];
setMv mv1498[0] = rc1[28];
resetMv mv1499[1];
setMv mv1499[0] = mv1495[0];
calculateMv mv1494 = DIVISION(mv1498,mv1499);
resetMv mv1500[1];
resetMv mv1501[1];
setVector ve1502 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1503 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1501[0] = <ve1502,ve1503>;
resetMv mv1504[1];
setMv mv1504[0] = rc1[29];
resetMv mv1505[1];
setMv mv1505[0] = mv1501[0];
calculateMv mv1500 = DIVISION(mv1504,mv1505);
resetMv mv1506[1];
resetMv mv1507[1];
setVector ve1508 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1509 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1507[0] = <ve1508,ve1509>;
resetMv mv1510[1];
setMv mv1510[0] = rc1[23];
resetMv mv1511[1];
setMv mv1511[0] = mv1507[0];
calculateMv mv1506 = DIVISION(mv1510,mv1511);
resetMv mv1512[1];
resetMv mv1513[1];
setVector ve1514 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1515 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1513[0] = <ve1514,ve1515>;
resetMv mv1516[1];
setMv mv1516[0] = rc1[24];
resetMv mv1517[1];
setMv mv1517[0] = mv1513[0];
calculateMv mv1512 = DIVISION(mv1516,mv1517);
resetMv mv1518[1];
resetMv mv1519[1];
setVector ve1520 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1521 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1519[0] = <ve1520,ve1521>;
resetMv mv1522[1];
setMv mv1522[0] = rc1[25];
resetMv mv1523[1];
setMv mv1523[0] = mv1519[0];
calculateMv mv1518 = DIVISION(mv1522,mv1523);
resetMv mv1524[1];
resetMv mv1525[1];
setVector ve1526 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1527 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1525[0] = <ve1526,ve1527>;
resetMv mv1528[1];
setMv mv1528[0] = rc1[-31];
resetMv mv1529[1];
setMv mv1529[0] = mv1525[0];
calculateMv mv1524 = DIVISION(mv1528,mv1529);
resetMv mv1530[1];
resetMv mv1531[1];
setVector ve1532 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1533 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1531[0] = <ve1532,ve1533>;
resetMv mv1534[1];
setMv mv1534[0] = rc1[30];
resetMv mv1535[1];
setMv mv1535[0] = mv1531[0];
calculateMv mv1530 = DIVISION(mv1534,mv1535);
setVector ve1536 = rc1[-0,-1,2,3,-5,-6,-7,9,10,-12,-14,16,-18,-20,23,-27];
resetMv mv1538[16];
setMv mv1538[8] = mv1488[0];
setMv mv1538[5] = mv1470[0];
setMv mv1538[3] = mv1458[0];
setMv mv1538[6] = mv1476[0];
setMv mv1538[9] = mv1494[0];
setMv mv1538[11] = mv1506[0];
setMv mv1538[7] = mv1482[0];
setMv mv1538[1] = mv1446[0];
setMv mv1538[4] = mv1464[0];
setMv mv1538[13] = mv1518[0];
setMv mv1538[0] = mv1440[0];
setMv mv1538[2] = mv1452[0];
setMv mv1538[10] = mv1500[0];
setMv mv1538[12] = mv1512[0];
setMv mv1538[14] = mv1524[0];
setMv mv1538[15] = mv1530[0];
setVector ve1537 = mv1538[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
dotVectors rc1N[1] = <ve1536,ve1537>;

//rc1N[2] = ((((((((((((((((-(rc1[0])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[2])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[3])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[5])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[6])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[7])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[9])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[10])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[12])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[14])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[16])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[18])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[20])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[23])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[27])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))
resetMv mv1539[1];
resetMv mv1540[1];
setVector ve1541 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1542 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1540[0] = <ve1541,ve1542>;
resetMv mv1543[1];
setMv mv1543[0] = rc1[-12];
resetMv mv1544[1];
setMv mv1544[0] = mv1540[0];
calculateMv mv1539 = DIVISION(mv1543,mv1544);
resetMv mv1545[1];
resetMv mv1546[1];
setVector ve1547 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1548 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1546[0] = <ve1547,ve1548>;
resetMv mv1549[1];
setMv mv1549[0] = rc1[18];
resetMv mv1550[1];
setMv mv1550[0] = mv1546[0];
calculateMv mv1545 = DIVISION(mv1549,mv1550);
resetMv mv1551[1];
resetMv mv1552[1];
setVector ve1553 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1554 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1552[0] = <ve1553,ve1554>;
resetMv mv1555[1];
setMv mv1555[0] = rc1[-5];
resetMv mv1556[1];
setMv mv1556[0] = mv1552[0];
calculateMv mv1551 = DIVISION(mv1555,mv1556);
resetMv mv1557[1];
resetMv mv1558[1];
setVector ve1559 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1560 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1558[0] = <ve1559,ve1560>;
resetMv mv1561[1];
setMv mv1561[0] = rc1[23];
resetMv mv1562[1];
setMv mv1562[0] = mv1558[0];
calculateMv mv1557 = DIVISION(mv1561,mv1562);
resetMv mv1563[1];
resetMv mv1564[1];
setVector ve1565 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1566 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1564[0] = <ve1565,ve1566>;
resetMv mv1567[1];
setMv mv1567[0] = rc1[24];
resetMv mv1568[1];
setMv mv1568[0] = mv1564[0];
calculateMv mv1563 = DIVISION(mv1567,mv1568);
resetMv mv1569[1];
resetMv mv1570[1];
setVector ve1571 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1572 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1570[0] = <ve1571,ve1572>;
resetMv mv1573[1];
setMv mv1573[0] = rc1[-9];
resetMv mv1574[1];
setMv mv1574[0] = mv1570[0];
calculateMv mv1569 = DIVISION(mv1573,mv1574);
resetMv mv1575[1];
resetMv mv1576[1];
setVector ve1577 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1578 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1576[0] = <ve1577,ve1578>;
resetMv mv1579[1];
setMv mv1579[0] = rc1[27];
resetMv mv1580[1];
setMv mv1580[0] = mv1576[0];
calculateMv mv1575 = DIVISION(mv1579,mv1580);
resetMv mv1581[1];
resetMv mv1582[1];
setVector ve1583 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1584 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1582[0] = <ve1583,ve1584>;
resetMv mv1585[1];
setMv mv1585[0] = rc1[28];
resetMv mv1586[1];
setMv mv1586[0] = mv1582[0];
calculateMv mv1581 = DIVISION(mv1585,mv1586);
resetMv mv1587[1];
resetMv mv1588[1];
setVector ve1589 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1590 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1588[0] = <ve1589,ve1590>;
resetMv mv1591[1];
setMv mv1591[0] = rc1[-14];
resetMv mv1592[1];
setMv mv1592[0] = mv1588[0];
calculateMv mv1587 = DIVISION(mv1591,mv1592);
resetMv mv1593[1];
resetMv mv1594[1];
setVector ve1595 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1596 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1594[0] = <ve1595,ve1596>;
resetMv mv1597[1];
setMv mv1597[0] = rc1[-15];
resetMv mv1598[1];
setMv mv1598[0] = mv1594[0];
calculateMv mv1593 = DIVISION(mv1597,mv1598);
resetMv mv1599[1];
resetMv mv1600[1];
setVector ve1601 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1602 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1600[0] = <ve1601,ve1602>;
resetMv mv1603[1];
setMv mv1603[0] = rc1[30];
resetMv mv1604[1];
setMv mv1604[0] = mv1600[0];
calculateMv mv1599 = DIVISION(mv1603,mv1604);
resetMv mv1605[1];
resetMv mv1606[1];
setVector ve1607 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1608 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1606[0] = <ve1607,ve1608>;
resetMv mv1609[1];
setMv mv1609[0] = rc1[20];
resetMv mv1610[1];
setMv mv1610[0] = mv1606[0];
calculateMv mv1605 = DIVISION(mv1609,mv1610);
resetMv mv1611[1];
resetMv mv1612[1];
setVector ve1613 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1614 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1612[0] = <ve1613,ve1614>;
resetMv mv1615[1];
setMv mv1615[0] = rc1[21];
resetMv mv1616[1];
setMv mv1616[0] = mv1612[0];
calculateMv mv1611 = DIVISION(mv1615,mv1616);
resetMv mv1617[1];
resetMv mv1618[1];
setVector ve1619 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1620 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1618[0] = <ve1619,ve1620>;
resetMv mv1621[1];
setMv mv1621[0] = rc1[-31];
resetMv mv1622[1];
setMv mv1622[0] = mv1618[0];
calculateMv mv1617 = DIVISION(mv1621,mv1622);
resetMv mv1623[1];
resetMv mv1624[1];
setVector ve1625 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1626 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1624[0] = <ve1625,ve1626>;
resetMv mv1627[1];
setMv mv1627[0] = rc1[25];
resetMv mv1628[1];
setMv mv1628[0] = mv1624[0];
calculateMv mv1623 = DIVISION(mv1627,mv1628);
resetMv mv1629[1];
resetMv mv1630[1];
setVector ve1631 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1632 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1630[0] = <ve1631,ve1632>;
resetMv mv1633[1];
setMv mv1633[0] = rc1[29];
resetMv mv1634[1];
setMv mv1634[0] = mv1630[0];
calculateMv mv1629 = DIVISION(mv1633,mv1634);
setVector ve1635 = rc1[-0,-1,-2,3,-5,6,-7,9,-10,12,-14,-16,18,-20,-23,27];
resetMv mv1637[16];
setMv mv1637[6] = mv1575[0];
setMv mv1637[8] = mv1587[0];
setMv mv1637[0] = mv1539[0];
setMv mv1637[10] = mv1599[0];
setMv mv1637[4] = mv1563[0];
setMv mv1637[12] = mv1611[0];
setMv mv1637[14] = mv1623[0];
setMv mv1637[9] = mv1593[0];
setMv mv1637[7] = mv1581[0];
setMv mv1637[13] = mv1617[0];
setMv mv1637[11] = mv1605[0];
setMv mv1637[15] = mv1629[0];
setMv mv1637[2] = mv1551[0];
setMv mv1637[1] = mv1545[0];
setMv mv1637[5] = mv1569[0];
setMv mv1637[3] = mv1557[0];
setVector ve1636 = mv1637[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
dotVectors rc1N[2] = <ve1635,ve1636>;

//rc1N[3] = ((((((((((((((((-(rc1[0])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[2])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[3])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[5])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[6])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[7])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[9])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[10])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[12])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[14])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[16])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[18])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[20])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[23])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[27])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv mv1638[1];
resetMv mv1639[1];
setVector ve1640 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1641 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1639[0] = <ve1640,ve1641>;
resetMv mv1642[1];
setMv mv1642[0] = rc1[-14];
resetMv mv1643[1];
setMv mv1643[0] = mv1639[0];
calculateMv mv1638 = DIVISION(mv1642,mv1643);
resetMv mv1644[1];
resetMv mv1645[1];
setVector ve1646 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1647 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1645[0] = <ve1646,ve1647>;
resetMv mv1648[1];
setMv mv1648[0] = rc1[20];
resetMv mv1649[1];
setMv mv1649[0] = mv1645[0];
calculateMv mv1644 = DIVISION(mv1648,mv1649);
resetMv mv1650[1];
resetMv mv1651[1];
setVector ve1652 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1653 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1651[0] = <ve1652,ve1653>;
resetMv mv1654[1];
setMv mv1654[0] = rc1[23];
resetMv mv1655[1];
setMv mv1655[0] = mv1651[0];
calculateMv mv1650 = DIVISION(mv1654,mv1655);
resetMv mv1656[1];
resetMv mv1657[1];
setVector ve1658 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1659 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1657[0] = <ve1658,ve1659>;
resetMv mv1660[1];
setMv mv1660[0] = rc1[-5];
resetMv mv1661[1];
setMv mv1661[0] = mv1657[0];
calculateMv mv1656 = DIVISION(mv1660,mv1661);
resetMv mv1662[1];
resetMv mv1663[1];
setVector ve1664 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1665 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1663[0] = <ve1664,ve1665>;
resetMv mv1666[1];
setMv mv1666[0] = rc1[25];
resetMv mv1667[1];
setMv mv1667[0] = mv1663[0];
calculateMv mv1662 = DIVISION(mv1666,mv1667);
resetMv mv1668[1];
resetMv mv1669[1];
setVector ve1670 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1671 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1669[0] = <ve1670,ve1671>;
resetMv mv1672[1];
setMv mv1672[0] = rc1[27];
resetMv mv1673[1];
setMv mv1673[0] = mv1669[0];
calculateMv mv1668 = DIVISION(mv1672,mv1673);
resetMv mv1674[1];
resetMv mv1675[1];
setVector ve1676 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1677 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1675[0] = <ve1676,ve1677>;
resetMv mv1678[1];
setMv mv1678[0] = rc1[-9];
resetMv mv1679[1];
setMv mv1679[0] = mv1675[0];
calculateMv mv1674 = DIVISION(mv1678,mv1679);
resetMv mv1680[1];
resetMv mv1681[1];
setVector ve1682 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1683 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1681[0] = <ve1682,ve1683>;
resetMv mv1684[1];
setMv mv1684[0] = rc1[29];
resetMv mv1685[1];
setMv mv1685[0] = mv1681[0];
calculateMv mv1680 = DIVISION(mv1684,mv1685);
resetMv mv1686[1];
resetMv mv1687[1];
setVector ve1688 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1689 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1687[0] = <ve1688,ve1689>;
resetMv mv1690[1];
setMv mv1690[0] = rc1[-12];
resetMv mv1691[1];
setMv mv1691[0] = mv1687[0];
calculateMv mv1686 = DIVISION(mv1690,mv1691);
resetMv mv1692[1];
resetMv mv1693[1];
setVector ve1694 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1695 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1693[0] = <ve1694,ve1695>;
resetMv mv1696[1];
setMv mv1696[0] = rc1[30];
resetMv mv1697[1];
setMv mv1697[0] = mv1693[0];
calculateMv mv1692 = DIVISION(mv1696,mv1697);
resetMv mv1698[1];
resetMv mv1699[1];
setVector ve1700 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1701 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1699[0] = <ve1700,ve1701>;
resetMv mv1702[1];
setMv mv1702[0] = rc1[-15];
resetMv mv1703[1];
setMv mv1703[0] = mv1699[0];
calculateMv mv1698 = DIVISION(mv1702,mv1703);
resetMv mv1704[1];
resetMv mv1705[1];
setVector ve1706 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1707 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1705[0] = <ve1706,ve1707>;
resetMv mv1708[1];
setMv mv1708[0] = rc1[18];
resetMv mv1709[1];
setMv mv1709[0] = mv1705[0];
calculateMv mv1704 = DIVISION(mv1708,mv1709);
resetMv mv1710[1];
resetMv mv1711[1];
setVector ve1712 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1713 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1711[0] = <ve1712,ve1713>;
resetMv mv1714[1];
setMv mv1714[0] = rc1[-31];
resetMv mv1715[1];
setMv mv1715[0] = mv1711[0];
calculateMv mv1710 = DIVISION(mv1714,mv1715);
resetMv mv1716[1];
resetMv mv1717[1];
setVector ve1718 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1719 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1717[0] = <ve1718,ve1719>;
resetMv mv1720[1];
setMv mv1720[0] = rc1[21];
resetMv mv1721[1];
setMv mv1721[0] = mv1717[0];
calculateMv mv1716 = DIVISION(mv1720,mv1721);
resetMv mv1722[1];
resetMv mv1723[1];
setVector ve1724 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1725 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1723[0] = <ve1724,ve1725>;
resetMv mv1726[1];
setMv mv1726[0] = rc1[24];
resetMv mv1727[1];
setMv mv1727[0] = mv1723[0];
calculateMv mv1722 = DIVISION(mv1726,mv1727);
resetMv mv1728[1];
resetMv mv1729[1];
setVector ve1730 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1731 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1729[0] = <ve1730,ve1731>;
resetMv mv1732[1];
setMv mv1732[0] = rc1[28];
resetMv mv1733[1];
setMv mv1733[0] = mv1729[0];
calculateMv mv1728 = DIVISION(mv1732,mv1733);
setVector ve1734 = rc1[-0,-1,-2,-3,-5,6,7,9,10,12,14,16,18,20,23,-27];
resetMv mv1736[16];
setMv mv1736[14] = mv1722[0];
setMv mv1736[1] = mv1644[0];
setMv mv1736[4] = mv1662[0];
setMv mv1736[3] = mv1656[0];
setMv mv1736[6] = mv1674[0];
setMv mv1736[2] = mv1650[0];
setMv mv1736[13] = mv1716[0];
setMv mv1736[11] = mv1704[0];
setMv mv1736[9] = mv1692[0];
setMv mv1736[12] = mv1710[0];
setMv mv1736[0] = mv1638[0];
setMv mv1736[7] = mv1680[0];
setMv mv1736[8] = mv1686[0];
setMv mv1736[10] = mv1698[0];
setMv mv1736[15] = mv1728[0];
setMv mv1736[5] = mv1668[0];
setVector ve1735 = mv1736[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
dotVectors rc1N[3] = <ve1734,ve1735>;

//rc1N[4] = ((((((((((((((((((((((((-(rc1[0])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[2])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[3])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[4])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[6])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[7])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[8])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[10])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[11])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[13])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[15])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[16])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[17])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[19])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[21])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[22])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[24])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[25])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[26])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[28])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[29])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[30])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[31])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv mv1737[1];
resetMv mv1738[1];
setVector ve1739 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1740 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1738[0] = <ve1739,ve1740>;
resetMv mv1741[1];
setMv mv1741[0] = rc1[-15];
resetMv mv1742[1];
setMv mv1742[0] = mv1738[0];
calculateMv mv1737 = DIVISION(mv1741,mv1742);
resetMv mv1743[1];
resetMv mv1744[1];
setVector ve1745 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1746 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1744[0] = <ve1745,ve1746>;
resetMv mv1747[1];
setMv mv1747[0] = rc1[21];
resetMv mv1748[1];
setMv mv1748[0] = mv1744[0];
calculateMv mv1743 = DIVISION(mv1747,mv1748);
resetMv mv1749[1];
resetMv mv1750[1];
setVector ve1751 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1752 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1750[0] = <ve1751,ve1752>;
resetMv mv1753[1];
setMv mv1753[0] = rc1[24];
resetMv mv1754[1];
setMv mv1754[0] = mv1750[0];
calculateMv mv1749 = DIVISION(mv1753,mv1754);
resetMv mv1755[1];
resetMv mv1756[1];
setVector ve1757 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1758 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1756[0] = <ve1757,ve1758>;
resetMv mv1759[1];
setMv mv1759[0] = rc1[25];
resetMv mv1760[1];
setMv mv1760[0] = mv1756[0];
calculateMv mv1755 = DIVISION(mv1759,mv1760);
resetMv mv1761[1];
resetMv mv1762[1];
setVector ve1763 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1764 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1762[0] = <ve1763,ve1764>;
resetMv mv1765[1];
setMv mv1765[0] = rc1[-5];
resetMv mv1766[1];
setMv mv1766[0] = mv1762[0];
calculateMv mv1761 = DIVISION(mv1765,mv1766);
resetMv mv1767[1];
resetMv mv1768[1];
setVector ve1769 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1770 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1768[0] = <ve1769,ve1770>;
resetMv mv1771[1];
setMv mv1771[0] = rc1[28];
resetMv mv1772[1];
setMv mv1772[0] = mv1768[0];
calculateMv mv1767 = DIVISION(mv1771,mv1772);
resetMv mv1773[1];
resetMv mv1774[1];
setVector ve1775 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1776 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1774[0] = <ve1775,ve1776>;
resetMv mv1777[1];
setMv mv1777[0] = rc1[29];
resetMv mv1778[1];
setMv mv1778[0] = mv1774[0];
calculateMv mv1773 = DIVISION(mv1777,mv1778);
resetMv mv1779[1];
resetMv mv1780[1];
setVector ve1781 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1782 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1780[0] = <ve1781,ve1782>;
resetMv mv1783[1];
setMv mv1783[0] = rc1[-9];
resetMv mv1784[1];
setMv mv1784[0] = mv1780[0];
calculateMv mv1779 = DIVISION(mv1783,mv1784);
resetMv mv1785[1];
resetMv mv1786[1];
setVector ve1787 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1788 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1786[0] = <ve1787,ve1788>;
resetMv mv1789[1];
setMv mv1789[0] = rc1[30];
resetMv mv1790[1];
setMv mv1790[0] = mv1786[0];
calculateMv mv1785 = DIVISION(mv1789,mv1790);
resetMv mv1791[1];
resetMv mv1792[1];
setVector ve1793 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1794 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1792[0] = <ve1793,ve1794>;
resetMv mv1795[1];
setMv mv1795[0] = rc1[-12];
resetMv mv1796[1];
setMv mv1796[0] = mv1792[0];
calculateMv mv1791 = DIVISION(mv1795,mv1796);
resetMv mv1797[1];
resetMv mv1798[1];
setVector ve1799 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1800 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1798[0] = <ve1799,ve1800>;
resetMv mv1801[1];
setMv mv1801[0] = rc1[-14];
resetMv mv1802[1];
setMv mv1802[0] = mv1798[0];
calculateMv mv1797 = DIVISION(mv1801,mv1802);
resetMv mv1803[1];
resetMv mv1804[1];
setVector ve1805 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1806 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1804[0] = <ve1805,ve1806>;
resetMv mv1807[1];
setMv mv1807[0] = rc1[-15];
resetMv mv1808[1];
setMv mv1808[0] = mv1804[0];
calculateMv mv1803 = DIVISION(mv1807,mv1808);
resetMv mv1809[1];
resetMv mv1810[1];
setVector ve1811 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1812 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1810[0] = <ve1811,ve1812>;
resetMv mv1813[1];
setMv mv1813[0] = rc1[-31];
resetMv mv1814[1];
setMv mv1814[0] = mv1810[0];
calculateMv mv1809 = DIVISION(mv1813,mv1814);
resetMv mv1815[1];
resetMv mv1816[1];
setVector ve1817 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1818 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1816[0] = <ve1817,ve1818>;
resetMv mv1819[1];
setMv mv1819[0] = rc1[18];
resetMv mv1820[1];
setMv mv1820[0] = mv1816[0];
calculateMv mv1815 = DIVISION(mv1819,mv1820);
resetMv mv1821[1];
resetMv mv1822[1];
setVector ve1823 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1824 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1822[0] = <ve1823,ve1824>;
resetMv mv1825[1];
setMv mv1825[0] = rc1[20];
resetMv mv1826[1];
setMv mv1826[0] = mv1822[0];
calculateMv mv1821 = DIVISION(mv1825,mv1826);
resetMv mv1827[1];
resetMv mv1828[1];
setVector ve1829 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1830 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1828[0] = <ve1829,ve1830>;
resetMv mv1831[1];
setMv mv1831[0] = rc1[21];
resetMv mv1832[1];
setMv mv1832[0] = mv1828[0];
calculateMv mv1827 = DIVISION(mv1831,mv1832);
resetMv mv1833[1];
resetMv mv1834[1];
setVector ve1835 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1836 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1834[0] = <ve1835,ve1836>;
resetMv mv1837[1];
setMv mv1837[0] = rc1[23];
resetMv mv1838[1];
setMv mv1838[0] = mv1834[0];
calculateMv mv1833 = DIVISION(mv1837,mv1838);
resetMv mv1839[1];
resetMv mv1840[1];
setVector ve1841 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1842 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1840[0] = <ve1841,ve1842>;
resetMv mv1843[1];
setMv mv1843[0] = rc1[24];
resetMv mv1844[1];
setMv mv1844[0] = mv1840[0];
calculateMv mv1839 = DIVISION(mv1843,mv1844);
resetMv mv1845[1];
resetMv mv1846[1];
setVector ve1847 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1848 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1846[0] = <ve1847,ve1848>;
resetMv mv1849[1];
setMv mv1849[0] = rc1[25];
resetMv mv1850[1];
setMv mv1850[0] = mv1846[0];
calculateMv mv1845 = DIVISION(mv1849,mv1850);
resetMv mv1851[1];
resetMv mv1852[1];
setVector ve1853 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1854 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1852[0] = <ve1853,ve1854>;
resetMv mv1855[1];
setMv mv1855[0] = rc1[27];
resetMv mv1856[1];
setMv mv1856[0] = mv1852[0];
calculateMv mv1851 = DIVISION(mv1855,mv1856);
resetMv mv1857[1];
resetMv mv1858[1];
setVector ve1859 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1860 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1858[0] = <ve1859,ve1860>;
resetMv mv1861[1];
setMv mv1861[0] = rc1[28];
resetMv mv1862[1];
setMv mv1862[0] = mv1858[0];
calculateMv mv1857 = DIVISION(mv1861,mv1862);
resetMv mv1863[1];
resetMv mv1864[1];
setVector ve1865 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1866 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1864[0] = <ve1865,ve1866>;
resetMv mv1867[1];
setMv mv1867[0] = rc1[29];
resetMv mv1868[1];
setMv mv1868[0] = mv1864[0];
calculateMv mv1863 = DIVISION(mv1867,mv1868);
resetMv mv1869[1];
resetMv mv1870[1];
setVector ve1871 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1872 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1870[0] = <ve1871,ve1872>;
resetMv mv1873[1];
setMv mv1873[0] = rc1[30];
resetMv mv1874[1];
setMv mv1874[0] = mv1870[0];
calculateMv mv1869 = DIVISION(mv1873,mv1874);
resetMv mv1875[1];
resetMv mv1876[1];
setVector ve1877 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1878 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1876[0] = <ve1877,ve1878>;
resetMv mv1879[1];
setMv mv1879[0] = rc1[-31];
resetMv mv1880[1];
setMv mv1880[0] = mv1876[0];
calculateMv mv1875 = DIVISION(mv1879,mv1880);
setVector ve1881 = rc1[-0,-1,-2,-3,-4,6,7,8,10,11,13,15,16,17,19,21,22,24,25,-26,-28,-29,-30,-31];
resetMv mv1883[24];
setMv mv1883[22] = mv1869[0];
setMv mv1883[15] = mv1827[0];
setMv mv1883[17] = mv1839[0];
setMv mv1883[11] = mv1803[0];
setMv mv1883[1] = mv1743[0];
setMv mv1883[18] = mv1845[0];
setMv mv1883[3] = mv1755[0];
setMv mv1883[20] = mv1857[0];
setMv mv1883[16] = mv1833[0];
setMv mv1883[13] = mv1815[0];
setMv mv1883[9] = mv1791[0];
setMv mv1883[12] = mv1809[0];
setMv mv1883[4] = mv1761[0];
setMv mv1883[10] = mv1797[0];
setMv mv1883[8] = mv1785[0];
setMv mv1883[6] = mv1773[0];
setMv mv1883[7] = mv1779[0];
setMv mv1883[5] = mv1767[0];
setMv mv1883[19] = mv1851[0];
setMv mv1883[14] = mv1821[0];
setMv mv1883[23] = mv1875[0];
setMv mv1883[2] = mv1749[0];
setMv mv1883[21] = mv1863[0];
setMv mv1883[0] = mv1737[0];
setVector ve1882 = mv1883[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23];
dotVectors rc1N[4] = <ve1881,ve1882>;

//rc1N[5] = ((((((((-(rc1[5])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + (-((-(rc1[9])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[12])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[14])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[18])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[20])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[23])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[27])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv mv1884[1];
resetMv mv1885[1];
setVector ve1886 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1887 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1885[0] = <ve1886,ve1887>;
resetMv mv1888[1];
setMv mv1888[0] = rc1[-5];
resetMv mv1889[1];
setMv mv1889[0] = mv1885[0];
calculateMv mv1884 = DIVISION(mv1888,mv1889);
resetMv mv1890[1];
resetMv mv1891[1];
setVector ve1892 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1893 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1891[0] = <ve1892,ve1893>;
resetMv mv1894[1];
setMv mv1894[0] = rc1[-9];
resetMv mv1895[1];
setMv mv1895[0] = mv1891[0];
calculateMv mv1890 = DIVISION(mv1894,mv1895);
resetMv mv1896[1];
resetMv mv1897[1];
setVector ve1898 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1899 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1897[0] = <ve1898,ve1899>;
resetMv mv1900[1];
setMv mv1900[0] = rc1[-12];
resetMv mv1901[1];
setMv mv1901[0] = mv1897[0];
calculateMv mv1896 = DIVISION(mv1900,mv1901);
resetMv mv1902[1];
resetMv mv1903[1];
setVector ve1904 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1905 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1903[0] = <ve1904,ve1905>;
resetMv mv1906[1];
setMv mv1906[0] = rc1[-14];
resetMv mv1907[1];
setMv mv1907[0] = mv1903[0];
calculateMv mv1902 = DIVISION(mv1906,mv1907);
resetMv mv1908[1];
resetMv mv1909[1];
setVector ve1910 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1911 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1909[0] = <ve1910,ve1911>;
resetMv mv1912[1];
setMv mv1912[0] = rc1[18];
resetMv mv1913[1];
setMv mv1913[0] = mv1909[0];
calculateMv mv1908 = DIVISION(mv1912,mv1913);
resetMv mv1914[1];
resetMv mv1915[1];
setVector ve1916 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1917 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1915[0] = <ve1916,ve1917>;
resetMv mv1918[1];
setMv mv1918[0] = rc1[20];
resetMv mv1919[1];
setMv mv1919[0] = mv1915[0];
calculateMv mv1914 = DIVISION(mv1918,mv1919);
resetMv mv1920[1];
resetMv mv1921[1];
setVector ve1922 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1923 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1921[0] = <ve1922,ve1923>;
resetMv mv1924[1];
setMv mv1924[0] = rc1[23];
resetMv mv1925[1];
setMv mv1925[0] = mv1921[0];
calculateMv mv1920 = DIVISION(mv1924,mv1925);
resetMv mv1926[1];
resetMv mv1927[1];
setVector ve1928 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1929 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1927[0] = <ve1928,ve1929>;
resetMv mv1930[1];
setMv mv1930[0] = rc1[27];
resetMv mv1931[1];
setMv mv1931[0] = mv1927[0];
calculateMv mv1926 = DIVISION(mv1930,mv1931);
setVector ve1932 = rc1[-5,9,12,14,18,20,23,-27];
resetMv mv1934[8];
setMv mv1934[2] = mv1896[0];
setMv mv1934[5] = mv1914[0];
setMv mv1934[0] = mv1884[0];
setMv mv1934[6] = mv1920[0];
setMv mv1934[3] = mv1902[0];
setMv mv1934[1] = mv1890[0];
setMv mv1934[4] = mv1908[0];
setMv mv1934[7] = mv1926[0];
setVector ve1933 = mv1934[0,1,2,3,4,5,6,7];
dotVectors rc1N[5] = <ve1932,ve1933>;

//rc2[0] = ((((-(temp2[1])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + ((-(temp2[2])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((-(temp2[3])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[5])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv rc2[32];
resetMv mv1935[1];
resetMv mv1936[1];
resetMv mv1938[3];
setMv mv1938[0,2] = rcPp[23,18];
setMv mv1938[1] = rcPpDual[12];
setVector ve1937 = mv1938[0,1,2];
resetMv mv1940[3];
setMv mv1940[0,2] = rcPp[23,18];
setMv mv1940[1] = rcPpDual[12];
setVector ve1939 = mv1940[0,1,2];
dotVectors mv1936[0] = <ve1937,ve1939>;
resetMv mv1941[1];
setMv mv1941[0] = rcPp[23];
resetMv mv1942[1];
setMv mv1942[0] = mv1936[0];
calculateMv mv1935 = DIVISION(mv1941,mv1942);
resetMv mv1943[1];
resetMv mv1944[1];
resetMv mv1946[3];
setMv mv1946[0,2] = rcPp[23,18];
setMv mv1946[1] = rcPpDual[12];
setVector ve1945 = mv1946[0,1,2];
resetMv mv1948[3];
setMv mv1948[0,2] = rcPp[23,18];
setMv mv1948[1] = rcPpDual[12];
setVector ve1947 = mv1948[0,1,2];
dotVectors mv1944[0] = <ve1945,ve1947>;
resetMv mv1949[1];
setMv mv1949[0] = rcPpDual[12];
resetMv mv1950[1];
setMv mv1950[0] = mv1944[0];
calculateMv mv1943 = DIVISION(mv1949,mv1950);
resetMv mv1951[1];
resetMv mv1952[1];
resetMv mv1954[3];
setMv mv1954[0,2] = rcPp[23,18];
setMv mv1954[1] = rcPpDual[12];
setVector ve1953 = mv1954[0,1,2];
resetMv mv1956[3];
setMv mv1956[0,2] = rcPp[23,18];
setMv mv1956[1] = rcPpDual[12];
setVector ve1955 = mv1956[0,1,2];
dotVectors mv1952[0] = <ve1953,ve1955>;
resetMv mv1957[1];
setMv mv1957[0] = rcPp[18];
resetMv mv1958[1];
setMv mv1958[0] = mv1952[0];
calculateMv mv1951 = DIVISION(mv1957,mv1958);
resetMv mv1959[1];
resetMv mv1960[1];
resetMv mv1962[3];
setMv mv1962[0,2] = rcPp[23,18];
setMv mv1962[1] = rcPpDual[12];
setVector ve1961 = mv1962[0,1,2];
resetMv mv1964[3];
setMv mv1964[0,2] = rcPp[23,18];
setMv mv1964[1] = rcPpDual[12];
setVector ve1963 = mv1964[0,1,2];
dotVectors mv1960[0] = <ve1961,ve1963>;
resetMv mv1965[1];
setMv mv1965[0] = rcPp[16];
resetMv mv1966[1];
setMv mv1966[0] = mv1960[0];
calculateMv mv1959 = DIVISION(mv1965,mv1966);
setVector ve1967 = temp2[-1,-2,-3,5];
resetMv mv1969[4];
setMv mv1969[2] = mv1951[0];
setMv mv1969[0] = mv1935[0];
setMv mv1969[3] = mv1959[0];
setMv mv1969[1] = mv1943[0];
setVector ve1968 = mv1969[0,1,2,3];
dotVectors rc2[0] = <ve1967,ve1968>;

//rc2[1] = ((((-(temp2[0])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + ((rcPpDual[6] - temp2[6]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((rcPp[24] - temp2[7]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((rcPp[23] - temp2[9]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv1970[1];
resetMv mv1971[1];
resetMv mv1973[3];
setMv mv1973[0,2] = rcPp[23,18];
setMv mv1973[1] = rcPpDual[12];
setVector ve1972 = mv1973[0,1,2];
resetMv mv1975[3];
setMv mv1975[0,2] = rcPp[23,18];
setMv mv1975[1] = rcPpDual[12];
setVector ve1974 = mv1975[0,1,2];
dotVectors mv1971[0] = <ve1972,ve1974>;
resetMv mv1976[1];
setMv mv1976[0] = rcPp[23];
resetMv mv1977[1];
setMv mv1977[0] = mv1971[0];
calculateMv mv1970 = DIVISION(mv1976,mv1977);
resetMv mv1978[1];
resetMv mv1980[2];
setMv mv1980[1] = temp2[-6];
setMv mv1980[0] = rcPpDual[6];
setVector ve1979 = mv1980[0,1];
dotVectors mv1978[0] = <ve1979>;
resetMv mv1981[1];
resetMv mv1982[1];
resetMv mv1984[3];
setMv mv1984[0,2] = rcPp[23,18];
setMv mv1984[1] = rcPpDual[12];
setVector ve1983 = mv1984[0,1,2];
resetMv mv1986[3];
setMv mv1986[0,2] = rcPp[23,18];
setMv mv1986[1] = rcPpDual[12];
setVector ve1985 = mv1986[0,1,2];
dotVectors mv1982[0] = <ve1983,ve1985>;
resetMv mv1987[1];
setMv mv1987[0] = rcPpDual[12];
resetMv mv1988[1];
setMv mv1988[0] = mv1982[0];
calculateMv mv1981 = DIVISION(mv1987,mv1988);
resetMv mv1989[1];
resetMv mv1991[2];
setMv mv1991[1] = temp2[-7];
setMv mv1991[0] = rcPp[24];
setVector ve1990 = mv1991[0,1];
dotVectors mv1989[0] = <ve1990>;
resetMv mv1992[1];
resetMv mv1993[1];
resetMv mv1995[3];
setMv mv1995[0,2] = rcPp[23,18];
setMv mv1995[1] = rcPpDual[12];
setVector ve1994 = mv1995[0,1,2];
resetMv mv1997[3];
setMv mv1997[0,2] = rcPp[23,18];
setMv mv1997[1] = rcPpDual[12];
setVector ve1996 = mv1997[0,1,2];
dotVectors mv1993[0] = <ve1994,ve1996>;
resetMv mv1998[1];
setMv mv1998[0] = rcPp[18];
resetMv mv1999[1];
setMv mv1999[0] = mv1993[0];
calculateMv mv1992 = DIVISION(mv1998,mv1999);
resetMv mv2000[1];
resetMv mv2001[1];
resetMv mv2003[2];
setMv mv2003[1] = temp2[-9];
setMv mv2003[0] = rcPp[23];
setVector ve2002 = mv2003[0,1];
dotVectors mv2001[0] = <ve2002>;
setMv mv2000[0] = mv2001[-0];
resetMv mv2004[1];
resetMv mv2005[1];
resetMv mv2007[3];
setMv mv2007[0,2] = rcPp[23,18];
setMv mv2007[1] = rcPpDual[12];
setVector ve2006 = mv2007[0,1,2];
resetMv mv2009[3];
setMv mv2009[0,2] = rcPp[23,18];
setMv mv2009[1] = rcPpDual[12];
setVector ve2008 = mv2009[0,1,2];
dotVectors mv2005[0] = <ve2006,ve2008>;
resetMv mv2010[1];
setMv mv2010[0] = rcPp[16];
resetMv mv2011[1];
setMv mv2011[0] = mv2005[0];
calculateMv mv2004 = DIVISION(mv2010,mv2011);
resetMv mv2013[4];
setMv mv2013[0] = temp2[-0];
setMv mv2013[2] = mv1989[0];
setMv mv2013[3] = mv2000[0];
setMv mv2013[1] = mv1978[0];
setVector ve2012 = mv2013[0,1,2,3];
resetMv mv2015[4];
setMv mv2015[1] = mv1981[0];
setMv mv2015[2] = mv1992[0];
setMv mv2015[3] = mv2004[0];
setMv mv2015[0] = mv1970[0];
setVector ve2014 = mv2015[0,1,2,3];
dotVectors rc2[1] = <ve2012,ve2014>;

//rc2[2] = ((((-(temp2[0])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((rcPpDual[6] - temp2[6]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((rcPpDual[10] - temp2[10]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((rcPpDual[12] - temp2[12]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2016[1];
resetMv mv2017[1];
resetMv mv2019[3];
setMv mv2019[0,2] = rcPp[23,18];
setMv mv2019[1] = rcPpDual[12];
setVector ve2018 = mv2019[0,1,2];
resetMv mv2021[3];
setMv mv2021[0,2] = rcPp[23,18];
setMv mv2021[1] = rcPpDual[12];
setVector ve2020 = mv2021[0,1,2];
dotVectors mv2017[0] = <ve2018,ve2020>;
resetMv mv2022[1];
setMv mv2022[0] = rcPpDual[12];
resetMv mv2023[1];
setMv mv2023[0] = mv2017[0];
calculateMv mv2016 = DIVISION(mv2022,mv2023);
resetMv mv2024[1];
resetMv mv2025[1];
resetMv mv2027[2];
setMv mv2027[1] = temp2[-6];
setMv mv2027[0] = rcPpDual[6];
setVector ve2026 = mv2027[0,1];
dotVectors mv2025[0] = <ve2026>;
setMv mv2024[0] = mv2025[-0];
resetMv mv2028[1];
resetMv mv2029[1];
resetMv mv2031[3];
setMv mv2031[0,2] = rcPp[23,18];
setMv mv2031[1] = rcPpDual[12];
setVector ve2030 = mv2031[0,1,2];
resetMv mv2033[3];
setMv mv2033[0,2] = rcPp[23,18];
setMv mv2033[1] = rcPpDual[12];
setVector ve2032 = mv2033[0,1,2];
dotVectors mv2029[0] = <ve2030,ve2032>;
resetMv mv2034[1];
setMv mv2034[0] = rcPp[23];
resetMv mv2035[1];
setMv mv2035[0] = mv2029[0];
calculateMv mv2028 = DIVISION(mv2034,mv2035);
resetMv mv2036[1];
resetMv mv2038[2];
setMv mv2038[1] = temp2[-10];
setMv mv2038[0] = rcPpDual[10];
setVector ve2037 = mv2038[0,1];
dotVectors mv2036[0] = <ve2037>;
resetMv mv2039[1];
resetMv mv2040[1];
resetMv mv2042[3];
setMv mv2042[0,2] = rcPp[23,18];
setMv mv2042[1] = rcPpDual[12];
setVector ve2041 = mv2042[0,1,2];
resetMv mv2044[3];
setMv mv2044[0,2] = rcPp[23,18];
setMv mv2044[1] = rcPpDual[12];
setVector ve2043 = mv2044[0,1,2];
dotVectors mv2040[0] = <ve2041,ve2043>;
resetMv mv2045[1];
setMv mv2045[0] = rcPp[18];
resetMv mv2046[1];
setMv mv2046[0] = mv2040[0];
calculateMv mv2039 = DIVISION(mv2045,mv2046);
resetMv mv2047[1];
resetMv mv2048[1];
resetMv mv2050[2];
setMv mv2050[1] = temp2[-12];
setMv mv2050[0] = rcPpDual[12];
setVector ve2049 = mv2050[0,1];
dotVectors mv2048[0] = <ve2049>;
setMv mv2047[0] = mv2048[-0];
resetMv mv2051[1];
resetMv mv2052[1];
resetMv mv2054[3];
setMv mv2054[0,2] = rcPp[23,18];
setMv mv2054[1] = rcPpDual[12];
setVector ve2053 = mv2054[0,1,2];
resetMv mv2056[3];
setMv mv2056[0,2] = rcPp[23,18];
setMv mv2056[1] = rcPpDual[12];
setVector ve2055 = mv2056[0,1,2];
dotVectors mv2052[0] = <ve2053,ve2055>;
resetMv mv2057[1];
setMv mv2057[0] = rcPp[16];
resetMv mv2058[1];
setMv mv2058[0] = mv2052[0];
calculateMv mv2051 = DIVISION(mv2057,mv2058);
resetMv mv2060[4];
setMv mv2060[0] = temp2[-0];
setMv mv2060[1] = mv2024[0];
setMv mv2060[3] = mv2047[0];
setMv mv2060[2] = mv2036[0];
setVector ve2059 = mv2060[0,1,2,3];
resetMv mv2062[4];
setMv mv2062[2] = mv2039[0];
setMv mv2062[3] = mv2051[0];
setMv mv2062[0] = mv2016[0];
setMv mv2062[1] = mv2028[0];
setVector ve2061 = mv2062[0,1,2,3];
dotVectors rc2[2] = <ve2059,ve2061>;

//rc2[3] = ((((-(temp2[0])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((rcPp[24] - temp2[7]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((rcPpDual[10] - temp2[10]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((rcPp[18] - temp2[14]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2063[1];
resetMv mv2064[1];
resetMv mv2066[3];
setMv mv2066[0,2] = rcPp[23,18];
setMv mv2066[1] = rcPpDual[12];
setVector ve2065 = mv2066[0,1,2];
resetMv mv2068[3];
setMv mv2068[0,2] = rcPp[23,18];
setMv mv2068[1] = rcPpDual[12];
setVector ve2067 = mv2068[0,1,2];
dotVectors mv2064[0] = <ve2065,ve2067>;
resetMv mv2069[1];
setMv mv2069[0] = rcPp[18];
resetMv mv2070[1];
setMv mv2070[0] = mv2064[0];
calculateMv mv2063 = DIVISION(mv2069,mv2070);
resetMv mv2071[1];
resetMv mv2072[1];
resetMv mv2074[2];
setMv mv2074[1] = temp2[-7];
setMv mv2074[0] = rcPp[24];
setVector ve2073 = mv2074[0,1];
dotVectors mv2072[0] = <ve2073>;
setMv mv2071[0] = mv2072[-0];
resetMv mv2075[1];
resetMv mv2076[1];
resetMv mv2078[3];
setMv mv2078[0,2] = rcPp[23,18];
setMv mv2078[1] = rcPpDual[12];
setVector ve2077 = mv2078[0,1,2];
resetMv mv2080[3];
setMv mv2080[0,2] = rcPp[23,18];
setMv mv2080[1] = rcPpDual[12];
setVector ve2079 = mv2080[0,1,2];
dotVectors mv2076[0] = <ve2077,ve2079>;
resetMv mv2081[1];
setMv mv2081[0] = rcPp[23];
resetMv mv2082[1];
setMv mv2082[0] = mv2076[0];
calculateMv mv2075 = DIVISION(mv2081,mv2082);
resetMv mv2083[1];
resetMv mv2084[1];
resetMv mv2086[2];
setMv mv2086[1] = temp2[-10];
setMv mv2086[0] = rcPpDual[10];
setVector ve2085 = mv2086[0,1];
dotVectors mv2084[0] = <ve2085>;
setMv mv2083[0] = mv2084[-0];
resetMv mv2087[1];
resetMv mv2088[1];
resetMv mv2090[3];
setMv mv2090[0,2] = rcPp[23,18];
setMv mv2090[1] = rcPpDual[12];
setVector ve2089 = mv2090[0,1,2];
resetMv mv2092[3];
setMv mv2092[0,2] = rcPp[23,18];
setMv mv2092[1] = rcPpDual[12];
setVector ve2091 = mv2092[0,1,2];
dotVectors mv2088[0] = <ve2089,ve2091>;
resetMv mv2093[1];
setMv mv2093[0] = rcPpDual[12];
resetMv mv2094[1];
setMv mv2094[0] = mv2088[0];
calculateMv mv2087 = DIVISION(mv2093,mv2094);
resetMv mv2095[1];
resetMv mv2096[1];
resetMv mv2098[2];
setMv mv2098[1] = temp2[-14];
setMv mv2098[0] = rcPp[18];
setVector ve2097 = mv2098[0,1];
dotVectors mv2096[0] = <ve2097>;
setMv mv2095[0] = mv2096[-0];
resetMv mv2099[1];
resetMv mv2100[1];
resetMv mv2102[3];
setMv mv2102[0,2] = rcPp[23,18];
setMv mv2102[1] = rcPpDual[12];
setVector ve2101 = mv2102[0,1,2];
resetMv mv2104[3];
setMv mv2104[0,2] = rcPp[23,18];
setMv mv2104[1] = rcPpDual[12];
setVector ve2103 = mv2104[0,1,2];
dotVectors mv2100[0] = <ve2101,ve2103>;
resetMv mv2105[1];
setMv mv2105[0] = rcPp[16];
resetMv mv2106[1];
setMv mv2106[0] = mv2100[0];
calculateMv mv2099 = DIVISION(mv2105,mv2106);
resetMv mv2108[4];
setMv mv2108[3] = mv2095[0];
setMv mv2108[0] = temp2[-0];
setMv mv2108[2] = mv2083[0];
setMv mv2108[1] = mv2071[0];
setVector ve2107 = mv2108[0,1,2,3];
resetMv mv2110[4];
setMv mv2110[3] = mv2099[0];
setMv mv2110[2] = mv2087[0];
setMv mv2110[1] = mv2075[0];
setMv mv2110[0] = mv2063[0];
setVector ve2109 = mv2110[0,1,2,3];
dotVectors rc2[3] = <ve2107,ve2109>;

//rc2[4] = (((((-(temp2[0])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((rcPpDual[8] - temp2[8]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((rcPp[19] - temp2[11]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((rcPpDual[13] - temp2[13]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((rcPp[16] - temp2[15]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2111[1];
resetMv mv2112[1];
resetMv mv2114[3];
setMv mv2114[0,2] = rcPp[23,18];
setMv mv2114[1] = rcPpDual[12];
setVector ve2113 = mv2114[0,1,2];
resetMv mv2116[3];
setMv mv2116[0,2] = rcPp[23,18];
setMv mv2116[1] = rcPpDual[12];
setVector ve2115 = mv2116[0,1,2];
dotVectors mv2112[0] = <ve2113,ve2115>;
resetMv mv2117[1];
setMv mv2117[0] = rcPp[16];
resetMv mv2118[1];
setMv mv2118[0] = mv2112[0];
calculateMv mv2111 = DIVISION(mv2117,mv2118);
resetMv mv2119[1];
resetMv mv2120[1];
resetMv mv2122[2];
setMv mv2122[1] = temp2[-8];
setMv mv2122[0] = rcPpDual[8];
setVector ve2121 = mv2122[0,1];
dotVectors mv2120[0] = <ve2121>;
setMv mv2119[0] = mv2120[-0];
resetMv mv2123[1];
resetMv mv2124[1];
resetMv mv2126[3];
setMv mv2126[0,2] = rcPp[23,18];
setMv mv2126[1] = rcPpDual[12];
setVector ve2125 = mv2126[0,1,2];
resetMv mv2128[3];
setMv mv2128[0,2] = rcPp[23,18];
setMv mv2128[1] = rcPpDual[12];
setVector ve2127 = mv2128[0,1,2];
dotVectors mv2124[0] = <ve2125,ve2127>;
resetMv mv2129[1];
setMv mv2129[0] = rcPp[23];
resetMv mv2130[1];
setMv mv2130[0] = mv2124[0];
calculateMv mv2123 = DIVISION(mv2129,mv2130);
resetMv mv2131[1];
resetMv mv2132[1];
resetMv mv2134[2];
setMv mv2134[1] = temp2[-11];
setMv mv2134[0] = rcPp[19];
setVector ve2133 = mv2134[0,1];
dotVectors mv2132[0] = <ve2133>;
setMv mv2131[0] = mv2132[-0];
resetMv mv2135[1];
resetMv mv2136[1];
resetMv mv2138[3];
setMv mv2138[0,2] = rcPp[23,18];
setMv mv2138[1] = rcPpDual[12];
setVector ve2137 = mv2138[0,1,2];
resetMv mv2140[3];
setMv mv2140[0,2] = rcPp[23,18];
setMv mv2140[1] = rcPpDual[12];
setVector ve2139 = mv2140[0,1,2];
dotVectors mv2136[0] = <ve2137,ve2139>;
resetMv mv2141[1];
setMv mv2141[0] = rcPpDual[12];
resetMv mv2142[1];
setMv mv2142[0] = mv2136[0];
calculateMv mv2135 = DIVISION(mv2141,mv2142);
resetMv mv2143[1];
resetMv mv2144[1];
resetMv mv2146[2];
setMv mv2146[1] = temp2[-13];
setMv mv2146[0] = rcPpDual[13];
setVector ve2145 = mv2146[0,1];
dotVectors mv2144[0] = <ve2145>;
setMv mv2143[0] = mv2144[-0];
resetMv mv2147[1];
resetMv mv2148[1];
resetMv mv2150[3];
setMv mv2150[0,2] = rcPp[23,18];
setMv mv2150[1] = rcPpDual[12];
setVector ve2149 = mv2150[0,1,2];
resetMv mv2152[3];
setMv mv2152[0,2] = rcPp[23,18];
setMv mv2152[1] = rcPpDual[12];
setVector ve2151 = mv2152[0,1,2];
dotVectors mv2148[0] = <ve2149,ve2151>;
resetMv mv2153[1];
setMv mv2153[0] = rcPp[18];
resetMv mv2154[1];
setMv mv2154[0] = mv2148[0];
calculateMv mv2147 = DIVISION(mv2153,mv2154);
resetMv mv2155[1];
resetMv mv2156[1];
resetMv mv2158[2];
setMv mv2158[1] = temp2[-15];
setMv mv2158[0] = rcPp[16];
setVector ve2157 = mv2158[0,1];
dotVectors mv2156[0] = <ve2157>;
setMv mv2155[0] = mv2156[-0];
resetMv mv2159[1];
resetMv mv2160[1];
resetMv mv2162[3];
setMv mv2162[0,2] = rcPp[23,18];
setMv mv2162[1] = rcPpDual[12];
setVector ve2161 = mv2162[0,1,2];
resetMv mv2164[3];
setMv mv2164[0,2] = rcPp[23,18];
setMv mv2164[1] = rcPpDual[12];
setVector ve2163 = mv2164[0,1,2];
dotVectors mv2160[0] = <ve2161,ve2163>;
resetMv mv2165[1];
setMv mv2165[0] = rcPp[16];
resetMv mv2166[1];
setMv mv2166[0] = mv2160[0];
calculateMv mv2159 = DIVISION(mv2165,mv2166);
resetMv mv2168[5];
setMv mv2168[0] = temp2[-0];
setMv mv2168[1] = mv2119[0];
setMv mv2168[4] = mv2155[0];
setMv mv2168[3] = mv2143[0];
setMv mv2168[2] = mv2131[0];
setVector ve2167 = mv2168[0,1,2,3,4];
resetMv mv2170[5];
setMv mv2170[3] = mv2147[0];
setMv mv2170[4] = mv2159[0];
setMv mv2170[2] = mv2135[0];
setMv mv2170[1] = mv2123[0];
setMv mv2170[0] = mv2111[0];
setVector ve2169 = mv2170[0,1,2,3,4];
dotVectors rc2[4] = <ve2167,ve2169>;

//rc2[5] = ((-((rcPp[23] - temp2[9]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((rcPpDual[12] - temp2[12]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((rcPp[18] - temp2[14]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2171[1];
resetMv mv2172[1];
resetMv mv2174[2];
setMv mv2174[1] = temp2[-9];
setMv mv2174[0] = rcPp[23];
setVector ve2173 = mv2174[0,1];
dotVectors mv2172[0] = <ve2173>;
setMv mv2171[0] = mv2172[-0];
resetMv mv2175[1];
resetMv mv2176[1];
resetMv mv2178[3];
setMv mv2178[0,2] = rcPp[23,18];
setMv mv2178[1] = rcPpDual[12];
setVector ve2177 = mv2178[0,1,2];
resetMv mv2180[3];
setMv mv2180[0,2] = rcPp[23,18];
setMv mv2180[1] = rcPpDual[12];
setVector ve2179 = mv2180[0,1,2];
dotVectors mv2176[0] = <ve2177,ve2179>;
resetMv mv2181[1];
setMv mv2181[0] = rcPp[23];
resetMv mv2182[1];
setMv mv2182[0] = mv2176[0];
calculateMv mv2175 = DIVISION(mv2181,mv2182);
resetMv mv2183[1];
resetMv mv2184[1];
resetMv mv2186[2];
setMv mv2186[1] = temp2[-12];
setMv mv2186[0] = rcPpDual[12];
setVector ve2185 = mv2186[0,1];
dotVectors mv2184[0] = <ve2185>;
setMv mv2183[0] = mv2184[-0];
resetMv mv2187[1];
resetMv mv2188[1];
resetMv mv2190[3];
setMv mv2190[0,2] = rcPp[23,18];
setMv mv2190[1] = rcPpDual[12];
setVector ve2189 = mv2190[0,1,2];
resetMv mv2192[3];
setMv mv2192[0,2] = rcPp[23,18];
setMv mv2192[1] = rcPpDual[12];
setVector ve2191 = mv2192[0,1,2];
dotVectors mv2188[0] = <ve2189,ve2191>;
resetMv mv2193[1];
setMv mv2193[0] = rcPpDual[12];
resetMv mv2194[1];
setMv mv2194[0] = mv2188[0];
calculateMv mv2187 = DIVISION(mv2193,mv2194);
resetMv mv2195[1];
resetMv mv2196[1];
resetMv mv2198[2];
setMv mv2198[1] = temp2[-14];
setMv mv2198[0] = rcPp[18];
setVector ve2197 = mv2198[0,1];
dotVectors mv2196[0] = <ve2197>;
setMv mv2195[0] = mv2196[-0];
resetMv mv2199[1];
resetMv mv2200[1];
resetMv mv2202[3];
setMv mv2202[0,2] = rcPp[23,18];
setMv mv2202[1] = rcPpDual[12];
setVector ve2201 = mv2202[0,1,2];
resetMv mv2204[3];
setMv mv2204[0,2] = rcPp[23,18];
setMv mv2204[1] = rcPpDual[12];
setVector ve2203 = mv2204[0,1,2];
dotVectors mv2200[0] = <ve2201,ve2203>;
resetMv mv2205[1];
setMv mv2205[0] = rcPp[18];
resetMv mv2206[1];
setMv mv2206[0] = mv2200[0];
calculateMv mv2199 = DIVISION(mv2205,mv2206);
resetMv mv2208[3];
setMv mv2208[2] = mv2195[0];
setMv mv2208[1] = mv2183[0];
setMv mv2208[0] = mv2171[0];
setVector ve2207 = mv2208[0,1,2];
resetMv mv2210[3];
setMv mv2210[1] = mv2187[0];
setMv mv2210[0] = mv2175[0];
setMv mv2210[2] = mv2199[0];
setVector ve2209 = mv2210[0,1,2];
dotVectors rc2[5] = <ve2207,ve2209>;

//rc2[6] = ((((-(temp2[1])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((-(temp2[2])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((-(temp2[16])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[18])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2211[1];
resetMv mv2212[1];
resetMv mv2214[3];
setMv mv2214[0,2] = rcPp[23,18];
setMv mv2214[1] = rcPpDual[12];
setVector ve2213 = mv2214[0,1,2];
resetMv mv2216[3];
setMv mv2216[0,2] = rcPp[23,18];
setMv mv2216[1] = rcPpDual[12];
setVector ve2215 = mv2216[0,1,2];
dotVectors mv2212[0] = <ve2213,ve2215>;
resetMv mv2217[1];
setMv mv2217[0] = rcPpDual[12];
resetMv mv2218[1];
setMv mv2218[0] = mv2212[0];
calculateMv mv2211 = DIVISION(mv2217,mv2218);
resetMv mv2219[1];
resetMv mv2220[1];
resetMv mv2222[3];
setMv mv2222[0,2] = rcPp[23,18];
setMv mv2222[1] = rcPpDual[12];
setVector ve2221 = mv2222[0,1,2];
resetMv mv2224[3];
setMv mv2224[0,2] = rcPp[23,18];
setMv mv2224[1] = rcPpDual[12];
setVector ve2223 = mv2224[0,1,2];
dotVectors mv2220[0] = <ve2221,ve2223>;
resetMv mv2225[1];
setMv mv2225[0] = rcPp[23];
resetMv mv2226[1];
setMv mv2226[0] = mv2220[0];
calculateMv mv2219 = DIVISION(mv2225,mv2226);
resetMv mv2227[1];
resetMv mv2228[1];
resetMv mv2230[3];
setMv mv2230[0,2] = rcPp[23,18];
setMv mv2230[1] = rcPpDual[12];
setVector ve2229 = mv2230[0,1,2];
resetMv mv2232[3];
setMv mv2232[0,2] = rcPp[23,18];
setMv mv2232[1] = rcPpDual[12];
setVector ve2231 = mv2232[0,1,2];
dotVectors mv2228[0] = <ve2229,ve2231>;
resetMv mv2233[1];
setMv mv2233[0] = rcPp[18];
resetMv mv2234[1];
setMv mv2234[0] = mv2228[0];
calculateMv mv2227 = DIVISION(mv2233,mv2234);
resetMv mv2235[1];
resetMv mv2236[1];
resetMv mv2238[3];
setMv mv2238[0,2] = rcPp[23,18];
setMv mv2238[1] = rcPpDual[12];
setVector ve2237 = mv2238[0,1,2];
resetMv mv2240[3];
setMv mv2240[0,2] = rcPp[23,18];
setMv mv2240[1] = rcPpDual[12];
setVector ve2239 = mv2240[0,1,2];
dotVectors mv2236[0] = <ve2237,ve2239>;
resetMv mv2241[1];
setMv mv2241[0] = rcPp[16];
resetMv mv2242[1];
setMv mv2242[0] = mv2236[0];
calculateMv mv2235 = DIVISION(mv2241,mv2242);
setVector ve2243 = temp2[-1,2,-16,18];
resetMv mv2245[4];
setMv mv2245[3] = mv2235[0];
setMv mv2245[2] = mv2227[0];
setMv mv2245[0] = mv2211[0];
setMv mv2245[1] = mv2219[0];
setVector ve2244 = mv2245[0,1,2,3];
dotVectors rc2[6] = <ve2243,ve2244>;

//rc2[7] = ((((-(temp2[1])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((-(temp2[3])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((-(temp2[16])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((-(temp2[20])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2246[1];
resetMv mv2247[1];
resetMv mv2249[3];
setMv mv2249[0,2] = rcPp[23,18];
setMv mv2249[1] = rcPpDual[12];
setVector ve2248 = mv2249[0,1,2];
resetMv mv2251[3];
setMv mv2251[0,2] = rcPp[23,18];
setMv mv2251[1] = rcPpDual[12];
setVector ve2250 = mv2251[0,1,2];
dotVectors mv2247[0] = <ve2248,ve2250>;
resetMv mv2252[1];
setMv mv2252[0] = rcPp[18];
resetMv mv2253[1];
setMv mv2253[0] = mv2247[0];
calculateMv mv2246 = DIVISION(mv2252,mv2253);
resetMv mv2254[1];
resetMv mv2255[1];
resetMv mv2257[3];
setMv mv2257[0,2] = rcPp[23,18];
setMv mv2257[1] = rcPpDual[12];
setVector ve2256 = mv2257[0,1,2];
resetMv mv2259[3];
setMv mv2259[0,2] = rcPp[23,18];
setMv mv2259[1] = rcPpDual[12];
setVector ve2258 = mv2259[0,1,2];
dotVectors mv2255[0] = <ve2256,ve2258>;
resetMv mv2260[1];
setMv mv2260[0] = rcPp[23];
resetMv mv2261[1];
setMv mv2261[0] = mv2255[0];
calculateMv mv2254 = DIVISION(mv2260,mv2261);
resetMv mv2262[1];
resetMv mv2263[1];
resetMv mv2265[3];
setMv mv2265[0,2] = rcPp[23,18];
setMv mv2265[1] = rcPpDual[12];
setVector ve2264 = mv2265[0,1,2];
resetMv mv2267[3];
setMv mv2267[0,2] = rcPp[23,18];
setMv mv2267[1] = rcPpDual[12];
setVector ve2266 = mv2267[0,1,2];
dotVectors mv2263[0] = <ve2264,ve2266>;
resetMv mv2268[1];
setMv mv2268[0] = rcPpDual[12];
resetMv mv2269[1];
setMv mv2269[0] = mv2263[0];
calculateMv mv2262 = DIVISION(mv2268,mv2269);
resetMv mv2270[1];
resetMv mv2271[1];
resetMv mv2273[3];
setMv mv2273[0,2] = rcPp[23,18];
setMv mv2273[1] = rcPpDual[12];
setVector ve2272 = mv2273[0,1,2];
resetMv mv2275[3];
setMv mv2275[0,2] = rcPp[23,18];
setMv mv2275[1] = rcPpDual[12];
setVector ve2274 = mv2275[0,1,2];
dotVectors mv2271[0] = <ve2272,ve2274>;
resetMv mv2276[1];
setMv mv2276[0] = rcPp[16];
resetMv mv2277[1];
setMv mv2277[0] = mv2271[0];
calculateMv mv2270 = DIVISION(mv2276,mv2277);
setVector ve2278 = temp2[-1,3,16,20];
resetMv mv2280[4];
setMv mv2280[0] = mv2246[0];
setMv mv2280[2] = mv2262[0];
setMv mv2280[3] = mv2270[0];
setMv mv2280[1] = mv2254[0];
setVector ve2279 = mv2280[0,1,2,3];
dotVectors rc2[7] = <ve2278,ve2279>;

//rc2[8] = (((((-(temp2[1])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((-(temp2[4])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((-(temp2[17])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((-(temp2[19])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((-(temp2[21])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2281[1];
resetMv mv2282[1];
resetMv mv2284[3];
setMv mv2284[0,2] = rcPp[23,18];
setMv mv2284[1] = rcPpDual[12];
setVector ve2283 = mv2284[0,1,2];
resetMv mv2286[3];
setMv mv2286[0,2] = rcPp[23,18];
setMv mv2286[1] = rcPpDual[12];
setVector ve2285 = mv2286[0,1,2];
dotVectors mv2282[0] = <ve2283,ve2285>;
resetMv mv2287[1];
setMv mv2287[0] = rcPp[16];
resetMv mv2288[1];
setMv mv2288[0] = mv2282[0];
calculateMv mv2281 = DIVISION(mv2287,mv2288);
resetMv mv2289[1];
resetMv mv2290[1];
resetMv mv2292[3];
setMv mv2292[0,2] = rcPp[23,18];
setMv mv2292[1] = rcPpDual[12];
setVector ve2291 = mv2292[0,1,2];
resetMv mv2294[3];
setMv mv2294[0,2] = rcPp[23,18];
setMv mv2294[1] = rcPpDual[12];
setVector ve2293 = mv2294[0,1,2];
dotVectors mv2290[0] = <ve2291,ve2293>;
resetMv mv2295[1];
setMv mv2295[0] = rcPp[23];
resetMv mv2296[1];
setMv mv2296[0] = mv2290[0];
calculateMv mv2289 = DIVISION(mv2295,mv2296);
resetMv mv2297[1];
resetMv mv2298[1];
resetMv mv2300[3];
setMv mv2300[0,2] = rcPp[23,18];
setMv mv2300[1] = rcPpDual[12];
setVector ve2299 = mv2300[0,1,2];
resetMv mv2302[3];
setMv mv2302[0,2] = rcPp[23,18];
setMv mv2302[1] = rcPpDual[12];
setVector ve2301 = mv2302[0,1,2];
dotVectors mv2298[0] = <ve2299,ve2301>;
resetMv mv2303[1];
setMv mv2303[0] = rcPpDual[12];
resetMv mv2304[1];
setMv mv2304[0] = mv2298[0];
calculateMv mv2297 = DIVISION(mv2303,mv2304);
resetMv mv2305[1];
resetMv mv2306[1];
resetMv mv2308[3];
setMv mv2308[0,2] = rcPp[23,18];
setMv mv2308[1] = rcPpDual[12];
setVector ve2307 = mv2308[0,1,2];
resetMv mv2310[3];
setMv mv2310[0,2] = rcPp[23,18];
setMv mv2310[1] = rcPpDual[12];
setVector ve2309 = mv2310[0,1,2];
dotVectors mv2306[0] = <ve2307,ve2309>;
resetMv mv2311[1];
setMv mv2311[0] = rcPp[18];
resetMv mv2312[1];
setMv mv2312[0] = mv2306[0];
calculateMv mv2305 = DIVISION(mv2311,mv2312);
resetMv mv2313[1];
resetMv mv2314[1];
resetMv mv2316[3];
setMv mv2316[0,2] = rcPp[23,18];
setMv mv2316[1] = rcPpDual[12];
setVector ve2315 = mv2316[0,1,2];
resetMv mv2318[3];
setMv mv2318[0,2] = rcPp[23,18];
setMv mv2318[1] = rcPpDual[12];
setVector ve2317 = mv2318[0,1,2];
dotVectors mv2314[0] = <ve2315,ve2317>;
resetMv mv2319[1];
setMv mv2319[0] = rcPp[16];
resetMv mv2320[1];
setMv mv2320[0] = mv2314[0];
calculateMv mv2313 = DIVISION(mv2319,mv2320);
setVector ve2321 = temp2[-1,4,17,19,21];
resetMv mv2323[5];
setMv mv2323[3] = mv2305[0];
setMv mv2323[0] = mv2281[0];
setMv mv2323[4] = mv2313[0];
setMv mv2323[1] = mv2289[0];
setMv mv2323[2] = mv2297[0];
setVector ve2322 = mv2323[0,1,2,3,4];
dotVectors rc2[8] = <ve2321,ve2322>;

//rc2[9] = ((-((-(temp2[5])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[18])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((-(temp2[20])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2324[1];
resetMv mv2325[1];
resetMv mv2327[3];
setMv mv2327[0,2] = rcPp[23,18];
setMv mv2327[1] = rcPpDual[12];
setVector ve2326 = mv2327[0,1,2];
resetMv mv2329[3];
setMv mv2329[0,2] = rcPp[23,18];
setMv mv2329[1] = rcPpDual[12];
setVector ve2328 = mv2329[0,1,2];
dotVectors mv2325[0] = <ve2326,ve2328>;
resetMv mv2330[1];
setMv mv2330[0] = rcPp[23];
resetMv mv2331[1];
setMv mv2331[0] = mv2325[0];
calculateMv mv2324 = DIVISION(mv2330,mv2331);
resetMv mv2332[1];
resetMv mv2333[1];
resetMv mv2335[3];
setMv mv2335[0,2] = rcPp[23,18];
setMv mv2335[1] = rcPpDual[12];
setVector ve2334 = mv2335[0,1,2];
resetMv mv2337[3];
setMv mv2337[0,2] = rcPp[23,18];
setMv mv2337[1] = rcPpDual[12];
setVector ve2336 = mv2337[0,1,2];
dotVectors mv2333[0] = <ve2334,ve2336>;
resetMv mv2338[1];
setMv mv2338[0] = rcPpDual[12];
resetMv mv2339[1];
setMv mv2339[0] = mv2333[0];
calculateMv mv2332 = DIVISION(mv2338,mv2339);
resetMv mv2340[1];
resetMv mv2341[1];
resetMv mv2343[3];
setMv mv2343[0,2] = rcPp[23,18];
setMv mv2343[1] = rcPpDual[12];
setVector ve2342 = mv2343[0,1,2];
resetMv mv2345[3];
setMv mv2345[0,2] = rcPp[23,18];
setMv mv2345[1] = rcPpDual[12];
setVector ve2344 = mv2345[0,1,2];
dotVectors mv2341[0] = <ve2342,ve2344>;
resetMv mv2346[1];
setMv mv2346[0] = rcPp[18];
resetMv mv2347[1];
setMv mv2347[0] = mv2341[0];
calculateMv mv2340 = DIVISION(mv2346,mv2347);
setVector ve2348 = temp2[5,18,20];
resetMv mv2350[3];
setMv mv2350[2] = mv2340[0];
setMv mv2350[0] = mv2324[0];
setMv mv2350[1] = mv2332[0];
setVector ve2349 = mv2350[0,1,2];
dotVectors rc2[9] = <ve2348,ve2349>;

//rc2[10] = ((((-(temp2[2])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((-(temp2[3])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((-(temp2[16])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[23])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2351[1];
resetMv mv2352[1];
resetMv mv2354[3];
setMv mv2354[0,2] = rcPp[23,18];
setMv mv2354[1] = rcPpDual[12];
setVector ve2353 = mv2354[0,1,2];
resetMv mv2356[3];
setMv mv2356[0,2] = rcPp[23,18];
setMv mv2356[1] = rcPpDual[12];
setVector ve2355 = mv2356[0,1,2];
dotVectors mv2352[0] = <ve2353,ve2355>;
resetMv mv2357[1];
setMv mv2357[0] = rcPp[18];
resetMv mv2358[1];
setMv mv2358[0] = mv2352[0];
calculateMv mv2351 = DIVISION(mv2357,mv2358);
resetMv mv2359[1];
resetMv mv2360[1];
resetMv mv2362[3];
setMv mv2362[0,2] = rcPp[23,18];
setMv mv2362[1] = rcPpDual[12];
setVector ve2361 = mv2362[0,1,2];
resetMv mv2364[3];
setMv mv2364[0,2] = rcPp[23,18];
setMv mv2364[1] = rcPpDual[12];
setVector ve2363 = mv2364[0,1,2];
dotVectors mv2360[0] = <ve2361,ve2363>;
resetMv mv2365[1];
setMv mv2365[0] = rcPpDual[12];
resetMv mv2366[1];
setMv mv2366[0] = mv2360[0];
calculateMv mv2359 = DIVISION(mv2365,mv2366);
resetMv mv2367[1];
resetMv mv2368[1];
resetMv mv2370[3];
setMv mv2370[0,2] = rcPp[23,18];
setMv mv2370[1] = rcPpDual[12];
setVector ve2369 = mv2370[0,1,2];
resetMv mv2372[3];
setMv mv2372[0,2] = rcPp[23,18];
setMv mv2372[1] = rcPpDual[12];
setVector ve2371 = mv2372[0,1,2];
dotVectors mv2368[0] = <ve2369,ve2371>;
resetMv mv2373[1];
setMv mv2373[0] = rcPp[23];
resetMv mv2374[1];
setMv mv2374[0] = mv2368[0];
calculateMv mv2367 = DIVISION(mv2373,mv2374);
resetMv mv2375[1];
resetMv mv2376[1];
resetMv mv2378[3];
setMv mv2378[0,2] = rcPp[23,18];
setMv mv2378[1] = rcPpDual[12];
setVector ve2377 = mv2378[0,1,2];
resetMv mv2380[3];
setMv mv2380[0,2] = rcPp[23,18];
setMv mv2380[1] = rcPpDual[12];
setVector ve2379 = mv2380[0,1,2];
dotVectors mv2376[0] = <ve2377,ve2379>;
resetMv mv2381[1];
setMv mv2381[0] = rcPp[16];
resetMv mv2382[1];
setMv mv2382[0] = mv2376[0];
calculateMv mv2375 = DIVISION(mv2381,mv2382);
setVector ve2383 = temp2[-2,3,-16,23];
resetMv mv2385[4];
setMv mv2385[3] = mv2375[0];
setMv mv2385[0] = mv2351[0];
setMv mv2385[2] = mv2367[0];
setMv mv2385[1] = mv2359[0];
setVector ve2384 = mv2385[0,1,2,3];
dotVectors rc2[10] = <ve2383,ve2384>;

//rc2[11] = (((((-(temp2[2])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((-(temp2[4])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((-(temp2[17])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[22])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((-(temp2[24])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2386[1];
resetMv mv2387[1];
resetMv mv2389[3];
setMv mv2389[0,2] = rcPp[23,18];
setMv mv2389[1] = rcPpDual[12];
setVector ve2388 = mv2389[0,1,2];
resetMv mv2391[3];
setMv mv2391[0,2] = rcPp[23,18];
setMv mv2391[1] = rcPpDual[12];
setVector ve2390 = mv2391[0,1,2];
dotVectors mv2387[0] = <ve2388,ve2390>;
resetMv mv2392[1];
setMv mv2392[0] = rcPp[16];
resetMv mv2393[1];
setMv mv2393[0] = mv2387[0];
calculateMv mv2386 = DIVISION(mv2392,mv2393);
resetMv mv2394[1];
resetMv mv2395[1];
resetMv mv2397[3];
setMv mv2397[0,2] = rcPp[23,18];
setMv mv2397[1] = rcPpDual[12];
setVector ve2396 = mv2397[0,1,2];
resetMv mv2399[3];
setMv mv2399[0,2] = rcPp[23,18];
setMv mv2399[1] = rcPpDual[12];
setVector ve2398 = mv2399[0,1,2];
dotVectors mv2395[0] = <ve2396,ve2398>;
resetMv mv2400[1];
setMv mv2400[0] = rcPpDual[12];
resetMv mv2401[1];
setMv mv2401[0] = mv2395[0];
calculateMv mv2394 = DIVISION(mv2400,mv2401);
resetMv mv2402[1];
resetMv mv2403[1];
resetMv mv2405[3];
setMv mv2405[0,2] = rcPp[23,18];
setMv mv2405[1] = rcPpDual[12];
setVector ve2404 = mv2405[0,1,2];
resetMv mv2407[3];
setMv mv2407[0,2] = rcPp[23,18];
setMv mv2407[1] = rcPpDual[12];
setVector ve2406 = mv2407[0,1,2];
dotVectors mv2403[0] = <ve2404,ve2406>;
resetMv mv2408[1];
setMv mv2408[0] = rcPp[23];
resetMv mv2409[1];
setMv mv2409[0] = mv2403[0];
calculateMv mv2402 = DIVISION(mv2408,mv2409);
resetMv mv2410[1];
resetMv mv2411[1];
resetMv mv2413[3];
setMv mv2413[0,2] = rcPp[23,18];
setMv mv2413[1] = rcPpDual[12];
setVector ve2412 = mv2413[0,1,2];
resetMv mv2415[3];
setMv mv2415[0,2] = rcPp[23,18];
setMv mv2415[1] = rcPpDual[12];
setVector ve2414 = mv2415[0,1,2];
dotVectors mv2411[0] = <ve2412,ve2414>;
resetMv mv2416[1];
setMv mv2416[0] = rcPp[18];
resetMv mv2417[1];
setMv mv2417[0] = mv2411[0];
calculateMv mv2410 = DIVISION(mv2416,mv2417);
resetMv mv2418[1];
resetMv mv2419[1];
resetMv mv2421[3];
setMv mv2421[0,2] = rcPp[23,18];
setMv mv2421[1] = rcPpDual[12];
setVector ve2420 = mv2421[0,1,2];
resetMv mv2423[3];
setMv mv2423[0,2] = rcPp[23,18];
setMv mv2423[1] = rcPpDual[12];
setVector ve2422 = mv2423[0,1,2];
dotVectors mv2419[0] = <ve2420,ve2422>;
resetMv mv2424[1];
setMv mv2424[0] = rcPp[16];
resetMv mv2425[1];
setMv mv2425[0] = mv2419[0];
calculateMv mv2418 = DIVISION(mv2424,mv2425);
setVector ve2426 = temp2[-2,4,-17,22,24];
resetMv mv2428[5];
setMv mv2428[0] = mv2386[0];
setMv mv2428[4] = mv2418[0];
setMv mv2428[2] = mv2402[0];
setMv mv2428[1] = mv2394[0];
setMv mv2428[3] = mv2410[0];
setVector ve2427 = mv2428[0,1,2,3,4];
dotVectors rc2[11] = <ve2426,ve2427>;

//rc2[12] = ((-((-(temp2[5])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((-(temp2[18])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[23])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2429[1];
resetMv mv2430[1];
resetMv mv2432[3];
setMv mv2432[0,2] = rcPp[23,18];
setMv mv2432[1] = rcPpDual[12];
setVector ve2431 = mv2432[0,1,2];
resetMv mv2434[3];
setMv mv2434[0,2] = rcPp[23,18];
setMv mv2434[1] = rcPpDual[12];
setVector ve2433 = mv2434[0,1,2];
dotVectors mv2430[0] = <ve2431,ve2433>;
resetMv mv2435[1];
setMv mv2435[0] = rcPpDual[12];
resetMv mv2436[1];
setMv mv2436[0] = mv2430[0];
calculateMv mv2429 = DIVISION(mv2435,mv2436);
resetMv mv2437[1];
resetMv mv2438[1];
resetMv mv2440[3];
setMv mv2440[0,2] = rcPp[23,18];
setMv mv2440[1] = rcPpDual[12];
setVector ve2439 = mv2440[0,1,2];
resetMv mv2442[3];
setMv mv2442[0,2] = rcPp[23,18];
setMv mv2442[1] = rcPpDual[12];
setVector ve2441 = mv2442[0,1,2];
dotVectors mv2438[0] = <ve2439,ve2441>;
resetMv mv2443[1];
setMv mv2443[0] = rcPp[23];
resetMv mv2444[1];
setMv mv2444[0] = mv2438[0];
calculateMv mv2437 = DIVISION(mv2443,mv2444);
resetMv mv2445[1];
resetMv mv2446[1];
resetMv mv2448[3];
setMv mv2448[0,2] = rcPp[23,18];
setMv mv2448[1] = rcPpDual[12];
setVector ve2447 = mv2448[0,1,2];
resetMv mv2450[3];
setMv mv2450[0,2] = rcPp[23,18];
setMv mv2450[1] = rcPpDual[12];
setVector ve2449 = mv2450[0,1,2];
dotVectors mv2446[0] = <ve2447,ve2449>;
resetMv mv2451[1];
setMv mv2451[0] = rcPp[18];
resetMv mv2452[1];
setMv mv2452[0] = mv2446[0];
calculateMv mv2445 = DIVISION(mv2451,mv2452);
setVector ve2453 = temp2[5,-18,23];
resetMv mv2455[3];
setMv mv2455[0] = mv2429[0];
setMv mv2455[2] = mv2445[0];
setMv mv2455[1] = mv2437[0];
setVector ve2454 = mv2455[0,1,2];
dotVectors rc2[12] = <ve2453,ve2454>;

//rc2[13] = (((((-(temp2[3])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((-(temp2[4])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((-(temp2[19])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((-(temp2[22])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[25])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2456[1];
resetMv mv2457[1];
resetMv mv2459[3];
setMv mv2459[0,2] = rcPp[23,18];
setMv mv2459[1] = rcPpDual[12];
setVector ve2458 = mv2459[0,1,2];
resetMv mv2461[3];
setMv mv2461[0,2] = rcPp[23,18];
setMv mv2461[1] = rcPpDual[12];
setVector ve2460 = mv2461[0,1,2];
dotVectors mv2457[0] = <ve2458,ve2460>;
resetMv mv2462[1];
setMv mv2462[0] = rcPp[16];
resetMv mv2463[1];
setMv mv2463[0] = mv2457[0];
calculateMv mv2456 = DIVISION(mv2462,mv2463);
resetMv mv2464[1];
resetMv mv2465[1];
resetMv mv2467[3];
setMv mv2467[0,2] = rcPp[23,18];
setMv mv2467[1] = rcPpDual[12];
setVector ve2466 = mv2467[0,1,2];
resetMv mv2469[3];
setMv mv2469[0,2] = rcPp[23,18];
setMv mv2469[1] = rcPpDual[12];
setVector ve2468 = mv2469[0,1,2];
dotVectors mv2465[0] = <ve2466,ve2468>;
resetMv mv2470[1];
setMv mv2470[0] = rcPp[18];
resetMv mv2471[1];
setMv mv2471[0] = mv2465[0];
calculateMv mv2464 = DIVISION(mv2470,mv2471);
resetMv mv2472[1];
resetMv mv2473[1];
resetMv mv2475[3];
setMv mv2475[0,2] = rcPp[23,18];
setMv mv2475[1] = rcPpDual[12];
setVector ve2474 = mv2475[0,1,2];
resetMv mv2477[3];
setMv mv2477[0,2] = rcPp[23,18];
setMv mv2477[1] = rcPpDual[12];
setVector ve2476 = mv2477[0,1,2];
dotVectors mv2473[0] = <ve2474,ve2476>;
resetMv mv2478[1];
setMv mv2478[0] = rcPp[23];
resetMv mv2479[1];
setMv mv2479[0] = mv2473[0];
calculateMv mv2472 = DIVISION(mv2478,mv2479);
resetMv mv2480[1];
resetMv mv2481[1];
resetMv mv2483[3];
setMv mv2483[0,2] = rcPp[23,18];
setMv mv2483[1] = rcPpDual[12];
setVector ve2482 = mv2483[0,1,2];
resetMv mv2485[3];
setMv mv2485[0,2] = rcPp[23,18];
setMv mv2485[1] = rcPpDual[12];
setVector ve2484 = mv2485[0,1,2];
dotVectors mv2481[0] = <ve2482,ve2484>;
resetMv mv2486[1];
setMv mv2486[0] = rcPpDual[12];
resetMv mv2487[1];
setMv mv2487[0] = mv2481[0];
calculateMv mv2480 = DIVISION(mv2486,mv2487);
resetMv mv2488[1];
resetMv mv2489[1];
resetMv mv2491[3];
setMv mv2491[0,2] = rcPp[23,18];
setMv mv2491[1] = rcPpDual[12];
setVector ve2490 = mv2491[0,1,2];
resetMv mv2493[3];
setMv mv2493[0,2] = rcPp[23,18];
setMv mv2493[1] = rcPpDual[12];
setVector ve2492 = mv2493[0,1,2];
dotVectors mv2489[0] = <ve2490,ve2492>;
resetMv mv2494[1];
setMv mv2494[0] = rcPp[16];
resetMv mv2495[1];
setMv mv2495[0] = mv2489[0];
calculateMv mv2488 = DIVISION(mv2494,mv2495);
setVector ve2496 = temp2[-3,4,-19,-22,25];
resetMv mv2498[5];
setMv mv2498[4] = mv2488[0];
setMv mv2498[0] = mv2456[0];
setMv mv2498[1] = mv2464[0];
setMv mv2498[3] = mv2480[0];
setMv mv2498[2] = mv2472[0];
setVector ve2497 = mv2498[0,1,2,3,4];
dotVectors rc2[13] = <ve2496,ve2497>;

//rc2[14] = ((-((-(temp2[5])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((-(temp2[20])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((-(temp2[23])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))
resetMv mv2499[1];
resetMv mv2500[1];
resetMv mv2502[3];
setMv mv2502[0,2] = rcPp[23,18];
setMv mv2502[1] = rcPpDual[12];
setVector ve2501 = mv2502[0,1,2];
resetMv mv2504[3];
setMv mv2504[0,2] = rcPp[23,18];
setMv mv2504[1] = rcPpDual[12];
setVector ve2503 = mv2504[0,1,2];
dotVectors mv2500[0] = <ve2501,ve2503>;
resetMv mv2505[1];
setMv mv2505[0] = rcPp[18];
resetMv mv2506[1];
setMv mv2506[0] = mv2500[0];
calculateMv mv2499 = DIVISION(mv2505,mv2506);
resetMv mv2507[1];
resetMv mv2508[1];
resetMv mv2510[3];
setMv mv2510[0,2] = rcPp[23,18];
setMv mv2510[1] = rcPpDual[12];
setVector ve2509 = mv2510[0,1,2];
resetMv mv2512[3];
setMv mv2512[0,2] = rcPp[23,18];
setMv mv2512[1] = rcPpDual[12];
setVector ve2511 = mv2512[0,1,2];
dotVectors mv2508[0] = <ve2509,ve2511>;
resetMv mv2513[1];
setMv mv2513[0] = rcPp[23];
resetMv mv2514[1];
setMv mv2514[0] = mv2508[0];
calculateMv mv2507 = DIVISION(mv2513,mv2514);
resetMv mv2515[1];
resetMv mv2516[1];
resetMv mv2518[3];
setMv mv2518[0,2] = rcPp[23,18];
setMv mv2518[1] = rcPpDual[12];
setVector ve2517 = mv2518[0,1,2];
resetMv mv2520[3];
setMv mv2520[0,2] = rcPp[23,18];
setMv mv2520[1] = rcPpDual[12];
setVector ve2519 = mv2520[0,1,2];
dotVectors mv2516[0] = <ve2517,ve2519>;
resetMv mv2521[1];
setMv mv2521[0] = rcPpDual[12];
resetMv mv2522[1];
setMv mv2522[0] = mv2516[0];
calculateMv mv2515 = DIVISION(mv2521,mv2522);
setVector ve2523 = temp2[5,-20,-23];
resetMv mv2525[3];
setMv mv2525[2] = mv2515[0];
setMv mv2525[1] = mv2507[0];
setMv mv2525[0] = mv2499[0];
setVector ve2524 = mv2525[0,1,2];
dotVectors rc2[14] = <ve2523,ve2524>;

//rc2[15] = (((-((-(temp2[5])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((-(temp2[21])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((-(temp2[24])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((-(temp2[25])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))
resetMv mv2526[1];
resetMv mv2527[1];
resetMv mv2529[3];
setMv mv2529[0,2] = rcPp[23,18];
setMv mv2529[1] = rcPpDual[12];
setVector ve2528 = mv2529[0,1,2];
resetMv mv2531[3];
setMv mv2531[0,2] = rcPp[23,18];
setMv mv2531[1] = rcPpDual[12];
setVector ve2530 = mv2531[0,1,2];
dotVectors mv2527[0] = <ve2528,ve2530>;
resetMv mv2532[1];
setMv mv2532[0] = rcPp[16];
resetMv mv2533[1];
setMv mv2533[0] = mv2527[0];
calculateMv mv2526 = DIVISION(mv2532,mv2533);
resetMv mv2534[1];
resetMv mv2535[1];
resetMv mv2537[3];
setMv mv2537[0,2] = rcPp[23,18];
setMv mv2537[1] = rcPpDual[12];
setVector ve2536 = mv2537[0,1,2];
resetMv mv2539[3];
setMv mv2539[0,2] = rcPp[23,18];
setMv mv2539[1] = rcPpDual[12];
setVector ve2538 = mv2539[0,1,2];
dotVectors mv2535[0] = <ve2536,ve2538>;
resetMv mv2540[1];
setMv mv2540[0] = rcPp[23];
resetMv mv2541[1];
setMv mv2541[0] = mv2535[0];
calculateMv mv2534 = DIVISION(mv2540,mv2541);
resetMv mv2542[1];
resetMv mv2543[1];
resetMv mv2545[3];
setMv mv2545[0,2] = rcPp[23,18];
setMv mv2545[1] = rcPpDual[12];
setVector ve2544 = mv2545[0,1,2];
resetMv mv2547[3];
setMv mv2547[0,2] = rcPp[23,18];
setMv mv2547[1] = rcPpDual[12];
setVector ve2546 = mv2547[0,1,2];
dotVectors mv2543[0] = <ve2544,ve2546>;
resetMv mv2548[1];
setMv mv2548[0] = rcPpDual[12];
resetMv mv2549[1];
setMv mv2549[0] = mv2543[0];
calculateMv mv2542 = DIVISION(mv2548,mv2549);
resetMv mv2550[1];
resetMv mv2551[1];
resetMv mv2553[3];
setMv mv2553[0,2] = rcPp[23,18];
setMv mv2553[1] = rcPpDual[12];
setVector ve2552 = mv2553[0,1,2];
resetMv mv2555[3];
setMv mv2555[0,2] = rcPp[23,18];
setMv mv2555[1] = rcPpDual[12];
setVector ve2554 = mv2555[0,1,2];
dotVectors mv2551[0] = <ve2552,ve2554>;
resetMv mv2556[1];
setMv mv2556[0] = rcPp[18];
resetMv mv2557[1];
setMv mv2557[0] = mv2551[0];
calculateMv mv2550 = DIVISION(mv2556,mv2557);
setVector ve2558 = temp2[5,-21,-24,-25];
resetMv mv2560[4];
setMv mv2560[0] = mv2526[0];
setMv mv2560[1] = mv2534[0];
setMv mv2560[2] = mv2542[0];
setMv mv2560[3] = mv2550[0];
setVector ve2559 = mv2560[0,1,2,3];
dotVectors rc2[15] = <ve2558,ve2559>;

//rc2[16] = ((((rcPpDual[6] - temp2[6]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((rcPp[24] - temp2[7]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((rcPpDual[10] - temp2[10]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[27])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2561[1];
resetMv mv2563[2];
setMv mv2563[1] = temp2[-6];
setMv mv2563[0] = rcPpDual[6];
setVector ve2562 = mv2563[0,1];
dotVectors mv2561[0] = <ve2562>;
resetMv mv2564[1];
resetMv mv2565[1];
resetMv mv2567[3];
setMv mv2567[0,2] = rcPp[23,18];
setMv mv2567[1] = rcPpDual[12];
setVector ve2566 = mv2567[0,1,2];
resetMv mv2569[3];
setMv mv2569[0,2] = rcPp[23,18];
setMv mv2569[1] = rcPpDual[12];
setVector ve2568 = mv2569[0,1,2];
dotVectors mv2565[0] = <ve2566,ve2568>;
resetMv mv2570[1];
setMv mv2570[0] = rcPp[18];
resetMv mv2571[1];
setMv mv2571[0] = mv2565[0];
calculateMv mv2564 = DIVISION(mv2570,mv2571);
resetMv mv2572[1];
resetMv mv2573[1];
resetMv mv2575[2];
setMv mv2575[1] = temp2[-7];
setMv mv2575[0] = rcPp[24];
setVector ve2574 = mv2575[0,1];
dotVectors mv2573[0] = <ve2574>;
setMv mv2572[0] = mv2573[-0];
resetMv mv2576[1];
resetMv mv2577[1];
resetMv mv2579[3];
setMv mv2579[0,2] = rcPp[23,18];
setMv mv2579[1] = rcPpDual[12];
setVector ve2578 = mv2579[0,1,2];
resetMv mv2581[3];
setMv mv2581[0,2] = rcPp[23,18];
setMv mv2581[1] = rcPpDual[12];
setVector ve2580 = mv2581[0,1,2];
dotVectors mv2577[0] = <ve2578,ve2580>;
resetMv mv2582[1];
setMv mv2582[0] = rcPpDual[12];
resetMv mv2583[1];
setMv mv2583[0] = mv2577[0];
calculateMv mv2576 = DIVISION(mv2582,mv2583);
resetMv mv2584[1];
resetMv mv2586[2];
setMv mv2586[1] = temp2[-10];
setMv mv2586[0] = rcPpDual[10];
setVector ve2585 = mv2586[0,1];
dotVectors mv2584[0] = <ve2585>;
resetMv mv2587[1];
resetMv mv2588[1];
resetMv mv2590[3];
setMv mv2590[0,2] = rcPp[23,18];
setMv mv2590[1] = rcPpDual[12];
setVector ve2589 = mv2590[0,1,2];
resetMv mv2592[3];
setMv mv2592[0,2] = rcPp[23,18];
setMv mv2592[1] = rcPpDual[12];
setVector ve2591 = mv2592[0,1,2];
dotVectors mv2588[0] = <ve2589,ve2591>;
resetMv mv2593[1];
setMv mv2593[0] = rcPp[23];
resetMv mv2594[1];
setMv mv2594[0] = mv2588[0];
calculateMv mv2587 = DIVISION(mv2593,mv2594);
resetMv mv2595[1];
resetMv mv2596[1];
resetMv mv2598[3];
setMv mv2598[0,2] = rcPp[23,18];
setMv mv2598[1] = rcPpDual[12];
setVector ve2597 = mv2598[0,1,2];
resetMv mv2600[3];
setMv mv2600[0,2] = rcPp[23,18];
setMv mv2600[1] = rcPpDual[12];
setVector ve2599 = mv2600[0,1,2];
dotVectors mv2596[0] = <ve2597,ve2599>;
resetMv mv2601[1];
setMv mv2601[0] = rcPp[16];
resetMv mv2602[1];
setMv mv2602[0] = mv2596[0];
calculateMv mv2595 = DIVISION(mv2601,mv2602);
resetMv mv2604[4];
setMv mv2604[1] = mv2572[0];
setMv mv2604[3] = temp2[27];
setMv mv2604[2] = mv2584[0];
setMv mv2604[0] = mv2561[0];
setVector ve2603 = mv2604[0,1,2,3];
resetMv mv2606[4];
setMv mv2606[0] = mv2564[0];
setMv mv2606[3] = mv2595[0];
setMv mv2606[1] = mv2576[0];
setMv mv2606[2] = mv2587[0];
setVector ve2605 = mv2606[0,1,2,3];
dotVectors rc2[16] = <ve2603,ve2605>;

//rc2[17] = (((((rcPpDual[6] - temp2[6]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((rcPpDual[8] - temp2[8]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((rcPp[19] - temp2[11]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[26])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((-(temp2[28])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2607[1];
resetMv mv2609[2];
setMv mv2609[1] = temp2[-6];
setMv mv2609[0] = rcPpDual[6];
setVector ve2608 = mv2609[0,1];
dotVectors mv2607[0] = <ve2608>;
resetMv mv2610[1];
resetMv mv2611[1];
resetMv mv2613[3];
setMv mv2613[0,2] = rcPp[23,18];
setMv mv2613[1] = rcPpDual[12];
setVector ve2612 = mv2613[0,1,2];
resetMv mv2615[3];
setMv mv2615[0,2] = rcPp[23,18];
setMv mv2615[1] = rcPpDual[12];
setVector ve2614 = mv2615[0,1,2];
dotVectors mv2611[0] = <ve2612,ve2614>;
resetMv mv2616[1];
setMv mv2616[0] = rcPp[16];
resetMv mv2617[1];
setMv mv2617[0] = mv2611[0];
calculateMv mv2610 = DIVISION(mv2616,mv2617);
resetMv mv2618[1];
resetMv mv2619[1];
resetMv mv2621[2];
setMv mv2621[1] = temp2[-8];
setMv mv2621[0] = rcPpDual[8];
setVector ve2620 = mv2621[0,1];
dotVectors mv2619[0] = <ve2620>;
setMv mv2618[0] = mv2619[-0];
resetMv mv2622[1];
resetMv mv2623[1];
resetMv mv2625[3];
setMv mv2625[0,2] = rcPp[23,18];
setMv mv2625[1] = rcPpDual[12];
setVector ve2624 = mv2625[0,1,2];
resetMv mv2627[3];
setMv mv2627[0,2] = rcPp[23,18];
setMv mv2627[1] = rcPpDual[12];
setVector ve2626 = mv2627[0,1,2];
dotVectors mv2623[0] = <ve2624,ve2626>;
resetMv mv2628[1];
setMv mv2628[0] = rcPpDual[12];
resetMv mv2629[1];
setMv mv2629[0] = mv2623[0];
calculateMv mv2622 = DIVISION(mv2628,mv2629);
resetMv mv2630[1];
resetMv mv2632[2];
setMv mv2632[1] = temp2[-11];
setMv mv2632[0] = rcPp[19];
setVector ve2631 = mv2632[0,1];
dotVectors mv2630[0] = <ve2631>;
resetMv mv2633[1];
resetMv mv2634[1];
resetMv mv2636[3];
setMv mv2636[0,2] = rcPp[23,18];
setMv mv2636[1] = rcPpDual[12];
setVector ve2635 = mv2636[0,1,2];
resetMv mv2638[3];
setMv mv2638[0,2] = rcPp[23,18];
setMv mv2638[1] = rcPpDual[12];
setVector ve2637 = mv2638[0,1,2];
dotVectors mv2634[0] = <ve2635,ve2637>;
resetMv mv2639[1];
setMv mv2639[0] = rcPp[23];
resetMv mv2640[1];
setMv mv2640[0] = mv2634[0];
calculateMv mv2633 = DIVISION(mv2639,mv2640);
resetMv mv2641[1];
resetMv mv2642[1];
resetMv mv2644[3];
setMv mv2644[0,2] = rcPp[23,18];
setMv mv2644[1] = rcPpDual[12];
setVector ve2643 = mv2644[0,1,2];
resetMv mv2646[3];
setMv mv2646[0,2] = rcPp[23,18];
setMv mv2646[1] = rcPpDual[12];
setVector ve2645 = mv2646[0,1,2];
dotVectors mv2642[0] = <ve2643,ve2645>;
resetMv mv2647[1];
setMv mv2647[0] = rcPp[18];
resetMv mv2648[1];
setMv mv2648[0] = mv2642[0];
calculateMv mv2641 = DIVISION(mv2647,mv2648);
resetMv mv2649[1];
resetMv mv2650[1];
resetMv mv2652[3];
setMv mv2652[0,2] = rcPp[23,18];
setMv mv2652[1] = rcPpDual[12];
setVector ve2651 = mv2652[0,1,2];
resetMv mv2654[3];
setMv mv2654[0,2] = rcPp[23,18];
setMv mv2654[1] = rcPpDual[12];
setVector ve2653 = mv2654[0,1,2];
dotVectors mv2650[0] = <ve2651,ve2653>;
resetMv mv2655[1];
setMv mv2655[0] = rcPp[16];
resetMv mv2656[1];
setMv mv2656[0] = mv2650[0];
calculateMv mv2649 = DIVISION(mv2655,mv2656);
resetMv mv2658[5];
setMv mv2658[3,4] = temp2[26,28];
setMv mv2658[2] = mv2630[0];
setMv mv2658[0] = mv2607[0];
setMv mv2658[1] = mv2618[0];
setVector ve2657 = mv2658[0,1,2,3,4];
resetMv mv2660[5];
setMv mv2660[3] = mv2641[0];
setMv mv2660[0] = mv2610[0];
setMv mv2660[1] = mv2622[0];
setMv mv2660[2] = mv2633[0];
setMv mv2660[4] = mv2649[0];
setVector ve2659 = mv2660[0,1,2,3,4];
dotVectors rc2[17] = <ve2657,ve2659>;

//rc2[18] = ((-((rcPp[23] - temp2[9]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((rcPpDual[12] - temp2[12]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[27])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2661[1];
resetMv mv2662[1];
resetMv mv2664[2];
setMv mv2664[1] = temp2[-9];
setMv mv2664[0] = rcPp[23];
setVector ve2663 = mv2664[0,1];
dotVectors mv2662[0] = <ve2663>;
setMv mv2661[0] = mv2662[-0];
resetMv mv2665[1];
resetMv mv2666[1];
resetMv mv2668[3];
setMv mv2668[0,2] = rcPp[23,18];
setMv mv2668[1] = rcPpDual[12];
setVector ve2667 = mv2668[0,1,2];
resetMv mv2670[3];
setMv mv2670[0,2] = rcPp[23,18];
setMv mv2670[1] = rcPpDual[12];
setVector ve2669 = mv2670[0,1,2];
dotVectors mv2666[0] = <ve2667,ve2669>;
resetMv mv2671[1];
setMv mv2671[0] = rcPpDual[12];
resetMv mv2672[1];
setMv mv2672[0] = mv2666[0];
calculateMv mv2665 = DIVISION(mv2671,mv2672);
resetMv mv2673[1];
resetMv mv2675[2];
setMv mv2675[1] = temp2[-12];
setMv mv2675[0] = rcPpDual[12];
setVector ve2674 = mv2675[0,1];
dotVectors mv2673[0] = <ve2674>;
resetMv mv2676[1];
resetMv mv2677[1];
resetMv mv2679[3];
setMv mv2679[0,2] = rcPp[23,18];
setMv mv2679[1] = rcPpDual[12];
setVector ve2678 = mv2679[0,1,2];
resetMv mv2681[3];
setMv mv2681[0,2] = rcPp[23,18];
setMv mv2681[1] = rcPpDual[12];
setVector ve2680 = mv2681[0,1,2];
dotVectors mv2677[0] = <ve2678,ve2680>;
resetMv mv2682[1];
setMv mv2682[0] = rcPp[23];
resetMv mv2683[1];
setMv mv2683[0] = mv2677[0];
calculateMv mv2676 = DIVISION(mv2682,mv2683);
resetMv mv2684[1];
resetMv mv2685[1];
resetMv mv2687[3];
setMv mv2687[0,2] = rcPp[23,18];
setMv mv2687[1] = rcPpDual[12];
setVector ve2686 = mv2687[0,1,2];
resetMv mv2689[3];
setMv mv2689[0,2] = rcPp[23,18];
setMv mv2689[1] = rcPpDual[12];
setVector ve2688 = mv2689[0,1,2];
dotVectors mv2685[0] = <ve2686,ve2688>;
resetMv mv2690[1];
setMv mv2690[0] = rcPp[18];
resetMv mv2691[1];
setMv mv2691[0] = mv2685[0];
calculateMv mv2684 = DIVISION(mv2690,mv2691);
resetMv mv2693[3];
setMv mv2693[2] = temp2[27];
setMv mv2693[1] = mv2673[0];
setMv mv2693[0] = mv2661[0];
setVector ve2692 = mv2693[0,1,2];
resetMv mv2695[3];
setMv mv2695[0] = mv2665[0];
setMv mv2695[2] = mv2684[0];
setMv mv2695[1] = mv2676[0];
setVector ve2694 = mv2695[0,1,2];
dotVectors rc2[18] = <ve2692,ve2694>;

//rc2[19] = (((((rcPp[24] - temp2[7]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((rcPpDual[8] - temp2[8]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((rcPpDual[13] - temp2[13]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((-(temp2[26])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[29])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2696[1];
resetMv mv2698[2];
setMv mv2698[1] = temp2[-7];
setMv mv2698[0] = rcPp[24];
setVector ve2697 = mv2698[0,1];
dotVectors mv2696[0] = <ve2697>;
resetMv mv2699[1];
resetMv mv2700[1];
resetMv mv2702[3];
setMv mv2702[0,2] = rcPp[23,18];
setMv mv2702[1] = rcPpDual[12];
setVector ve2701 = mv2702[0,1,2];
resetMv mv2704[3];
setMv mv2704[0,2] = rcPp[23,18];
setMv mv2704[1] = rcPpDual[12];
setVector ve2703 = mv2704[0,1,2];
dotVectors mv2700[0] = <ve2701,ve2703>;
resetMv mv2705[1];
setMv mv2705[0] = rcPp[16];
resetMv mv2706[1];
setMv mv2706[0] = mv2700[0];
calculateMv mv2699 = DIVISION(mv2705,mv2706);
resetMv mv2707[1];
resetMv mv2708[1];
resetMv mv2710[2];
setMv mv2710[1] = temp2[-8];
setMv mv2710[0] = rcPpDual[8];
setVector ve2709 = mv2710[0,1];
dotVectors mv2708[0] = <ve2709>;
setMv mv2707[0] = mv2708[-0];
resetMv mv2711[1];
resetMv mv2712[1];
resetMv mv2714[3];
setMv mv2714[0,2] = rcPp[23,18];
setMv mv2714[1] = rcPpDual[12];
setVector ve2713 = mv2714[0,1,2];
resetMv mv2716[3];
setMv mv2716[0,2] = rcPp[23,18];
setMv mv2716[1] = rcPpDual[12];
setVector ve2715 = mv2716[0,1,2];
dotVectors mv2712[0] = <ve2713,ve2715>;
resetMv mv2717[1];
setMv mv2717[0] = rcPp[18];
resetMv mv2718[1];
setMv mv2718[0] = mv2712[0];
calculateMv mv2711 = DIVISION(mv2717,mv2718);
resetMv mv2719[1];
resetMv mv2721[2];
setMv mv2721[1] = temp2[-13];
setMv mv2721[0] = rcPpDual[13];
setVector ve2720 = mv2721[0,1];
dotVectors mv2719[0] = <ve2720>;
resetMv mv2722[1];
resetMv mv2723[1];
resetMv mv2725[3];
setMv mv2725[0,2] = rcPp[23,18];
setMv mv2725[1] = rcPpDual[12];
setVector ve2724 = mv2725[0,1,2];
resetMv mv2727[3];
setMv mv2727[0,2] = rcPp[23,18];
setMv mv2727[1] = rcPpDual[12];
setVector ve2726 = mv2727[0,1,2];
dotVectors mv2723[0] = <ve2724,ve2726>;
resetMv mv2728[1];
setMv mv2728[0] = rcPp[23];
resetMv mv2729[1];
setMv mv2729[0] = mv2723[0];
calculateMv mv2722 = DIVISION(mv2728,mv2729);
resetMv mv2730[1];
resetMv mv2731[1];
resetMv mv2733[3];
setMv mv2733[0,2] = rcPp[23,18];
setMv mv2733[1] = rcPpDual[12];
setVector ve2732 = mv2733[0,1,2];
resetMv mv2735[3];
setMv mv2735[0,2] = rcPp[23,18];
setMv mv2735[1] = rcPpDual[12];
setVector ve2734 = mv2735[0,1,2];
dotVectors mv2731[0] = <ve2732,ve2734>;
resetMv mv2736[1];
setMv mv2736[0] = rcPpDual[12];
resetMv mv2737[1];
setMv mv2737[0] = mv2731[0];
calculateMv mv2730 = DIVISION(mv2736,mv2737);
resetMv mv2738[1];
resetMv mv2739[1];
resetMv mv2741[3];
setMv mv2741[0,2] = rcPp[23,18];
setMv mv2741[1] = rcPpDual[12];
setVector ve2740 = mv2741[0,1,2];
resetMv mv2743[3];
setMv mv2743[0,2] = rcPp[23,18];
setMv mv2743[1] = rcPpDual[12];
setVector ve2742 = mv2743[0,1,2];
dotVectors mv2739[0] = <ve2740,ve2742>;
resetMv mv2744[1];
setMv mv2744[0] = rcPp[16];
resetMv mv2745[1];
setMv mv2745[0] = mv2739[0];
calculateMv mv2738 = DIVISION(mv2744,mv2745);
resetMv mv2747[5];
setMv mv2747[3,4] = temp2[-26,29];
setMv mv2747[0] = mv2696[0];
setMv mv2747[1] = mv2707[0];
setMv mv2747[2] = mv2719[0];
setVector ve2746 = mv2747[0,1,2,3,4];
resetMv mv2749[5];
setMv mv2749[0] = mv2699[0];
setMv mv2749[4] = mv2738[0];
setMv mv2749[1] = mv2711[0];
setMv mv2749[2] = mv2722[0];
setMv mv2749[3] = mv2730[0];
setVector ve2748 = mv2749[0,1,2,3,4];
dotVectors rc2[19] = <ve2746,ve2748>;

//rc2[20] = ((-((rcPp[23] - temp2[9]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((rcPp[18] - temp2[14]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((-(temp2[27])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))
resetMv mv2750[1];
resetMv mv2751[1];
resetMv mv2753[2];
setMv mv2753[1] = temp2[-9];
setMv mv2753[0] = rcPp[23];
setVector ve2752 = mv2753[0,1];
dotVectors mv2751[0] = <ve2752>;
setMv mv2750[0] = mv2751[-0];
resetMv mv2754[1];
resetMv mv2755[1];
resetMv mv2757[3];
setMv mv2757[0,2] = rcPp[23,18];
setMv mv2757[1] = rcPpDual[12];
setVector ve2756 = mv2757[0,1,2];
resetMv mv2759[3];
setMv mv2759[0,2] = rcPp[23,18];
setMv mv2759[1] = rcPpDual[12];
setVector ve2758 = mv2759[0,1,2];
dotVectors mv2755[0] = <ve2756,ve2758>;
resetMv mv2760[1];
setMv mv2760[0] = rcPp[18];
resetMv mv2761[1];
setMv mv2761[0] = mv2755[0];
calculateMv mv2754 = DIVISION(mv2760,mv2761);
resetMv mv2762[1];
resetMv mv2764[2];
setMv mv2764[1] = temp2[-14];
setMv mv2764[0] = rcPp[18];
setVector ve2763 = mv2764[0,1];
dotVectors mv2762[0] = <ve2763>;
resetMv mv2765[1];
resetMv mv2766[1];
resetMv mv2768[3];
setMv mv2768[0,2] = rcPp[23,18];
setMv mv2768[1] = rcPpDual[12];
setVector ve2767 = mv2768[0,1,2];
resetMv mv2770[3];
setMv mv2770[0,2] = rcPp[23,18];
setMv mv2770[1] = rcPpDual[12];
setVector ve2769 = mv2770[0,1,2];
dotVectors mv2766[0] = <ve2767,ve2769>;
resetMv mv2771[1];
setMv mv2771[0] = rcPp[23];
resetMv mv2772[1];
setMv mv2772[0] = mv2766[0];
calculateMv mv2765 = DIVISION(mv2771,mv2772);
resetMv mv2773[1];
resetMv mv2774[1];
resetMv mv2776[3];
setMv mv2776[0,2] = rcPp[23,18];
setMv mv2776[1] = rcPpDual[12];
setVector ve2775 = mv2776[0,1,2];
resetMv mv2778[3];
setMv mv2778[0,2] = rcPp[23,18];
setMv mv2778[1] = rcPpDual[12];
setVector ve2777 = mv2778[0,1,2];
dotVectors mv2774[0] = <ve2775,ve2777>;
resetMv mv2779[1];
setMv mv2779[0] = rcPpDual[12];
resetMv mv2780[1];
setMv mv2780[0] = mv2774[0];
calculateMv mv2773 = DIVISION(mv2779,mv2780);
resetMv mv2782[3];
setMv mv2782[2] = temp2[-27];
setMv mv2782[1] = mv2762[0];
setMv mv2782[0] = mv2750[0];
setVector ve2781 = mv2782[0,1,2];
resetMv mv2784[3];
setMv mv2784[2] = mv2773[0];
setMv mv2784[1] = mv2765[0];
setMv mv2784[0] = mv2754[0];
setVector ve2783 = mv2784[0,1,2];
dotVectors rc2[20] = <ve2781,ve2783>;

//rc2[21] = (((-((rcPp[23] - temp2[9]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((rcPp[16] - temp2[15]) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((-(temp2[28])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((-(temp2[29])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))
resetMv mv2785[1];
resetMv mv2786[1];
resetMv mv2788[2];
setMv mv2788[1] = temp2[-9];
setMv mv2788[0] = rcPp[23];
setVector ve2787 = mv2788[0,1];
dotVectors mv2786[0] = <ve2787>;
setMv mv2785[0] = mv2786[-0];
resetMv mv2789[1];
resetMv mv2790[1];
resetMv mv2792[3];
setMv mv2792[0,2] = rcPp[23,18];
setMv mv2792[1] = rcPpDual[12];
setVector ve2791 = mv2792[0,1,2];
resetMv mv2794[3];
setMv mv2794[0,2] = rcPp[23,18];
setMv mv2794[1] = rcPpDual[12];
setVector ve2793 = mv2794[0,1,2];
dotVectors mv2790[0] = <ve2791,ve2793>;
resetMv mv2795[1];
setMv mv2795[0] = rcPp[16];
resetMv mv2796[1];
setMv mv2796[0] = mv2790[0];
calculateMv mv2789 = DIVISION(mv2795,mv2796);
resetMv mv2797[1];
resetMv mv2799[2];
setMv mv2799[1] = temp2[-15];
setMv mv2799[0] = rcPp[16];
setVector ve2798 = mv2799[0,1];
dotVectors mv2797[0] = <ve2798>;
resetMv mv2800[1];
resetMv mv2801[1];
resetMv mv2803[3];
setMv mv2803[0,2] = rcPp[23,18];
setMv mv2803[1] = rcPpDual[12];
setVector ve2802 = mv2803[0,1,2];
resetMv mv2805[3];
setMv mv2805[0,2] = rcPp[23,18];
setMv mv2805[1] = rcPpDual[12];
setVector ve2804 = mv2805[0,1,2];
dotVectors mv2801[0] = <ve2802,ve2804>;
resetMv mv2806[1];
setMv mv2806[0] = rcPp[23];
resetMv mv2807[1];
setMv mv2807[0] = mv2801[0];
calculateMv mv2800 = DIVISION(mv2806,mv2807);
resetMv mv2808[1];
resetMv mv2809[1];
resetMv mv2811[3];
setMv mv2811[0,2] = rcPp[23,18];
setMv mv2811[1] = rcPpDual[12];
setVector ve2810 = mv2811[0,1,2];
resetMv mv2813[3];
setMv mv2813[0,2] = rcPp[23,18];
setMv mv2813[1] = rcPpDual[12];
setVector ve2812 = mv2813[0,1,2];
dotVectors mv2809[0] = <ve2810,ve2812>;
resetMv mv2814[1];
setMv mv2814[0] = rcPpDual[12];
resetMv mv2815[1];
setMv mv2815[0] = mv2809[0];
calculateMv mv2808 = DIVISION(mv2814,mv2815);
resetMv mv2816[1];
resetMv mv2817[1];
resetMv mv2819[3];
setMv mv2819[0,2] = rcPp[23,18];
setMv mv2819[1] = rcPpDual[12];
setVector ve2818 = mv2819[0,1,2];
resetMv mv2821[3];
setMv mv2821[0,2] = rcPp[23,18];
setMv mv2821[1] = rcPpDual[12];
setVector ve2820 = mv2821[0,1,2];
dotVectors mv2817[0] = <ve2818,ve2820>;
resetMv mv2822[1];
setMv mv2822[0] = rcPp[18];
resetMv mv2823[1];
setMv mv2823[0] = mv2817[0];
calculateMv mv2816 = DIVISION(mv2822,mv2823);
resetMv mv2825[4];
setMv mv2825[2,3] = temp2[-28,-29];
setMv mv2825[0] = mv2785[0];
setMv mv2825[1] = mv2797[0];
setVector ve2824 = mv2825[0,1,2,3];
resetMv mv2827[4];
setMv mv2827[2] = mv2808[0];
setMv mv2827[0] = mv2789[0];
setMv mv2827[3] = mv2816[0];
setMv mv2827[1] = mv2800[0];
setVector ve2826 = mv2827[0,1,2,3];
dotVectors rc2[21] = <ve2824,ve2826>;

//rc2[22] = (((((rcPpDual[10] - temp2[10]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((rcPp[19] - temp2[11]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((rcPpDual[13] - temp2[13]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[26])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((-(temp2[30])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2828[1];
resetMv mv2830[2];
setMv mv2830[1] = temp2[-10];
setMv mv2830[0] = rcPpDual[10];
setVector ve2829 = mv2830[0,1];
dotVectors mv2828[0] = <ve2829>;
resetMv mv2831[1];
resetMv mv2832[1];
resetMv mv2834[3];
setMv mv2834[0,2] = rcPp[23,18];
setMv mv2834[1] = rcPpDual[12];
setVector ve2833 = mv2834[0,1,2];
resetMv mv2836[3];
setMv mv2836[0,2] = rcPp[23,18];
setMv mv2836[1] = rcPpDual[12];
setVector ve2835 = mv2836[0,1,2];
dotVectors mv2832[0] = <ve2833,ve2835>;
resetMv mv2837[1];
setMv mv2837[0] = rcPp[16];
resetMv mv2838[1];
setMv mv2838[0] = mv2832[0];
calculateMv mv2831 = DIVISION(mv2837,mv2838);
resetMv mv2839[1];
resetMv mv2840[1];
resetMv mv2842[2];
setMv mv2842[1] = temp2[-11];
setMv mv2842[0] = rcPp[19];
setVector ve2841 = mv2842[0,1];
dotVectors mv2840[0] = <ve2841>;
setMv mv2839[0] = mv2840[-0];
resetMv mv2843[1];
resetMv mv2844[1];
resetMv mv2846[3];
setMv mv2846[0,2] = rcPp[23,18];
setMv mv2846[1] = rcPpDual[12];
setVector ve2845 = mv2846[0,1,2];
resetMv mv2848[3];
setMv mv2848[0,2] = rcPp[23,18];
setMv mv2848[1] = rcPpDual[12];
setVector ve2847 = mv2848[0,1,2];
dotVectors mv2844[0] = <ve2845,ve2847>;
resetMv mv2849[1];
setMv mv2849[0] = rcPp[18];
resetMv mv2850[1];
setMv mv2850[0] = mv2844[0];
calculateMv mv2843 = DIVISION(mv2849,mv2850);
resetMv mv2851[1];
resetMv mv2853[2];
setMv mv2853[1] = temp2[-13];
setMv mv2853[0] = rcPpDual[13];
setVector ve2852 = mv2853[0,1];
dotVectors mv2851[0] = <ve2852>;
resetMv mv2854[1];
resetMv mv2855[1];
resetMv mv2857[3];
setMv mv2857[0,2] = rcPp[23,18];
setMv mv2857[1] = rcPpDual[12];
setVector ve2856 = mv2857[0,1,2];
resetMv mv2859[3];
setMv mv2859[0,2] = rcPp[23,18];
setMv mv2859[1] = rcPpDual[12];
setVector ve2858 = mv2859[0,1,2];
dotVectors mv2855[0] = <ve2856,ve2858>;
resetMv mv2860[1];
setMv mv2860[0] = rcPpDual[12];
resetMv mv2861[1];
setMv mv2861[0] = mv2855[0];
calculateMv mv2854 = DIVISION(mv2860,mv2861);
resetMv mv2862[1];
resetMv mv2863[1];
resetMv mv2865[3];
setMv mv2865[0,2] = rcPp[23,18];
setMv mv2865[1] = rcPpDual[12];
setVector ve2864 = mv2865[0,1,2];
resetMv mv2867[3];
setMv mv2867[0,2] = rcPp[23,18];
setMv mv2867[1] = rcPpDual[12];
setVector ve2866 = mv2867[0,1,2];
dotVectors mv2863[0] = <ve2864,ve2866>;
resetMv mv2868[1];
setMv mv2868[0] = rcPp[23];
resetMv mv2869[1];
setMv mv2869[0] = mv2863[0];
calculateMv mv2862 = DIVISION(mv2868,mv2869);
resetMv mv2870[1];
resetMv mv2871[1];
resetMv mv2873[3];
setMv mv2873[0,2] = rcPp[23,18];
setMv mv2873[1] = rcPpDual[12];
setVector ve2872 = mv2873[0,1,2];
resetMv mv2875[3];
setMv mv2875[0,2] = rcPp[23,18];
setMv mv2875[1] = rcPpDual[12];
setVector ve2874 = mv2875[0,1,2];
dotVectors mv2871[0] = <ve2872,ve2874>;
resetMv mv2876[1];
setMv mv2876[0] = rcPp[16];
resetMv mv2877[1];
setMv mv2877[0] = mv2871[0];
calculateMv mv2870 = DIVISION(mv2876,mv2877);
resetMv mv2879[5];
setMv mv2879[0] = mv2828[0];
setMv mv2879[3,4] = temp2[26,30];
setMv mv2879[2] = mv2851[0];
setMv mv2879[1] = mv2839[0];
setVector ve2878 = mv2879[0,1,2,3,4];
resetMv mv2881[5];
setMv mv2881[2] = mv2854[0];
setMv mv2881[4] = mv2870[0];
setMv mv2881[3] = mv2862[0];
setMv mv2881[0] = mv2831[0];
setMv mv2881[1] = mv2843[0];
setVector ve2880 = mv2881[0,1,2,3,4];
dotVectors rc2[22] = <ve2878,ve2880>;

//rc2[23] = ((-((rcPpDual[12] - temp2[12]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((rcPp[18] - temp2[14]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[27])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2882[1];
resetMv mv2883[1];
resetMv mv2885[2];
setMv mv2885[1] = temp2[-12];
setMv mv2885[0] = rcPpDual[12];
setVector ve2884 = mv2885[0,1];
dotVectors mv2883[0] = <ve2884>;
setMv mv2882[0] = mv2883[-0];
resetMv mv2886[1];
resetMv mv2887[1];
resetMv mv2889[3];
setMv mv2889[0,2] = rcPp[23,18];
setMv mv2889[1] = rcPpDual[12];
setVector ve2888 = mv2889[0,1,2];
resetMv mv2891[3];
setMv mv2891[0,2] = rcPp[23,18];
setMv mv2891[1] = rcPpDual[12];
setVector ve2890 = mv2891[0,1,2];
dotVectors mv2887[0] = <ve2888,ve2890>;
resetMv mv2892[1];
setMv mv2892[0] = rcPp[18];
resetMv mv2893[1];
setMv mv2893[0] = mv2887[0];
calculateMv mv2886 = DIVISION(mv2892,mv2893);
resetMv mv2894[1];
resetMv mv2896[2];
setMv mv2896[1] = temp2[-14];
setMv mv2896[0] = rcPp[18];
setVector ve2895 = mv2896[0,1];
dotVectors mv2894[0] = <ve2895>;
resetMv mv2897[1];
resetMv mv2898[1];
resetMv mv2900[3];
setMv mv2900[0,2] = rcPp[23,18];
setMv mv2900[1] = rcPpDual[12];
setVector ve2899 = mv2900[0,1,2];
resetMv mv2902[3];
setMv mv2902[0,2] = rcPp[23,18];
setMv mv2902[1] = rcPpDual[12];
setVector ve2901 = mv2902[0,1,2];
dotVectors mv2898[0] = <ve2899,ve2901>;
resetMv mv2903[1];
setMv mv2903[0] = rcPpDual[12];
resetMv mv2904[1];
setMv mv2904[0] = mv2898[0];
calculateMv mv2897 = DIVISION(mv2903,mv2904);
resetMv mv2905[1];
resetMv mv2906[1];
resetMv mv2908[3];
setMv mv2908[0,2] = rcPp[23,18];
setMv mv2908[1] = rcPpDual[12];
setVector ve2907 = mv2908[0,1,2];
resetMv mv2910[3];
setMv mv2910[0,2] = rcPp[23,18];
setMv mv2910[1] = rcPpDual[12];
setVector ve2909 = mv2910[0,1,2];
dotVectors mv2906[0] = <ve2907,ve2909>;
resetMv mv2911[1];
setMv mv2911[0] = rcPp[23];
resetMv mv2912[1];
setMv mv2912[0] = mv2906[0];
calculateMv mv2905 = DIVISION(mv2911,mv2912);
resetMv mv2914[3];
setMv mv2914[0] = mv2882[0];
setMv mv2914[2] = temp2[27];
setMv mv2914[1] = mv2894[0];
setVector ve2913 = mv2914[0,1,2];
resetMv mv2916[3];
setMv mv2916[0] = mv2886[0];
setMv mv2916[1] = mv2897[0];
setMv mv2916[2] = mv2905[0];
setVector ve2915 = mv2916[0,1,2];
dotVectors rc2[23] = <ve2913,ve2915>;

//rc2[24] = (((-((rcPpDual[12] - temp2[12]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((rcPp[16] - temp2[15]) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[28])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((-(temp2[30])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))
resetMv mv2917[1];
resetMv mv2918[1];
resetMv mv2920[2];
setMv mv2920[1] = temp2[-12];
setMv mv2920[0] = rcPpDual[12];
setVector ve2919 = mv2920[0,1];
dotVectors mv2918[0] = <ve2919>;
setMv mv2917[0] = mv2918[-0];
resetMv mv2921[1];
resetMv mv2922[1];
resetMv mv2924[3];
setMv mv2924[0,2] = rcPp[23,18];
setMv mv2924[1] = rcPpDual[12];
setVector ve2923 = mv2924[0,1,2];
resetMv mv2926[3];
setMv mv2926[0,2] = rcPp[23,18];
setMv mv2926[1] = rcPpDual[12];
setVector ve2925 = mv2926[0,1,2];
dotVectors mv2922[0] = <ve2923,ve2925>;
resetMv mv2927[1];
setMv mv2927[0] = rcPp[16];
resetMv mv2928[1];
setMv mv2928[0] = mv2922[0];
calculateMv mv2921 = DIVISION(mv2927,mv2928);
resetMv mv2929[1];
resetMv mv2931[2];
setMv mv2931[1] = temp2[-15];
setMv mv2931[0] = rcPp[16];
setVector ve2930 = mv2931[0,1];
dotVectors mv2929[0] = <ve2930>;
resetMv mv2932[1];
resetMv mv2933[1];
resetMv mv2935[3];
setMv mv2935[0,2] = rcPp[23,18];
setMv mv2935[1] = rcPpDual[12];
setVector ve2934 = mv2935[0,1,2];
resetMv mv2937[3];
setMv mv2937[0,2] = rcPp[23,18];
setMv mv2937[1] = rcPpDual[12];
setVector ve2936 = mv2937[0,1,2];
dotVectors mv2933[0] = <ve2934,ve2936>;
resetMv mv2938[1];
setMv mv2938[0] = rcPpDual[12];
resetMv mv2939[1];
setMv mv2939[0] = mv2933[0];
calculateMv mv2932 = DIVISION(mv2938,mv2939);
resetMv mv2940[1];
resetMv mv2941[1];
resetMv mv2943[3];
setMv mv2943[0,2] = rcPp[23,18];
setMv mv2943[1] = rcPpDual[12];
setVector ve2942 = mv2943[0,1,2];
resetMv mv2945[3];
setMv mv2945[0,2] = rcPp[23,18];
setMv mv2945[1] = rcPpDual[12];
setVector ve2944 = mv2945[0,1,2];
dotVectors mv2941[0] = <ve2942,ve2944>;
resetMv mv2946[1];
setMv mv2946[0] = rcPp[23];
resetMv mv2947[1];
setMv mv2947[0] = mv2941[0];
calculateMv mv2940 = DIVISION(mv2946,mv2947);
resetMv mv2948[1];
resetMv mv2949[1];
resetMv mv2951[3];
setMv mv2951[0,2] = rcPp[23,18];
setMv mv2951[1] = rcPpDual[12];
setVector ve2950 = mv2951[0,1,2];
resetMv mv2953[3];
setMv mv2953[0,2] = rcPp[23,18];
setMv mv2953[1] = rcPpDual[12];
setVector ve2952 = mv2953[0,1,2];
dotVectors mv2949[0] = <ve2950,ve2952>;
resetMv mv2954[1];
setMv mv2954[0] = rcPp[18];
resetMv mv2955[1];
setMv mv2955[0] = mv2949[0];
calculateMv mv2948 = DIVISION(mv2954,mv2955);
resetMv mv2957[4];
setMv mv2957[2,3] = temp2[28,-30];
setMv mv2957[1] = mv2929[0];
setMv mv2957[0] = mv2917[0];
setVector ve2956 = mv2957[0,1,2,3];
resetMv mv2959[4];
setMv mv2959[1] = mv2932[0];
setMv mv2959[2] = mv2940[0];
setMv mv2959[0] = mv2921[0];
setMv mv2959[3] = mv2948[0];
setVector ve2958 = mv2959[0,1,2,3];
dotVectors rc2[24] = <ve2956,ve2958>;

//rc2[25] = (((-((rcPp[18] - temp2[14]) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((rcPp[16] - temp2[15]) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[29])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((-(temp2[30])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv2960[1];
resetMv mv2961[1];
resetMv mv2963[2];
setMv mv2963[1] = temp2[-14];
setMv mv2963[0] = rcPp[18];
setVector ve2962 = mv2963[0,1];
dotVectors mv2961[0] = <ve2962>;
setMv mv2960[0] = mv2961[-0];
resetMv mv2964[1];
resetMv mv2965[1];
resetMv mv2967[3];
setMv mv2967[0,2] = rcPp[23,18];
setMv mv2967[1] = rcPpDual[12];
setVector ve2966 = mv2967[0,1,2];
resetMv mv2969[3];
setMv mv2969[0,2] = rcPp[23,18];
setMv mv2969[1] = rcPpDual[12];
setVector ve2968 = mv2969[0,1,2];
dotVectors mv2965[0] = <ve2966,ve2968>;
resetMv mv2970[1];
setMv mv2970[0] = rcPp[16];
resetMv mv2971[1];
setMv mv2971[0] = mv2965[0];
calculateMv mv2964 = DIVISION(mv2970,mv2971);
resetMv mv2972[1];
resetMv mv2974[2];
setMv mv2974[1] = temp2[-15];
setMv mv2974[0] = rcPp[16];
setVector ve2973 = mv2974[0,1];
dotVectors mv2972[0] = <ve2973>;
resetMv mv2975[1];
resetMv mv2976[1];
resetMv mv2978[3];
setMv mv2978[0,2] = rcPp[23,18];
setMv mv2978[1] = rcPpDual[12];
setVector ve2977 = mv2978[0,1,2];
resetMv mv2980[3];
setMv mv2980[0,2] = rcPp[23,18];
setMv mv2980[1] = rcPpDual[12];
setVector ve2979 = mv2980[0,1,2];
dotVectors mv2976[0] = <ve2977,ve2979>;
resetMv mv2981[1];
setMv mv2981[0] = rcPp[18];
resetMv mv2982[1];
setMv mv2982[0] = mv2976[0];
calculateMv mv2975 = DIVISION(mv2981,mv2982);
resetMv mv2983[1];
resetMv mv2984[1];
resetMv mv2986[3];
setMv mv2986[0,2] = rcPp[23,18];
setMv mv2986[1] = rcPpDual[12];
setVector ve2985 = mv2986[0,1,2];
resetMv mv2988[3];
setMv mv2988[0,2] = rcPp[23,18];
setMv mv2988[1] = rcPpDual[12];
setVector ve2987 = mv2988[0,1,2];
dotVectors mv2984[0] = <ve2985,ve2987>;
resetMv mv2989[1];
setMv mv2989[0] = rcPp[23];
resetMv mv2990[1];
setMv mv2990[0] = mv2984[0];
calculateMv mv2983 = DIVISION(mv2989,mv2990);
resetMv mv2991[1];
resetMv mv2992[1];
resetMv mv2994[3];
setMv mv2994[0,2] = rcPp[23,18];
setMv mv2994[1] = rcPpDual[12];
setVector ve2993 = mv2994[0,1,2];
resetMv mv2996[3];
setMv mv2996[0,2] = rcPp[23,18];
setMv mv2996[1] = rcPpDual[12];
setVector ve2995 = mv2996[0,1,2];
dotVectors mv2992[0] = <ve2993,ve2995>;
resetMv mv2997[1];
setMv mv2997[0] = rcPpDual[12];
resetMv mv2998[1];
setMv mv2998[0] = mv2992[0];
calculateMv mv2991 = DIVISION(mv2997,mv2998);
resetMv mv3000[4];
setMv mv3000[2,3] = temp2[29,30];
setMv mv3000[0] = mv2960[0];
setMv mv3000[1] = mv2972[0];
setVector ve2999 = mv3000[0,1,2,3];
resetMv mv3002[4];
setMv mv3002[0] = mv2964[0];
setMv mv3002[1] = mv2975[0];
setMv mv3002[3] = mv2991[0];
setMv mv3002[2] = mv2983[0];
setVector ve3001 = mv3002[0,1,2,3];
dotVectors rc2[25] = <ve2999,ve3001>;

//rc2[26] = (((((-(temp2[16])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))) + (-((-(temp2[17])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((-(temp2[19])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[22])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((-(temp2[31])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv3003[1];
resetMv mv3004[1];
resetMv mv3006[3];
setMv mv3006[0,2] = rcPp[23,18];
setMv mv3006[1] = rcPpDual[12];
setVector ve3005 = mv3006[0,1,2];
resetMv mv3008[3];
setMv mv3008[0,2] = rcPp[23,18];
setMv mv3008[1] = rcPpDual[12];
setVector ve3007 = mv3008[0,1,2];
dotVectors mv3004[0] = <ve3005,ve3007>;
resetMv mv3009[1];
setMv mv3009[0] = rcPp[16];
resetMv mv3010[1];
setMv mv3010[0] = mv3004[0];
calculateMv mv3003 = DIVISION(mv3009,mv3010);
resetMv mv3011[1];
resetMv mv3012[1];
resetMv mv3014[3];
setMv mv3014[0,2] = rcPp[23,18];
setMv mv3014[1] = rcPpDual[12];
setVector ve3013 = mv3014[0,1,2];
resetMv mv3016[3];
setMv mv3016[0,2] = rcPp[23,18];
setMv mv3016[1] = rcPpDual[12];
setVector ve3015 = mv3016[0,1,2];
dotVectors mv3012[0] = <ve3013,ve3015>;
resetMv mv3017[1];
setMv mv3017[0] = rcPp[18];
resetMv mv3018[1];
setMv mv3018[0] = mv3012[0];
calculateMv mv3011 = DIVISION(mv3017,mv3018);
resetMv mv3019[1];
resetMv mv3020[1];
resetMv mv3022[3];
setMv mv3022[0,2] = rcPp[23,18];
setMv mv3022[1] = rcPpDual[12];
setVector ve3021 = mv3022[0,1,2];
resetMv mv3024[3];
setMv mv3024[0,2] = rcPp[23,18];
setMv mv3024[1] = rcPpDual[12];
setVector ve3023 = mv3024[0,1,2];
dotVectors mv3020[0] = <ve3021,ve3023>;
resetMv mv3025[1];
setMv mv3025[0] = rcPpDual[12];
resetMv mv3026[1];
setMv mv3026[0] = mv3020[0];
calculateMv mv3019 = DIVISION(mv3025,mv3026);
resetMv mv3027[1];
resetMv mv3028[1];
resetMv mv3030[3];
setMv mv3030[0,2] = rcPp[23,18];
setMv mv3030[1] = rcPpDual[12];
setVector ve3029 = mv3030[0,1,2];
resetMv mv3032[3];
setMv mv3032[0,2] = rcPp[23,18];
setMv mv3032[1] = rcPpDual[12];
setVector ve3031 = mv3032[0,1,2];
dotVectors mv3028[0] = <ve3029,ve3031>;
resetMv mv3033[1];
setMv mv3033[0] = rcPp[23];
resetMv mv3034[1];
setMv mv3034[0] = mv3028[0];
calculateMv mv3027 = DIVISION(mv3033,mv3034);
resetMv mv3035[1];
resetMv mv3036[1];
resetMv mv3038[3];
setMv mv3038[0,2] = rcPp[23,18];
setMv mv3038[1] = rcPpDual[12];
setVector ve3037 = mv3038[0,1,2];
resetMv mv3040[3];
setMv mv3040[0,2] = rcPp[23,18];
setMv mv3040[1] = rcPpDual[12];
setVector ve3039 = mv3040[0,1,2];
dotVectors mv3036[0] = <ve3037,ve3039>;
resetMv mv3041[1];
setMv mv3041[0] = rcPp[16];
resetMv mv3042[1];
setMv mv3042[0] = mv3036[0];
calculateMv mv3035 = DIVISION(mv3041,mv3042);
setVector ve3043 = temp2[-16,17,-19,22,31];
resetMv mv3045[5];
setMv mv3045[0] = mv3003[0];
setMv mv3045[2] = mv3019[0];
setMv mv3045[3] = mv3027[0];
setMv mv3045[4] = mv3035[0];
setMv mv3045[1] = mv3011[0];
setVector ve3044 = mv3045[0,1,2,3,4];
dotVectors rc2[26] = <ve3043,ve3044>;

//rc2[27] = ((-((-(temp2[18])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((-(temp2[20])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[23])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv3046[1];
resetMv mv3047[1];
resetMv mv3049[3];
setMv mv3049[0,2] = rcPp[23,18];
setMv mv3049[1] = rcPpDual[12];
setVector ve3048 = mv3049[0,1,2];
resetMv mv3051[3];
setMv mv3051[0,2] = rcPp[23,18];
setMv mv3051[1] = rcPpDual[12];
setVector ve3050 = mv3051[0,1,2];
dotVectors mv3047[0] = <ve3048,ve3050>;
resetMv mv3052[1];
setMv mv3052[0] = rcPp[18];
resetMv mv3053[1];
setMv mv3053[0] = mv3047[0];
calculateMv mv3046 = DIVISION(mv3052,mv3053);
resetMv mv3054[1];
resetMv mv3055[1];
resetMv mv3057[3];
setMv mv3057[0,2] = rcPp[23,18];
setMv mv3057[1] = rcPpDual[12];
setVector ve3056 = mv3057[0,1,2];
resetMv mv3059[3];
setMv mv3059[0,2] = rcPp[23,18];
setMv mv3059[1] = rcPpDual[12];
setVector ve3058 = mv3059[0,1,2];
dotVectors mv3055[0] = <ve3056,ve3058>;
resetMv mv3060[1];
setMv mv3060[0] = rcPpDual[12];
resetMv mv3061[1];
setMv mv3061[0] = mv3055[0];
calculateMv mv3054 = DIVISION(mv3060,mv3061);
resetMv mv3062[1];
resetMv mv3063[1];
resetMv mv3065[3];
setMv mv3065[0,2] = rcPp[23,18];
setMv mv3065[1] = rcPpDual[12];
setVector ve3064 = mv3065[0,1,2];
resetMv mv3067[3];
setMv mv3067[0,2] = rcPp[23,18];
setMv mv3067[1] = rcPpDual[12];
setVector ve3066 = mv3067[0,1,2];
dotVectors mv3063[0] = <ve3064,ve3066>;
resetMv mv3068[1];
setMv mv3068[0] = rcPp[23];
resetMv mv3069[1];
setMv mv3069[0] = mv3063[0];
calculateMv mv3062 = DIVISION(mv3068,mv3069);
setVector ve3070 = temp2[18,-20,23];
resetMv mv3072[3];
setMv mv3072[1] = mv3054[0];
setMv mv3072[0] = mv3046[0];
setMv mv3072[2] = mv3062[0];
setVector ve3071 = mv3072[0,1,2];
dotVectors rc2[27] = <ve3070,ve3071>;

//rc2[28] = (((-((-(temp2[18])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((-(temp2[21])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[24])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((-(temp2[31])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))
resetMv mv3073[1];
resetMv mv3074[1];
resetMv mv3076[3];
setMv mv3076[0,2] = rcPp[23,18];
setMv mv3076[1] = rcPpDual[12];
setVector ve3075 = mv3076[0,1,2];
resetMv mv3078[3];
setMv mv3078[0,2] = rcPp[23,18];
setMv mv3078[1] = rcPpDual[12];
setVector ve3077 = mv3078[0,1,2];
dotVectors mv3074[0] = <ve3075,ve3077>;
resetMv mv3079[1];
setMv mv3079[0] = rcPp[16];
resetMv mv3080[1];
setMv mv3080[0] = mv3074[0];
calculateMv mv3073 = DIVISION(mv3079,mv3080);
resetMv mv3081[1];
resetMv mv3082[1];
resetMv mv3084[3];
setMv mv3084[0,2] = rcPp[23,18];
setMv mv3084[1] = rcPpDual[12];
setVector ve3083 = mv3084[0,1,2];
resetMv mv3086[3];
setMv mv3086[0,2] = rcPp[23,18];
setMv mv3086[1] = rcPpDual[12];
setVector ve3085 = mv3086[0,1,2];
dotVectors mv3082[0] = <ve3083,ve3085>;
resetMv mv3087[1];
setMv mv3087[0] = rcPpDual[12];
resetMv mv3088[1];
setMv mv3088[0] = mv3082[0];
calculateMv mv3081 = DIVISION(mv3087,mv3088);
resetMv mv3089[1];
resetMv mv3090[1];
resetMv mv3092[3];
setMv mv3092[0,2] = rcPp[23,18];
setMv mv3092[1] = rcPpDual[12];
setVector ve3091 = mv3092[0,1,2];
resetMv mv3094[3];
setMv mv3094[0,2] = rcPp[23,18];
setMv mv3094[1] = rcPpDual[12];
setVector ve3093 = mv3094[0,1,2];
dotVectors mv3090[0] = <ve3091,ve3093>;
resetMv mv3095[1];
setMv mv3095[0] = rcPp[23];
resetMv mv3096[1];
setMv mv3096[0] = mv3090[0];
calculateMv mv3089 = DIVISION(mv3095,mv3096);
resetMv mv3097[1];
resetMv mv3098[1];
resetMv mv3100[3];
setMv mv3100[0,2] = rcPp[23,18];
setMv mv3100[1] = rcPpDual[12];
setVector ve3099 = mv3100[0,1,2];
resetMv mv3102[3];
setMv mv3102[0,2] = rcPp[23,18];
setMv mv3102[1] = rcPpDual[12];
setVector ve3101 = mv3102[0,1,2];
dotVectors mv3098[0] = <ve3099,ve3101>;
resetMv mv3103[1];
setMv mv3103[0] = rcPp[18];
resetMv mv3104[1];
setMv mv3104[0] = mv3098[0];
calculateMv mv3097 = DIVISION(mv3103,mv3104);
setVector ve3105 = temp2[18,-21,24,-31];
resetMv mv3107[4];
setMv mv3107[1] = mv3081[0];
setMv mv3107[0] = mv3073[0];
setMv mv3107[3] = mv3097[0];
setMv mv3107[2] = mv3089[0];
setVector ve3106 = mv3107[0,1,2,3];
dotVectors rc2[28] = <ve3105,ve3106>;

//rc2[29] = (((-((-(temp2[20])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((-(temp2[21])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[25])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + (-((-(temp2[31])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))
resetMv mv3108[1];
resetMv mv3109[1];
resetMv mv3111[3];
setMv mv3111[0,2] = rcPp[23,18];
setMv mv3111[1] = rcPpDual[12];
setVector ve3110 = mv3111[0,1,2];
resetMv mv3113[3];
setMv mv3113[0,2] = rcPp[23,18];
setMv mv3113[1] = rcPpDual[12];
setVector ve3112 = mv3113[0,1,2];
dotVectors mv3109[0] = <ve3110,ve3112>;
resetMv mv3114[1];
setMv mv3114[0] = rcPp[16];
resetMv mv3115[1];
setMv mv3115[0] = mv3109[0];
calculateMv mv3108 = DIVISION(mv3114,mv3115);
resetMv mv3116[1];
resetMv mv3117[1];
resetMv mv3119[3];
setMv mv3119[0,2] = rcPp[23,18];
setMv mv3119[1] = rcPpDual[12];
setVector ve3118 = mv3119[0,1,2];
resetMv mv3121[3];
setMv mv3121[0,2] = rcPp[23,18];
setMv mv3121[1] = rcPpDual[12];
setVector ve3120 = mv3121[0,1,2];
dotVectors mv3117[0] = <ve3118,ve3120>;
resetMv mv3122[1];
setMv mv3122[0] = rcPp[18];
resetMv mv3123[1];
setMv mv3123[0] = mv3117[0];
calculateMv mv3116 = DIVISION(mv3122,mv3123);
resetMv mv3124[1];
resetMv mv3125[1];
resetMv mv3127[3];
setMv mv3127[0,2] = rcPp[23,18];
setMv mv3127[1] = rcPpDual[12];
setVector ve3126 = mv3127[0,1,2];
resetMv mv3129[3];
setMv mv3129[0,2] = rcPp[23,18];
setMv mv3129[1] = rcPpDual[12];
setVector ve3128 = mv3129[0,1,2];
dotVectors mv3125[0] = <ve3126,ve3128>;
resetMv mv3130[1];
setMv mv3130[0] = rcPp[23];
resetMv mv3131[1];
setMv mv3131[0] = mv3125[0];
calculateMv mv3124 = DIVISION(mv3130,mv3131);
resetMv mv3132[1];
resetMv mv3133[1];
resetMv mv3135[3];
setMv mv3135[0,2] = rcPp[23,18];
setMv mv3135[1] = rcPpDual[12];
setVector ve3134 = mv3135[0,1,2];
resetMv mv3137[3];
setMv mv3137[0,2] = rcPp[23,18];
setMv mv3137[1] = rcPpDual[12];
setVector ve3136 = mv3137[0,1,2];
dotVectors mv3133[0] = <ve3134,ve3136>;
resetMv mv3138[1];
setMv mv3138[0] = rcPpDual[12];
resetMv mv3139[1];
setMv mv3139[0] = mv3133[0];
calculateMv mv3132 = DIVISION(mv3138,mv3139);
setVector ve3140 = temp2[20,-21,25,31];
resetMv mv3142[4];
setMv mv3142[3] = mv3132[0];
setMv mv3142[1] = mv3116[0];
setMv mv3142[0] = mv3108[0];
setMv mv3142[2] = mv3124[0];
setVector ve3141 = mv3142[0,1,2,3];
dotVectors rc2[29] = <ve3140,ve3141>;

//rc2[30] = (((-((-(temp2[23])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((-(temp2[24])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[25])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((-(temp2[31])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))
resetMv mv3143[1];
resetMv mv3144[1];
resetMv mv3146[3];
setMv mv3146[0,2] = rcPp[23,18];
setMv mv3146[1] = rcPpDual[12];
setVector ve3145 = mv3146[0,1,2];
resetMv mv3148[3];
setMv mv3148[0,2] = rcPp[23,18];
setMv mv3148[1] = rcPpDual[12];
setVector ve3147 = mv3148[0,1,2];
dotVectors mv3144[0] = <ve3145,ve3147>;
resetMv mv3149[1];
setMv mv3149[0] = rcPp[16];
resetMv mv3150[1];
setMv mv3150[0] = mv3144[0];
calculateMv mv3143 = DIVISION(mv3149,mv3150);
resetMv mv3151[1];
resetMv mv3152[1];
resetMv mv3154[3];
setMv mv3154[0,2] = rcPp[23,18];
setMv mv3154[1] = rcPpDual[12];
setVector ve3153 = mv3154[0,1,2];
resetMv mv3156[3];
setMv mv3156[0,2] = rcPp[23,18];
setMv mv3156[1] = rcPpDual[12];
setVector ve3155 = mv3156[0,1,2];
dotVectors mv3152[0] = <ve3153,ve3155>;
resetMv mv3157[1];
setMv mv3157[0] = rcPp[18];
resetMv mv3158[1];
setMv mv3158[0] = mv3152[0];
calculateMv mv3151 = DIVISION(mv3157,mv3158);
resetMv mv3159[1];
resetMv mv3160[1];
resetMv mv3162[3];
setMv mv3162[0,2] = rcPp[23,18];
setMv mv3162[1] = rcPpDual[12];
setVector ve3161 = mv3162[0,1,2];
resetMv mv3164[3];
setMv mv3164[0,2] = rcPp[23,18];
setMv mv3164[1] = rcPpDual[12];
setVector ve3163 = mv3164[0,1,2];
dotVectors mv3160[0] = <ve3161,ve3163>;
resetMv mv3165[1];
setMv mv3165[0] = rcPpDual[12];
resetMv mv3166[1];
setMv mv3166[0] = mv3160[0];
calculateMv mv3159 = DIVISION(mv3165,mv3166);
resetMv mv3167[1];
resetMv mv3168[1];
resetMv mv3170[3];
setMv mv3170[0,2] = rcPp[23,18];
setMv mv3170[1] = rcPpDual[12];
setVector ve3169 = mv3170[0,1,2];
resetMv mv3172[3];
setMv mv3172[0,2] = rcPp[23,18];
setMv mv3172[1] = rcPpDual[12];
setVector ve3171 = mv3172[0,1,2];
dotVectors mv3168[0] = <ve3169,ve3171>;
resetMv mv3173[1];
setMv mv3173[0] = rcPp[23];
resetMv mv3174[1];
setMv mv3174[0] = mv3168[0];
calculateMv mv3167 = DIVISION(mv3173,mv3174);
setVector ve3175 = temp2[23,-24,25,-31];
resetMv mv3177[4];
setMv mv3177[3] = mv3167[0];
setMv mv3177[2] = mv3159[0];
setMv mv3177[0] = mv3143[0];
setMv mv3177[1] = mv3151[0];
setVector ve3176 = mv3177[0,1,2,3];
dotVectors rc2[30] = <ve3175,ve3176>;

//rc2[31] = (((-((-(temp2[27])) * (rcPp[16] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + ((-(temp2[28])) * (rcPp[18] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))) + (-((-(temp2[29])) * (rcPpDual[12] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18])))))) + ((-(temp2[30])) * (rcPp[23] / (((rcPp[23] * rcPp[23]) + (rcPpDual[12] * rcPpDual[12])) + (rcPp[18] * rcPp[18]))))
resetMv mv3178[1];
resetMv mv3179[1];
resetMv mv3181[3];
setMv mv3181[0,2] = rcPp[23,18];
setMv mv3181[1] = rcPpDual[12];
setVector ve3180 = mv3181[0,1,2];
resetMv mv3183[3];
setMv mv3183[0,2] = rcPp[23,18];
setMv mv3183[1] = rcPpDual[12];
setVector ve3182 = mv3183[0,1,2];
dotVectors mv3179[0] = <ve3180,ve3182>;
resetMv mv3184[1];
setMv mv3184[0] = rcPp[16];
resetMv mv3185[1];
setMv mv3185[0] = mv3179[0];
calculateMv mv3178 = DIVISION(mv3184,mv3185);
resetMv mv3186[1];
resetMv mv3187[1];
resetMv mv3189[3];
setMv mv3189[0,2] = rcPp[23,18];
setMv mv3189[1] = rcPpDual[12];
setVector ve3188 = mv3189[0,1,2];
resetMv mv3191[3];
setMv mv3191[0,2] = rcPp[23,18];
setMv mv3191[1] = rcPpDual[12];
setVector ve3190 = mv3191[0,1,2];
dotVectors mv3187[0] = <ve3188,ve3190>;
resetMv mv3192[1];
setMv mv3192[0] = rcPp[18];
resetMv mv3193[1];
setMv mv3193[0] = mv3187[0];
calculateMv mv3186 = DIVISION(mv3192,mv3193);
resetMv mv3194[1];
resetMv mv3195[1];
resetMv mv3197[3];
setMv mv3197[0,2] = rcPp[23,18];
setMv mv3197[1] = rcPpDual[12];
setVector ve3196 = mv3197[0,1,2];
resetMv mv3199[3];
setMv mv3199[0,2] = rcPp[23,18];
setMv mv3199[1] = rcPpDual[12];
setVector ve3198 = mv3199[0,1,2];
dotVectors mv3195[0] = <ve3196,ve3198>;
resetMv mv3200[1];
setMv mv3200[0] = rcPpDual[12];
resetMv mv3201[1];
setMv mv3201[0] = mv3195[0];
calculateMv mv3194 = DIVISION(mv3200,mv3201);
resetMv mv3202[1];
resetMv mv3203[1];
resetMv mv3205[3];
setMv mv3205[0,2] = rcPp[23,18];
setMv mv3205[1] = rcPpDual[12];
setVector ve3204 = mv3205[0,1,2];
resetMv mv3207[3];
setMv mv3207[0,2] = rcPp[23,18];
setMv mv3207[1] = rcPpDual[12];
setVector ve3206 = mv3207[0,1,2];
dotVectors mv3203[0] = <ve3204,ve3206>;
resetMv mv3208[1];
setMv mv3208[0] = rcPp[23];
resetMv mv3209[1];
setMv mv3209[0] = mv3203[0];
calculateMv mv3202 = DIVISION(mv3208,mv3209);
setVector ve3210 = temp2[27,-28,29,-30];
resetMv mv3212[4];
setMv mv3212[3] = mv3202[0];
setMv mv3212[1] = mv3186[0];
setMv mv3212[0] = mv3178[0];
setMv mv3212[2] = mv3194[0];
setVector ve3211 = mv3212[0,1,2,3];
dotVectors rc2[31] = <ve3210,ve3211>;

//rc2N[1] = ((((((((((((((((-(rc2[0])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[2])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[3])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[5])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[6])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[7])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[9])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[10])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[12])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[14])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[16])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[18])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[20])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[23])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[27])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv rc2N[32];
resetMv mv3213[1];
resetMv mv3214[1];
setVector ve3215 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3216 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3214[0] = <ve3215,ve3216>;
resetMv mv3217[1];
setMv mv3217[0] = rc2[-9];
resetMv mv3218[1];
setMv mv3218[0] = mv3214[0];
calculateMv mv3213 = DIVISION(mv3217,mv3218);
resetMv mv3219[1];
resetMv mv3220[1];
setVector ve3221 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3222 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3220[0] = <ve3221,ve3222>;
resetMv mv3223[1];
setMv mv3223[0] = rc2[-5];
resetMv mv3224[1];
setMv mv3224[0] = mv3220[0];
calculateMv mv3219 = DIVISION(mv3223,mv3224);
resetMv mv3225[1];
resetMv mv3226[1];
setVector ve3227 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3228 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3226[0] = <ve3227,ve3228>;
resetMv mv3229[1];
setMv mv3229[0] = rc2[18];
resetMv mv3230[1];
setMv mv3230[0] = mv3226[0];
calculateMv mv3225 = DIVISION(mv3229,mv3230);
resetMv mv3231[1];
resetMv mv3232[1];
setVector ve3233 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3234 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3232[0] = <ve3233,ve3234>;
resetMv mv3235[1];
setMv mv3235[0] = rc2[20];
resetMv mv3236[1];
setMv mv3236[0] = mv3232[0];
calculateMv mv3231 = DIVISION(mv3235,mv3236);
resetMv mv3237[1];
resetMv mv3238[1];
setVector ve3239 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3240 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3238[0] = <ve3239,ve3240>;
resetMv mv3241[1];
setMv mv3241[0] = rc2[21];
resetMv mv3242[1];
setMv mv3242[0] = mv3238[0];
calculateMv mv3237 = DIVISION(mv3241,mv3242);
resetMv mv3243[1];
resetMv mv3244[1];
setVector ve3245 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3246 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3244[0] = <ve3245,ve3246>;
resetMv mv3247[1];
setMv mv3247[0] = rc2[-12];
resetMv mv3248[1];
setMv mv3248[0] = mv3244[0];
calculateMv mv3243 = DIVISION(mv3247,mv3248);
resetMv mv3249[1];
resetMv mv3250[1];
setVector ve3251 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3252 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3250[0] = <ve3251,ve3252>;
resetMv mv3253[1];
setMv mv3253[0] = rc2[-14];
resetMv mv3254[1];
setMv mv3254[0] = mv3250[0];
calculateMv mv3249 = DIVISION(mv3253,mv3254);
resetMv mv3255[1];
resetMv mv3256[1];
setVector ve3257 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3258 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3256[0] = <ve3257,ve3258>;
resetMv mv3259[1];
setMv mv3259[0] = rc2[-15];
resetMv mv3260[1];
setMv mv3260[0] = mv3256[0];
calculateMv mv3255 = DIVISION(mv3259,mv3260);
resetMv mv3261[1];
resetMv mv3262[1];
setVector ve3263 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3264 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3262[0] = <ve3263,ve3264>;
resetMv mv3265[1];
setMv mv3265[0] = rc2[27];
resetMv mv3266[1];
setMv mv3266[0] = mv3262[0];
calculateMv mv3261 = DIVISION(mv3265,mv3266);
resetMv mv3267[1];
resetMv mv3268[1];
setVector ve3269 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3270 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3268[0] = <ve3269,ve3270>;
resetMv mv3271[1];
setMv mv3271[0] = rc2[28];
resetMv mv3272[1];
setMv mv3272[0] = mv3268[0];
calculateMv mv3267 = DIVISION(mv3271,mv3272);
resetMv mv3273[1];
resetMv mv3274[1];
setVector ve3275 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3276 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3274[0] = <ve3275,ve3276>;
resetMv mv3277[1];
setMv mv3277[0] = rc2[29];
resetMv mv3278[1];
setMv mv3278[0] = mv3274[0];
calculateMv mv3273 = DIVISION(mv3277,mv3278);
resetMv mv3279[1];
resetMv mv3280[1];
setVector ve3281 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3282 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3280[0] = <ve3281,ve3282>;
resetMv mv3283[1];
setMv mv3283[0] = rc2[23];
resetMv mv3284[1];
setMv mv3284[0] = mv3280[0];
calculateMv mv3279 = DIVISION(mv3283,mv3284);
resetMv mv3285[1];
resetMv mv3286[1];
setVector ve3287 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3288 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3286[0] = <ve3287,ve3288>;
resetMv mv3289[1];
setMv mv3289[0] = rc2[24];
resetMv mv3290[1];
setMv mv3290[0] = mv3286[0];
calculateMv mv3285 = DIVISION(mv3289,mv3290);
resetMv mv3291[1];
resetMv mv3292[1];
setVector ve3293 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3294 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3292[0] = <ve3293,ve3294>;
resetMv mv3295[1];
setMv mv3295[0] = rc2[25];
resetMv mv3296[1];
setMv mv3296[0] = mv3292[0];
calculateMv mv3291 = DIVISION(mv3295,mv3296);
resetMv mv3297[1];
resetMv mv3298[1];
setVector ve3299 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3300 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3298[0] = <ve3299,ve3300>;
resetMv mv3301[1];
setMv mv3301[0] = rc2[-31];
resetMv mv3302[1];
setMv mv3302[0] = mv3298[0];
calculateMv mv3297 = DIVISION(mv3301,mv3302);
resetMv mv3303[1];
resetMv mv3304[1];
setVector ve3305 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3306 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3304[0] = <ve3305,ve3306>;
resetMv mv3307[1];
setMv mv3307[0] = rc2[30];
resetMv mv3308[1];
setMv mv3308[0] = mv3304[0];
calculateMv mv3303 = DIVISION(mv3307,mv3308);
setVector ve3309 = rc2[-0,-1,2,3,-5,-6,-7,9,10,-12,-14,16,-18,-20,23,-27];
resetMv mv3311[16];
setMv mv3311[9] = mv3267[0];
setMv mv3311[11] = mv3279[0];
setMv mv3311[5] = mv3243[0];
setMv mv3311[3] = mv3231[0];
setMv mv3311[1] = mv3219[0];
setMv mv3311[12] = mv3285[0];
setMv mv3311[14] = mv3297[0];
setMv mv3311[6] = mv3249[0];
setMv mv3311[8] = mv3261[0];
setMv mv3311[2] = mv3225[0];
setMv mv3311[4] = mv3237[0];
setMv mv3311[7] = mv3255[0];
setMv mv3311[13] = mv3291[0];
setMv mv3311[10] = mv3273[0];
setMv mv3311[0] = mv3213[0];
setMv mv3311[15] = mv3303[0];
setVector ve3310 = mv3311[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
dotVectors rc2N[1] = <ve3309,ve3310>;

//rc2N[2] = ((((((((((((((((-(rc2[0])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[2])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[3])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[5])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[6])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[7])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[9])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[10])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[12])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[14])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[16])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[18])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[20])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[23])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[27])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))
resetMv mv3312[1];
resetMv mv3313[1];
setVector ve3314 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3315 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3313[0] = <ve3314,ve3315>;
resetMv mv3316[1];
setMv mv3316[0] = rc2[-12];
resetMv mv3317[1];
setMv mv3317[0] = mv3313[0];
calculateMv mv3312 = DIVISION(mv3316,mv3317);
resetMv mv3318[1];
resetMv mv3319[1];
setVector ve3320 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3321 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3319[0] = <ve3320,ve3321>;
resetMv mv3322[1];
setMv mv3322[0] = rc2[18];
resetMv mv3323[1];
setMv mv3323[0] = mv3319[0];
calculateMv mv3318 = DIVISION(mv3322,mv3323);
resetMv mv3324[1];
resetMv mv3325[1];
setVector ve3326 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3327 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3325[0] = <ve3326,ve3327>;
resetMv mv3328[1];
setMv mv3328[0] = rc2[-5];
resetMv mv3329[1];
setMv mv3329[0] = mv3325[0];
calculateMv mv3324 = DIVISION(mv3328,mv3329);
resetMv mv3330[1];
resetMv mv3331[1];
setVector ve3332 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3333 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3331[0] = <ve3332,ve3333>;
resetMv mv3334[1];
setMv mv3334[0] = rc2[23];
resetMv mv3335[1];
setMv mv3335[0] = mv3331[0];
calculateMv mv3330 = DIVISION(mv3334,mv3335);
resetMv mv3336[1];
resetMv mv3337[1];
setVector ve3338 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3339 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3337[0] = <ve3338,ve3339>;
resetMv mv3340[1];
setMv mv3340[0] = rc2[24];
resetMv mv3341[1];
setMv mv3341[0] = mv3337[0];
calculateMv mv3336 = DIVISION(mv3340,mv3341);
resetMv mv3342[1];
resetMv mv3343[1];
setVector ve3344 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3345 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3343[0] = <ve3344,ve3345>;
resetMv mv3346[1];
setMv mv3346[0] = rc2[-9];
resetMv mv3347[1];
setMv mv3347[0] = mv3343[0];
calculateMv mv3342 = DIVISION(mv3346,mv3347);
resetMv mv3348[1];
resetMv mv3349[1];
setVector ve3350 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3351 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3349[0] = <ve3350,ve3351>;
resetMv mv3352[1];
setMv mv3352[0] = rc2[27];
resetMv mv3353[1];
setMv mv3353[0] = mv3349[0];
calculateMv mv3348 = DIVISION(mv3352,mv3353);
resetMv mv3354[1];
resetMv mv3355[1];
setVector ve3356 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3357 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3355[0] = <ve3356,ve3357>;
resetMv mv3358[1];
setMv mv3358[0] = rc2[28];
resetMv mv3359[1];
setMv mv3359[0] = mv3355[0];
calculateMv mv3354 = DIVISION(mv3358,mv3359);
resetMv mv3360[1];
resetMv mv3361[1];
setVector ve3362 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3363 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3361[0] = <ve3362,ve3363>;
resetMv mv3364[1];
setMv mv3364[0] = rc2[-14];
resetMv mv3365[1];
setMv mv3365[0] = mv3361[0];
calculateMv mv3360 = DIVISION(mv3364,mv3365);
resetMv mv3366[1];
resetMv mv3367[1];
setVector ve3368 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3369 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3367[0] = <ve3368,ve3369>;
resetMv mv3370[1];
setMv mv3370[0] = rc2[-15];
resetMv mv3371[1];
setMv mv3371[0] = mv3367[0];
calculateMv mv3366 = DIVISION(mv3370,mv3371);
resetMv mv3372[1];
resetMv mv3373[1];
setVector ve3374 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3375 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3373[0] = <ve3374,ve3375>;
resetMv mv3376[1];
setMv mv3376[0] = rc2[30];
resetMv mv3377[1];
setMv mv3377[0] = mv3373[0];
calculateMv mv3372 = DIVISION(mv3376,mv3377);
resetMv mv3378[1];
resetMv mv3379[1];
setVector ve3380 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3381 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3379[0] = <ve3380,ve3381>;
resetMv mv3382[1];
setMv mv3382[0] = rc2[20];
resetMv mv3383[1];
setMv mv3383[0] = mv3379[0];
calculateMv mv3378 = DIVISION(mv3382,mv3383);
resetMv mv3384[1];
resetMv mv3385[1];
setVector ve3386 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3387 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3385[0] = <ve3386,ve3387>;
resetMv mv3388[1];
setMv mv3388[0] = rc2[21];
resetMv mv3389[1];
setMv mv3389[0] = mv3385[0];
calculateMv mv3384 = DIVISION(mv3388,mv3389);
resetMv mv3390[1];
resetMv mv3391[1];
setVector ve3392 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3393 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3391[0] = <ve3392,ve3393>;
resetMv mv3394[1];
setMv mv3394[0] = rc2[-31];
resetMv mv3395[1];
setMv mv3395[0] = mv3391[0];
calculateMv mv3390 = DIVISION(mv3394,mv3395);
resetMv mv3396[1];
resetMv mv3397[1];
setVector ve3398 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3399 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3397[0] = <ve3398,ve3399>;
resetMv mv3400[1];
setMv mv3400[0] = rc2[25];
resetMv mv3401[1];
setMv mv3401[0] = mv3397[0];
calculateMv mv3396 = DIVISION(mv3400,mv3401);
resetMv mv3402[1];
resetMv mv3403[1];
setVector ve3404 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3405 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3403[0] = <ve3404,ve3405>;
resetMv mv3406[1];
setMv mv3406[0] = rc2[29];
resetMv mv3407[1];
setMv mv3407[0] = mv3403[0];
calculateMv mv3402 = DIVISION(mv3406,mv3407);
setVector ve3408 = rc2[-0,-1,-2,3,-5,6,-7,9,-10,12,-14,-16,18,-20,-23,27];
resetMv mv3410[16];
setMv mv3410[7] = mv3354[0];
setMv mv3410[13] = mv3390[0];
setMv mv3410[1] = mv3318[0];
setMv mv3410[11] = mv3378[0];
setMv mv3410[12] = mv3384[0];
setMv mv3410[14] = mv3396[0];
setMv mv3410[6] = mv3348[0];
setMv mv3410[9] = mv3366[0];
setMv mv3410[10] = mv3372[0];
setMv mv3410[15] = mv3402[0];
setMv mv3410[5] = mv3342[0];
setMv mv3410[8] = mv3360[0];
setMv mv3410[3] = mv3330[0];
setMv mv3410[2] = mv3324[0];
setMv mv3410[4] = mv3336[0];
setMv mv3410[0] = mv3312[0];
setVector ve3409 = mv3410[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
dotVectors rc2N[2] = <ve3408,ve3409>;

//rc2N[3] = ((((((((((((((((-(rc2[0])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[2])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[3])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[5])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[6])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[7])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[9])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[10])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[12])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[14])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[16])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[18])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[20])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[23])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[27])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv mv3411[1];
resetMv mv3412[1];
setVector ve3413 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3414 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3412[0] = <ve3413,ve3414>;
resetMv mv3415[1];
setMv mv3415[0] = rc2[-14];
resetMv mv3416[1];
setMv mv3416[0] = mv3412[0];
calculateMv mv3411 = DIVISION(mv3415,mv3416);
resetMv mv3417[1];
resetMv mv3418[1];
setVector ve3419 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3420 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3418[0] = <ve3419,ve3420>;
resetMv mv3421[1];
setMv mv3421[0] = rc2[20];
resetMv mv3422[1];
setMv mv3422[0] = mv3418[0];
calculateMv mv3417 = DIVISION(mv3421,mv3422);
resetMv mv3423[1];
resetMv mv3424[1];
setVector ve3425 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3426 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3424[0] = <ve3425,ve3426>;
resetMv mv3427[1];
setMv mv3427[0] = rc2[23];
resetMv mv3428[1];
setMv mv3428[0] = mv3424[0];
calculateMv mv3423 = DIVISION(mv3427,mv3428);
resetMv mv3429[1];
resetMv mv3430[1];
setVector ve3431 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3432 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3430[0] = <ve3431,ve3432>;
resetMv mv3433[1];
setMv mv3433[0] = rc2[-5];
resetMv mv3434[1];
setMv mv3434[0] = mv3430[0];
calculateMv mv3429 = DIVISION(mv3433,mv3434);
resetMv mv3435[1];
resetMv mv3436[1];
setVector ve3437 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3438 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3436[0] = <ve3437,ve3438>;
resetMv mv3439[1];
setMv mv3439[0] = rc2[25];
resetMv mv3440[1];
setMv mv3440[0] = mv3436[0];
calculateMv mv3435 = DIVISION(mv3439,mv3440);
resetMv mv3441[1];
resetMv mv3442[1];
setVector ve3443 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3444 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3442[0] = <ve3443,ve3444>;
resetMv mv3445[1];
setMv mv3445[0] = rc2[27];
resetMv mv3446[1];
setMv mv3446[0] = mv3442[0];
calculateMv mv3441 = DIVISION(mv3445,mv3446);
resetMv mv3447[1];
resetMv mv3448[1];
setVector ve3449 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3450 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3448[0] = <ve3449,ve3450>;
resetMv mv3451[1];
setMv mv3451[0] = rc2[-9];
resetMv mv3452[1];
setMv mv3452[0] = mv3448[0];
calculateMv mv3447 = DIVISION(mv3451,mv3452);
resetMv mv3453[1];
resetMv mv3454[1];
setVector ve3455 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3456 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3454[0] = <ve3455,ve3456>;
resetMv mv3457[1];
setMv mv3457[0] = rc2[29];
resetMv mv3458[1];
setMv mv3458[0] = mv3454[0];
calculateMv mv3453 = DIVISION(mv3457,mv3458);
resetMv mv3459[1];
resetMv mv3460[1];
setVector ve3461 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3462 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3460[0] = <ve3461,ve3462>;
resetMv mv3463[1];
setMv mv3463[0] = rc2[-12];
resetMv mv3464[1];
setMv mv3464[0] = mv3460[0];
calculateMv mv3459 = DIVISION(mv3463,mv3464);
resetMv mv3465[1];
resetMv mv3466[1];
setVector ve3467 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3468 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3466[0] = <ve3467,ve3468>;
resetMv mv3469[1];
setMv mv3469[0] = rc2[30];
resetMv mv3470[1];
setMv mv3470[0] = mv3466[0];
calculateMv mv3465 = DIVISION(mv3469,mv3470);
resetMv mv3471[1];
resetMv mv3472[1];
setVector ve3473 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3474 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3472[0] = <ve3473,ve3474>;
resetMv mv3475[1];
setMv mv3475[0] = rc2[-15];
resetMv mv3476[1];
setMv mv3476[0] = mv3472[0];
calculateMv mv3471 = DIVISION(mv3475,mv3476);
resetMv mv3477[1];
resetMv mv3478[1];
setVector ve3479 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3480 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3478[0] = <ve3479,ve3480>;
resetMv mv3481[1];
setMv mv3481[0] = rc2[18];
resetMv mv3482[1];
setMv mv3482[0] = mv3478[0];
calculateMv mv3477 = DIVISION(mv3481,mv3482);
resetMv mv3483[1];
resetMv mv3484[1];
setVector ve3485 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3486 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3484[0] = <ve3485,ve3486>;
resetMv mv3487[1];
setMv mv3487[0] = rc2[-31];
resetMv mv3488[1];
setMv mv3488[0] = mv3484[0];
calculateMv mv3483 = DIVISION(mv3487,mv3488);
resetMv mv3489[1];
resetMv mv3490[1];
setVector ve3491 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3492 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3490[0] = <ve3491,ve3492>;
resetMv mv3493[1];
setMv mv3493[0] = rc2[21];
resetMv mv3494[1];
setMv mv3494[0] = mv3490[0];
calculateMv mv3489 = DIVISION(mv3493,mv3494);
resetMv mv3495[1];
resetMv mv3496[1];
setVector ve3497 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3498 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3496[0] = <ve3497,ve3498>;
resetMv mv3499[1];
setMv mv3499[0] = rc2[24];
resetMv mv3500[1];
setMv mv3500[0] = mv3496[0];
calculateMv mv3495 = DIVISION(mv3499,mv3500);
resetMv mv3501[1];
resetMv mv3502[1];
setVector ve3503 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3504 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3502[0] = <ve3503,ve3504>;
resetMv mv3505[1];
setMv mv3505[0] = rc2[28];
resetMv mv3506[1];
setMv mv3506[0] = mv3502[0];
calculateMv mv3501 = DIVISION(mv3505,mv3506);
setVector ve3507 = rc2[-0,-1,-2,-3,-5,6,7,9,10,12,14,16,18,20,23,-27];
resetMv mv3509[16];
setMv mv3509[4] = mv3435[0];
setMv mv3509[7] = mv3453[0];
setMv mv3509[15] = mv3501[0];
setMv mv3509[2] = mv3423[0];
setMv mv3509[6] = mv3447[0];
setMv mv3509[8] = mv3459[0];
setMv mv3509[0] = mv3411[0];
setMv mv3509[5] = mv3441[0];
setMv mv3509[14] = mv3495[0];
setMv mv3509[1] = mv3417[0];
setMv mv3509[12] = mv3483[0];
setMv mv3509[10] = mv3471[0];
setMv mv3509[11] = mv3477[0];
setMv mv3509[9] = mv3465[0];
setMv mv3509[13] = mv3489[0];
setMv mv3509[3] = mv3429[0];
setVector ve3508 = mv3509[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
dotVectors rc2N[3] = <ve3507,ve3508>;

//rc2N[4] = ((((((((((((((((((((((((-(rc2[0])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[2])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[3])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[4])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[6])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[7])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[8])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[10])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[11])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[13])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[15])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[16])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[17])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[19])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[21])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[22])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[24])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[25])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[26])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[28])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[29])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[30])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[31])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv mv3510[1];
resetMv mv3511[1];
setVector ve3512 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3513 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3511[0] = <ve3512,ve3513>;
resetMv mv3514[1];
setMv mv3514[0] = rc2[-15];
resetMv mv3515[1];
setMv mv3515[0] = mv3511[0];
calculateMv mv3510 = DIVISION(mv3514,mv3515);
resetMv mv3516[1];
resetMv mv3517[1];
setVector ve3518 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3519 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3517[0] = <ve3518,ve3519>;
resetMv mv3520[1];
setMv mv3520[0] = rc2[21];
resetMv mv3521[1];
setMv mv3521[0] = mv3517[0];
calculateMv mv3516 = DIVISION(mv3520,mv3521);
resetMv mv3522[1];
resetMv mv3523[1];
setVector ve3524 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3525 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3523[0] = <ve3524,ve3525>;
resetMv mv3526[1];
setMv mv3526[0] = rc2[24];
resetMv mv3527[1];
setMv mv3527[0] = mv3523[0];
calculateMv mv3522 = DIVISION(mv3526,mv3527);
resetMv mv3528[1];
resetMv mv3529[1];
setVector ve3530 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3531 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3529[0] = <ve3530,ve3531>;
resetMv mv3532[1];
setMv mv3532[0] = rc2[25];
resetMv mv3533[1];
setMv mv3533[0] = mv3529[0];
calculateMv mv3528 = DIVISION(mv3532,mv3533);
resetMv mv3534[1];
resetMv mv3535[1];
setVector ve3536 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3537 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3535[0] = <ve3536,ve3537>;
resetMv mv3538[1];
setMv mv3538[0] = rc2[-5];
resetMv mv3539[1];
setMv mv3539[0] = mv3535[0];
calculateMv mv3534 = DIVISION(mv3538,mv3539);
resetMv mv3540[1];
resetMv mv3541[1];
setVector ve3542 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3543 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3541[0] = <ve3542,ve3543>;
resetMv mv3544[1];
setMv mv3544[0] = rc2[28];
resetMv mv3545[1];
setMv mv3545[0] = mv3541[0];
calculateMv mv3540 = DIVISION(mv3544,mv3545);
resetMv mv3546[1];
resetMv mv3547[1];
setVector ve3548 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3549 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3547[0] = <ve3548,ve3549>;
resetMv mv3550[1];
setMv mv3550[0] = rc2[29];
resetMv mv3551[1];
setMv mv3551[0] = mv3547[0];
calculateMv mv3546 = DIVISION(mv3550,mv3551);
resetMv mv3552[1];
resetMv mv3553[1];
setVector ve3554 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3555 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3553[0] = <ve3554,ve3555>;
resetMv mv3556[1];
setMv mv3556[0] = rc2[-9];
resetMv mv3557[1];
setMv mv3557[0] = mv3553[0];
calculateMv mv3552 = DIVISION(mv3556,mv3557);
resetMv mv3558[1];
resetMv mv3559[1];
setVector ve3560 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3561 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3559[0] = <ve3560,ve3561>;
resetMv mv3562[1];
setMv mv3562[0] = rc2[30];
resetMv mv3563[1];
setMv mv3563[0] = mv3559[0];
calculateMv mv3558 = DIVISION(mv3562,mv3563);
resetMv mv3564[1];
resetMv mv3565[1];
setVector ve3566 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3567 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3565[0] = <ve3566,ve3567>;
resetMv mv3568[1];
setMv mv3568[0] = rc2[-12];
resetMv mv3569[1];
setMv mv3569[0] = mv3565[0];
calculateMv mv3564 = DIVISION(mv3568,mv3569);
resetMv mv3570[1];
resetMv mv3571[1];
setVector ve3572 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3573 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3571[0] = <ve3572,ve3573>;
resetMv mv3574[1];
setMv mv3574[0] = rc2[-14];
resetMv mv3575[1];
setMv mv3575[0] = mv3571[0];
calculateMv mv3570 = DIVISION(mv3574,mv3575);
resetMv mv3576[1];
resetMv mv3577[1];
setVector ve3578 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3579 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3577[0] = <ve3578,ve3579>;
resetMv mv3580[1];
setMv mv3580[0] = rc2[-15];
resetMv mv3581[1];
setMv mv3581[0] = mv3577[0];
calculateMv mv3576 = DIVISION(mv3580,mv3581);
resetMv mv3582[1];
resetMv mv3583[1];
setVector ve3584 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3585 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3583[0] = <ve3584,ve3585>;
resetMv mv3586[1];
setMv mv3586[0] = rc2[-31];
resetMv mv3587[1];
setMv mv3587[0] = mv3583[0];
calculateMv mv3582 = DIVISION(mv3586,mv3587);
resetMv mv3588[1];
resetMv mv3589[1];
setVector ve3590 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3591 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3589[0] = <ve3590,ve3591>;
resetMv mv3592[1];
setMv mv3592[0] = rc2[18];
resetMv mv3593[1];
setMv mv3593[0] = mv3589[0];
calculateMv mv3588 = DIVISION(mv3592,mv3593);
resetMv mv3594[1];
resetMv mv3595[1];
setVector ve3596 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3597 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3595[0] = <ve3596,ve3597>;
resetMv mv3598[1];
setMv mv3598[0] = rc2[20];
resetMv mv3599[1];
setMv mv3599[0] = mv3595[0];
calculateMv mv3594 = DIVISION(mv3598,mv3599);
resetMv mv3600[1];
resetMv mv3601[1];
setVector ve3602 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3603 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3601[0] = <ve3602,ve3603>;
resetMv mv3604[1];
setMv mv3604[0] = rc2[21];
resetMv mv3605[1];
setMv mv3605[0] = mv3601[0];
calculateMv mv3600 = DIVISION(mv3604,mv3605);
resetMv mv3606[1];
resetMv mv3607[1];
setVector ve3608 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3609 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3607[0] = <ve3608,ve3609>;
resetMv mv3610[1];
setMv mv3610[0] = rc2[23];
resetMv mv3611[1];
setMv mv3611[0] = mv3607[0];
calculateMv mv3606 = DIVISION(mv3610,mv3611);
resetMv mv3612[1];
resetMv mv3613[1];
setVector ve3614 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3615 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3613[0] = <ve3614,ve3615>;
resetMv mv3616[1];
setMv mv3616[0] = rc2[24];
resetMv mv3617[1];
setMv mv3617[0] = mv3613[0];
calculateMv mv3612 = DIVISION(mv3616,mv3617);
resetMv mv3618[1];
resetMv mv3619[1];
setVector ve3620 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3621 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3619[0] = <ve3620,ve3621>;
resetMv mv3622[1];
setMv mv3622[0] = rc2[25];
resetMv mv3623[1];
setMv mv3623[0] = mv3619[0];
calculateMv mv3618 = DIVISION(mv3622,mv3623);
resetMv mv3624[1];
resetMv mv3625[1];
setVector ve3626 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3627 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3625[0] = <ve3626,ve3627>;
resetMv mv3628[1];
setMv mv3628[0] = rc2[27];
resetMv mv3629[1];
setMv mv3629[0] = mv3625[0];
calculateMv mv3624 = DIVISION(mv3628,mv3629);
resetMv mv3630[1];
resetMv mv3631[1];
setVector ve3632 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3633 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3631[0] = <ve3632,ve3633>;
resetMv mv3634[1];
setMv mv3634[0] = rc2[28];
resetMv mv3635[1];
setMv mv3635[0] = mv3631[0];
calculateMv mv3630 = DIVISION(mv3634,mv3635);
resetMv mv3636[1];
resetMv mv3637[1];
setVector ve3638 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3639 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3637[0] = <ve3638,ve3639>;
resetMv mv3640[1];
setMv mv3640[0] = rc2[29];
resetMv mv3641[1];
setMv mv3641[0] = mv3637[0];
calculateMv mv3636 = DIVISION(mv3640,mv3641);
resetMv mv3642[1];
resetMv mv3643[1];
setVector ve3644 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3645 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3643[0] = <ve3644,ve3645>;
resetMv mv3646[1];
setMv mv3646[0] = rc2[30];
resetMv mv3647[1];
setMv mv3647[0] = mv3643[0];
calculateMv mv3642 = DIVISION(mv3646,mv3647);
resetMv mv3648[1];
resetMv mv3649[1];
setVector ve3650 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3651 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3649[0] = <ve3650,ve3651>;
resetMv mv3652[1];
setMv mv3652[0] = rc2[-31];
resetMv mv3653[1];
setMv mv3653[0] = mv3649[0];
calculateMv mv3648 = DIVISION(mv3652,mv3653);
setVector ve3654 = rc2[-0,-1,-2,-3,-4,6,7,8,10,11,13,15,16,17,19,21,22,24,25,-26,-28,-29,-30,-31];
resetMv mv3656[24];
setMv mv3656[5] = mv3540[0];
setMv mv3656[2] = mv3522[0];
setMv mv3656[23] = mv3648[0];
setMv mv3656[15] = mv3600[0];
setMv mv3656[4] = mv3534[0];
setMv mv3656[10] = mv3570[0];
setMv mv3656[0] = mv3510[0];
setMv mv3656[17] = mv3612[0];
setMv mv3656[6] = mv3546[0];
setMv mv3656[9] = mv3564[0];
setMv mv3656[8] = mv3558[0];
setMv mv3656[11] = mv3576[0];
setMv mv3656[7] = mv3552[0];
setMv mv3656[13] = mv3588[0];
setMv mv3656[18] = mv3618[0];
setMv mv3656[22] = mv3642[0];
setMv mv3656[19] = mv3624[0];
setMv mv3656[21] = mv3636[0];
setMv mv3656[3] = mv3528[0];
setMv mv3656[16] = mv3606[0];
setMv mv3656[20] = mv3630[0];
setMv mv3656[14] = mv3594[0];
setMv mv3656[1] = mv3516[0];
setMv mv3656[12] = mv3582[0];
setVector ve3655 = mv3656[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23];
dotVectors rc2N[4] = <ve3654,ve3655>;

//rc2N[5] = ((((((((-(rc2[5])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + (-((-(rc2[9])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[12])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[14])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[18])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[20])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[23])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[27])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv mv3657[1];
resetMv mv3658[1];
setVector ve3659 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3660 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3658[0] = <ve3659,ve3660>;
resetMv mv3661[1];
setMv mv3661[0] = rc2[-5];
resetMv mv3662[1];
setMv mv3662[0] = mv3658[0];
calculateMv mv3657 = DIVISION(mv3661,mv3662);
resetMv mv3663[1];
resetMv mv3664[1];
setVector ve3665 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3666 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3664[0] = <ve3665,ve3666>;
resetMv mv3667[1];
setMv mv3667[0] = rc2[-9];
resetMv mv3668[1];
setMv mv3668[0] = mv3664[0];
calculateMv mv3663 = DIVISION(mv3667,mv3668);
resetMv mv3669[1];
resetMv mv3670[1];
setVector ve3671 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3672 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3670[0] = <ve3671,ve3672>;
resetMv mv3673[1];
setMv mv3673[0] = rc2[-12];
resetMv mv3674[1];
setMv mv3674[0] = mv3670[0];
calculateMv mv3669 = DIVISION(mv3673,mv3674);
resetMv mv3675[1];
resetMv mv3676[1];
setVector ve3677 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3678 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3676[0] = <ve3677,ve3678>;
resetMv mv3679[1];
setMv mv3679[0] = rc2[-14];
resetMv mv3680[1];
setMv mv3680[0] = mv3676[0];
calculateMv mv3675 = DIVISION(mv3679,mv3680);
resetMv mv3681[1];
resetMv mv3682[1];
setVector ve3683 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3684 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3682[0] = <ve3683,ve3684>;
resetMv mv3685[1];
setMv mv3685[0] = rc2[18];
resetMv mv3686[1];
setMv mv3686[0] = mv3682[0];
calculateMv mv3681 = DIVISION(mv3685,mv3686);
resetMv mv3687[1];
resetMv mv3688[1];
setVector ve3689 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3690 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3688[0] = <ve3689,ve3690>;
resetMv mv3691[1];
setMv mv3691[0] = rc2[20];
resetMv mv3692[1];
setMv mv3692[0] = mv3688[0];
calculateMv mv3687 = DIVISION(mv3691,mv3692);
resetMv mv3693[1];
resetMv mv3694[1];
setVector ve3695 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3696 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3694[0] = <ve3695,ve3696>;
resetMv mv3697[1];
setMv mv3697[0] = rc2[23];
resetMv mv3698[1];
setMv mv3698[0] = mv3694[0];
calculateMv mv3693 = DIVISION(mv3697,mv3698);
resetMv mv3699[1];
resetMv mv3700[1];
setVector ve3701 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3702 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3700[0] = <ve3701,ve3702>;
resetMv mv3703[1];
setMv mv3703[0] = rc2[27];
resetMv mv3704[1];
setMv mv3704[0] = mv3700[0];
calculateMv mv3699 = DIVISION(mv3703,mv3704);
setVector ve3705 = rc2[-5,9,12,14,18,20,23,-27];
resetMv mv3707[8];
setMv mv3707[5] = mv3687[0];
setMv mv3707[2] = mv3669[0];
setMv mv3707[7] = mv3699[0];
setMv mv3707[3] = mv3675[0];
setMv mv3707[1] = mv3663[0];
setMv mv3707[6] = mv3693[0];
setMv mv3707[4] = mv3681[0];
setMv mv3707[0] = mv3657[0];
setVector ve3706 = mv3707[0,1,2,3,4,5,6,7];
dotVectors rc2N[5] = <ve3705,ve3706>;

//temp3[0] = -2.0 * (((((rc1N[1] * inputsVector[10]) + (rc1N[2] * inputsVector[9])) + (rc1N[3] * inputsVector[7])) + (-(rc1N[4]))) + (-(rc1N[5] * sat1[4])))
resetMv temp3[32];
resetMv mv3708[1];
setVector ve3709 = rc1N[1,2,3,-4,-5];
resetMv mv3711[5];
setMv mv3711[0,1,2] = inputsVector[10,9,7];
setMv mv3711[4] = sat1[4];
assignMv mv3711[3] = [1.0];
setVector ve3710 = mv3711[0,1,2,3,4];
dotVectors mv3708[0] = <ve3709,ve3710>;
resetMv mv3713[1];
assignMv mv3713[0] = [-2.0];
setVector ve3712 = mv3713[0];
setVector ve3714 = mv3708[0];
dotVectors temp3[0] = <ve3712,ve3714>;

//temp4 = sqrt(temp3)
resetMv temp4[32];
calculateMv temp4 = SQRT(temp3);

//z11[0] = temp4[0] - inputsVector[0]
resetMv z11[32];
resetMv mv3716[2];
setMv mv3716[1] = inputsVector[-0];
setMv mv3716[0] = temp4[0];
setVector ve3715 = mv3716[0,1];
dotVectors z11[0] = <ve3715>;

//temp5[0] = -2.0 * (((((rc2N[1] * inputsVector[10]) + (rc2N[2] * inputsVector[9])) + (rc2N[3] * inputsVector[7])) + (-(rc2N[4]))) + (-(rc2N[5] * sat1[4])))
resetMv temp5[32];
resetMv mv3717[1];
setVector ve3718 = rc2N[1,2,3,-4,-5];
resetMv mv3720[5];
setMv mv3720[0,1,2] = inputsVector[10,9,7];
setMv mv3720[4] = sat1[4];
assignMv mv3720[3] = [1.0];
setVector ve3719 = mv3720[0,1,2,3,4];
dotVectors mv3717[0] = <ve3718,ve3719>;
resetMv mv3722[1];
assignMv mv3722[0] = [-2.0];
setVector ve3721 = mv3722[0];
setVector ve3723 = mv3717[0];
dotVectors temp5[0] = <ve3721,ve3723>;

//temp6 = sqrt(temp5)
resetMv temp6[32];
calculateMv temp6 = SQRT(temp5);

//z12[0] = temp6[0] - inputsVector[0]
resetMv z12[32];
resetMv mv3725[2];
setMv mv3725[1] = inputsVector[-0];
setMv mv3725[0] = temp6[0];
setVector ve3724 = mv3725[0,1];
dotVectors z12[0] = <ve3724>;

//temp7[0] = -2.0 * (((((rc1N[1] * inputsVector[8]) + (rc1N[2] * inputsVector[6])) + (rc1N[3] * inputsVector[11])) + (-(rc1N[4]))) + (-(rc1N[5] * sat2[4])))
resetMv temp7[32];
resetMv mv3726[1];
setVector ve3727 = rc1N[1,2,3,-4,-5];
resetMv mv3729[5];
setMv mv3729[4] = sat2[4];
setMv mv3729[0,1,2] = inputsVector[8,6,11];
assignMv mv3729[3] = [1.0];
setVector ve3728 = mv3729[0,1,2,3,4];
dotVectors mv3726[0] = <ve3727,ve3728>;
resetMv mv3731[1];
assignMv mv3731[0] = [-2.0];
setVector ve3730 = mv3731[0];
setVector ve3732 = mv3726[0];
dotVectors temp7[0] = <ve3730,ve3732>;

//temp8 = sqrt(temp7)
resetMv temp8[32];
calculateMv temp8 = SQRT(temp7);

//z21[0] = temp8[0] - inputsVector[1]
resetMv z21[32];
resetMv mv3734[2];
setMv mv3734[1] = inputsVector[-1];
setMv mv3734[0] = temp8[0];
setVector ve3733 = mv3734[0,1];
dotVectors z21[0] = <ve3733>;

//temp9[0] = -2.0 * (((((rc2N[1] * inputsVector[8]) + (rc2N[2] * inputsVector[6])) + (rc2N[3] * inputsVector[11])) + (-(rc2N[4]))) + (-(rc2N[5] * sat2[4])))
resetMv temp9[32];
resetMv mv3735[1];
setVector ve3736 = rc2N[1,2,3,-4,-5];
resetMv mv3738[5];
setMv mv3738[4] = sat2[4];
setMv mv3738[0,1,2] = inputsVector[8,6,11];
assignMv mv3738[3] = [1.0];
setVector ve3737 = mv3738[0,1,2,3,4];
dotVectors mv3735[0] = <ve3736,ve3737>;
resetMv mv3740[1];
assignMv mv3740[0] = [-2.0];
setVector ve3739 = mv3740[0];
setVector ve3741 = mv3735[0];
dotVectors temp9[0] = <ve3739,ve3741>;

//temp10 = sqrt(temp9)
resetMv temp10[32];
calculateMv temp10 = SQRT(temp9);

//z22[0] = temp10[0] - inputsVector[1]
resetMv z22[32];
resetMv mv3743[2];
setMv mv3743[1] = inputsVector[-1];
setMv mv3743[0] = temp10[0];
setVector ve3742 = mv3743[0,1];
dotVectors z22[0] = <ve3742>;

//temp11[0] = -2.0 * (((((rc1N[1] * inputsVector[3]) + (rc1N[2] * inputsVector[4])) + (rc1N[3] * inputsVector[5])) + (-(rc1N[4]))) + (-(rc1N[5] * sat3[4])))
resetMv temp11[32];
resetMv mv3744[1];
setVector ve3745 = rc1N[1,2,3,-4,-5];
resetMv mv3747[5];
setMv mv3747[4] = sat3[4];
setMv mv3747[0,1,2] = inputsVector[3,4,5];
assignMv mv3747[3] = [1.0];
setVector ve3746 = mv3747[0,1,2,3,4];
dotVectors mv3744[0] = <ve3745,ve3746>;
resetMv mv3749[1];
assignMv mv3749[0] = [-2.0];
setVector ve3748 = mv3749[0];
setVector ve3750 = mv3744[0];
dotVectors temp11[0] = <ve3748,ve3750>;

//temp12 = sqrt(temp11)
resetMv temp12[32];
calculateMv temp12 = SQRT(temp11);

//z31[0] = temp12[0] - inputsVector[2]
resetMv z31[32];
resetMv mv3752[2];
setMv mv3752[0] = temp12[0];
setMv mv3752[1] = inputsVector[-2];
setVector ve3751 = mv3752[0,1];
dotVectors z31[0] = <ve3751>;

//temp13[0] = -2.0 * (((((rc2N[1] * inputsVector[3]) + (rc2N[2] * inputsVector[4])) + (rc2N[3] * inputsVector[5])) + (-(rc2N[4]))) + (-(rc2N[5] * sat3[4])))
resetMv temp13[32];
resetMv mv3753[1];
setVector ve3754 = rc2N[1,2,3,-4,-5];
resetMv mv3756[5];
setMv mv3756[4] = sat3[4];
setMv mv3756[0,1,2] = inputsVector[3,4,5];
assignMv mv3756[3] = [1.0];
setVector ve3755 = mv3756[0,1,2,3,4];
dotVectors mv3753[0] = <ve3754,ve3755>;
resetMv mv3758[1];
assignMv mv3758[0] = [-2.0];
setVector ve3757 = mv3758[0];
setVector ve3759 = mv3753[0];
dotVectors temp13[0] = <ve3757,ve3759>;

//temp14 = sqrt(temp13)
resetMv temp14[32];
calculateMv temp14 = SQRT(temp13);

//z32[0] = temp14[0] - inputsVector[2]
resetMv z32[32];
resetMv mv3761[2];
setMv mv3761[0] = temp14[0];
setMv mv3761[1] = inputsVector[-2];
setVector ve3760 = mv3761[0,1];
dotVectors z32[0] = <ve3760>;

