//sat1[1] = inputsVector[3]
assignVector inputsVector = [d1,d2,d3,sat1x,sat1y,sat1z,sat2x,sat2y,sat2z,sat3x,sat3y,sat3z];
resetMv sat1[32];
setMv sat1[1,2,3] = inputsVector[3,4,5];

//sat1[2] = inputsVector[4]

//sat1[3] = inputsVector[5]

//sat1[4] = ((inputsVector[3] * inputsVector[3]) + ((inputsVector[4] * inputsVector[4]) + (inputsVector[5] * inputsVector[5]))) / 2.0
resetMv mv0[1];
setVector ve1 = inputsVector[3,4,5];
setVector ve2 = inputsVector[3,4,5];
dotVectors mv0[0] = <ve1,ve2>;
resetMv mv3[1];
setMv mv3[0] = mv0[0];
resetMv mv4[1];
assignMv mv4[0] = [2.0];
calculateMvCoeff sat1[4] = DIVISION(mv3,mv4);

//sat1[5] = 1.0
assignMv sat1[5] = [1.0];

//sat2[1] = inputsVector[6]
resetMv sat2[32];
setMv sat2[1,2,3] = inputsVector[6,7,8];

//sat2[2] = inputsVector[7]

//sat2[3] = inputsVector[8]

//sat2[4] = ((inputsVector[6] * inputsVector[6]) + ((inputsVector[7] * inputsVector[7]) + (inputsVector[8] * inputsVector[8]))) / 2.0
resetMv mv5[1];
setVector ve6 = inputsVector[6,7,8];
setVector ve7 = inputsVector[6,7,8];
dotVectors mv5[0] = <ve6,ve7>;
resetMv mv8[1];
setMv mv8[0] = mv5[0];
resetMv mv9[1];
assignMv mv9[0] = [2.0];
calculateMvCoeff sat2[4] = DIVISION(mv8,mv9);

//sat2[5] = 1.0
assignMv sat2[5] = [1.0];

//sat3[1] = inputsVector[9]
resetMv sat3[32];
setMv sat3[1,2,3] = inputsVector[9,10,11];

//sat3[2] = inputsVector[10]

//sat3[3] = inputsVector[11]

//sat3[4] = ((inputsVector[9] * inputsVector[9]) + ((inputsVector[10] * inputsVector[10]) + (inputsVector[11] * inputsVector[11]))) / 2.0
resetMv mv10[1];
setVector ve11 = inputsVector[9,10,11];
setVector ve12 = inputsVector[9,10,11];
dotVectors mv10[0] = <ve11,ve12>;
resetMv mv13[1];
setMv mv13[0] = mv10[0];
resetMv mv14[1];
assignMv mv14[0] = [2.0];
calculateMvCoeff sat3[4] = DIVISION(mv13,mv14);

//sat3[5] = 1.0
assignMv sat3[5] = [1.0];

//sph1[1] = sat1[1]
resetMv sph1[32];
setMv sph1[1,2,3] = sat1[1,2,3];

//sph1[2] = sat1[2]

//sph1[3] = sat1[3]

//sph1[4] = sat1[4] - ((inputsVector[0] / 2.0) * inputsVector[0])
resetMv mv15[1];
resetMv mv16[1];
resetMv mv17[1];
setMv mv17[0] = inputsVector[0];
resetMv mv18[1];
assignMv mv18[0] = [2.0];
calculateMvCoeff mv16[0] = DIVISION(mv17,mv18);
setMv mv15[0] = mv16[-0];
resetMv mv20[2];
setMv mv20[0] = sat1[4];
setMv mv20[1] = mv15[0];
setVector ve19 = mv20[0,1];
resetMv mv22[2];
setMv mv22[1] = inputsVector[0];
assignMv mv22[0] = [1.0];
setVector ve21 = mv22[0,1];
dotVectors sph1[4] = <ve19,ve21>;

//sph1[5] = 1.0
assignMv sph1[5] = [1.0];

//sph2[1] = sat2[1]
resetMv sph2[32];
setMv sph2[1,2,3] = sat2[1,2,3];

//sph2[2] = sat2[2]

//sph2[3] = sat2[3]

//sph2[4] = sat2[4] - ((inputsVector[1] / 2.0) * inputsVector[1])
resetMv mv23[1];
resetMv mv24[1];
resetMv mv25[1];
setMv mv25[0] = inputsVector[1];
resetMv mv26[1];
assignMv mv26[0] = [2.0];
calculateMvCoeff mv24[0] = DIVISION(mv25,mv26);
setMv mv23[0] = mv24[-0];
resetMv mv28[2];
setMv mv28[0] = sat2[4];
setMv mv28[1] = mv23[0];
setVector ve27 = mv28[0,1];
resetMv mv30[2];
setMv mv30[1] = inputsVector[1];
assignMv mv30[0] = [1.0];
setVector ve29 = mv30[0,1];
dotVectors sph2[4] = <ve27,ve29>;

//sph2[5] = 1.0
assignMv sph2[5] = [1.0];

//sph3[1] = sat3[1]
resetMv sph3[32];
setMv sph3[1,2,3] = sat3[1,2,3];

//sph3[2] = sat3[2]

//sph3[3] = sat3[3]

//sph3[4] = sat3[4] - ((inputsVector[2] / 2.0) * inputsVector[2])
resetMv mv31[1];
resetMv mv32[1];
resetMv mv33[1];
setMv mv33[0] = inputsVector[2];
resetMv mv34[1];
assignMv mv34[0] = [2.0];
calculateMvCoeff mv32[0] = DIVISION(mv33,mv34);
setMv mv31[0] = mv32[-0];
resetMv mv36[2];
setMv mv36[1] = mv31[0];
setMv mv36[0] = sat3[4];
setVector ve35 = mv36[0,1];
resetMv mv38[2];
setMv mv38[1] = inputsVector[2];
assignMv mv38[0] = [1.0];
setVector ve37 = mv38[0,1];
dotVectors sph3[4] = <ve35,ve37>;

//sph3[5] = 1.0
assignMv sph3[5] = [1.0];

//rcPp[16] = ((((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) * sph3[3]) + (-(((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) * sph3[2]))) + (((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) * sph3[1])
resetMv rcPp[32];
resetMv mv39[1];
setVector ve40 = sph1[1,-2];
setVector ve41 = sph2[2,1];
dotVectors mv39[0] = <ve40,ve41>;
resetMv mv42[1];
resetMv mv43[1];
setVector ve44 = sph1[1,-3];
setVector ve45 = sph2[3,1];
dotVectors mv43[0] = <ve44,ve45>;
setMv mv42[0] = mv43[-0];
resetMv mv46[1];
setVector ve47 = sph1[2,-3];
setVector ve48 = sph2[3,2];
dotVectors mv46[0] = <ve47,ve48>;
resetMv mv50[3];
setMv mv50[1] = mv42[0];
setMv mv50[0] = mv39[0];
setMv mv50[2] = mv46[0];
setVector ve49 = mv50[0,1,2];
setVector ve51 = sph3[3,2,1];
dotVectors rcPp[16] = <ve49,ve51>;

//rcPp[17] = ((((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) * sph3[4]) + (-(((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) * sph3[2]))) + (((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) * sph3[1])
resetMv mv52[1];
setVector ve53 = sph1[1,-2];
setVector ve54 = sph2[2,1];
dotVectors mv52[0] = <ve53,ve54>;
resetMv mv55[1];
resetMv mv56[1];
setVector ve57 = sph1[1,-4];
setVector ve58 = sph2[4,1];
dotVectors mv56[0] = <ve57,ve58>;
setMv mv55[0] = mv56[-0];
resetMv mv59[1];
setVector ve60 = sph1[2,-4];
setVector ve61 = sph2[4,2];
dotVectors mv59[0] = <ve60,ve61>;
resetMv mv63[3];
setMv mv63[2] = mv59[0];
setMv mv63[1] = mv55[0];
setMv mv63[0] = mv52[0];
setVector ve62 = mv63[0,1,2];
setVector ve64 = sph3[4,2,1];
dotVectors rcPp[17] = <ve62,ve64>;

//rcPp[18] = (((sph1[1] * sph2[2]) + (-(sph1[2] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[2]))) + ((sph1[2] + (-(sph2[2]))) * sph3[1])
resetMv mv65[1];
resetMv mv66[1];
resetMv mv68[2];
setMv mv68[0] = sph1[1];
setMv mv68[1] = sph2[-1];
setVector ve67 = mv68[0,1];
dotVectors mv66[0] = <ve67>;
setMv mv65[0] = mv66[-0];
resetMv mv69[1];
resetMv mv71[2];
setMv mv71[0] = sph1[2];
setMv mv71[1] = sph2[-2];
setVector ve70 = mv71[0,1];
dotVectors mv69[0] = <ve70>;
resetMv mv73[4];
setMv mv73[3] = mv69[0];
setMv mv73[2] = mv65[0];
setMv mv73[0,1] = sph1[1,-2];
setVector ve72 = mv73[0,1,2,3];
resetMv mv75[4];
setMv mv75[2,3] = sph3[2,1];
setMv mv75[0,1] = sph2[2,1];
setVector ve74 = mv75[0,1,2,3];
dotVectors rcPp[18] = <ve72,ve74>;

//rcPp[19] = ((((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) * sph3[4]) + (-(((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) * sph3[3]))) + (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) * sph3[1])
resetMv mv76[1];
setVector ve77 = sph1[1,-3];
setVector ve78 = sph2[3,1];
dotVectors mv76[0] = <ve77,ve78>;
resetMv mv79[1];
resetMv mv80[1];
setVector ve81 = sph1[1,-4];
setVector ve82 = sph2[4,1];
dotVectors mv80[0] = <ve81,ve82>;
setMv mv79[0] = mv80[-0];
resetMv mv83[1];
setVector ve84 = sph1[3,-4];
setVector ve85 = sph2[4,3];
dotVectors mv83[0] = <ve84,ve85>;
resetMv mv87[3];
setMv mv87[1] = mv79[0];
setMv mv87[0] = mv76[0];
setMv mv87[2] = mv83[0];
setVector ve86 = mv87[0,1,2];
setVector ve88 = sph3[4,3,1];
dotVectors rcPp[19] = <ve86,ve88>;

//rcPp[20] = (((sph1[1] * sph2[3]) + (-(sph1[3] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[3]))) + ((sph1[3] + (-(sph2[3]))) * sph3[1])
resetMv mv89[1];
resetMv mv90[1];
resetMv mv92[2];
setMv mv92[0] = sph1[1];
setMv mv92[1] = sph2[-1];
setVector ve91 = mv92[0,1];
dotVectors mv90[0] = <ve91>;
setMv mv89[0] = mv90[-0];
resetMv mv93[1];
resetMv mv95[2];
setMv mv95[0] = sph1[3];
setMv mv95[1] = sph2[-3];
setVector ve94 = mv95[0,1];
dotVectors mv93[0] = <ve94>;
resetMv mv97[4];
setMv mv97[2] = mv89[0];
setMv mv97[3] = mv93[0];
setMv mv97[0,1] = sph1[1,-3];
setVector ve96 = mv97[0,1,2,3];
resetMv mv99[4];
setMv mv99[2,3] = sph3[3,1];
setMv mv99[0,1] = sph2[3,1];
setVector ve98 = mv99[0,1,2,3];
dotVectors rcPp[20] = <ve96,ve98>;

//rcPp[21] = (((sph1[1] * sph2[4]) + (-(sph1[4] * sph2[1]))) + (-((sph1[1] + (-(sph2[1]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[1])
resetMv mv100[1];
resetMv mv101[1];
resetMv mv103[2];
setMv mv103[0] = sph1[1];
setMv mv103[1] = sph2[-1];
setVector ve102 = mv103[0,1];
dotVectors mv101[0] = <ve102>;
setMv mv100[0] = mv101[-0];
resetMv mv104[1];
resetMv mv106[2];
setMv mv106[0] = sph1[4];
setMv mv106[1] = sph2[-4];
setVector ve105 = mv106[0,1];
dotVectors mv104[0] = <ve105>;
resetMv mv108[4];
setMv mv108[3] = mv104[0];
setMv mv108[2] = mv100[0];
setMv mv108[0,1] = sph1[1,-4];
setVector ve107 = mv108[0,1,2,3];
resetMv mv110[4];
setMv mv110[2,3] = sph3[4,1];
setMv mv110[0,1] = sph2[4,1];
setVector ve109 = mv110[0,1,2,3];
dotVectors rcPp[21] = <ve107,ve109>;

//rcPp[22] = ((((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) * sph3[4]) + (-(((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) * sph3[3]))) + (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) * sph3[2])
resetMv mv111[1];
setVector ve112 = sph1[2,-3];
setVector ve113 = sph2[3,2];
dotVectors mv111[0] = <ve112,ve113>;
resetMv mv114[1];
resetMv mv115[1];
setVector ve116 = sph1[2,-4];
setVector ve117 = sph2[4,2];
dotVectors mv115[0] = <ve116,ve117>;
setMv mv114[0] = mv115[-0];
resetMv mv118[1];
setVector ve119 = sph1[3,-4];
setVector ve120 = sph2[4,3];
dotVectors mv118[0] = <ve119,ve120>;
resetMv mv122[3];
setMv mv122[0] = mv111[0];
setMv mv122[1] = mv114[0];
setMv mv122[2] = mv118[0];
setVector ve121 = mv122[0,1,2];
setVector ve123 = sph3[4,3,2];
dotVectors rcPp[22] = <ve121,ve123>;

//rcPp[23] = (((sph1[2] * sph2[3]) + (-(sph1[3] * sph2[2]))) + (-((sph1[2] + (-(sph2[2]))) * sph3[3]))) + ((sph1[3] + (-(sph2[3]))) * sph3[2])
resetMv mv124[1];
resetMv mv125[1];
resetMv mv127[2];
setMv mv127[0] = sph1[2];
setMv mv127[1] = sph2[-2];
setVector ve126 = mv127[0,1];
dotVectors mv125[0] = <ve126>;
setMv mv124[0] = mv125[-0];
resetMv mv128[1];
resetMv mv130[2];
setMv mv130[0] = sph1[3];
setMv mv130[1] = sph2[-3];
setVector ve129 = mv130[0,1];
dotVectors mv128[0] = <ve129>;
resetMv mv132[4];
setMv mv132[2] = mv124[0];
setMv mv132[3] = mv128[0];
setMv mv132[0,1] = sph1[2,-3];
setVector ve131 = mv132[0,1,2,3];
resetMv mv134[4];
setMv mv134[2,3] = sph3[3,2];
setMv mv134[0,1] = sph2[3,2];
setVector ve133 = mv134[0,1,2,3];
dotVectors rcPp[23] = <ve131,ve133>;

//rcPp[24] = (((sph1[2] * sph2[4]) + (-(sph1[4] * sph2[2]))) + (-((sph1[2] + (-(sph2[2]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[2])
resetMv mv135[1];
resetMv mv136[1];
resetMv mv138[2];
setMv mv138[0] = sph1[2];
setMv mv138[1] = sph2[-2];
setVector ve137 = mv138[0,1];
dotVectors mv136[0] = <ve137>;
setMv mv135[0] = mv136[-0];
resetMv mv139[1];
resetMv mv141[2];
setMv mv141[0] = sph1[4];
setMv mv141[1] = sph2[-4];
setVector ve140 = mv141[0,1];
dotVectors mv139[0] = <ve140>;
resetMv mv143[4];
setMv mv143[2] = mv135[0];
setMv mv143[3] = mv139[0];
setMv mv143[0,1] = sph1[2,-4];
setVector ve142 = mv143[0,1,2,3];
resetMv mv145[4];
setMv mv145[2,3] = sph3[4,2];
setMv mv145[0,1] = sph2[4,2];
setVector ve144 = mv145[0,1,2,3];
dotVectors rcPp[24] = <ve142,ve144>;

//rcPp[25] = (((sph1[3] * sph2[4]) + (-(sph1[4] * sph2[3]))) + (-((sph1[3] + (-(sph2[3]))) * sph3[4]))) + ((sph1[4] + (-(sph2[4]))) * sph3[3])
resetMv mv146[1];
resetMv mv147[1];
resetMv mv149[2];
setMv mv149[0] = sph1[3];
setMv mv149[1] = sph2[-3];
setVector ve148 = mv149[0,1];
dotVectors mv147[0] = <ve148>;
setMv mv146[0] = mv147[-0];
resetMv mv150[1];
resetMv mv152[2];
setMv mv152[0] = sph1[4];
setMv mv152[1] = sph2[-4];
setVector ve151 = mv152[0,1];
dotVectors mv150[0] = <ve151>;
resetMv mv154[4];
setMv mv154[2] = mv146[0];
setMv mv154[0,1] = sph1[3,-4];
setMv mv154[3] = mv150[0];
setVector ve153 = mv154[0,1,2,3];
resetMv mv156[4];
setMv mv156[2,3] = sph3[4,3];
setMv mv156[0,1] = sph2[4,3];
setVector ve155 = mv156[0,1,2,3];
dotVectors rcPp[25] = <ve153,ve155>;

//temp0[0] = (((((((((-(rcPp[16] * rcPp[16])) + (rcPp[17] * rcPp[18])) + (rcPp[18] * rcPp[17])) + (rcPp[19] * rcPp[20])) + (rcPp[20] * rcPp[19])) + (rcPp[21] * rcPp[21])) + (rcPp[22] * rcPp[23])) + (rcPp[23] * rcPp[22])) + (rcPp[24] * rcPp[24])) + (rcPp[25] * rcPp[25])
resetMv temp0[32];
setVector ve157 = rcPp[-16,17,18,19,20,21,22,23,24,25];
setVector ve158 = rcPp[16,18,17,20,19,21,23,22,24,25];
dotVectors temp0[0] = <ve157,ve158>;

//temp1 = abs(temp0)
resetMv temp1[32];
calculateMv temp1 = ABS(temp0);

//temp2 = sqrt(temp1)
resetMv temp2[32];
calculateMv temp2 = SQRT(temp1);

//len[0] = temp2[0]
resetMv len[32];
setMv len[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31] = temp2[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31];

//len[1] = temp2[1]

//len[2] = temp2[2]

//len[3] = temp2[3]

//len[4] = temp2[4]

//len[5] = temp2[5]

//len[6] = temp2[6]

//len[7] = temp2[7]

//len[8] = temp2[8]

//len[9] = temp2[9]

//len[10] = temp2[10]

//len[11] = temp2[11]

//len[12] = temp2[12]

//len[13] = temp2[13]

//len[14] = temp2[14]

//len[15] = temp2[15]

//len[16] = temp2[16]

//len[17] = temp2[17]

//len[18] = temp2[18]

//len[19] = temp2[19]

//len[20] = temp2[20]

//len[21] = temp2[21]

//len[22] = temp2[22]

//len[23] = temp2[23]

//len[24] = temp2[24]

//len[25] = temp2[25]

//len[26] = temp2[26]

//len[27] = temp2[27]

//len[28] = temp2[28]

//len[29] = temp2[29]

//len[30] = temp2[30]

//len[31] = temp2[31]

//rcPpDual[6] = -(rcPp[25])
resetMv rcPpDual[32];
setMv rcPpDual[6,7,8,9,10,11,12,13,14,15] = rcPp[-25,24,-22,23,-21,19,-20,-17,18,16];

//rcPpDual[7] = rcPp[24]

//rcPpDual[8] = -(rcPp[22])

//rcPpDual[9] = rcPp[23]

//rcPpDual[10] = -(rcPp[21])

//rcPpDual[11] = rcPp[19]

//rcPpDual[12] = -(rcPp[20])

//rcPpDual[13] = -(rcPp[17])

//rcPpDual[14] = rcPp[18]

//rcPpDual[15] = rcPp[16]

//nen[1] = rcPpDual[9]
resetMv nen[32];
setMv nen[1,2,3,4] = rcPpDual[9,12,14,15];

//nen[2] = rcPpDual[12]

//nen[3] = rcPpDual[14]

//nen[4] = rcPpDual[15]

//rc1[0] = (((len[1] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (len[2] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[3] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[5] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv rc1[32];
resetMv mv159[1];
resetMv mv160[1];
setVector ve161 = nen[1,2,3];
setVector ve162 = nen[1,2,3];
dotVectors mv160[0] = <ve161,ve162>;
resetMv mv163[1];
setMv mv163[0] = nen[1];
resetMv mv164[1];
setMv mv164[0] = mv160[0];
calculateMvCoeff mv159[0] = DIVISION(mv163,mv164);
resetMv mv165[1];
resetMv mv166[1];
setVector ve167 = nen[1,2,3];
setVector ve168 = nen[1,2,3];
dotVectors mv166[0] = <ve167,ve168>;
resetMv mv169[1];
setMv mv169[0] = nen[2];
resetMv mv170[1];
setMv mv170[0] = mv166[0];
calculateMvCoeff mv165[0] = DIVISION(mv169,mv170);
resetMv mv171[1];
resetMv mv172[1];
setVector ve173 = nen[1,2,3];
setVector ve174 = nen[1,2,3];
dotVectors mv172[0] = <ve173,ve174>;
resetMv mv175[1];
setMv mv175[0] = nen[3];
resetMv mv176[1];
setMv mv176[0] = mv172[0];
calculateMvCoeff mv171[0] = DIVISION(mv175,mv176);
resetMv mv177[1];
resetMv mv178[1];
setVector ve179 = nen[1,2,3];
setVector ve180 = nen[1,2,3];
dotVectors mv178[0] = <ve179,ve180>;
resetMv mv181[1];
setMv mv181[0] = nen[4];
resetMv mv182[1];
setMv mv182[0] = mv178[0];
calculateMvCoeff mv177[0] = DIVISION(mv181,mv182);
setVector ve183 = len[1,2,3,-5];
resetMv mv185[4];
setMv mv185[2] = mv171[0];
setMv mv185[0] = mv159[0];
setMv mv185[3] = mv177[0];
setMv mv185[1] = mv165[0];
setVector ve184 = mv185[0,1,2,3];
dotVectors rc1[0] = <ve183,ve184>;

//rc1[1] = (((len[0] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + ((rcPpDual[6] + len[6]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[7] + len[7]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[9] + len[9]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv186[1];
resetMv mv187[1];
setVector ve188 = nen[1,2,3];
setVector ve189 = nen[1,2,3];
dotVectors mv187[0] = <ve188,ve189>;
resetMv mv190[1];
setMv mv190[0] = nen[1];
resetMv mv191[1];
setMv mv191[0] = mv187[0];
calculateMvCoeff mv186[0] = DIVISION(mv190,mv191);
resetMv mv192[1];
resetMv mv194[2];
setMv mv194[1] = len[6];
setMv mv194[0] = rcPpDual[6];
setVector ve193 = mv194[0,1];
dotVectors mv192[0] = <ve193>;
resetMv mv195[1];
resetMv mv196[1];
setVector ve197 = nen[1,2,3];
setVector ve198 = nen[1,2,3];
dotVectors mv196[0] = <ve197,ve198>;
resetMv mv199[1];
setMv mv199[0] = nen[2];
resetMv mv200[1];
setMv mv200[0] = mv196[0];
calculateMvCoeff mv195[0] = DIVISION(mv199,mv200);
resetMv mv201[1];
resetMv mv203[2];
setMv mv203[1] = len[7];
setMv mv203[0] = rcPpDual[7];
setVector ve202 = mv203[0,1];
dotVectors mv201[0] = <ve202>;
resetMv mv204[1];
resetMv mv205[1];
setVector ve206 = nen[1,2,3];
setVector ve207 = nen[1,2,3];
dotVectors mv205[0] = <ve206,ve207>;
resetMv mv208[1];
setMv mv208[0] = nen[3];
resetMv mv209[1];
setMv mv209[0] = mv205[0];
calculateMvCoeff mv204[0] = DIVISION(mv208,mv209);
resetMv mv210[1];
resetMv mv211[1];
resetMv mv213[2];
setMv mv213[1] = len[9];
setMv mv213[0] = rcPpDual[9];
setVector ve212 = mv213[0,1];
dotVectors mv211[0] = <ve212>;
setMv mv210[0] = mv211[-0];
resetMv mv214[1];
resetMv mv215[1];
setVector ve216 = nen[1,2,3];
setVector ve217 = nen[1,2,3];
dotVectors mv215[0] = <ve216,ve217>;
resetMv mv218[1];
setMv mv218[0] = nen[4];
resetMv mv219[1];
setMv mv219[0] = mv215[0];
calculateMvCoeff mv214[0] = DIVISION(mv218,mv219);
resetMv mv221[4];
setMv mv221[2] = mv201[0];
setMv mv221[1] = mv192[0];
setMv mv221[0] = len[0];
setMv mv221[3] = mv210[0];
setVector ve220 = mv221[0,1,2,3];
resetMv mv223[4];
setMv mv223[1] = mv195[0];
setMv mv223[2] = mv204[0];
setMv mv223[0] = mv186[0];
setMv mv223[3] = mv214[0];
setVector ve222 = mv223[0,1,2,3];
dotVectors rc1[1] = <ve220,ve222>;

//rc1[2] = (((len[0] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[6] + len[6]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[10] + len[10]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[12] + len[12]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv224[1];
resetMv mv225[1];
setVector ve226 = nen[1,2,3];
setVector ve227 = nen[1,2,3];
dotVectors mv225[0] = <ve226,ve227>;
resetMv mv228[1];
setMv mv228[0] = nen[2];
resetMv mv229[1];
setMv mv229[0] = mv225[0];
calculateMvCoeff mv224[0] = DIVISION(mv228,mv229);
resetMv mv230[1];
resetMv mv231[1];
resetMv mv233[2];
setMv mv233[1] = len[6];
setMv mv233[0] = rcPpDual[6];
setVector ve232 = mv233[0,1];
dotVectors mv231[0] = <ve232>;
setMv mv230[0] = mv231[-0];
resetMv mv234[1];
resetMv mv235[1];
setVector ve236 = nen[1,2,3];
setVector ve237 = nen[1,2,3];
dotVectors mv235[0] = <ve236,ve237>;
resetMv mv238[1];
setMv mv238[0] = nen[1];
resetMv mv239[1];
setMv mv239[0] = mv235[0];
calculateMvCoeff mv234[0] = DIVISION(mv238,mv239);
resetMv mv240[1];
resetMv mv242[2];
setMv mv242[1] = len[10];
setMv mv242[0] = rcPpDual[10];
setVector ve241 = mv242[0,1];
dotVectors mv240[0] = <ve241>;
resetMv mv243[1];
resetMv mv244[1];
setVector ve245 = nen[1,2,3];
setVector ve246 = nen[1,2,3];
dotVectors mv244[0] = <ve245,ve246>;
resetMv mv247[1];
setMv mv247[0] = nen[3];
resetMv mv248[1];
setMv mv248[0] = mv244[0];
calculateMvCoeff mv243[0] = DIVISION(mv247,mv248);
resetMv mv249[1];
resetMv mv250[1];
resetMv mv252[2];
setMv mv252[1] = len[12];
setMv mv252[0] = rcPpDual[12];
setVector ve251 = mv252[0,1];
dotVectors mv250[0] = <ve251>;
setMv mv249[0] = mv250[-0];
resetMv mv253[1];
resetMv mv254[1];
setVector ve255 = nen[1,2,3];
setVector ve256 = nen[1,2,3];
dotVectors mv254[0] = <ve255,ve256>;
resetMv mv257[1];
setMv mv257[0] = nen[4];
resetMv mv258[1];
setMv mv258[0] = mv254[0];
calculateMvCoeff mv253[0] = DIVISION(mv257,mv258);
resetMv mv260[4];
setMv mv260[1] = mv230[0];
setMv mv260[2] = mv240[0];
setMv mv260[0] = len[0];
setMv mv260[3] = mv249[0];
setVector ve259 = mv260[0,1,2,3];
resetMv mv262[4];
setMv mv262[3] = mv253[0];
setMv mv262[2] = mv243[0];
setMv mv262[1] = mv234[0];
setMv mv262[0] = mv224[0];
setVector ve261 = mv262[0,1,2,3];
dotVectors rc1[2] = <ve259,ve261>;

//rc1[3] = (((len[0] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[7] + len[7]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[10] + len[10]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[14] + len[14]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv263[1];
resetMv mv264[1];
setVector ve265 = nen[1,2,3];
setVector ve266 = nen[1,2,3];
dotVectors mv264[0] = <ve265,ve266>;
resetMv mv267[1];
setMv mv267[0] = nen[3];
resetMv mv268[1];
setMv mv268[0] = mv264[0];
calculateMvCoeff mv263[0] = DIVISION(mv267,mv268);
resetMv mv269[1];
resetMv mv270[1];
resetMv mv272[2];
setMv mv272[1] = len[7];
setMv mv272[0] = rcPpDual[7];
setVector ve271 = mv272[0,1];
dotVectors mv270[0] = <ve271>;
setMv mv269[0] = mv270[-0];
resetMv mv273[1];
resetMv mv274[1];
setVector ve275 = nen[1,2,3];
setVector ve276 = nen[1,2,3];
dotVectors mv274[0] = <ve275,ve276>;
resetMv mv277[1];
setMv mv277[0] = nen[1];
resetMv mv278[1];
setMv mv278[0] = mv274[0];
calculateMvCoeff mv273[0] = DIVISION(mv277,mv278);
resetMv mv279[1];
resetMv mv280[1];
resetMv mv282[2];
setMv mv282[1] = len[10];
setMv mv282[0] = rcPpDual[10];
setVector ve281 = mv282[0,1];
dotVectors mv280[0] = <ve281>;
setMv mv279[0] = mv280[-0];
resetMv mv283[1];
resetMv mv284[1];
setVector ve285 = nen[1,2,3];
setVector ve286 = nen[1,2,3];
dotVectors mv284[0] = <ve285,ve286>;
resetMv mv287[1];
setMv mv287[0] = nen[2];
resetMv mv288[1];
setMv mv288[0] = mv284[0];
calculateMvCoeff mv283[0] = DIVISION(mv287,mv288);
resetMv mv289[1];
resetMv mv290[1];
resetMv mv292[2];
setMv mv292[1] = len[14];
setMv mv292[0] = rcPpDual[14];
setVector ve291 = mv292[0,1];
dotVectors mv290[0] = <ve291>;
setMv mv289[0] = mv290[-0];
resetMv mv293[1];
resetMv mv294[1];
setVector ve295 = nen[1,2,3];
setVector ve296 = nen[1,2,3];
dotVectors mv294[0] = <ve295,ve296>;
resetMv mv297[1];
setMv mv297[0] = nen[4];
resetMv mv298[1];
setMv mv298[0] = mv294[0];
calculateMvCoeff mv293[0] = DIVISION(mv297,mv298);
resetMv mv300[4];
setMv mv300[0] = len[0];
setMv mv300[2] = mv279[0];
setMv mv300[1] = mv269[0];
setMv mv300[3] = mv289[0];
setVector ve299 = mv300[0,1,2,3];
resetMv mv302[4];
setMv mv302[2] = mv283[0];
setMv mv302[1] = mv273[0];
setMv mv302[0] = mv263[0];
setMv mv302[3] = mv293[0];
setVector ve301 = mv302[0,1,2,3];
dotVectors rc1[3] = <ve299,ve301>;

//rc1[4] = ((((len[0] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] + len[8]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[11] + len[11]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[13] + len[13]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[15] + len[15]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv303[1];
resetMv mv304[1];
setVector ve305 = nen[1,2,3];
setVector ve306 = nen[1,2,3];
dotVectors mv304[0] = <ve305,ve306>;
resetMv mv307[1];
setMv mv307[0] = nen[4];
resetMv mv308[1];
setMv mv308[0] = mv304[0];
calculateMvCoeff mv303[0] = DIVISION(mv307,mv308);
resetMv mv309[1];
resetMv mv310[1];
resetMv mv312[2];
setMv mv312[1] = len[8];
setMv mv312[0] = rcPpDual[8];
setVector ve311 = mv312[0,1];
dotVectors mv310[0] = <ve311>;
setMv mv309[0] = mv310[-0];
resetMv mv313[1];
resetMv mv314[1];
setVector ve315 = nen[1,2,3];
setVector ve316 = nen[1,2,3];
dotVectors mv314[0] = <ve315,ve316>;
resetMv mv317[1];
setMv mv317[0] = nen[1];
resetMv mv318[1];
setMv mv318[0] = mv314[0];
calculateMvCoeff mv313[0] = DIVISION(mv317,mv318);
resetMv mv319[1];
resetMv mv320[1];
resetMv mv322[2];
setMv mv322[1] = len[11];
setMv mv322[0] = rcPpDual[11];
setVector ve321 = mv322[0,1];
dotVectors mv320[0] = <ve321>;
setMv mv319[0] = mv320[-0];
resetMv mv323[1];
resetMv mv324[1];
setVector ve325 = nen[1,2,3];
setVector ve326 = nen[1,2,3];
dotVectors mv324[0] = <ve325,ve326>;
resetMv mv327[1];
setMv mv327[0] = nen[2];
resetMv mv328[1];
setMv mv328[0] = mv324[0];
calculateMvCoeff mv323[0] = DIVISION(mv327,mv328);
resetMv mv329[1];
resetMv mv330[1];
resetMv mv332[2];
setMv mv332[1] = len[13];
setMv mv332[0] = rcPpDual[13];
setVector ve331 = mv332[0,1];
dotVectors mv330[0] = <ve331>;
setMv mv329[0] = mv330[-0];
resetMv mv333[1];
resetMv mv334[1];
setVector ve335 = nen[1,2,3];
setVector ve336 = nen[1,2,3];
dotVectors mv334[0] = <ve335,ve336>;
resetMv mv337[1];
setMv mv337[0] = nen[3];
resetMv mv338[1];
setMv mv338[0] = mv334[0];
calculateMvCoeff mv333[0] = DIVISION(mv337,mv338);
resetMv mv339[1];
resetMv mv340[1];
resetMv mv342[2];
setMv mv342[1] = len[15];
setMv mv342[0] = rcPpDual[15];
setVector ve341 = mv342[0,1];
dotVectors mv340[0] = <ve341>;
setMv mv339[0] = mv340[-0];
resetMv mv343[1];
resetMv mv344[1];
setVector ve345 = nen[1,2,3];
setVector ve346 = nen[1,2,3];
dotVectors mv344[0] = <ve345,ve346>;
resetMv mv347[1];
setMv mv347[0] = nen[4];
resetMv mv348[1];
setMv mv348[0] = mv344[0];
calculateMvCoeff mv343[0] = DIVISION(mv347,mv348);
resetMv mv350[5];
setMv mv350[2] = mv319[0];
setMv mv350[3] = mv329[0];
setMv mv350[1] = mv309[0];
setMv mv350[0] = len[0];
setMv mv350[4] = mv339[0];
setVector ve349 = mv350[0,1,2,3,4];
resetMv mv352[5];
setMv mv352[3] = mv333[0];
setMv mv352[4] = mv343[0];
setMv mv352[2] = mv323[0];
setMv mv352[0] = mv303[0];
setMv mv352[1] = mv313[0];
setVector ve351 = mv352[0,1,2,3,4];
dotVectors rc1[4] = <ve349,ve351>;

//rc1[5] = ((-((rcPpDual[9] + len[9]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[12] + len[12]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[14] + len[14]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv353[1];
resetMv mv354[1];
resetMv mv356[2];
setMv mv356[1] = len[9];
setMv mv356[0] = rcPpDual[9];
setVector ve355 = mv356[0,1];
dotVectors mv354[0] = <ve355>;
setMv mv353[0] = mv354[-0];
resetMv mv357[1];
resetMv mv358[1];
setVector ve359 = nen[1,2,3];
setVector ve360 = nen[1,2,3];
dotVectors mv358[0] = <ve359,ve360>;
resetMv mv361[1];
setMv mv361[0] = nen[1];
resetMv mv362[1];
setMv mv362[0] = mv358[0];
calculateMvCoeff mv357[0] = DIVISION(mv361,mv362);
resetMv mv363[1];
resetMv mv364[1];
resetMv mv366[2];
setMv mv366[1] = len[12];
setMv mv366[0] = rcPpDual[12];
setVector ve365 = mv366[0,1];
dotVectors mv364[0] = <ve365>;
setMv mv363[0] = mv364[-0];
resetMv mv367[1];
resetMv mv368[1];
setVector ve369 = nen[1,2,3];
setVector ve370 = nen[1,2,3];
dotVectors mv368[0] = <ve369,ve370>;
resetMv mv371[1];
setMv mv371[0] = nen[2];
resetMv mv372[1];
setMv mv372[0] = mv368[0];
calculateMvCoeff mv367[0] = DIVISION(mv371,mv372);
resetMv mv373[1];
resetMv mv374[1];
resetMv mv376[2];
setMv mv376[1] = len[14];
setMv mv376[0] = rcPpDual[14];
setVector ve375 = mv376[0,1];
dotVectors mv374[0] = <ve375>;
setMv mv373[0] = mv374[-0];
resetMv mv377[1];
resetMv mv378[1];
setVector ve379 = nen[1,2,3];
setVector ve380 = nen[1,2,3];
dotVectors mv378[0] = <ve379,ve380>;
resetMv mv381[1];
setMv mv381[0] = nen[3];
resetMv mv382[1];
setMv mv382[0] = mv378[0];
calculateMvCoeff mv377[0] = DIVISION(mv381,mv382);
resetMv mv384[3];
setMv mv384[0] = mv353[0];
setMv mv384[2] = mv373[0];
setMv mv384[1] = mv363[0];
setVector ve383 = mv384[0,1,2];
resetMv mv386[3];
setMv mv386[2] = mv377[0];
setMv mv386[1] = mv367[0];
setMv mv386[0] = mv357[0];
setVector ve385 = mv386[0,1,2];
dotVectors rc1[5] = <ve383,ve385>;

//rc1[6] = (((len[1] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[2] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[16] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[18] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv387[1];
resetMv mv388[1];
setVector ve389 = nen[1,2,3];
setVector ve390 = nen[1,2,3];
dotVectors mv388[0] = <ve389,ve390>;
resetMv mv391[1];
setMv mv391[0] = nen[2];
resetMv mv392[1];
setMv mv392[0] = mv388[0];
calculateMvCoeff mv387[0] = DIVISION(mv391,mv392);
resetMv mv393[1];
resetMv mv394[1];
setVector ve395 = nen[1,2,3];
setVector ve396 = nen[1,2,3];
dotVectors mv394[0] = <ve395,ve396>;
resetMv mv397[1];
setMv mv397[0] = nen[1];
resetMv mv398[1];
setMv mv398[0] = mv394[0];
calculateMvCoeff mv393[0] = DIVISION(mv397,mv398);
resetMv mv399[1];
resetMv mv400[1];
setVector ve401 = nen[1,2,3];
setVector ve402 = nen[1,2,3];
dotVectors mv400[0] = <ve401,ve402>;
resetMv mv403[1];
setMv mv403[0] = nen[3];
resetMv mv404[1];
setMv mv404[0] = mv400[0];
calculateMvCoeff mv399[0] = DIVISION(mv403,mv404);
resetMv mv405[1];
resetMv mv406[1];
setVector ve407 = nen[1,2,3];
setVector ve408 = nen[1,2,3];
dotVectors mv406[0] = <ve407,ve408>;
resetMv mv409[1];
setMv mv409[0] = nen[4];
resetMv mv410[1];
setMv mv410[0] = mv406[0];
calculateMvCoeff mv405[0] = DIVISION(mv409,mv410);
setVector ve411 = len[1,-2,16,-18];
resetMv mv413[4];
setMv mv413[0] = mv387[0];
setMv mv413[3] = mv405[0];
setMv mv413[2] = mv399[0];
setMv mv413[1] = mv393[0];
setVector ve412 = mv413[0,1,2,3];
dotVectors rc1[6] = <ve411,ve412>;

//rc1[7] = (((len[1] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[3] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[16] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[20] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv414[1];
resetMv mv415[1];
setVector ve416 = nen[1,2,3];
setVector ve417 = nen[1,2,3];
dotVectors mv415[0] = <ve416,ve417>;
resetMv mv418[1];
setMv mv418[0] = nen[3];
resetMv mv419[1];
setMv mv419[0] = mv415[0];
calculateMvCoeff mv414[0] = DIVISION(mv418,mv419);
resetMv mv420[1];
resetMv mv421[1];
setVector ve422 = nen[1,2,3];
setVector ve423 = nen[1,2,3];
dotVectors mv421[0] = <ve422,ve423>;
resetMv mv424[1];
setMv mv424[0] = nen[1];
resetMv mv425[1];
setMv mv425[0] = mv421[0];
calculateMvCoeff mv420[0] = DIVISION(mv424,mv425);
resetMv mv426[1];
resetMv mv427[1];
setVector ve428 = nen[1,2,3];
setVector ve429 = nen[1,2,3];
dotVectors mv427[0] = <ve428,ve429>;
resetMv mv430[1];
setMv mv430[0] = nen[2];
resetMv mv431[1];
setMv mv431[0] = mv427[0];
calculateMvCoeff mv426[0] = DIVISION(mv430,mv431);
resetMv mv432[1];
resetMv mv433[1];
setVector ve434 = nen[1,2,3];
setVector ve435 = nen[1,2,3];
dotVectors mv433[0] = <ve434,ve435>;
resetMv mv436[1];
setMv mv436[0] = nen[4];
resetMv mv437[1];
setMv mv437[0] = mv433[0];
calculateMvCoeff mv432[0] = DIVISION(mv436,mv437);
setVector ve438 = len[1,-3,-16,-20];
resetMv mv440[4];
setMv mv440[2] = mv426[0];
setMv mv440[3] = mv432[0];
setMv mv440[0] = mv414[0];
setMv mv440[1] = mv420[0];
setVector ve439 = mv440[0,1,2,3];
dotVectors rc1[7] = <ve438,ve439>;

//rc1[8] = ((((len[1] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[4] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[17] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[19] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[21] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv441[1];
resetMv mv442[1];
setVector ve443 = nen[1,2,3];
setVector ve444 = nen[1,2,3];
dotVectors mv442[0] = <ve443,ve444>;
resetMv mv445[1];
setMv mv445[0] = nen[4];
resetMv mv446[1];
setMv mv446[0] = mv442[0];
calculateMvCoeff mv441[0] = DIVISION(mv445,mv446);
resetMv mv447[1];
resetMv mv448[1];
setVector ve449 = nen[1,2,3];
setVector ve450 = nen[1,2,3];
dotVectors mv448[0] = <ve449,ve450>;
resetMv mv451[1];
setMv mv451[0] = nen[1];
resetMv mv452[1];
setMv mv452[0] = mv448[0];
calculateMvCoeff mv447[0] = DIVISION(mv451,mv452);
resetMv mv453[1];
resetMv mv454[1];
setVector ve455 = nen[1,2,3];
setVector ve456 = nen[1,2,3];
dotVectors mv454[0] = <ve455,ve456>;
resetMv mv457[1];
setMv mv457[0] = nen[2];
resetMv mv458[1];
setMv mv458[0] = mv454[0];
calculateMvCoeff mv453[0] = DIVISION(mv457,mv458);
resetMv mv459[1];
resetMv mv460[1];
setVector ve461 = nen[1,2,3];
setVector ve462 = nen[1,2,3];
dotVectors mv460[0] = <ve461,ve462>;
resetMv mv463[1];
setMv mv463[0] = nen[3];
resetMv mv464[1];
setMv mv464[0] = mv460[0];
calculateMvCoeff mv459[0] = DIVISION(mv463,mv464);
resetMv mv465[1];
resetMv mv466[1];
setVector ve467 = nen[1,2,3];
setVector ve468 = nen[1,2,3];
dotVectors mv466[0] = <ve467,ve468>;
resetMv mv469[1];
setMv mv469[0] = nen[4];
resetMv mv470[1];
setMv mv470[0] = mv466[0];
calculateMvCoeff mv465[0] = DIVISION(mv469,mv470);
setVector ve471 = len[1,-4,-17,-19,-21];
resetMv mv473[5];
setMv mv473[0] = mv441[0];
setMv mv473[1] = mv447[0];
setMv mv473[3] = mv459[0];
setMv mv473[4] = mv465[0];
setMv mv473[2] = mv453[0];
setVector ve472 = mv473[0,1,2,3,4];
dotVectors rc1[8] = <ve471,ve472>;

//rc1[9] = ((-(len[5] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[18] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[20] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv474[1];
resetMv mv475[1];
setVector ve476 = nen[1,2,3];
setVector ve477 = nen[1,2,3];
dotVectors mv475[0] = <ve476,ve477>;
resetMv mv478[1];
setMv mv478[0] = nen[1];
resetMv mv479[1];
setMv mv479[0] = mv475[0];
calculateMvCoeff mv474[0] = DIVISION(mv478,mv479);
resetMv mv480[1];
resetMv mv481[1];
setVector ve482 = nen[1,2,3];
setVector ve483 = nen[1,2,3];
dotVectors mv481[0] = <ve482,ve483>;
resetMv mv484[1];
setMv mv484[0] = nen[2];
resetMv mv485[1];
setMv mv485[0] = mv481[0];
calculateMvCoeff mv480[0] = DIVISION(mv484,mv485);
resetMv mv486[1];
resetMv mv487[1];
setVector ve488 = nen[1,2,3];
setVector ve489 = nen[1,2,3];
dotVectors mv487[0] = <ve488,ve489>;
resetMv mv490[1];
setMv mv490[0] = nen[3];
resetMv mv491[1];
setMv mv491[0] = mv487[0];
calculateMvCoeff mv486[0] = DIVISION(mv490,mv491);
setVector ve492 = len[-5,-18,-20];
resetMv mv494[3];
setMv mv494[1] = mv480[0];
setMv mv494[0] = mv474[0];
setMv mv494[2] = mv486[0];
setVector ve493 = mv494[0,1,2];
dotVectors rc1[9] = <ve492,ve493>;

//rc1[10] = (((len[2] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[3] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[16] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[23] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv495[1];
resetMv mv496[1];
setVector ve497 = nen[1,2,3];
setVector ve498 = nen[1,2,3];
dotVectors mv496[0] = <ve497,ve498>;
resetMv mv499[1];
setMv mv499[0] = nen[3];
resetMv mv500[1];
setMv mv500[0] = mv496[0];
calculateMvCoeff mv495[0] = DIVISION(mv499,mv500);
resetMv mv501[1];
resetMv mv502[1];
setVector ve503 = nen[1,2,3];
setVector ve504 = nen[1,2,3];
dotVectors mv502[0] = <ve503,ve504>;
resetMv mv505[1];
setMv mv505[0] = nen[2];
resetMv mv506[1];
setMv mv506[0] = mv502[0];
calculateMvCoeff mv501[0] = DIVISION(mv505,mv506);
resetMv mv507[1];
resetMv mv508[1];
setVector ve509 = nen[1,2,3];
setVector ve510 = nen[1,2,3];
dotVectors mv508[0] = <ve509,ve510>;
resetMv mv511[1];
setMv mv511[0] = nen[1];
resetMv mv512[1];
setMv mv512[0] = mv508[0];
calculateMvCoeff mv507[0] = DIVISION(mv511,mv512);
resetMv mv513[1];
resetMv mv514[1];
setVector ve515 = nen[1,2,3];
setVector ve516 = nen[1,2,3];
dotVectors mv514[0] = <ve515,ve516>;
resetMv mv517[1];
setMv mv517[0] = nen[4];
resetMv mv518[1];
setMv mv518[0] = mv514[0];
calculateMvCoeff mv513[0] = DIVISION(mv517,mv518);
setVector ve519 = len[2,-3,16,-23];
resetMv mv521[4];
setMv mv521[1] = mv501[0];
setMv mv521[3] = mv513[0];
setMv mv521[0] = mv495[0];
setMv mv521[2] = mv507[0];
setVector ve520 = mv521[0,1,2,3];
dotVectors rc1[10] = <ve519,ve520>;

//rc1[11] = ((((len[2] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[4] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[17] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[22] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[24] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv522[1];
resetMv mv523[1];
setVector ve524 = nen[1,2,3];
setVector ve525 = nen[1,2,3];
dotVectors mv523[0] = <ve524,ve525>;
resetMv mv526[1];
setMv mv526[0] = nen[4];
resetMv mv527[1];
setMv mv527[0] = mv523[0];
calculateMvCoeff mv522[0] = DIVISION(mv526,mv527);
resetMv mv528[1];
resetMv mv529[1];
setVector ve530 = nen[1,2,3];
setVector ve531 = nen[1,2,3];
dotVectors mv529[0] = <ve530,ve531>;
resetMv mv532[1];
setMv mv532[0] = nen[2];
resetMv mv533[1];
setMv mv533[0] = mv529[0];
calculateMvCoeff mv528[0] = DIVISION(mv532,mv533);
resetMv mv534[1];
resetMv mv535[1];
setVector ve536 = nen[1,2,3];
setVector ve537 = nen[1,2,3];
dotVectors mv535[0] = <ve536,ve537>;
resetMv mv538[1];
setMv mv538[0] = nen[1];
resetMv mv539[1];
setMv mv539[0] = mv535[0];
calculateMvCoeff mv534[0] = DIVISION(mv538,mv539);
resetMv mv540[1];
resetMv mv541[1];
setVector ve542 = nen[1,2,3];
setVector ve543 = nen[1,2,3];
dotVectors mv541[0] = <ve542,ve543>;
resetMv mv544[1];
setMv mv544[0] = nen[3];
resetMv mv545[1];
setMv mv545[0] = mv541[0];
calculateMvCoeff mv540[0] = DIVISION(mv544,mv545);
resetMv mv546[1];
resetMv mv547[1];
setVector ve548 = nen[1,2,3];
setVector ve549 = nen[1,2,3];
dotVectors mv547[0] = <ve548,ve549>;
resetMv mv550[1];
setMv mv550[0] = nen[4];
resetMv mv551[1];
setMv mv551[0] = mv547[0];
calculateMvCoeff mv546[0] = DIVISION(mv550,mv551);
setVector ve552 = len[2,-4,17,-22,-24];
resetMv mv554[5];
setMv mv554[0] = mv522[0];
setMv mv554[4] = mv546[0];
setMv mv554[2] = mv534[0];
setMv mv554[1] = mv528[0];
setMv mv554[3] = mv540[0];
setVector ve553 = mv554[0,1,2,3,4];
dotVectors rc1[11] = <ve552,ve553>;

//rc1[12] = ((-(len[5] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[18] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[23] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv555[1];
resetMv mv556[1];
setVector ve557 = nen[1,2,3];
setVector ve558 = nen[1,2,3];
dotVectors mv556[0] = <ve557,ve558>;
resetMv mv559[1];
setMv mv559[0] = nen[2];
resetMv mv560[1];
setMv mv560[0] = mv556[0];
calculateMvCoeff mv555[0] = DIVISION(mv559,mv560);
resetMv mv561[1];
resetMv mv562[1];
setVector ve563 = nen[1,2,3];
setVector ve564 = nen[1,2,3];
dotVectors mv562[0] = <ve563,ve564>;
resetMv mv565[1];
setMv mv565[0] = nen[1];
resetMv mv566[1];
setMv mv566[0] = mv562[0];
calculateMvCoeff mv561[0] = DIVISION(mv565,mv566);
resetMv mv567[1];
resetMv mv568[1];
setVector ve569 = nen[1,2,3];
setVector ve570 = nen[1,2,3];
dotVectors mv568[0] = <ve569,ve570>;
resetMv mv571[1];
setMv mv571[0] = nen[3];
resetMv mv572[1];
setMv mv572[0] = mv568[0];
calculateMvCoeff mv567[0] = DIVISION(mv571,mv572);
setVector ve573 = len[-5,18,-23];
resetMv mv575[3];
setMv mv575[1] = mv561[0];
setMv mv575[0] = mv555[0];
setMv mv575[2] = mv567[0];
setVector ve574 = mv575[0,1,2];
dotVectors rc1[12] = <ve573,ve574>;

//rc1[13] = ((((len[3] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[4] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[19] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[22] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[25] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv576[1];
resetMv mv577[1];
setVector ve578 = nen[1,2,3];
setVector ve579 = nen[1,2,3];
dotVectors mv577[0] = <ve578,ve579>;
resetMv mv580[1];
setMv mv580[0] = nen[4];
resetMv mv581[1];
setMv mv581[0] = mv577[0];
calculateMvCoeff mv576[0] = DIVISION(mv580,mv581);
resetMv mv582[1];
resetMv mv583[1];
setVector ve584 = nen[1,2,3];
setVector ve585 = nen[1,2,3];
dotVectors mv583[0] = <ve584,ve585>;
resetMv mv586[1];
setMv mv586[0] = nen[3];
resetMv mv587[1];
setMv mv587[0] = mv583[0];
calculateMvCoeff mv582[0] = DIVISION(mv586,mv587);
resetMv mv588[1];
resetMv mv589[1];
setVector ve590 = nen[1,2,3];
setVector ve591 = nen[1,2,3];
dotVectors mv589[0] = <ve590,ve591>;
resetMv mv592[1];
setMv mv592[0] = nen[1];
resetMv mv593[1];
setMv mv593[0] = mv589[0];
calculateMvCoeff mv588[0] = DIVISION(mv592,mv593);
resetMv mv594[1];
resetMv mv595[1];
setVector ve596 = nen[1,2,3];
setVector ve597 = nen[1,2,3];
dotVectors mv595[0] = <ve596,ve597>;
resetMv mv598[1];
setMv mv598[0] = nen[2];
resetMv mv599[1];
setMv mv599[0] = mv595[0];
calculateMvCoeff mv594[0] = DIVISION(mv598,mv599);
resetMv mv600[1];
resetMv mv601[1];
setVector ve602 = nen[1,2,3];
setVector ve603 = nen[1,2,3];
dotVectors mv601[0] = <ve602,ve603>;
resetMv mv604[1];
setMv mv604[0] = nen[4];
resetMv mv605[1];
setMv mv605[0] = mv601[0];
calculateMvCoeff mv600[0] = DIVISION(mv604,mv605);
setVector ve606 = len[3,-4,19,22,-25];
resetMv mv608[5];
setMv mv608[2] = mv588[0];
setMv mv608[4] = mv600[0];
setMv mv608[0] = mv576[0];
setMv mv608[1] = mv582[0];
setMv mv608[3] = mv594[0];
setVector ve607 = mv608[0,1,2,3,4];
dotVectors rc1[13] = <ve606,ve607>;

//rc1[14] = ((-(len[5] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[20] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[23] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv609[1];
resetMv mv610[1];
setVector ve611 = nen[1,2,3];
setVector ve612 = nen[1,2,3];
dotVectors mv610[0] = <ve611,ve612>;
resetMv mv613[1];
setMv mv613[0] = nen[3];
resetMv mv614[1];
setMv mv614[0] = mv610[0];
calculateMvCoeff mv609[0] = DIVISION(mv613,mv614);
resetMv mv615[1];
resetMv mv616[1];
setVector ve617 = nen[1,2,3];
setVector ve618 = nen[1,2,3];
dotVectors mv616[0] = <ve617,ve618>;
resetMv mv619[1];
setMv mv619[0] = nen[1];
resetMv mv620[1];
setMv mv620[0] = mv616[0];
calculateMvCoeff mv615[0] = DIVISION(mv619,mv620);
resetMv mv621[1];
resetMv mv622[1];
setVector ve623 = nen[1,2,3];
setVector ve624 = nen[1,2,3];
dotVectors mv622[0] = <ve623,ve624>;
resetMv mv625[1];
setMv mv625[0] = nen[2];
resetMv mv626[1];
setMv mv626[0] = mv622[0];
calculateMvCoeff mv621[0] = DIVISION(mv625,mv626);
setVector ve627 = len[-5,20,23];
resetMv mv629[3];
setMv mv629[1] = mv615[0];
setMv mv629[2] = mv621[0];
setMv mv629[0] = mv609[0];
setVector ve628 = mv629[0,1,2];
dotVectors rc1[14] = <ve627,ve628>;

//rc1[15] = (((-(len[5] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[21] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[24] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[25] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv630[1];
resetMv mv631[1];
setVector ve632 = nen[1,2,3];
setVector ve633 = nen[1,2,3];
dotVectors mv631[0] = <ve632,ve633>;
resetMv mv634[1];
setMv mv634[0] = nen[4];
resetMv mv635[1];
setMv mv635[0] = mv631[0];
calculateMvCoeff mv630[0] = DIVISION(mv634,mv635);
resetMv mv636[1];
resetMv mv637[1];
setVector ve638 = nen[1,2,3];
setVector ve639 = nen[1,2,3];
dotVectors mv637[0] = <ve638,ve639>;
resetMv mv640[1];
setMv mv640[0] = nen[1];
resetMv mv641[1];
setMv mv641[0] = mv637[0];
calculateMvCoeff mv636[0] = DIVISION(mv640,mv641);
resetMv mv642[1];
resetMv mv643[1];
setVector ve644 = nen[1,2,3];
setVector ve645 = nen[1,2,3];
dotVectors mv643[0] = <ve644,ve645>;
resetMv mv646[1];
setMv mv646[0] = nen[2];
resetMv mv647[1];
setMv mv647[0] = mv643[0];
calculateMvCoeff mv642[0] = DIVISION(mv646,mv647);
resetMv mv648[1];
resetMv mv649[1];
setVector ve650 = nen[1,2,3];
setVector ve651 = nen[1,2,3];
dotVectors mv649[0] = <ve650,ve651>;
resetMv mv652[1];
setMv mv652[0] = nen[3];
resetMv mv653[1];
setMv mv653[0] = mv649[0];
calculateMvCoeff mv648[0] = DIVISION(mv652,mv653);
setVector ve654 = len[-5,21,24,25];
resetMv mv656[4];
setMv mv656[3] = mv648[0];
setMv mv656[1] = mv636[0];
setMv mv656[0] = mv630[0];
setMv mv656[2] = mv642[0];
setVector ve655 = mv656[0,1,2,3];
dotVectors rc1[15] = <ve654,ve655>;

//rc1[16] = ((((rcPpDual[6] + len[6]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[7] + len[7]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[10] + len[10]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[27] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv657[1];
resetMv mv659[2];
setMv mv659[1] = len[6];
setMv mv659[0] = rcPpDual[6];
setVector ve658 = mv659[0,1];
dotVectors mv657[0] = <ve658>;
resetMv mv660[1];
resetMv mv661[1];
setVector ve662 = nen[1,2,3];
setVector ve663 = nen[1,2,3];
dotVectors mv661[0] = <ve662,ve663>;
resetMv mv664[1];
setMv mv664[0] = nen[3];
resetMv mv665[1];
setMv mv665[0] = mv661[0];
calculateMvCoeff mv660[0] = DIVISION(mv664,mv665);
resetMv mv666[1];
resetMv mv667[1];
resetMv mv669[2];
setMv mv669[1] = len[7];
setMv mv669[0] = rcPpDual[7];
setVector ve668 = mv669[0,1];
dotVectors mv667[0] = <ve668>;
setMv mv666[0] = mv667[-0];
resetMv mv670[1];
resetMv mv671[1];
setVector ve672 = nen[1,2,3];
setVector ve673 = nen[1,2,3];
dotVectors mv671[0] = <ve672,ve673>;
resetMv mv674[1];
setMv mv674[0] = nen[2];
resetMv mv675[1];
setMv mv675[0] = mv671[0];
calculateMvCoeff mv670[0] = DIVISION(mv674,mv675);
resetMv mv676[1];
resetMv mv678[2];
setMv mv678[1] = len[10];
setMv mv678[0] = rcPpDual[10];
setVector ve677 = mv678[0,1];
dotVectors mv676[0] = <ve677>;
resetMv mv679[1];
resetMv mv680[1];
setVector ve681 = nen[1,2,3];
setVector ve682 = nen[1,2,3];
dotVectors mv680[0] = <ve681,ve682>;
resetMv mv683[1];
setMv mv683[0] = nen[1];
resetMv mv684[1];
setMv mv684[0] = mv680[0];
calculateMvCoeff mv679[0] = DIVISION(mv683,mv684);
resetMv mv685[1];
resetMv mv686[1];
setVector ve687 = nen[1,2,3];
setVector ve688 = nen[1,2,3];
dotVectors mv686[0] = <ve687,ve688>;
resetMv mv689[1];
setMv mv689[0] = nen[4];
resetMv mv690[1];
setMv mv690[0] = mv686[0];
calculateMvCoeff mv685[0] = DIVISION(mv689,mv690);
resetMv mv692[4];
setMv mv692[1] = mv666[0];
setMv mv692[0] = mv657[0];
setMv mv692[2] = mv676[0];
setMv mv692[3] = len[-27];
setVector ve691 = mv692[0,1,2,3];
resetMv mv694[4];
setMv mv694[3] = mv685[0];
setMv mv694[2] = mv679[0];
setMv mv694[0] = mv660[0];
setMv mv694[1] = mv670[0];
setVector ve693 = mv694[0,1,2,3];
dotVectors rc1[16] = <ve691,ve693>;

//rc1[17] = (((((rcPpDual[6] + len[6]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] + len[8]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[11] + len[11]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[26] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[28] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv695[1];
resetMv mv697[2];
setMv mv697[1] = len[6];
setMv mv697[0] = rcPpDual[6];
setVector ve696 = mv697[0,1];
dotVectors mv695[0] = <ve696>;
resetMv mv698[1];
resetMv mv699[1];
setVector ve700 = nen[1,2,3];
setVector ve701 = nen[1,2,3];
dotVectors mv699[0] = <ve700,ve701>;
resetMv mv702[1];
setMv mv702[0] = nen[4];
resetMv mv703[1];
setMv mv703[0] = mv699[0];
calculateMvCoeff mv698[0] = DIVISION(mv702,mv703);
resetMv mv704[1];
resetMv mv705[1];
resetMv mv707[2];
setMv mv707[1] = len[8];
setMv mv707[0] = rcPpDual[8];
setVector ve706 = mv707[0,1];
dotVectors mv705[0] = <ve706>;
setMv mv704[0] = mv705[-0];
resetMv mv708[1];
resetMv mv709[1];
setVector ve710 = nen[1,2,3];
setVector ve711 = nen[1,2,3];
dotVectors mv709[0] = <ve710,ve711>;
resetMv mv712[1];
setMv mv712[0] = nen[2];
resetMv mv713[1];
setMv mv713[0] = mv709[0];
calculateMvCoeff mv708[0] = DIVISION(mv712,mv713);
resetMv mv714[1];
resetMv mv716[2];
setMv mv716[1] = len[11];
setMv mv716[0] = rcPpDual[11];
setVector ve715 = mv716[0,1];
dotVectors mv714[0] = <ve715>;
resetMv mv717[1];
resetMv mv718[1];
setVector ve719 = nen[1,2,3];
setVector ve720 = nen[1,2,3];
dotVectors mv718[0] = <ve719,ve720>;
resetMv mv721[1];
setMv mv721[0] = nen[1];
resetMv mv722[1];
setMv mv722[0] = mv718[0];
calculateMvCoeff mv717[0] = DIVISION(mv721,mv722);
resetMv mv723[1];
resetMv mv724[1];
setVector ve725 = nen[1,2,3];
setVector ve726 = nen[1,2,3];
dotVectors mv724[0] = <ve725,ve726>;
resetMv mv727[1];
setMv mv727[0] = nen[3];
resetMv mv728[1];
setMv mv728[0] = mv724[0];
calculateMvCoeff mv723[0] = DIVISION(mv727,mv728);
resetMv mv729[1];
resetMv mv730[1];
setVector ve731 = nen[1,2,3];
setVector ve732 = nen[1,2,3];
dotVectors mv730[0] = <ve731,ve732>;
resetMv mv733[1];
setMv mv733[0] = nen[4];
resetMv mv734[1];
setMv mv734[0] = mv730[0];
calculateMvCoeff mv729[0] = DIVISION(mv733,mv734);
resetMv mv736[5];
setMv mv736[2] = mv714[0];
setMv mv736[1] = mv704[0];
setMv mv736[3,4] = len[-26,-28];
setMv mv736[0] = mv695[0];
setVector ve735 = mv736[0,1,2,3,4];
resetMv mv738[5];
setMv mv738[1] = mv708[0];
setMv mv738[4] = mv729[0];
setMv mv738[2] = mv717[0];
setMv mv738[0] = mv698[0];
setMv mv738[3] = mv723[0];
setVector ve737 = mv738[0,1,2,3,4];
dotVectors rc1[17] = <ve735,ve737>;

//rc1[18] = ((-((rcPpDual[9] + len[9]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[12] + len[12]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[27] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv739[1];
resetMv mv740[1];
resetMv mv742[2];
setMv mv742[1] = len[9];
setMv mv742[0] = rcPpDual[9];
setVector ve741 = mv742[0,1];
dotVectors mv740[0] = <ve741>;
setMv mv739[0] = mv740[-0];
resetMv mv743[1];
resetMv mv744[1];
setVector ve745 = nen[1,2,3];
setVector ve746 = nen[1,2,3];
dotVectors mv744[0] = <ve745,ve746>;
resetMv mv747[1];
setMv mv747[0] = nen[2];
resetMv mv748[1];
setMv mv748[0] = mv744[0];
calculateMvCoeff mv743[0] = DIVISION(mv747,mv748);
resetMv mv749[1];
resetMv mv751[2];
setMv mv751[1] = len[12];
setMv mv751[0] = rcPpDual[12];
setVector ve750 = mv751[0,1];
dotVectors mv749[0] = <ve750>;
resetMv mv752[1];
resetMv mv753[1];
setVector ve754 = nen[1,2,3];
setVector ve755 = nen[1,2,3];
dotVectors mv753[0] = <ve754,ve755>;
resetMv mv756[1];
setMv mv756[0] = nen[1];
resetMv mv757[1];
setMv mv757[0] = mv753[0];
calculateMvCoeff mv752[0] = DIVISION(mv756,mv757);
resetMv mv758[1];
resetMv mv759[1];
setVector ve760 = nen[1,2,3];
setVector ve761 = nen[1,2,3];
dotVectors mv759[0] = <ve760,ve761>;
resetMv mv762[1];
setMv mv762[0] = nen[3];
resetMv mv763[1];
setMv mv763[0] = mv759[0];
calculateMvCoeff mv758[0] = DIVISION(mv762,mv763);
resetMv mv765[3];
setMv mv765[0] = mv739[0];
setMv mv765[2] = len[-27];
setMv mv765[1] = mv749[0];
setVector ve764 = mv765[0,1,2];
resetMv mv767[3];
setMv mv767[1] = mv752[0];
setMv mv767[0] = mv743[0];
setMv mv767[2] = mv758[0];
setVector ve766 = mv767[0,1,2];
dotVectors rc1[18] = <ve764,ve766>;

//rc1[19] = (((((rcPpDual[7] + len[7]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] + len[8]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[13] + len[13]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[26] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[29] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv768[1];
resetMv mv770[2];
setMv mv770[1] = len[7];
setMv mv770[0] = rcPpDual[7];
setVector ve769 = mv770[0,1];
dotVectors mv768[0] = <ve769>;
resetMv mv771[1];
resetMv mv772[1];
setVector ve773 = nen[1,2,3];
setVector ve774 = nen[1,2,3];
dotVectors mv772[0] = <ve773,ve774>;
resetMv mv775[1];
setMv mv775[0] = nen[4];
resetMv mv776[1];
setMv mv776[0] = mv772[0];
calculateMvCoeff mv771[0] = DIVISION(mv775,mv776);
resetMv mv777[1];
resetMv mv778[1];
resetMv mv780[2];
setMv mv780[1] = len[8];
setMv mv780[0] = rcPpDual[8];
setVector ve779 = mv780[0,1];
dotVectors mv778[0] = <ve779>;
setMv mv777[0] = mv778[-0];
resetMv mv781[1];
resetMv mv782[1];
setVector ve783 = nen[1,2,3];
setVector ve784 = nen[1,2,3];
dotVectors mv782[0] = <ve783,ve784>;
resetMv mv785[1];
setMv mv785[0] = nen[3];
resetMv mv786[1];
setMv mv786[0] = mv782[0];
calculateMvCoeff mv781[0] = DIVISION(mv785,mv786);
resetMv mv787[1];
resetMv mv789[2];
setMv mv789[1] = len[13];
setMv mv789[0] = rcPpDual[13];
setVector ve788 = mv789[0,1];
dotVectors mv787[0] = <ve788>;
resetMv mv790[1];
resetMv mv791[1];
setVector ve792 = nen[1,2,3];
setVector ve793 = nen[1,2,3];
dotVectors mv791[0] = <ve792,ve793>;
resetMv mv794[1];
setMv mv794[0] = nen[1];
resetMv mv795[1];
setMv mv795[0] = mv791[0];
calculateMvCoeff mv790[0] = DIVISION(mv794,mv795);
resetMv mv796[1];
resetMv mv797[1];
setVector ve798 = nen[1,2,3];
setVector ve799 = nen[1,2,3];
dotVectors mv797[0] = <ve798,ve799>;
resetMv mv800[1];
setMv mv800[0] = nen[2];
resetMv mv801[1];
setMv mv801[0] = mv797[0];
calculateMvCoeff mv796[0] = DIVISION(mv800,mv801);
resetMv mv802[1];
resetMv mv803[1];
setVector ve804 = nen[1,2,3];
setVector ve805 = nen[1,2,3];
dotVectors mv803[0] = <ve804,ve805>;
resetMv mv806[1];
setMv mv806[0] = nen[4];
resetMv mv807[1];
setMv mv807[0] = mv803[0];
calculateMvCoeff mv802[0] = DIVISION(mv806,mv807);
resetMv mv809[5];
setMv mv809[0] = mv768[0];
setMv mv809[1] = mv777[0];
setMv mv809[3,4] = len[26,-29];
setMv mv809[2] = mv787[0];
setVector ve808 = mv809[0,1,2,3,4];
resetMv mv811[5];
setMv mv811[1] = mv781[0];
setMv mv811[2] = mv790[0];
setMv mv811[4] = mv802[0];
setMv mv811[3] = mv796[0];
setMv mv811[0] = mv771[0];
setVector ve810 = mv811[0,1,2,3,4];
dotVectors rc1[19] = <ve808,ve810>;

//rc1[20] = ((-((rcPpDual[9] + len[9]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[14] + len[14]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[27] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv812[1];
resetMv mv813[1];
resetMv mv815[2];
setMv mv815[1] = len[9];
setMv mv815[0] = rcPpDual[9];
setVector ve814 = mv815[0,1];
dotVectors mv813[0] = <ve814>;
setMv mv812[0] = mv813[-0];
resetMv mv816[1];
resetMv mv817[1];
setVector ve818 = nen[1,2,3];
setVector ve819 = nen[1,2,3];
dotVectors mv817[0] = <ve818,ve819>;
resetMv mv820[1];
setMv mv820[0] = nen[3];
resetMv mv821[1];
setMv mv821[0] = mv817[0];
calculateMvCoeff mv816[0] = DIVISION(mv820,mv821);
resetMv mv822[1];
resetMv mv824[2];
setMv mv824[1] = len[14];
setMv mv824[0] = rcPpDual[14];
setVector ve823 = mv824[0,1];
dotVectors mv822[0] = <ve823>;
resetMv mv825[1];
resetMv mv826[1];
setVector ve827 = nen[1,2,3];
setVector ve828 = nen[1,2,3];
dotVectors mv826[0] = <ve827,ve828>;
resetMv mv829[1];
setMv mv829[0] = nen[1];
resetMv mv830[1];
setMv mv830[0] = mv826[0];
calculateMvCoeff mv825[0] = DIVISION(mv829,mv830);
resetMv mv831[1];
resetMv mv832[1];
setVector ve833 = nen[1,2,3];
setVector ve834 = nen[1,2,3];
dotVectors mv832[0] = <ve833,ve834>;
resetMv mv835[1];
setMv mv835[0] = nen[2];
resetMv mv836[1];
setMv mv836[0] = mv832[0];
calculateMvCoeff mv831[0] = DIVISION(mv835,mv836);
resetMv mv838[3];
setMv mv838[1] = mv822[0];
setMv mv838[2] = len[27];
setMv mv838[0] = mv812[0];
setVector ve837 = mv838[0,1,2];
resetMv mv840[3];
setMv mv840[2] = mv831[0];
setMv mv840[0] = mv816[0];
setMv mv840[1] = mv825[0];
setVector ve839 = mv840[0,1,2];
dotVectors rc1[20] = <ve837,ve839>;

//rc1[21] = (((-((rcPpDual[9] + len[9]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] + len[15]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[28] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[29] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv841[1];
resetMv mv842[1];
resetMv mv844[2];
setMv mv844[1] = len[9];
setMv mv844[0] = rcPpDual[9];
setVector ve843 = mv844[0,1];
dotVectors mv842[0] = <ve843>;
setMv mv841[0] = mv842[-0];
resetMv mv845[1];
resetMv mv846[1];
setVector ve847 = nen[1,2,3];
setVector ve848 = nen[1,2,3];
dotVectors mv846[0] = <ve847,ve848>;
resetMv mv849[1];
setMv mv849[0] = nen[4];
resetMv mv850[1];
setMv mv850[0] = mv846[0];
calculateMvCoeff mv845[0] = DIVISION(mv849,mv850);
resetMv mv851[1];
resetMv mv853[2];
setMv mv853[1] = len[15];
setMv mv853[0] = rcPpDual[15];
setVector ve852 = mv853[0,1];
dotVectors mv851[0] = <ve852>;
resetMv mv854[1];
resetMv mv855[1];
setVector ve856 = nen[1,2,3];
setVector ve857 = nen[1,2,3];
dotVectors mv855[0] = <ve856,ve857>;
resetMv mv858[1];
setMv mv858[0] = nen[1];
resetMv mv859[1];
setMv mv859[0] = mv855[0];
calculateMvCoeff mv854[0] = DIVISION(mv858,mv859);
resetMv mv860[1];
resetMv mv861[1];
setVector ve862 = nen[1,2,3];
setVector ve863 = nen[1,2,3];
dotVectors mv861[0] = <ve862,ve863>;
resetMv mv864[1];
setMv mv864[0] = nen[2];
resetMv mv865[1];
setMv mv865[0] = mv861[0];
calculateMvCoeff mv860[0] = DIVISION(mv864,mv865);
resetMv mv866[1];
resetMv mv867[1];
setVector ve868 = nen[1,2,3];
setVector ve869 = nen[1,2,3];
dotVectors mv867[0] = <ve868,ve869>;
resetMv mv870[1];
setMv mv870[0] = nen[3];
resetMv mv871[1];
setMv mv871[0] = mv867[0];
calculateMvCoeff mv866[0] = DIVISION(mv870,mv871);
resetMv mv873[4];
setMv mv873[0] = mv841[0];
setMv mv873[2,3] = len[28,29];
setMv mv873[1] = mv851[0];
setVector ve872 = mv873[0,1,2,3];
resetMv mv875[4];
setMv mv875[1] = mv854[0];
setMv mv875[0] = mv845[0];
setMv mv875[3] = mv866[0];
setMv mv875[2] = mv860[0];
setVector ve874 = mv875[0,1,2,3];
dotVectors rc1[21] = <ve872,ve874>;

//rc1[22] = (((((rcPpDual[10] + len[10]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[11] + len[11]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[13] + len[13]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[26] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[30] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv876[1];
resetMv mv878[2];
setMv mv878[1] = len[10];
setMv mv878[0] = rcPpDual[10];
setVector ve877 = mv878[0,1];
dotVectors mv876[0] = <ve877>;
resetMv mv879[1];
resetMv mv880[1];
setVector ve881 = nen[1,2,3];
setVector ve882 = nen[1,2,3];
dotVectors mv880[0] = <ve881,ve882>;
resetMv mv883[1];
setMv mv883[0] = nen[4];
resetMv mv884[1];
setMv mv884[0] = mv880[0];
calculateMvCoeff mv879[0] = DIVISION(mv883,mv884);
resetMv mv885[1];
resetMv mv886[1];
resetMv mv888[2];
setMv mv888[1] = len[11];
setMv mv888[0] = rcPpDual[11];
setVector ve887 = mv888[0,1];
dotVectors mv886[0] = <ve887>;
setMv mv885[0] = mv886[-0];
resetMv mv889[1];
resetMv mv890[1];
setVector ve891 = nen[1,2,3];
setVector ve892 = nen[1,2,3];
dotVectors mv890[0] = <ve891,ve892>;
resetMv mv893[1];
setMv mv893[0] = nen[3];
resetMv mv894[1];
setMv mv894[0] = mv890[0];
calculateMvCoeff mv889[0] = DIVISION(mv893,mv894);
resetMv mv895[1];
resetMv mv897[2];
setMv mv897[1] = len[13];
setMv mv897[0] = rcPpDual[13];
setVector ve896 = mv897[0,1];
dotVectors mv895[0] = <ve896>;
resetMv mv898[1];
resetMv mv899[1];
setVector ve900 = nen[1,2,3];
setVector ve901 = nen[1,2,3];
dotVectors mv899[0] = <ve900,ve901>;
resetMv mv902[1];
setMv mv902[0] = nen[2];
resetMv mv903[1];
setMv mv903[0] = mv899[0];
calculateMvCoeff mv898[0] = DIVISION(mv902,mv903);
resetMv mv904[1];
resetMv mv905[1];
setVector ve906 = nen[1,2,3];
setVector ve907 = nen[1,2,3];
dotVectors mv905[0] = <ve906,ve907>;
resetMv mv908[1];
setMv mv908[0] = nen[1];
resetMv mv909[1];
setMv mv909[0] = mv905[0];
calculateMvCoeff mv904[0] = DIVISION(mv908,mv909);
resetMv mv910[1];
resetMv mv911[1];
setVector ve912 = nen[1,2,3];
setVector ve913 = nen[1,2,3];
dotVectors mv911[0] = <ve912,ve913>;
resetMv mv914[1];
setMv mv914[0] = nen[4];
resetMv mv915[1];
setMv mv915[0] = mv911[0];
calculateMvCoeff mv910[0] = DIVISION(mv914,mv915);
resetMv mv917[5];
setMv mv917[2] = mv895[0];
setMv mv917[3,4] = len[-26,-30];
setMv mv917[1] = mv885[0];
setMv mv917[0] = mv876[0];
setVector ve916 = mv917[0,1,2,3,4];
resetMv mv919[5];
setMv mv919[1] = mv889[0];
setMv mv919[3] = mv904[0];
setMv mv919[2] = mv898[0];
setMv mv919[0] = mv879[0];
setMv mv919[4] = mv910[0];
setVector ve918 = mv919[0,1,2,3,4];
dotVectors rc1[22] = <ve916,ve918>;

//rc1[23] = ((-((rcPpDual[12] + len[12]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[14] + len[14]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[27] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv920[1];
resetMv mv921[1];
resetMv mv923[2];
setMv mv923[1] = len[12];
setMv mv923[0] = rcPpDual[12];
setVector ve922 = mv923[0,1];
dotVectors mv921[0] = <ve922>;
setMv mv920[0] = mv921[-0];
resetMv mv924[1];
resetMv mv925[1];
setVector ve926 = nen[1,2,3];
setVector ve927 = nen[1,2,3];
dotVectors mv925[0] = <ve926,ve927>;
resetMv mv928[1];
setMv mv928[0] = nen[3];
resetMv mv929[1];
setMv mv929[0] = mv925[0];
calculateMvCoeff mv924[0] = DIVISION(mv928,mv929);
resetMv mv930[1];
resetMv mv932[2];
setMv mv932[1] = len[14];
setMv mv932[0] = rcPpDual[14];
setVector ve931 = mv932[0,1];
dotVectors mv930[0] = <ve931>;
resetMv mv933[1];
resetMv mv934[1];
setVector ve935 = nen[1,2,3];
setVector ve936 = nen[1,2,3];
dotVectors mv934[0] = <ve935,ve936>;
resetMv mv937[1];
setMv mv937[0] = nen[2];
resetMv mv938[1];
setMv mv938[0] = mv934[0];
calculateMvCoeff mv933[0] = DIVISION(mv937,mv938);
resetMv mv939[1];
resetMv mv940[1];
setVector ve941 = nen[1,2,3];
setVector ve942 = nen[1,2,3];
dotVectors mv940[0] = <ve941,ve942>;
resetMv mv943[1];
setMv mv943[0] = nen[1];
resetMv mv944[1];
setMv mv944[0] = mv940[0];
calculateMvCoeff mv939[0] = DIVISION(mv943,mv944);
resetMv mv946[3];
setMv mv946[1] = mv930[0];
setMv mv946[2] = len[-27];
setMv mv946[0] = mv920[0];
setVector ve945 = mv946[0,1,2];
resetMv mv948[3];
setMv mv948[0] = mv924[0];
setMv mv948[1] = mv933[0];
setMv mv948[2] = mv939[0];
setVector ve947 = mv948[0,1,2];
dotVectors rc1[23] = <ve945,ve947>;

//rc1[24] = (((-((rcPpDual[12] + len[12]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] + len[15]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[28] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[30] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv949[1];
resetMv mv950[1];
resetMv mv952[2];
setMv mv952[1] = len[12];
setMv mv952[0] = rcPpDual[12];
setVector ve951 = mv952[0,1];
dotVectors mv950[0] = <ve951>;
setMv mv949[0] = mv950[-0];
resetMv mv953[1];
resetMv mv954[1];
setVector ve955 = nen[1,2,3];
setVector ve956 = nen[1,2,3];
dotVectors mv954[0] = <ve955,ve956>;
resetMv mv957[1];
setMv mv957[0] = nen[4];
resetMv mv958[1];
setMv mv958[0] = mv954[0];
calculateMvCoeff mv953[0] = DIVISION(mv957,mv958);
resetMv mv959[1];
resetMv mv961[2];
setMv mv961[1] = len[15];
setMv mv961[0] = rcPpDual[15];
setVector ve960 = mv961[0,1];
dotVectors mv959[0] = <ve960>;
resetMv mv962[1];
resetMv mv963[1];
setVector ve964 = nen[1,2,3];
setVector ve965 = nen[1,2,3];
dotVectors mv963[0] = <ve964,ve965>;
resetMv mv966[1];
setMv mv966[0] = nen[2];
resetMv mv967[1];
setMv mv967[0] = mv963[0];
calculateMvCoeff mv962[0] = DIVISION(mv966,mv967);
resetMv mv968[1];
resetMv mv969[1];
setVector ve970 = nen[1,2,3];
setVector ve971 = nen[1,2,3];
dotVectors mv969[0] = <ve970,ve971>;
resetMv mv972[1];
setMv mv972[0] = nen[1];
resetMv mv973[1];
setMv mv973[0] = mv969[0];
calculateMvCoeff mv968[0] = DIVISION(mv972,mv973);
resetMv mv974[1];
resetMv mv975[1];
setVector ve976 = nen[1,2,3];
setVector ve977 = nen[1,2,3];
dotVectors mv975[0] = <ve976,ve977>;
resetMv mv978[1];
setMv mv978[0] = nen[3];
resetMv mv979[1];
setMv mv979[0] = mv975[0];
calculateMvCoeff mv974[0] = DIVISION(mv978,mv979);
resetMv mv981[4];
setMv mv981[1] = mv959[0];
setMv mv981[2,3] = len[-28,30];
setMv mv981[0] = mv949[0];
setVector ve980 = mv981[0,1,2,3];
resetMv mv983[4];
setMv mv983[1] = mv962[0];
setMv mv983[0] = mv953[0];
setMv mv983[2] = mv968[0];
setMv mv983[3] = mv974[0];
setVector ve982 = mv983[0,1,2,3];
dotVectors rc1[24] = <ve980,ve982>;

//rc1[25] = (((-((rcPpDual[14] + len[14]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] + len[15]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[29] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[30] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv984[1];
resetMv mv985[1];
resetMv mv987[2];
setMv mv987[1] = len[14];
setMv mv987[0] = rcPpDual[14];
setVector ve986 = mv987[0,1];
dotVectors mv985[0] = <ve986>;
setMv mv984[0] = mv985[-0];
resetMv mv988[1];
resetMv mv989[1];
setVector ve990 = nen[1,2,3];
setVector ve991 = nen[1,2,3];
dotVectors mv989[0] = <ve990,ve991>;
resetMv mv992[1];
setMv mv992[0] = nen[4];
resetMv mv993[1];
setMv mv993[0] = mv989[0];
calculateMvCoeff mv988[0] = DIVISION(mv992,mv993);
resetMv mv994[1];
resetMv mv996[2];
setMv mv996[1] = len[15];
setMv mv996[0] = rcPpDual[15];
setVector ve995 = mv996[0,1];
dotVectors mv994[0] = <ve995>;
resetMv mv997[1];
resetMv mv998[1];
setVector ve999 = nen[1,2,3];
setVector ve1000 = nen[1,2,3];
dotVectors mv998[0] = <ve999,ve1000>;
resetMv mv1001[1];
setMv mv1001[0] = nen[3];
resetMv mv1002[1];
setMv mv1002[0] = mv998[0];
calculateMvCoeff mv997[0] = DIVISION(mv1001,mv1002);
resetMv mv1003[1];
resetMv mv1004[1];
setVector ve1005 = nen[1,2,3];
setVector ve1006 = nen[1,2,3];
dotVectors mv1004[0] = <ve1005,ve1006>;
resetMv mv1007[1];
setMv mv1007[0] = nen[1];
resetMv mv1008[1];
setMv mv1008[0] = mv1004[0];
calculateMvCoeff mv1003[0] = DIVISION(mv1007,mv1008);
resetMv mv1009[1];
resetMv mv1010[1];
setVector ve1011 = nen[1,2,3];
setVector ve1012 = nen[1,2,3];
dotVectors mv1010[0] = <ve1011,ve1012>;
resetMv mv1013[1];
setMv mv1013[0] = nen[2];
resetMv mv1014[1];
setMv mv1014[0] = mv1010[0];
calculateMvCoeff mv1009[0] = DIVISION(mv1013,mv1014);
resetMv mv1016[4];
setMv mv1016[2,3] = len[-29,-30];
setMv mv1016[0] = mv984[0];
setMv mv1016[1] = mv994[0];
setVector ve1015 = mv1016[0,1,2,3];
resetMv mv1018[4];
setMv mv1018[0] = mv988[0];
setMv mv1018[2] = mv1003[0];
setMv mv1018[1] = mv997[0];
setMv mv1018[3] = mv1009[0];
setVector ve1017 = mv1018[0,1,2,3];
dotVectors rc1[25] = <ve1015,ve1017>;

//rc1[26] = ((((len[16] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-(len[17] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[19] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[22] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[31] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1019[1];
resetMv mv1020[1];
setVector ve1021 = nen[1,2,3];
setVector ve1022 = nen[1,2,3];
dotVectors mv1020[0] = <ve1021,ve1022>;
resetMv mv1023[1];
setMv mv1023[0] = nen[4];
resetMv mv1024[1];
setMv mv1024[0] = mv1020[0];
calculateMvCoeff mv1019[0] = DIVISION(mv1023,mv1024);
resetMv mv1025[1];
resetMv mv1026[1];
setVector ve1027 = nen[1,2,3];
setVector ve1028 = nen[1,2,3];
dotVectors mv1026[0] = <ve1027,ve1028>;
resetMv mv1029[1];
setMv mv1029[0] = nen[3];
resetMv mv1030[1];
setMv mv1030[0] = mv1026[0];
calculateMvCoeff mv1025[0] = DIVISION(mv1029,mv1030);
resetMv mv1031[1];
resetMv mv1032[1];
setVector ve1033 = nen[1,2,3];
setVector ve1034 = nen[1,2,3];
dotVectors mv1032[0] = <ve1033,ve1034>;
resetMv mv1035[1];
setMv mv1035[0] = nen[2];
resetMv mv1036[1];
setMv mv1036[0] = mv1032[0];
calculateMvCoeff mv1031[0] = DIVISION(mv1035,mv1036);
resetMv mv1037[1];
resetMv mv1038[1];
setVector ve1039 = nen[1,2,3];
setVector ve1040 = nen[1,2,3];
dotVectors mv1038[0] = <ve1039,ve1040>;
resetMv mv1041[1];
setMv mv1041[0] = nen[1];
resetMv mv1042[1];
setMv mv1042[0] = mv1038[0];
calculateMvCoeff mv1037[0] = DIVISION(mv1041,mv1042);
resetMv mv1043[1];
resetMv mv1044[1];
setVector ve1045 = nen[1,2,3];
setVector ve1046 = nen[1,2,3];
dotVectors mv1044[0] = <ve1045,ve1046>;
resetMv mv1047[1];
setMv mv1047[0] = nen[4];
resetMv mv1048[1];
setMv mv1048[0] = mv1044[0];
calculateMvCoeff mv1043[0] = DIVISION(mv1047,mv1048);
setVector ve1049 = len[16,-17,19,-22,-31];
resetMv mv1051[5];
setMv mv1051[1] = mv1025[0];
setMv mv1051[3] = mv1037[0];
setMv mv1051[4] = mv1043[0];
setMv mv1051[0] = mv1019[0];
setMv mv1051[2] = mv1031[0];
setVector ve1050 = mv1051[0,1,2,3,4];
dotVectors rc1[26] = <ve1049,ve1050>;

//rc1[27] = ((-(len[18] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[20] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[23] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1052[1];
resetMv mv1053[1];
setVector ve1054 = nen[1,2,3];
setVector ve1055 = nen[1,2,3];
dotVectors mv1053[0] = <ve1054,ve1055>;
resetMv mv1056[1];
setMv mv1056[0] = nen[3];
resetMv mv1057[1];
setMv mv1057[0] = mv1053[0];
calculateMvCoeff mv1052[0] = DIVISION(mv1056,mv1057);
resetMv mv1058[1];
resetMv mv1059[1];
setVector ve1060 = nen[1,2,3];
setVector ve1061 = nen[1,2,3];
dotVectors mv1059[0] = <ve1060,ve1061>;
resetMv mv1062[1];
setMv mv1062[0] = nen[2];
resetMv mv1063[1];
setMv mv1063[0] = mv1059[0];
calculateMvCoeff mv1058[0] = DIVISION(mv1062,mv1063);
resetMv mv1064[1];
resetMv mv1065[1];
setVector ve1066 = nen[1,2,3];
setVector ve1067 = nen[1,2,3];
dotVectors mv1065[0] = <ve1066,ve1067>;
resetMv mv1068[1];
setMv mv1068[0] = nen[1];
resetMv mv1069[1];
setMv mv1069[0] = mv1065[0];
calculateMvCoeff mv1064[0] = DIVISION(mv1068,mv1069);
setVector ve1070 = len[-18,20,-23];
resetMv mv1072[3];
setMv mv1072[2] = mv1064[0];
setMv mv1072[0] = mv1052[0];
setMv mv1072[1] = mv1058[0];
setVector ve1071 = mv1072[0,1,2];
dotVectors rc1[27] = <ve1070,ve1071>;

//rc1[28] = (((-(len[18] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[21] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[24] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[31] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv1073[1];
resetMv mv1074[1];
setVector ve1075 = nen[1,2,3];
setVector ve1076 = nen[1,2,3];
dotVectors mv1074[0] = <ve1075,ve1076>;
resetMv mv1077[1];
setMv mv1077[0] = nen[4];
resetMv mv1078[1];
setMv mv1078[0] = mv1074[0];
calculateMvCoeff mv1073[0] = DIVISION(mv1077,mv1078);
resetMv mv1079[1];
resetMv mv1080[1];
setVector ve1081 = nen[1,2,3];
setVector ve1082 = nen[1,2,3];
dotVectors mv1080[0] = <ve1081,ve1082>;
resetMv mv1083[1];
setMv mv1083[0] = nen[2];
resetMv mv1084[1];
setMv mv1084[0] = mv1080[0];
calculateMvCoeff mv1079[0] = DIVISION(mv1083,mv1084);
resetMv mv1085[1];
resetMv mv1086[1];
setVector ve1087 = nen[1,2,3];
setVector ve1088 = nen[1,2,3];
dotVectors mv1086[0] = <ve1087,ve1088>;
resetMv mv1089[1];
setMv mv1089[0] = nen[1];
resetMv mv1090[1];
setMv mv1090[0] = mv1086[0];
calculateMvCoeff mv1085[0] = DIVISION(mv1089,mv1090);
resetMv mv1091[1];
resetMv mv1092[1];
setVector ve1093 = nen[1,2,3];
setVector ve1094 = nen[1,2,3];
dotVectors mv1092[0] = <ve1093,ve1094>;
resetMv mv1095[1];
setMv mv1095[0] = nen[3];
resetMv mv1096[1];
setMv mv1096[0] = mv1092[0];
calculateMvCoeff mv1091[0] = DIVISION(mv1095,mv1096);
setVector ve1097 = len[-18,21,-24,31];
resetMv mv1099[4];
setMv mv1099[0] = mv1073[0];
setMv mv1099[3] = mv1091[0];
setMv mv1099[2] = mv1085[0];
setMv mv1099[1] = mv1079[0];
setVector ve1098 = mv1099[0,1,2,3];
dotVectors rc1[28] = <ve1097,ve1098>;

//rc1[29] = (((-(len[20] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[21] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[25] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-(len[31] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1100[1];
resetMv mv1101[1];
setVector ve1102 = nen[1,2,3];
setVector ve1103 = nen[1,2,3];
dotVectors mv1101[0] = <ve1102,ve1103>;
resetMv mv1104[1];
setMv mv1104[0] = nen[4];
resetMv mv1105[1];
setMv mv1105[0] = mv1101[0];
calculateMvCoeff mv1100[0] = DIVISION(mv1104,mv1105);
resetMv mv1106[1];
resetMv mv1107[1];
setVector ve1108 = nen[1,2,3];
setVector ve1109 = nen[1,2,3];
dotVectors mv1107[0] = <ve1108,ve1109>;
resetMv mv1110[1];
setMv mv1110[0] = nen[3];
resetMv mv1111[1];
setMv mv1111[0] = mv1107[0];
calculateMvCoeff mv1106[0] = DIVISION(mv1110,mv1111);
resetMv mv1112[1];
resetMv mv1113[1];
setVector ve1114 = nen[1,2,3];
setVector ve1115 = nen[1,2,3];
dotVectors mv1113[0] = <ve1114,ve1115>;
resetMv mv1116[1];
setMv mv1116[0] = nen[1];
resetMv mv1117[1];
setMv mv1117[0] = mv1113[0];
calculateMvCoeff mv1112[0] = DIVISION(mv1116,mv1117);
resetMv mv1118[1];
resetMv mv1119[1];
setVector ve1120 = nen[1,2,3];
setVector ve1121 = nen[1,2,3];
dotVectors mv1119[0] = <ve1120,ve1121>;
resetMv mv1122[1];
setMv mv1122[0] = nen[2];
resetMv mv1123[1];
setMv mv1123[0] = mv1119[0];
calculateMvCoeff mv1118[0] = DIVISION(mv1122,mv1123);
setVector ve1124 = len[-20,21,-25,-31];
resetMv mv1126[4];
setMv mv1126[2] = mv1112[0];
setMv mv1126[0] = mv1100[0];
setMv mv1126[1] = mv1106[0];
setMv mv1126[3] = mv1118[0];
setVector ve1125 = mv1126[0,1,2,3];
dotVectors rc1[29] = <ve1124,ve1125>;

//rc1[30] = (((-(len[23] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[24] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[25] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[31] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv1127[1];
resetMv mv1128[1];
setVector ve1129 = nen[1,2,3];
setVector ve1130 = nen[1,2,3];
dotVectors mv1128[0] = <ve1129,ve1130>;
resetMv mv1131[1];
setMv mv1131[0] = nen[4];
resetMv mv1132[1];
setMv mv1132[0] = mv1128[0];
calculateMvCoeff mv1127[0] = DIVISION(mv1131,mv1132);
resetMv mv1133[1];
resetMv mv1134[1];
setVector ve1135 = nen[1,2,3];
setVector ve1136 = nen[1,2,3];
dotVectors mv1134[0] = <ve1135,ve1136>;
resetMv mv1137[1];
setMv mv1137[0] = nen[3];
resetMv mv1138[1];
setMv mv1138[0] = mv1134[0];
calculateMvCoeff mv1133[0] = DIVISION(mv1137,mv1138);
resetMv mv1139[1];
resetMv mv1140[1];
setVector ve1141 = nen[1,2,3];
setVector ve1142 = nen[1,2,3];
dotVectors mv1140[0] = <ve1141,ve1142>;
resetMv mv1143[1];
setMv mv1143[0] = nen[2];
resetMv mv1144[1];
setMv mv1144[0] = mv1140[0];
calculateMvCoeff mv1139[0] = DIVISION(mv1143,mv1144);
resetMv mv1145[1];
resetMv mv1146[1];
setVector ve1147 = nen[1,2,3];
setVector ve1148 = nen[1,2,3];
dotVectors mv1146[0] = <ve1147,ve1148>;
resetMv mv1149[1];
setMv mv1149[0] = nen[1];
resetMv mv1150[1];
setMv mv1150[0] = mv1146[0];
calculateMvCoeff mv1145[0] = DIVISION(mv1149,mv1150);
setVector ve1151 = len[-23,24,-25,31];
resetMv mv1153[4];
setMv mv1153[3] = mv1145[0];
setMv mv1153[0] = mv1127[0];
setMv mv1153[2] = mv1139[0];
setMv mv1153[1] = mv1133[0];
setVector ve1152 = mv1153[0,1,2,3];
dotVectors rc1[30] = <ve1151,ve1152>;

//rc1[31] = (((-(len[27] * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (len[28] * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-(len[29] * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (len[30] * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv1154[1];
resetMv mv1155[1];
setVector ve1156 = nen[1,2,3];
setVector ve1157 = nen[1,2,3];
dotVectors mv1155[0] = <ve1156,ve1157>;
resetMv mv1158[1];
setMv mv1158[0] = nen[4];
resetMv mv1159[1];
setMv mv1159[0] = mv1155[0];
calculateMvCoeff mv1154[0] = DIVISION(mv1158,mv1159);
resetMv mv1160[1];
resetMv mv1161[1];
setVector ve1162 = nen[1,2,3];
setVector ve1163 = nen[1,2,3];
dotVectors mv1161[0] = <ve1162,ve1163>;
resetMv mv1164[1];
setMv mv1164[0] = nen[3];
resetMv mv1165[1];
setMv mv1165[0] = mv1161[0];
calculateMvCoeff mv1160[0] = DIVISION(mv1164,mv1165);
resetMv mv1166[1];
resetMv mv1167[1];
setVector ve1168 = nen[1,2,3];
setVector ve1169 = nen[1,2,3];
dotVectors mv1167[0] = <ve1168,ve1169>;
resetMv mv1170[1];
setMv mv1170[0] = nen[2];
resetMv mv1171[1];
setMv mv1171[0] = mv1167[0];
calculateMvCoeff mv1166[0] = DIVISION(mv1170,mv1171);
resetMv mv1172[1];
resetMv mv1173[1];
setVector ve1174 = nen[1,2,3];
setVector ve1175 = nen[1,2,3];
dotVectors mv1173[0] = <ve1174,ve1175>;
resetMv mv1176[1];
setMv mv1176[0] = nen[1];
resetMv mv1177[1];
setMv mv1177[0] = mv1173[0];
calculateMvCoeff mv1172[0] = DIVISION(mv1176,mv1177);
setVector ve1178 = len[-27,28,-29,30];
resetMv mv1180[4];
setMv mv1180[2] = mv1166[0];
setMv mv1180[0] = mv1154[0];
setMv mv1180[1] = mv1160[0];
setMv mv1180[3] = mv1172[0];
setVector ve1179 = mv1180[0,1,2,3];
dotVectors rc1[31] = <ve1178,ve1179>;

//rc1N[1] = ((((((((((((((((-(rc1[0])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[2])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[3])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[5])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[6])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[7])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[9])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[10])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[12])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[14])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[16])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[18])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[20])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[23])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[27])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv rc1N[32];
resetMv mv1181[1];
resetMv mv1182[1];
setVector ve1183 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1184 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1182[0] = <ve1183,ve1184>;
resetMv mv1185[1];
setMv mv1185[0] = rc1[-9];
resetMv mv1186[1];
setMv mv1186[0] = mv1182[0];
calculateMvCoeff mv1181[0] = DIVISION(mv1185,mv1186);
resetMv mv1187[1];
resetMv mv1188[1];
setVector ve1189 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1190 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1188[0] = <ve1189,ve1190>;
resetMv mv1191[1];
setMv mv1191[0] = rc1[-5];
resetMv mv1192[1];
setMv mv1192[0] = mv1188[0];
calculateMvCoeff mv1187[0] = DIVISION(mv1191,mv1192);
resetMv mv1193[1];
resetMv mv1194[1];
setVector ve1195 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1196 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1194[0] = <ve1195,ve1196>;
resetMv mv1197[1];
setMv mv1197[0] = rc1[18];
resetMv mv1198[1];
setMv mv1198[0] = mv1194[0];
calculateMvCoeff mv1193[0] = DIVISION(mv1197,mv1198);
resetMv mv1199[1];
resetMv mv1200[1];
setVector ve1201 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1202 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1200[0] = <ve1201,ve1202>;
resetMv mv1203[1];
setMv mv1203[0] = rc1[20];
resetMv mv1204[1];
setMv mv1204[0] = mv1200[0];
calculateMvCoeff mv1199[0] = DIVISION(mv1203,mv1204);
resetMv mv1205[1];
resetMv mv1206[1];
setVector ve1207 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1208 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1206[0] = <ve1207,ve1208>;
resetMv mv1209[1];
setMv mv1209[0] = rc1[21];
resetMv mv1210[1];
setMv mv1210[0] = mv1206[0];
calculateMvCoeff mv1205[0] = DIVISION(mv1209,mv1210);
resetMv mv1211[1];
resetMv mv1212[1];
setVector ve1213 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1214 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1212[0] = <ve1213,ve1214>;
resetMv mv1215[1];
setMv mv1215[0] = rc1[-12];
resetMv mv1216[1];
setMv mv1216[0] = mv1212[0];
calculateMvCoeff mv1211[0] = DIVISION(mv1215,mv1216);
resetMv mv1217[1];
resetMv mv1218[1];
setVector ve1219 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1220 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1218[0] = <ve1219,ve1220>;
resetMv mv1221[1];
setMv mv1221[0] = rc1[-14];
resetMv mv1222[1];
setMv mv1222[0] = mv1218[0];
calculateMvCoeff mv1217[0] = DIVISION(mv1221,mv1222);
resetMv mv1223[1];
resetMv mv1224[1];
setVector ve1225 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1226 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1224[0] = <ve1225,ve1226>;
resetMv mv1227[1];
setMv mv1227[0] = rc1[-15];
resetMv mv1228[1];
setMv mv1228[0] = mv1224[0];
calculateMvCoeff mv1223[0] = DIVISION(mv1227,mv1228);
resetMv mv1229[1];
resetMv mv1230[1];
setVector ve1231 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1232 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1230[0] = <ve1231,ve1232>;
resetMv mv1233[1];
setMv mv1233[0] = rc1[27];
resetMv mv1234[1];
setMv mv1234[0] = mv1230[0];
calculateMvCoeff mv1229[0] = DIVISION(mv1233,mv1234);
resetMv mv1235[1];
resetMv mv1236[1];
setVector ve1237 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1238 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1236[0] = <ve1237,ve1238>;
resetMv mv1239[1];
setMv mv1239[0] = rc1[28];
resetMv mv1240[1];
setMv mv1240[0] = mv1236[0];
calculateMvCoeff mv1235[0] = DIVISION(mv1239,mv1240);
resetMv mv1241[1];
resetMv mv1242[1];
setVector ve1243 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1244 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1242[0] = <ve1243,ve1244>;
resetMv mv1245[1];
setMv mv1245[0] = rc1[29];
resetMv mv1246[1];
setMv mv1246[0] = mv1242[0];
calculateMvCoeff mv1241[0] = DIVISION(mv1245,mv1246);
resetMv mv1247[1];
resetMv mv1248[1];
setVector ve1249 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1250 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1248[0] = <ve1249,ve1250>;
resetMv mv1251[1];
setMv mv1251[0] = rc1[23];
resetMv mv1252[1];
setMv mv1252[0] = mv1248[0];
calculateMvCoeff mv1247[0] = DIVISION(mv1251,mv1252);
resetMv mv1253[1];
resetMv mv1254[1];
setVector ve1255 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1256 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1254[0] = <ve1255,ve1256>;
resetMv mv1257[1];
setMv mv1257[0] = rc1[24];
resetMv mv1258[1];
setMv mv1258[0] = mv1254[0];
calculateMvCoeff mv1253[0] = DIVISION(mv1257,mv1258);
resetMv mv1259[1];
resetMv mv1260[1];
setVector ve1261 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1262 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1260[0] = <ve1261,ve1262>;
resetMv mv1263[1];
setMv mv1263[0] = rc1[25];
resetMv mv1264[1];
setMv mv1264[0] = mv1260[0];
calculateMvCoeff mv1259[0] = DIVISION(mv1263,mv1264);
resetMv mv1265[1];
resetMv mv1266[1];
setVector ve1267 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1268 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1266[0] = <ve1267,ve1268>;
resetMv mv1269[1];
setMv mv1269[0] = rc1[-31];
resetMv mv1270[1];
setMv mv1270[0] = mv1266[0];
calculateMvCoeff mv1265[0] = DIVISION(mv1269,mv1270);
resetMv mv1271[1];
resetMv mv1272[1];
setVector ve1273 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1274 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1272[0] = <ve1273,ve1274>;
resetMv mv1275[1];
setMv mv1275[0] = rc1[30];
resetMv mv1276[1];
setMv mv1276[0] = mv1272[0];
calculateMvCoeff mv1271[0] = DIVISION(mv1275,mv1276);
setVector ve1277 = rc1[-0,-1,2,3,-5,-6,-7,9,10,-12,-14,16,-18,-20,23,-27];
resetMv mv1279[16];
setMv mv1279[8] = mv1229[0];
setMv mv1279[6] = mv1217[0];
setMv mv1279[14] = mv1265[0];
setMv mv1279[11] = mv1247[0];
setMv mv1279[13] = mv1259[0];
setMv mv1279[1] = mv1187[0];
setMv mv1279[12] = mv1253[0];
setMv mv1279[3] = mv1199[0];
setMv mv1279[10] = mv1241[0];
setMv mv1279[4] = mv1205[0];
setMv mv1279[7] = mv1223[0];
setMv mv1279[9] = mv1235[0];
setMv mv1279[15] = mv1271[0];
setMv mv1279[2] = mv1193[0];
setMv mv1279[0] = mv1181[0];
setMv mv1279[5] = mv1211[0];
setVector ve1278 = mv1279[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
dotVectors rc1N[1] = <ve1277,ve1278>;

//rc1N[2] = ((((((((((((((((-(rc1[0])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[2])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[3])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[5])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[6])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[7])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[9])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[10])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[12])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[14])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[16])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[18])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[20])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[23])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[27])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))
resetMv mv1280[1];
resetMv mv1281[1];
setVector ve1282 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1283 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1281[0] = <ve1282,ve1283>;
resetMv mv1284[1];
setMv mv1284[0] = rc1[-12];
resetMv mv1285[1];
setMv mv1285[0] = mv1281[0];
calculateMvCoeff mv1280[0] = DIVISION(mv1284,mv1285);
resetMv mv1286[1];
resetMv mv1287[1];
setVector ve1288 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1289 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1287[0] = <ve1288,ve1289>;
resetMv mv1290[1];
setMv mv1290[0] = rc1[18];
resetMv mv1291[1];
setMv mv1291[0] = mv1287[0];
calculateMvCoeff mv1286[0] = DIVISION(mv1290,mv1291);
resetMv mv1292[1];
resetMv mv1293[1];
setVector ve1294 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1295 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1293[0] = <ve1294,ve1295>;
resetMv mv1296[1];
setMv mv1296[0] = rc1[-5];
resetMv mv1297[1];
setMv mv1297[0] = mv1293[0];
calculateMvCoeff mv1292[0] = DIVISION(mv1296,mv1297);
resetMv mv1298[1];
resetMv mv1299[1];
setVector ve1300 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1301 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1299[0] = <ve1300,ve1301>;
resetMv mv1302[1];
setMv mv1302[0] = rc1[23];
resetMv mv1303[1];
setMv mv1303[0] = mv1299[0];
calculateMvCoeff mv1298[0] = DIVISION(mv1302,mv1303);
resetMv mv1304[1];
resetMv mv1305[1];
setVector ve1306 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1307 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1305[0] = <ve1306,ve1307>;
resetMv mv1308[1];
setMv mv1308[0] = rc1[24];
resetMv mv1309[1];
setMv mv1309[0] = mv1305[0];
calculateMvCoeff mv1304[0] = DIVISION(mv1308,mv1309);
resetMv mv1310[1];
resetMv mv1311[1];
setVector ve1312 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1313 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1311[0] = <ve1312,ve1313>;
resetMv mv1314[1];
setMv mv1314[0] = rc1[-9];
resetMv mv1315[1];
setMv mv1315[0] = mv1311[0];
calculateMvCoeff mv1310[0] = DIVISION(mv1314,mv1315);
resetMv mv1316[1];
resetMv mv1317[1];
setVector ve1318 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1319 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1317[0] = <ve1318,ve1319>;
resetMv mv1320[1];
setMv mv1320[0] = rc1[27];
resetMv mv1321[1];
setMv mv1321[0] = mv1317[0];
calculateMvCoeff mv1316[0] = DIVISION(mv1320,mv1321);
resetMv mv1322[1];
resetMv mv1323[1];
setVector ve1324 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1325 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1323[0] = <ve1324,ve1325>;
resetMv mv1326[1];
setMv mv1326[0] = rc1[28];
resetMv mv1327[1];
setMv mv1327[0] = mv1323[0];
calculateMvCoeff mv1322[0] = DIVISION(mv1326,mv1327);
resetMv mv1328[1];
resetMv mv1329[1];
setVector ve1330 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1331 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1329[0] = <ve1330,ve1331>;
resetMv mv1332[1];
setMv mv1332[0] = rc1[-14];
resetMv mv1333[1];
setMv mv1333[0] = mv1329[0];
calculateMvCoeff mv1328[0] = DIVISION(mv1332,mv1333);
resetMv mv1334[1];
resetMv mv1335[1];
setVector ve1336 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1337 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1335[0] = <ve1336,ve1337>;
resetMv mv1338[1];
setMv mv1338[0] = rc1[-15];
resetMv mv1339[1];
setMv mv1339[0] = mv1335[0];
calculateMvCoeff mv1334[0] = DIVISION(mv1338,mv1339);
resetMv mv1340[1];
resetMv mv1341[1];
setVector ve1342 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1343 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1341[0] = <ve1342,ve1343>;
resetMv mv1344[1];
setMv mv1344[0] = rc1[30];
resetMv mv1345[1];
setMv mv1345[0] = mv1341[0];
calculateMvCoeff mv1340[0] = DIVISION(mv1344,mv1345);
resetMv mv1346[1];
resetMv mv1347[1];
setVector ve1348 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1349 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1347[0] = <ve1348,ve1349>;
resetMv mv1350[1];
setMv mv1350[0] = rc1[20];
resetMv mv1351[1];
setMv mv1351[0] = mv1347[0];
calculateMvCoeff mv1346[0] = DIVISION(mv1350,mv1351);
resetMv mv1352[1];
resetMv mv1353[1];
setVector ve1354 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1355 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1353[0] = <ve1354,ve1355>;
resetMv mv1356[1];
setMv mv1356[0] = rc1[21];
resetMv mv1357[1];
setMv mv1357[0] = mv1353[0];
calculateMvCoeff mv1352[0] = DIVISION(mv1356,mv1357);
resetMv mv1358[1];
resetMv mv1359[1];
setVector ve1360 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1361 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1359[0] = <ve1360,ve1361>;
resetMv mv1362[1];
setMv mv1362[0] = rc1[-31];
resetMv mv1363[1];
setMv mv1363[0] = mv1359[0];
calculateMvCoeff mv1358[0] = DIVISION(mv1362,mv1363);
resetMv mv1364[1];
resetMv mv1365[1];
setVector ve1366 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1367 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1365[0] = <ve1366,ve1367>;
resetMv mv1368[1];
setMv mv1368[0] = rc1[25];
resetMv mv1369[1];
setMv mv1369[0] = mv1365[0];
calculateMvCoeff mv1364[0] = DIVISION(mv1368,mv1369);
resetMv mv1370[1];
resetMv mv1371[1];
setVector ve1372 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1373 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1371[0] = <ve1372,ve1373>;
resetMv mv1374[1];
setMv mv1374[0] = rc1[29];
resetMv mv1375[1];
setMv mv1375[0] = mv1371[0];
calculateMvCoeff mv1370[0] = DIVISION(mv1374,mv1375);
setVector ve1376 = rc1[-0,-1,-2,3,-5,6,-7,9,-10,12,-14,-16,18,-20,-23,27];
resetMv mv1378[16];
setMv mv1378[2] = mv1292[0];
setMv mv1378[0] = mv1280[0];
setMv mv1378[1] = mv1286[0];
setMv mv1378[5] = mv1310[0];
setMv mv1378[3] = mv1298[0];
setMv mv1378[4] = mv1304[0];
setMv mv1378[8] = mv1328[0];
setMv mv1378[9] = mv1334[0];
setMv mv1378[12] = mv1352[0];
setMv mv1378[15] = mv1370[0];
setMv mv1378[6] = mv1316[0];
setMv mv1378[7] = mv1322[0];
setMv mv1378[13] = mv1358[0];
setMv mv1378[11] = mv1346[0];
setMv mv1378[10] = mv1340[0];
setMv mv1378[14] = mv1364[0];
setVector ve1377 = mv1378[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
dotVectors rc1N[2] = <ve1376,ve1377>;

//rc1N[3] = ((((((((((((((((-(rc1[0])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[2])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[3])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[5])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[6])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[7])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[9])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[10])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[12])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[14])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[16])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[18])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[20])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[23])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[27])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv mv1379[1];
resetMv mv1380[1];
setVector ve1381 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1382 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1380[0] = <ve1381,ve1382>;
resetMv mv1383[1];
setMv mv1383[0] = rc1[-14];
resetMv mv1384[1];
setMv mv1384[0] = mv1380[0];
calculateMvCoeff mv1379[0] = DIVISION(mv1383,mv1384);
resetMv mv1385[1];
resetMv mv1386[1];
setVector ve1387 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1388 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1386[0] = <ve1387,ve1388>;
resetMv mv1389[1];
setMv mv1389[0] = rc1[20];
resetMv mv1390[1];
setMv mv1390[0] = mv1386[0];
calculateMvCoeff mv1385[0] = DIVISION(mv1389,mv1390);
resetMv mv1391[1];
resetMv mv1392[1];
setVector ve1393 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1394 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1392[0] = <ve1393,ve1394>;
resetMv mv1395[1];
setMv mv1395[0] = rc1[23];
resetMv mv1396[1];
setMv mv1396[0] = mv1392[0];
calculateMvCoeff mv1391[0] = DIVISION(mv1395,mv1396);
resetMv mv1397[1];
resetMv mv1398[1];
setVector ve1399 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1400 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1398[0] = <ve1399,ve1400>;
resetMv mv1401[1];
setMv mv1401[0] = rc1[-5];
resetMv mv1402[1];
setMv mv1402[0] = mv1398[0];
calculateMvCoeff mv1397[0] = DIVISION(mv1401,mv1402);
resetMv mv1403[1];
resetMv mv1404[1];
setVector ve1405 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1406 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1404[0] = <ve1405,ve1406>;
resetMv mv1407[1];
setMv mv1407[0] = rc1[25];
resetMv mv1408[1];
setMv mv1408[0] = mv1404[0];
calculateMvCoeff mv1403[0] = DIVISION(mv1407,mv1408);
resetMv mv1409[1];
resetMv mv1410[1];
setVector ve1411 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1412 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1410[0] = <ve1411,ve1412>;
resetMv mv1413[1];
setMv mv1413[0] = rc1[27];
resetMv mv1414[1];
setMv mv1414[0] = mv1410[0];
calculateMvCoeff mv1409[0] = DIVISION(mv1413,mv1414);
resetMv mv1415[1];
resetMv mv1416[1];
setVector ve1417 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1418 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1416[0] = <ve1417,ve1418>;
resetMv mv1419[1];
setMv mv1419[0] = rc1[-9];
resetMv mv1420[1];
setMv mv1420[0] = mv1416[0];
calculateMvCoeff mv1415[0] = DIVISION(mv1419,mv1420);
resetMv mv1421[1];
resetMv mv1422[1];
setVector ve1423 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1424 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1422[0] = <ve1423,ve1424>;
resetMv mv1425[1];
setMv mv1425[0] = rc1[29];
resetMv mv1426[1];
setMv mv1426[0] = mv1422[0];
calculateMvCoeff mv1421[0] = DIVISION(mv1425,mv1426);
resetMv mv1427[1];
resetMv mv1428[1];
setVector ve1429 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1430 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1428[0] = <ve1429,ve1430>;
resetMv mv1431[1];
setMv mv1431[0] = rc1[-12];
resetMv mv1432[1];
setMv mv1432[0] = mv1428[0];
calculateMvCoeff mv1427[0] = DIVISION(mv1431,mv1432);
resetMv mv1433[1];
resetMv mv1434[1];
setVector ve1435 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1436 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1434[0] = <ve1435,ve1436>;
resetMv mv1437[1];
setMv mv1437[0] = rc1[30];
resetMv mv1438[1];
setMv mv1438[0] = mv1434[0];
calculateMvCoeff mv1433[0] = DIVISION(mv1437,mv1438);
resetMv mv1439[1];
resetMv mv1440[1];
setVector ve1441 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1442 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1440[0] = <ve1441,ve1442>;
resetMv mv1443[1];
setMv mv1443[0] = rc1[-15];
resetMv mv1444[1];
setMv mv1444[0] = mv1440[0];
calculateMvCoeff mv1439[0] = DIVISION(mv1443,mv1444);
resetMv mv1445[1];
resetMv mv1446[1];
setVector ve1447 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1448 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1446[0] = <ve1447,ve1448>;
resetMv mv1449[1];
setMv mv1449[0] = rc1[18];
resetMv mv1450[1];
setMv mv1450[0] = mv1446[0];
calculateMvCoeff mv1445[0] = DIVISION(mv1449,mv1450);
resetMv mv1451[1];
resetMv mv1452[1];
setVector ve1453 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1454 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1452[0] = <ve1453,ve1454>;
resetMv mv1455[1];
setMv mv1455[0] = rc1[-31];
resetMv mv1456[1];
setMv mv1456[0] = mv1452[0];
calculateMvCoeff mv1451[0] = DIVISION(mv1455,mv1456);
resetMv mv1457[1];
resetMv mv1458[1];
setVector ve1459 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1460 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1458[0] = <ve1459,ve1460>;
resetMv mv1461[1];
setMv mv1461[0] = rc1[21];
resetMv mv1462[1];
setMv mv1462[0] = mv1458[0];
calculateMvCoeff mv1457[0] = DIVISION(mv1461,mv1462);
resetMv mv1463[1];
resetMv mv1464[1];
setVector ve1465 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1466 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1464[0] = <ve1465,ve1466>;
resetMv mv1467[1];
setMv mv1467[0] = rc1[24];
resetMv mv1468[1];
setMv mv1468[0] = mv1464[0];
calculateMvCoeff mv1463[0] = DIVISION(mv1467,mv1468);
resetMv mv1469[1];
resetMv mv1470[1];
setVector ve1471 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1472 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1470[0] = <ve1471,ve1472>;
resetMv mv1473[1];
setMv mv1473[0] = rc1[28];
resetMv mv1474[1];
setMv mv1474[0] = mv1470[0];
calculateMvCoeff mv1469[0] = DIVISION(mv1473,mv1474);
setVector ve1475 = rc1[-0,-1,-2,-3,-5,6,7,9,10,12,14,16,18,20,23,-27];
resetMv mv1477[16];
setMv mv1477[14] = mv1463[0];
setMv mv1477[11] = mv1445[0];
setMv mv1477[13] = mv1457[0];
setMv mv1477[5] = mv1409[0];
setMv mv1477[8] = mv1427[0];
setMv mv1477[10] = mv1439[0];
setMv mv1477[6] = mv1415[0];
setMv mv1477[15] = mv1469[0];
setMv mv1477[12] = mv1451[0];
setMv mv1477[4] = mv1403[0];
setMv mv1477[7] = mv1421[0];
setMv mv1477[2] = mv1391[0];
setMv mv1477[9] = mv1433[0];
setMv mv1477[0] = mv1379[0];
setMv mv1477[3] = mv1397[0];
setMv mv1477[1] = mv1385[0];
setVector ve1476 = mv1477[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
dotVectors rc1N[3] = <ve1475,ve1476>;

//rc1N[4] = ((((((((((((((((((((((((-(rc1[0])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + ((-(rc1[1])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[2])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[3])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[4])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + (-((-(rc1[6])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[7])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[8])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[10])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[11])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[13])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[15])) * ((-(rc1[15])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[16])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[17])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[19])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[21])) * (rc1[21] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[22])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[24])) * (rc1[24] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[25])) * (rc1[25] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[26])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[28])) * (rc1[28] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[29])) * (rc1[29] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[30])) * (rc1[30] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))) + ((-(rc1[31])) * ((-(rc1[31])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv mv1478[1];
resetMv mv1479[1];
setVector ve1480 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1481 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1479[0] = <ve1480,ve1481>;
resetMv mv1482[1];
setMv mv1482[0] = rc1[-15];
resetMv mv1483[1];
setMv mv1483[0] = mv1479[0];
calculateMvCoeff mv1478[0] = DIVISION(mv1482,mv1483);
resetMv mv1484[1];
resetMv mv1485[1];
setVector ve1486 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1487 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1485[0] = <ve1486,ve1487>;
resetMv mv1488[1];
setMv mv1488[0] = rc1[21];
resetMv mv1489[1];
setMv mv1489[0] = mv1485[0];
calculateMvCoeff mv1484[0] = DIVISION(mv1488,mv1489);
resetMv mv1490[1];
resetMv mv1491[1];
setVector ve1492 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1493 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1491[0] = <ve1492,ve1493>;
resetMv mv1494[1];
setMv mv1494[0] = rc1[24];
resetMv mv1495[1];
setMv mv1495[0] = mv1491[0];
calculateMvCoeff mv1490[0] = DIVISION(mv1494,mv1495);
resetMv mv1496[1];
resetMv mv1497[1];
setVector ve1498 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1499 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1497[0] = <ve1498,ve1499>;
resetMv mv1500[1];
setMv mv1500[0] = rc1[25];
resetMv mv1501[1];
setMv mv1501[0] = mv1497[0];
calculateMvCoeff mv1496[0] = DIVISION(mv1500,mv1501);
resetMv mv1502[1];
resetMv mv1503[1];
setVector ve1504 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1505 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1503[0] = <ve1504,ve1505>;
resetMv mv1506[1];
setMv mv1506[0] = rc1[-5];
resetMv mv1507[1];
setMv mv1507[0] = mv1503[0];
calculateMvCoeff mv1502[0] = DIVISION(mv1506,mv1507);
resetMv mv1508[1];
resetMv mv1509[1];
setVector ve1510 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1511 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1509[0] = <ve1510,ve1511>;
resetMv mv1512[1];
setMv mv1512[0] = rc1[28];
resetMv mv1513[1];
setMv mv1513[0] = mv1509[0];
calculateMvCoeff mv1508[0] = DIVISION(mv1512,mv1513);
resetMv mv1514[1];
resetMv mv1515[1];
setVector ve1516 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1517 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1515[0] = <ve1516,ve1517>;
resetMv mv1518[1];
setMv mv1518[0] = rc1[29];
resetMv mv1519[1];
setMv mv1519[0] = mv1515[0];
calculateMvCoeff mv1514[0] = DIVISION(mv1518,mv1519);
resetMv mv1520[1];
resetMv mv1521[1];
setVector ve1522 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1523 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1521[0] = <ve1522,ve1523>;
resetMv mv1524[1];
setMv mv1524[0] = rc1[-9];
resetMv mv1525[1];
setMv mv1525[0] = mv1521[0];
calculateMvCoeff mv1520[0] = DIVISION(mv1524,mv1525);
resetMv mv1526[1];
resetMv mv1527[1];
setVector ve1528 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1529 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1527[0] = <ve1528,ve1529>;
resetMv mv1530[1];
setMv mv1530[0] = rc1[30];
resetMv mv1531[1];
setMv mv1531[0] = mv1527[0];
calculateMvCoeff mv1526[0] = DIVISION(mv1530,mv1531);
resetMv mv1532[1];
resetMv mv1533[1];
setVector ve1534 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1535 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1533[0] = <ve1534,ve1535>;
resetMv mv1536[1];
setMv mv1536[0] = rc1[-12];
resetMv mv1537[1];
setMv mv1537[0] = mv1533[0];
calculateMvCoeff mv1532[0] = DIVISION(mv1536,mv1537);
resetMv mv1538[1];
resetMv mv1539[1];
setVector ve1540 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1541 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1539[0] = <ve1540,ve1541>;
resetMv mv1542[1];
setMv mv1542[0] = rc1[-14];
resetMv mv1543[1];
setMv mv1543[0] = mv1539[0];
calculateMvCoeff mv1538[0] = DIVISION(mv1542,mv1543);
resetMv mv1544[1];
resetMv mv1545[1];
setVector ve1546 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1547 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1545[0] = <ve1546,ve1547>;
resetMv mv1548[1];
setMv mv1548[0] = rc1[-15];
resetMv mv1549[1];
setMv mv1549[0] = mv1545[0];
calculateMvCoeff mv1544[0] = DIVISION(mv1548,mv1549);
resetMv mv1550[1];
resetMv mv1551[1];
setVector ve1552 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1553 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1551[0] = <ve1552,ve1553>;
resetMv mv1554[1];
setMv mv1554[0] = rc1[-31];
resetMv mv1555[1];
setMv mv1555[0] = mv1551[0];
calculateMvCoeff mv1550[0] = DIVISION(mv1554,mv1555);
resetMv mv1556[1];
resetMv mv1557[1];
setVector ve1558 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1559 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1557[0] = <ve1558,ve1559>;
resetMv mv1560[1];
setMv mv1560[0] = rc1[18];
resetMv mv1561[1];
setMv mv1561[0] = mv1557[0];
calculateMvCoeff mv1556[0] = DIVISION(mv1560,mv1561);
resetMv mv1562[1];
resetMv mv1563[1];
setVector ve1564 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1565 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1563[0] = <ve1564,ve1565>;
resetMv mv1566[1];
setMv mv1566[0] = rc1[20];
resetMv mv1567[1];
setMv mv1567[0] = mv1563[0];
calculateMvCoeff mv1562[0] = DIVISION(mv1566,mv1567);
resetMv mv1568[1];
resetMv mv1569[1];
setVector ve1570 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1571 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1569[0] = <ve1570,ve1571>;
resetMv mv1572[1];
setMv mv1572[0] = rc1[21];
resetMv mv1573[1];
setMv mv1573[0] = mv1569[0];
calculateMvCoeff mv1568[0] = DIVISION(mv1572,mv1573);
resetMv mv1574[1];
resetMv mv1575[1];
setVector ve1576 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1577 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1575[0] = <ve1576,ve1577>;
resetMv mv1578[1];
setMv mv1578[0] = rc1[23];
resetMv mv1579[1];
setMv mv1579[0] = mv1575[0];
calculateMvCoeff mv1574[0] = DIVISION(mv1578,mv1579);
resetMv mv1580[1];
resetMv mv1581[1];
setVector ve1582 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1583 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1581[0] = <ve1582,ve1583>;
resetMv mv1584[1];
setMv mv1584[0] = rc1[24];
resetMv mv1585[1];
setMv mv1585[0] = mv1581[0];
calculateMvCoeff mv1580[0] = DIVISION(mv1584,mv1585);
resetMv mv1586[1];
resetMv mv1587[1];
setVector ve1588 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1589 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1587[0] = <ve1588,ve1589>;
resetMv mv1590[1];
setMv mv1590[0] = rc1[25];
resetMv mv1591[1];
setMv mv1591[0] = mv1587[0];
calculateMvCoeff mv1586[0] = DIVISION(mv1590,mv1591);
resetMv mv1592[1];
resetMv mv1593[1];
setVector ve1594 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1595 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1593[0] = <ve1594,ve1595>;
resetMv mv1596[1];
setMv mv1596[0] = rc1[27];
resetMv mv1597[1];
setMv mv1597[0] = mv1593[0];
calculateMvCoeff mv1592[0] = DIVISION(mv1596,mv1597);
resetMv mv1598[1];
resetMv mv1599[1];
setVector ve1600 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1601 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1599[0] = <ve1600,ve1601>;
resetMv mv1602[1];
setMv mv1602[0] = rc1[28];
resetMv mv1603[1];
setMv mv1603[0] = mv1599[0];
calculateMvCoeff mv1598[0] = DIVISION(mv1602,mv1603);
resetMv mv1604[1];
resetMv mv1605[1];
setVector ve1606 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1607 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1605[0] = <ve1606,ve1607>;
resetMv mv1608[1];
setMv mv1608[0] = rc1[29];
resetMv mv1609[1];
setMv mv1609[0] = mv1605[0];
calculateMvCoeff mv1604[0] = DIVISION(mv1608,mv1609);
resetMv mv1610[1];
resetMv mv1611[1];
setVector ve1612 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1613 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1611[0] = <ve1612,ve1613>;
resetMv mv1614[1];
setMv mv1614[0] = rc1[30];
resetMv mv1615[1];
setMv mv1615[0] = mv1611[0];
calculateMvCoeff mv1610[0] = DIVISION(mv1614,mv1615);
resetMv mv1616[1];
resetMv mv1617[1];
setVector ve1618 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1619 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1617[0] = <ve1618,ve1619>;
resetMv mv1620[1];
setMv mv1620[0] = rc1[-31];
resetMv mv1621[1];
setMv mv1621[0] = mv1617[0];
calculateMvCoeff mv1616[0] = DIVISION(mv1620,mv1621);
setVector ve1622 = rc1[-0,-1,-2,-3,-4,6,7,8,10,11,13,15,16,17,19,21,22,24,25,-26,-28,-29,-30,-31];
resetMv mv1624[24];
setMv mv1624[18] = mv1586[0];
setMv mv1624[15] = mv1568[0];
setMv mv1624[14] = mv1562[0];
setMv mv1624[1] = mv1484[0];
setMv mv1624[16] = mv1574[0];
setMv mv1624[8] = mv1526[0];
setMv mv1624[20] = mv1598[0];
setMv mv1624[3] = mv1496[0];
setMv mv1624[10] = mv1538[0];
setMv mv1624[22] = mv1610[0];
setMv mv1624[6] = mv1514[0];
setMv mv1624[17] = mv1580[0];
setMv mv1624[19] = mv1592[0];
setMv mv1624[2] = mv1490[0];
setMv mv1624[0] = mv1478[0];
setMv mv1624[5] = mv1508[0];
setMv mv1624[21] = mv1604[0];
setMv mv1624[4] = mv1502[0];
setMv mv1624[23] = mv1616[0];
setMv mv1624[9] = mv1532[0];
setMv mv1624[12] = mv1550[0];
setMv mv1624[7] = mv1520[0];
setMv mv1624[13] = mv1556[0];
setMv mv1624[11] = mv1544[0];
setVector ve1623 = mv1624[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23];
dotVectors rc1N[4] = <ve1622,ve1623>;

//rc1N[5] = ((((((((-(rc1[5])) * ((-(rc1[5])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))) + (-((-(rc1[9])) * ((-(rc1[9])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[12])) * ((-(rc1[12])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[14])) * ((-(rc1[14])) / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[18])) * (rc1[18] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[20])) * (rc1[20] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + (-((-(rc1[23])) * (rc1[23] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27]))))))) + ((-(rc1[27])) * (rc1[27] / (((((((((-(rc1[5])) * (-(rc1[5]))) + ((-(rc1[9])) * (-(rc1[9])))) + ((-(rc1[12])) * (-(rc1[12])))) + ((-(rc1[14])) * (-(rc1[14])))) + (-((-(rc1[18])) * rc1[18]))) + (-((-(rc1[20])) * rc1[20]))) + (-((-(rc1[23])) * rc1[23]))) + (-((-(rc1[27])) * rc1[27])))))
resetMv mv1625[1];
resetMv mv1626[1];
setVector ve1627 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1628 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1626[0] = <ve1627,ve1628>;
resetMv mv1629[1];
setMv mv1629[0] = rc1[-5];
resetMv mv1630[1];
setMv mv1630[0] = mv1626[0];
calculateMvCoeff mv1625[0] = DIVISION(mv1629,mv1630);
resetMv mv1631[1];
resetMv mv1632[1];
setVector ve1633 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1634 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1632[0] = <ve1633,ve1634>;
resetMv mv1635[1];
setMv mv1635[0] = rc1[-9];
resetMv mv1636[1];
setMv mv1636[0] = mv1632[0];
calculateMvCoeff mv1631[0] = DIVISION(mv1635,mv1636);
resetMv mv1637[1];
resetMv mv1638[1];
setVector ve1639 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1640 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1638[0] = <ve1639,ve1640>;
resetMv mv1641[1];
setMv mv1641[0] = rc1[-12];
resetMv mv1642[1];
setMv mv1642[0] = mv1638[0];
calculateMvCoeff mv1637[0] = DIVISION(mv1641,mv1642);
resetMv mv1643[1];
resetMv mv1644[1];
setVector ve1645 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1646 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1644[0] = <ve1645,ve1646>;
resetMv mv1647[1];
setMv mv1647[0] = rc1[-14];
resetMv mv1648[1];
setMv mv1648[0] = mv1644[0];
calculateMvCoeff mv1643[0] = DIVISION(mv1647,mv1648);
resetMv mv1649[1];
resetMv mv1650[1];
setVector ve1651 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1652 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1650[0] = <ve1651,ve1652>;
resetMv mv1653[1];
setMv mv1653[0] = rc1[18];
resetMv mv1654[1];
setMv mv1654[0] = mv1650[0];
calculateMvCoeff mv1649[0] = DIVISION(mv1653,mv1654);
resetMv mv1655[1];
resetMv mv1656[1];
setVector ve1657 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1658 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1656[0] = <ve1657,ve1658>;
resetMv mv1659[1];
setMv mv1659[0] = rc1[20];
resetMv mv1660[1];
setMv mv1660[0] = mv1656[0];
calculateMvCoeff mv1655[0] = DIVISION(mv1659,mv1660);
resetMv mv1661[1];
resetMv mv1662[1];
setVector ve1663 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1664 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1662[0] = <ve1663,ve1664>;
resetMv mv1665[1];
setMv mv1665[0] = rc1[23];
resetMv mv1666[1];
setMv mv1666[0] = mv1662[0];
calculateMvCoeff mv1661[0] = DIVISION(mv1665,mv1666);
resetMv mv1667[1];
resetMv mv1668[1];
setVector ve1669 = rc1[-5,-9,-12,-14,18,20,23,27];
setVector ve1670 = rc1[-5,-9,-12,-14,18,20,23,27];
dotVectors mv1668[0] = <ve1669,ve1670>;
resetMv mv1671[1];
setMv mv1671[0] = rc1[27];
resetMv mv1672[1];
setMv mv1672[0] = mv1668[0];
calculateMvCoeff mv1667[0] = DIVISION(mv1671,mv1672);
setVector ve1673 = rc1[-5,9,12,14,18,20,23,-27];
resetMv mv1675[8];
setMv mv1675[5] = mv1655[0];
setMv mv1675[2] = mv1637[0];
setMv mv1675[6] = mv1661[0];
setMv mv1675[3] = mv1643[0];
setMv mv1675[0] = mv1625[0];
setMv mv1675[7] = mv1667[0];
setMv mv1675[4] = mv1649[0];
setMv mv1675[1] = mv1631[0];
setVector ve1674 = mv1675[0,1,2,3,4,5,6,7];
dotVectors rc1N[5] = <ve1673,ve1674>;

//rc2[0] = ((((-(len[1])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + ((-(len[2])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[3])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[5])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv rc2[32];
resetMv mv1676[1];
resetMv mv1677[1];
setVector ve1678 = nen[1,2,3];
setVector ve1679 = nen[1,2,3];
dotVectors mv1677[0] = <ve1678,ve1679>;
resetMv mv1680[1];
setMv mv1680[0] = nen[1];
resetMv mv1681[1];
setMv mv1681[0] = mv1677[0];
calculateMvCoeff mv1676[0] = DIVISION(mv1680,mv1681);
resetMv mv1682[1];
resetMv mv1683[1];
setVector ve1684 = nen[1,2,3];
setVector ve1685 = nen[1,2,3];
dotVectors mv1683[0] = <ve1684,ve1685>;
resetMv mv1686[1];
setMv mv1686[0] = nen[2];
resetMv mv1687[1];
setMv mv1687[0] = mv1683[0];
calculateMvCoeff mv1682[0] = DIVISION(mv1686,mv1687);
resetMv mv1688[1];
resetMv mv1689[1];
setVector ve1690 = nen[1,2,3];
setVector ve1691 = nen[1,2,3];
dotVectors mv1689[0] = <ve1690,ve1691>;
resetMv mv1692[1];
setMv mv1692[0] = nen[3];
resetMv mv1693[1];
setMv mv1693[0] = mv1689[0];
calculateMvCoeff mv1688[0] = DIVISION(mv1692,mv1693);
resetMv mv1694[1];
resetMv mv1695[1];
setVector ve1696 = nen[1,2,3];
setVector ve1697 = nen[1,2,3];
dotVectors mv1695[0] = <ve1696,ve1697>;
resetMv mv1698[1];
setMv mv1698[0] = nen[4];
resetMv mv1699[1];
setMv mv1699[0] = mv1695[0];
calculateMvCoeff mv1694[0] = DIVISION(mv1698,mv1699);
setVector ve1700 = len[-1,-2,-3,5];
resetMv mv1702[4];
setMv mv1702[0] = mv1676[0];
setMv mv1702[2] = mv1688[0];
setMv mv1702[1] = mv1682[0];
setMv mv1702[3] = mv1694[0];
setVector ve1701 = mv1702[0,1,2,3];
dotVectors rc2[0] = <ve1700,ve1701>;

//rc2[1] = ((((-(len[0])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + ((rcPpDual[6] - len[6]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[7] - len[7]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[9] - len[9]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1703[1];
resetMv mv1704[1];
setVector ve1705 = nen[1,2,3];
setVector ve1706 = nen[1,2,3];
dotVectors mv1704[0] = <ve1705,ve1706>;
resetMv mv1707[1];
setMv mv1707[0] = nen[1];
resetMv mv1708[1];
setMv mv1708[0] = mv1704[0];
calculateMvCoeff mv1703[0] = DIVISION(mv1707,mv1708);
resetMv mv1709[1];
resetMv mv1711[2];
setMv mv1711[1] = len[-6];
setMv mv1711[0] = rcPpDual[6];
setVector ve1710 = mv1711[0,1];
dotVectors mv1709[0] = <ve1710>;
resetMv mv1712[1];
resetMv mv1713[1];
setVector ve1714 = nen[1,2,3];
setVector ve1715 = nen[1,2,3];
dotVectors mv1713[0] = <ve1714,ve1715>;
resetMv mv1716[1];
setMv mv1716[0] = nen[2];
resetMv mv1717[1];
setMv mv1717[0] = mv1713[0];
calculateMvCoeff mv1712[0] = DIVISION(mv1716,mv1717);
resetMv mv1718[1];
resetMv mv1720[2];
setMv mv1720[1] = len[-7];
setMv mv1720[0] = rcPpDual[7];
setVector ve1719 = mv1720[0,1];
dotVectors mv1718[0] = <ve1719>;
resetMv mv1721[1];
resetMv mv1722[1];
setVector ve1723 = nen[1,2,3];
setVector ve1724 = nen[1,2,3];
dotVectors mv1722[0] = <ve1723,ve1724>;
resetMv mv1725[1];
setMv mv1725[0] = nen[3];
resetMv mv1726[1];
setMv mv1726[0] = mv1722[0];
calculateMvCoeff mv1721[0] = DIVISION(mv1725,mv1726);
resetMv mv1727[1];
resetMv mv1728[1];
resetMv mv1730[2];
setMv mv1730[1] = len[-9];
setMv mv1730[0] = rcPpDual[9];
setVector ve1729 = mv1730[0,1];
dotVectors mv1728[0] = <ve1729>;
setMv mv1727[0] = mv1728[-0];
resetMv mv1731[1];
resetMv mv1732[1];
setVector ve1733 = nen[1,2,3];
setVector ve1734 = nen[1,2,3];
dotVectors mv1732[0] = <ve1733,ve1734>;
resetMv mv1735[1];
setMv mv1735[0] = nen[4];
resetMv mv1736[1];
setMv mv1736[0] = mv1732[0];
calculateMvCoeff mv1731[0] = DIVISION(mv1735,mv1736);
resetMv mv1738[4];
setMv mv1738[1] = mv1709[0];
setMv mv1738[2] = mv1718[0];
setMv mv1738[3] = mv1727[0];
setMv mv1738[0] = len[-0];
setVector ve1737 = mv1738[0,1,2,3];
resetMv mv1740[4];
setMv mv1740[3] = mv1731[0];
setMv mv1740[2] = mv1721[0];
setMv mv1740[1] = mv1712[0];
setMv mv1740[0] = mv1703[0];
setVector ve1739 = mv1740[0,1,2,3];
dotVectors rc2[1] = <ve1737,ve1739>;

//rc2[2] = ((((-(len[0])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[6] - len[6]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[10] - len[10]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[12] - len[12]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1741[1];
resetMv mv1742[1];
setVector ve1743 = nen[1,2,3];
setVector ve1744 = nen[1,2,3];
dotVectors mv1742[0] = <ve1743,ve1744>;
resetMv mv1745[1];
setMv mv1745[0] = nen[2];
resetMv mv1746[1];
setMv mv1746[0] = mv1742[0];
calculateMvCoeff mv1741[0] = DIVISION(mv1745,mv1746);
resetMv mv1747[1];
resetMv mv1748[1];
resetMv mv1750[2];
setMv mv1750[1] = len[-6];
setMv mv1750[0] = rcPpDual[6];
setVector ve1749 = mv1750[0,1];
dotVectors mv1748[0] = <ve1749>;
setMv mv1747[0] = mv1748[-0];
resetMv mv1751[1];
resetMv mv1752[1];
setVector ve1753 = nen[1,2,3];
setVector ve1754 = nen[1,2,3];
dotVectors mv1752[0] = <ve1753,ve1754>;
resetMv mv1755[1];
setMv mv1755[0] = nen[1];
resetMv mv1756[1];
setMv mv1756[0] = mv1752[0];
calculateMvCoeff mv1751[0] = DIVISION(mv1755,mv1756);
resetMv mv1757[1];
resetMv mv1759[2];
setMv mv1759[1] = len[-10];
setMv mv1759[0] = rcPpDual[10];
setVector ve1758 = mv1759[0,1];
dotVectors mv1757[0] = <ve1758>;
resetMv mv1760[1];
resetMv mv1761[1];
setVector ve1762 = nen[1,2,3];
setVector ve1763 = nen[1,2,3];
dotVectors mv1761[0] = <ve1762,ve1763>;
resetMv mv1764[1];
setMv mv1764[0] = nen[3];
resetMv mv1765[1];
setMv mv1765[0] = mv1761[0];
calculateMvCoeff mv1760[0] = DIVISION(mv1764,mv1765);
resetMv mv1766[1];
resetMv mv1767[1];
resetMv mv1769[2];
setMv mv1769[1] = len[-12];
setMv mv1769[0] = rcPpDual[12];
setVector ve1768 = mv1769[0,1];
dotVectors mv1767[0] = <ve1768>;
setMv mv1766[0] = mv1767[-0];
resetMv mv1770[1];
resetMv mv1771[1];
setVector ve1772 = nen[1,2,3];
setVector ve1773 = nen[1,2,3];
dotVectors mv1771[0] = <ve1772,ve1773>;
resetMv mv1774[1];
setMv mv1774[0] = nen[4];
resetMv mv1775[1];
setMv mv1775[0] = mv1771[0];
calculateMvCoeff mv1770[0] = DIVISION(mv1774,mv1775);
resetMv mv1777[4];
setMv mv1777[1] = mv1747[0];
setMv mv1777[3] = mv1766[0];
setMv mv1777[2] = mv1757[0];
setMv mv1777[0] = len[-0];
setVector ve1776 = mv1777[0,1,2,3];
resetMv mv1779[4];
setMv mv1779[1] = mv1751[0];
setMv mv1779[0] = mv1741[0];
setMv mv1779[3] = mv1770[0];
setMv mv1779[2] = mv1760[0];
setVector ve1778 = mv1779[0,1,2,3];
dotVectors rc2[2] = <ve1776,ve1778>;

//rc2[3] = ((((-(len[0])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[7] - len[7]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[10] - len[10]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[14] - len[14]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1780[1];
resetMv mv1781[1];
setVector ve1782 = nen[1,2,3];
setVector ve1783 = nen[1,2,3];
dotVectors mv1781[0] = <ve1782,ve1783>;
resetMv mv1784[1];
setMv mv1784[0] = nen[3];
resetMv mv1785[1];
setMv mv1785[0] = mv1781[0];
calculateMvCoeff mv1780[0] = DIVISION(mv1784,mv1785);
resetMv mv1786[1];
resetMv mv1787[1];
resetMv mv1789[2];
setMv mv1789[1] = len[-7];
setMv mv1789[0] = rcPpDual[7];
setVector ve1788 = mv1789[0,1];
dotVectors mv1787[0] = <ve1788>;
setMv mv1786[0] = mv1787[-0];
resetMv mv1790[1];
resetMv mv1791[1];
setVector ve1792 = nen[1,2,3];
setVector ve1793 = nen[1,2,3];
dotVectors mv1791[0] = <ve1792,ve1793>;
resetMv mv1794[1];
setMv mv1794[0] = nen[1];
resetMv mv1795[1];
setMv mv1795[0] = mv1791[0];
calculateMvCoeff mv1790[0] = DIVISION(mv1794,mv1795);
resetMv mv1796[1];
resetMv mv1797[1];
resetMv mv1799[2];
setMv mv1799[1] = len[-10];
setMv mv1799[0] = rcPpDual[10];
setVector ve1798 = mv1799[0,1];
dotVectors mv1797[0] = <ve1798>;
setMv mv1796[0] = mv1797[-0];
resetMv mv1800[1];
resetMv mv1801[1];
setVector ve1802 = nen[1,2,3];
setVector ve1803 = nen[1,2,3];
dotVectors mv1801[0] = <ve1802,ve1803>;
resetMv mv1804[1];
setMv mv1804[0] = nen[2];
resetMv mv1805[1];
setMv mv1805[0] = mv1801[0];
calculateMvCoeff mv1800[0] = DIVISION(mv1804,mv1805);
resetMv mv1806[1];
resetMv mv1807[1];
resetMv mv1809[2];
setMv mv1809[1] = len[-14];
setMv mv1809[0] = rcPpDual[14];
setVector ve1808 = mv1809[0,1];
dotVectors mv1807[0] = <ve1808>;
setMv mv1806[0] = mv1807[-0];
resetMv mv1810[1];
resetMv mv1811[1];
setVector ve1812 = nen[1,2,3];
setVector ve1813 = nen[1,2,3];
dotVectors mv1811[0] = <ve1812,ve1813>;
resetMv mv1814[1];
setMv mv1814[0] = nen[4];
resetMv mv1815[1];
setMv mv1815[0] = mv1811[0];
calculateMvCoeff mv1810[0] = DIVISION(mv1814,mv1815);
resetMv mv1817[4];
setMv mv1817[3] = mv1806[0];
setMv mv1817[0] = len[-0];
setMv mv1817[2] = mv1796[0];
setMv mv1817[1] = mv1786[0];
setVector ve1816 = mv1817[0,1,2,3];
resetMv mv1819[4];
setMv mv1819[2] = mv1800[0];
setMv mv1819[0] = mv1780[0];
setMv mv1819[1] = mv1790[0];
setMv mv1819[3] = mv1810[0];
setVector ve1818 = mv1819[0,1,2,3];
dotVectors rc2[3] = <ve1816,ve1818>;

//rc2[4] = (((((-(len[0])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] - len[8]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[11] - len[11]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[13] - len[13]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[15] - len[15]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1820[1];
resetMv mv1821[1];
setVector ve1822 = nen[1,2,3];
setVector ve1823 = nen[1,2,3];
dotVectors mv1821[0] = <ve1822,ve1823>;
resetMv mv1824[1];
setMv mv1824[0] = nen[4];
resetMv mv1825[1];
setMv mv1825[0] = mv1821[0];
calculateMvCoeff mv1820[0] = DIVISION(mv1824,mv1825);
resetMv mv1826[1];
resetMv mv1827[1];
resetMv mv1829[2];
setMv mv1829[1] = len[-8];
setMv mv1829[0] = rcPpDual[8];
setVector ve1828 = mv1829[0,1];
dotVectors mv1827[0] = <ve1828>;
setMv mv1826[0] = mv1827[-0];
resetMv mv1830[1];
resetMv mv1831[1];
setVector ve1832 = nen[1,2,3];
setVector ve1833 = nen[1,2,3];
dotVectors mv1831[0] = <ve1832,ve1833>;
resetMv mv1834[1];
setMv mv1834[0] = nen[1];
resetMv mv1835[1];
setMv mv1835[0] = mv1831[0];
calculateMvCoeff mv1830[0] = DIVISION(mv1834,mv1835);
resetMv mv1836[1];
resetMv mv1837[1];
resetMv mv1839[2];
setMv mv1839[1] = len[-11];
setMv mv1839[0] = rcPpDual[11];
setVector ve1838 = mv1839[0,1];
dotVectors mv1837[0] = <ve1838>;
setMv mv1836[0] = mv1837[-0];
resetMv mv1840[1];
resetMv mv1841[1];
setVector ve1842 = nen[1,2,3];
setVector ve1843 = nen[1,2,3];
dotVectors mv1841[0] = <ve1842,ve1843>;
resetMv mv1844[1];
setMv mv1844[0] = nen[2];
resetMv mv1845[1];
setMv mv1845[0] = mv1841[0];
calculateMvCoeff mv1840[0] = DIVISION(mv1844,mv1845);
resetMv mv1846[1];
resetMv mv1847[1];
resetMv mv1849[2];
setMv mv1849[1] = len[-13];
setMv mv1849[0] = rcPpDual[13];
setVector ve1848 = mv1849[0,1];
dotVectors mv1847[0] = <ve1848>;
setMv mv1846[0] = mv1847[-0];
resetMv mv1850[1];
resetMv mv1851[1];
setVector ve1852 = nen[1,2,3];
setVector ve1853 = nen[1,2,3];
dotVectors mv1851[0] = <ve1852,ve1853>;
resetMv mv1854[1];
setMv mv1854[0] = nen[3];
resetMv mv1855[1];
setMv mv1855[0] = mv1851[0];
calculateMvCoeff mv1850[0] = DIVISION(mv1854,mv1855);
resetMv mv1856[1];
resetMv mv1857[1];
resetMv mv1859[2];
setMv mv1859[1] = len[-15];
setMv mv1859[0] = rcPpDual[15];
setVector ve1858 = mv1859[0,1];
dotVectors mv1857[0] = <ve1858>;
setMv mv1856[0] = mv1857[-0];
resetMv mv1860[1];
resetMv mv1861[1];
setVector ve1862 = nen[1,2,3];
setVector ve1863 = nen[1,2,3];
dotVectors mv1861[0] = <ve1862,ve1863>;
resetMv mv1864[1];
setMv mv1864[0] = nen[4];
resetMv mv1865[1];
setMv mv1865[0] = mv1861[0];
calculateMvCoeff mv1860[0] = DIVISION(mv1864,mv1865);
resetMv mv1867[5];
setMv mv1867[1] = mv1826[0];
setMv mv1867[4] = mv1856[0];
setMv mv1867[2] = mv1836[0];
setMv mv1867[3] = mv1846[0];
setMv mv1867[0] = len[-0];
setVector ve1866 = mv1867[0,1,2,3,4];
resetMv mv1869[5];
setMv mv1869[4] = mv1860[0];
setMv mv1869[2] = mv1840[0];
setMv mv1869[0] = mv1820[0];
setMv mv1869[1] = mv1830[0];
setMv mv1869[3] = mv1850[0];
setVector ve1868 = mv1869[0,1,2,3,4];
dotVectors rc2[4] = <ve1866,ve1868>;

//rc2[5] = ((-((rcPpDual[9] - len[9]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((rcPpDual[12] - len[12]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((rcPpDual[14] - len[14]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1870[1];
resetMv mv1871[1];
resetMv mv1873[2];
setMv mv1873[1] = len[-9];
setMv mv1873[0] = rcPpDual[9];
setVector ve1872 = mv1873[0,1];
dotVectors mv1871[0] = <ve1872>;
setMv mv1870[0] = mv1871[-0];
resetMv mv1874[1];
resetMv mv1875[1];
setVector ve1876 = nen[1,2,3];
setVector ve1877 = nen[1,2,3];
dotVectors mv1875[0] = <ve1876,ve1877>;
resetMv mv1878[1];
setMv mv1878[0] = nen[1];
resetMv mv1879[1];
setMv mv1879[0] = mv1875[0];
calculateMvCoeff mv1874[0] = DIVISION(mv1878,mv1879);
resetMv mv1880[1];
resetMv mv1881[1];
resetMv mv1883[2];
setMv mv1883[1] = len[-12];
setMv mv1883[0] = rcPpDual[12];
setVector ve1882 = mv1883[0,1];
dotVectors mv1881[0] = <ve1882>;
setMv mv1880[0] = mv1881[-0];
resetMv mv1884[1];
resetMv mv1885[1];
setVector ve1886 = nen[1,2,3];
setVector ve1887 = nen[1,2,3];
dotVectors mv1885[0] = <ve1886,ve1887>;
resetMv mv1888[1];
setMv mv1888[0] = nen[2];
resetMv mv1889[1];
setMv mv1889[0] = mv1885[0];
calculateMvCoeff mv1884[0] = DIVISION(mv1888,mv1889);
resetMv mv1890[1];
resetMv mv1891[1];
resetMv mv1893[2];
setMv mv1893[1] = len[-14];
setMv mv1893[0] = rcPpDual[14];
setVector ve1892 = mv1893[0,1];
dotVectors mv1891[0] = <ve1892>;
setMv mv1890[0] = mv1891[-0];
resetMv mv1894[1];
resetMv mv1895[1];
setVector ve1896 = nen[1,2,3];
setVector ve1897 = nen[1,2,3];
dotVectors mv1895[0] = <ve1896,ve1897>;
resetMv mv1898[1];
setMv mv1898[0] = nen[3];
resetMv mv1899[1];
setMv mv1899[0] = mv1895[0];
calculateMvCoeff mv1894[0] = DIVISION(mv1898,mv1899);
resetMv mv1901[3];
setMv mv1901[1] = mv1880[0];
setMv mv1901[0] = mv1870[0];
setMv mv1901[2] = mv1890[0];
setVector ve1900 = mv1901[0,1,2];
resetMv mv1903[3];
setMv mv1903[1] = mv1884[0];
setMv mv1903[2] = mv1894[0];
setMv mv1903[0] = mv1874[0];
setVector ve1902 = mv1903[0,1,2];
dotVectors rc2[5] = <ve1900,ve1902>;

//rc2[6] = ((((-(len[1])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[2])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[16])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[18])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1904[1];
resetMv mv1905[1];
setVector ve1906 = nen[1,2,3];
setVector ve1907 = nen[1,2,3];
dotVectors mv1905[0] = <ve1906,ve1907>;
resetMv mv1908[1];
setMv mv1908[0] = nen[2];
resetMv mv1909[1];
setMv mv1909[0] = mv1905[0];
calculateMvCoeff mv1904[0] = DIVISION(mv1908,mv1909);
resetMv mv1910[1];
resetMv mv1911[1];
setVector ve1912 = nen[1,2,3];
setVector ve1913 = nen[1,2,3];
dotVectors mv1911[0] = <ve1912,ve1913>;
resetMv mv1914[1];
setMv mv1914[0] = nen[1];
resetMv mv1915[1];
setMv mv1915[0] = mv1911[0];
calculateMvCoeff mv1910[0] = DIVISION(mv1914,mv1915);
resetMv mv1916[1];
resetMv mv1917[1];
setVector ve1918 = nen[1,2,3];
setVector ve1919 = nen[1,2,3];
dotVectors mv1917[0] = <ve1918,ve1919>;
resetMv mv1920[1];
setMv mv1920[0] = nen[3];
resetMv mv1921[1];
setMv mv1921[0] = mv1917[0];
calculateMvCoeff mv1916[0] = DIVISION(mv1920,mv1921);
resetMv mv1922[1];
resetMv mv1923[1];
setVector ve1924 = nen[1,2,3];
setVector ve1925 = nen[1,2,3];
dotVectors mv1923[0] = <ve1924,ve1925>;
resetMv mv1926[1];
setMv mv1926[0] = nen[4];
resetMv mv1927[1];
setMv mv1927[0] = mv1923[0];
calculateMvCoeff mv1922[0] = DIVISION(mv1926,mv1927);
setVector ve1928 = len[-1,2,-16,18];
resetMv mv1930[4];
setMv mv1930[0] = mv1904[0];
setMv mv1930[2] = mv1916[0];
setMv mv1930[1] = mv1910[0];
setMv mv1930[3] = mv1922[0];
setVector ve1929 = mv1930[0,1,2,3];
dotVectors rc2[6] = <ve1928,ve1929>;

//rc2[7] = ((((-(len[1])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[3])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[16])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[20])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1931[1];
resetMv mv1932[1];
setVector ve1933 = nen[1,2,3];
setVector ve1934 = nen[1,2,3];
dotVectors mv1932[0] = <ve1933,ve1934>;
resetMv mv1935[1];
setMv mv1935[0] = nen[3];
resetMv mv1936[1];
setMv mv1936[0] = mv1932[0];
calculateMvCoeff mv1931[0] = DIVISION(mv1935,mv1936);
resetMv mv1937[1];
resetMv mv1938[1];
setVector ve1939 = nen[1,2,3];
setVector ve1940 = nen[1,2,3];
dotVectors mv1938[0] = <ve1939,ve1940>;
resetMv mv1941[1];
setMv mv1941[0] = nen[1];
resetMv mv1942[1];
setMv mv1942[0] = mv1938[0];
calculateMvCoeff mv1937[0] = DIVISION(mv1941,mv1942);
resetMv mv1943[1];
resetMv mv1944[1];
setVector ve1945 = nen[1,2,3];
setVector ve1946 = nen[1,2,3];
dotVectors mv1944[0] = <ve1945,ve1946>;
resetMv mv1947[1];
setMv mv1947[0] = nen[2];
resetMv mv1948[1];
setMv mv1948[0] = mv1944[0];
calculateMvCoeff mv1943[0] = DIVISION(mv1947,mv1948);
resetMv mv1949[1];
resetMv mv1950[1];
setVector ve1951 = nen[1,2,3];
setVector ve1952 = nen[1,2,3];
dotVectors mv1950[0] = <ve1951,ve1952>;
resetMv mv1953[1];
setMv mv1953[0] = nen[4];
resetMv mv1954[1];
setMv mv1954[0] = mv1950[0];
calculateMvCoeff mv1949[0] = DIVISION(mv1953,mv1954);
setVector ve1955 = len[-1,3,16,20];
resetMv mv1957[4];
setMv mv1957[0] = mv1931[0];
setMv mv1957[3] = mv1949[0];
setMv mv1957[2] = mv1943[0];
setMv mv1957[1] = mv1937[0];
setVector ve1956 = mv1957[0,1,2,3];
dotVectors rc2[7] = <ve1955,ve1956>;

//rc2[8] = (((((-(len[1])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[4])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[17])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[19])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[21])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1958[1];
resetMv mv1959[1];
setVector ve1960 = nen[1,2,3];
setVector ve1961 = nen[1,2,3];
dotVectors mv1959[0] = <ve1960,ve1961>;
resetMv mv1962[1];
setMv mv1962[0] = nen[4];
resetMv mv1963[1];
setMv mv1963[0] = mv1959[0];
calculateMvCoeff mv1958[0] = DIVISION(mv1962,mv1963);
resetMv mv1964[1];
resetMv mv1965[1];
setVector ve1966 = nen[1,2,3];
setVector ve1967 = nen[1,2,3];
dotVectors mv1965[0] = <ve1966,ve1967>;
resetMv mv1968[1];
setMv mv1968[0] = nen[1];
resetMv mv1969[1];
setMv mv1969[0] = mv1965[0];
calculateMvCoeff mv1964[0] = DIVISION(mv1968,mv1969);
resetMv mv1970[1];
resetMv mv1971[1];
setVector ve1972 = nen[1,2,3];
setVector ve1973 = nen[1,2,3];
dotVectors mv1971[0] = <ve1972,ve1973>;
resetMv mv1974[1];
setMv mv1974[0] = nen[2];
resetMv mv1975[1];
setMv mv1975[0] = mv1971[0];
calculateMvCoeff mv1970[0] = DIVISION(mv1974,mv1975);
resetMv mv1976[1];
resetMv mv1977[1];
setVector ve1978 = nen[1,2,3];
setVector ve1979 = nen[1,2,3];
dotVectors mv1977[0] = <ve1978,ve1979>;
resetMv mv1980[1];
setMv mv1980[0] = nen[3];
resetMv mv1981[1];
setMv mv1981[0] = mv1977[0];
calculateMvCoeff mv1976[0] = DIVISION(mv1980,mv1981);
resetMv mv1982[1];
resetMv mv1983[1];
setVector ve1984 = nen[1,2,3];
setVector ve1985 = nen[1,2,3];
dotVectors mv1983[0] = <ve1984,ve1985>;
resetMv mv1986[1];
setMv mv1986[0] = nen[4];
resetMv mv1987[1];
setMv mv1987[0] = mv1983[0];
calculateMvCoeff mv1982[0] = DIVISION(mv1986,mv1987);
setVector ve1988 = len[-1,4,17,19,21];
resetMv mv1990[5];
setMv mv1990[4] = mv1982[0];
setMv mv1990[1] = mv1964[0];
setMv mv1990[2] = mv1970[0];
setMv mv1990[0] = mv1958[0];
setMv mv1990[3] = mv1976[0];
setVector ve1989 = mv1990[0,1,2,3,4];
dotVectors rc2[8] = <ve1988,ve1989>;

//rc2[9] = ((-((-(len[5])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[18])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[20])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv1991[1];
resetMv mv1992[1];
setVector ve1993 = nen[1,2,3];
setVector ve1994 = nen[1,2,3];
dotVectors mv1992[0] = <ve1993,ve1994>;
resetMv mv1995[1];
setMv mv1995[0] = nen[1];
resetMv mv1996[1];
setMv mv1996[0] = mv1992[0];
calculateMvCoeff mv1991[0] = DIVISION(mv1995,mv1996);
resetMv mv1997[1];
resetMv mv1998[1];
setVector ve1999 = nen[1,2,3];
setVector ve2000 = nen[1,2,3];
dotVectors mv1998[0] = <ve1999,ve2000>;
resetMv mv2001[1];
setMv mv2001[0] = nen[2];
resetMv mv2002[1];
setMv mv2002[0] = mv1998[0];
calculateMvCoeff mv1997[0] = DIVISION(mv2001,mv2002);
resetMv mv2003[1];
resetMv mv2004[1];
setVector ve2005 = nen[1,2,3];
setVector ve2006 = nen[1,2,3];
dotVectors mv2004[0] = <ve2005,ve2006>;
resetMv mv2007[1];
setMv mv2007[0] = nen[3];
resetMv mv2008[1];
setMv mv2008[0] = mv2004[0];
calculateMvCoeff mv2003[0] = DIVISION(mv2007,mv2008);
setVector ve2009 = len[5,18,20];
resetMv mv2011[3];
setMv mv2011[0] = mv1991[0];
setMv mv2011[2] = mv2003[0];
setMv mv2011[1] = mv1997[0];
setVector ve2010 = mv2011[0,1,2];
dotVectors rc2[9] = <ve2009,ve2010>;

//rc2[10] = ((((-(len[2])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[3])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[16])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[23])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2012[1];
resetMv mv2013[1];
setVector ve2014 = nen[1,2,3];
setVector ve2015 = nen[1,2,3];
dotVectors mv2013[0] = <ve2014,ve2015>;
resetMv mv2016[1];
setMv mv2016[0] = nen[3];
resetMv mv2017[1];
setMv mv2017[0] = mv2013[0];
calculateMvCoeff mv2012[0] = DIVISION(mv2016,mv2017);
resetMv mv2018[1];
resetMv mv2019[1];
setVector ve2020 = nen[1,2,3];
setVector ve2021 = nen[1,2,3];
dotVectors mv2019[0] = <ve2020,ve2021>;
resetMv mv2022[1];
setMv mv2022[0] = nen[2];
resetMv mv2023[1];
setMv mv2023[0] = mv2019[0];
calculateMvCoeff mv2018[0] = DIVISION(mv2022,mv2023);
resetMv mv2024[1];
resetMv mv2025[1];
setVector ve2026 = nen[1,2,3];
setVector ve2027 = nen[1,2,3];
dotVectors mv2025[0] = <ve2026,ve2027>;
resetMv mv2028[1];
setMv mv2028[0] = nen[1];
resetMv mv2029[1];
setMv mv2029[0] = mv2025[0];
calculateMvCoeff mv2024[0] = DIVISION(mv2028,mv2029);
resetMv mv2030[1];
resetMv mv2031[1];
setVector ve2032 = nen[1,2,3];
setVector ve2033 = nen[1,2,3];
dotVectors mv2031[0] = <ve2032,ve2033>;
resetMv mv2034[1];
setMv mv2034[0] = nen[4];
resetMv mv2035[1];
setMv mv2035[0] = mv2031[0];
calculateMvCoeff mv2030[0] = DIVISION(mv2034,mv2035);
setVector ve2036 = len[-2,3,-16,23];
resetMv mv2038[4];
setMv mv2038[3] = mv2030[0];
setMv mv2038[0] = mv2012[0];
setMv mv2038[2] = mv2024[0];
setMv mv2038[1] = mv2018[0];
setVector ve2037 = mv2038[0,1,2,3];
dotVectors rc2[10] = <ve2036,ve2037>;

//rc2[11] = (((((-(len[2])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[4])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[17])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[22])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[24])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2039[1];
resetMv mv2040[1];
setVector ve2041 = nen[1,2,3];
setVector ve2042 = nen[1,2,3];
dotVectors mv2040[0] = <ve2041,ve2042>;
resetMv mv2043[1];
setMv mv2043[0] = nen[4];
resetMv mv2044[1];
setMv mv2044[0] = mv2040[0];
calculateMvCoeff mv2039[0] = DIVISION(mv2043,mv2044);
resetMv mv2045[1];
resetMv mv2046[1];
setVector ve2047 = nen[1,2,3];
setVector ve2048 = nen[1,2,3];
dotVectors mv2046[0] = <ve2047,ve2048>;
resetMv mv2049[1];
setMv mv2049[0] = nen[2];
resetMv mv2050[1];
setMv mv2050[0] = mv2046[0];
calculateMvCoeff mv2045[0] = DIVISION(mv2049,mv2050);
resetMv mv2051[1];
resetMv mv2052[1];
setVector ve2053 = nen[1,2,3];
setVector ve2054 = nen[1,2,3];
dotVectors mv2052[0] = <ve2053,ve2054>;
resetMv mv2055[1];
setMv mv2055[0] = nen[1];
resetMv mv2056[1];
setMv mv2056[0] = mv2052[0];
calculateMvCoeff mv2051[0] = DIVISION(mv2055,mv2056);
resetMv mv2057[1];
resetMv mv2058[1];
setVector ve2059 = nen[1,2,3];
setVector ve2060 = nen[1,2,3];
dotVectors mv2058[0] = <ve2059,ve2060>;
resetMv mv2061[1];
setMv mv2061[0] = nen[3];
resetMv mv2062[1];
setMv mv2062[0] = mv2058[0];
calculateMvCoeff mv2057[0] = DIVISION(mv2061,mv2062);
resetMv mv2063[1];
resetMv mv2064[1];
setVector ve2065 = nen[1,2,3];
setVector ve2066 = nen[1,2,3];
dotVectors mv2064[0] = <ve2065,ve2066>;
resetMv mv2067[1];
setMv mv2067[0] = nen[4];
resetMv mv2068[1];
setMv mv2068[0] = mv2064[0];
calculateMvCoeff mv2063[0] = DIVISION(mv2067,mv2068);
setVector ve2069 = len[-2,4,-17,22,24];
resetMv mv2071[5];
setMv mv2071[3] = mv2057[0];
setMv mv2071[0] = mv2039[0];
setMv mv2071[2] = mv2051[0];
setMv mv2071[4] = mv2063[0];
setMv mv2071[1] = mv2045[0];
setVector ve2070 = mv2071[0,1,2,3,4];
dotVectors rc2[11] = <ve2069,ve2070>;

//rc2[12] = ((-((-(len[5])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[18])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[23])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2072[1];
resetMv mv2073[1];
setVector ve2074 = nen[1,2,3];
setVector ve2075 = nen[1,2,3];
dotVectors mv2073[0] = <ve2074,ve2075>;
resetMv mv2076[1];
setMv mv2076[0] = nen[2];
resetMv mv2077[1];
setMv mv2077[0] = mv2073[0];
calculateMvCoeff mv2072[0] = DIVISION(mv2076,mv2077);
resetMv mv2078[1];
resetMv mv2079[1];
setVector ve2080 = nen[1,2,3];
setVector ve2081 = nen[1,2,3];
dotVectors mv2079[0] = <ve2080,ve2081>;
resetMv mv2082[1];
setMv mv2082[0] = nen[1];
resetMv mv2083[1];
setMv mv2083[0] = mv2079[0];
calculateMvCoeff mv2078[0] = DIVISION(mv2082,mv2083);
resetMv mv2084[1];
resetMv mv2085[1];
setVector ve2086 = nen[1,2,3];
setVector ve2087 = nen[1,2,3];
dotVectors mv2085[0] = <ve2086,ve2087>;
resetMv mv2088[1];
setMv mv2088[0] = nen[3];
resetMv mv2089[1];
setMv mv2089[0] = mv2085[0];
calculateMvCoeff mv2084[0] = DIVISION(mv2088,mv2089);
setVector ve2090 = len[5,-18,23];
resetMv mv2092[3];
setMv mv2092[1] = mv2078[0];
setMv mv2092[2] = mv2084[0];
setMv mv2092[0] = mv2072[0];
setVector ve2091 = mv2092[0,1,2];
dotVectors rc2[12] = <ve2090,ve2091>;

//rc2[13] = (((((-(len[3])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[4])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[19])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[22])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[25])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2093[1];
resetMv mv2094[1];
setVector ve2095 = nen[1,2,3];
setVector ve2096 = nen[1,2,3];
dotVectors mv2094[0] = <ve2095,ve2096>;
resetMv mv2097[1];
setMv mv2097[0] = nen[4];
resetMv mv2098[1];
setMv mv2098[0] = mv2094[0];
calculateMvCoeff mv2093[0] = DIVISION(mv2097,mv2098);
resetMv mv2099[1];
resetMv mv2100[1];
setVector ve2101 = nen[1,2,3];
setVector ve2102 = nen[1,2,3];
dotVectors mv2100[0] = <ve2101,ve2102>;
resetMv mv2103[1];
setMv mv2103[0] = nen[3];
resetMv mv2104[1];
setMv mv2104[0] = mv2100[0];
calculateMvCoeff mv2099[0] = DIVISION(mv2103,mv2104);
resetMv mv2105[1];
resetMv mv2106[1];
setVector ve2107 = nen[1,2,3];
setVector ve2108 = nen[1,2,3];
dotVectors mv2106[0] = <ve2107,ve2108>;
resetMv mv2109[1];
setMv mv2109[0] = nen[1];
resetMv mv2110[1];
setMv mv2110[0] = mv2106[0];
calculateMvCoeff mv2105[0] = DIVISION(mv2109,mv2110);
resetMv mv2111[1];
resetMv mv2112[1];
setVector ve2113 = nen[1,2,3];
setVector ve2114 = nen[1,2,3];
dotVectors mv2112[0] = <ve2113,ve2114>;
resetMv mv2115[1];
setMv mv2115[0] = nen[2];
resetMv mv2116[1];
setMv mv2116[0] = mv2112[0];
calculateMvCoeff mv2111[0] = DIVISION(mv2115,mv2116);
resetMv mv2117[1];
resetMv mv2118[1];
setVector ve2119 = nen[1,2,3];
setVector ve2120 = nen[1,2,3];
dotVectors mv2118[0] = <ve2119,ve2120>;
resetMv mv2121[1];
setMv mv2121[0] = nen[4];
resetMv mv2122[1];
setMv mv2122[0] = mv2118[0];
calculateMvCoeff mv2117[0] = DIVISION(mv2121,mv2122);
setVector ve2123 = len[-3,4,-19,-22,25];
resetMv mv2125[5];
setMv mv2125[0] = mv2093[0];
setMv mv2125[1] = mv2099[0];
setMv mv2125[2] = mv2105[0];
setMv mv2125[3] = mv2111[0];
setMv mv2125[4] = mv2117[0];
setVector ve2124 = mv2125[0,1,2,3,4];
dotVectors rc2[13] = <ve2123,ve2124>;

//rc2[14] = ((-((-(len[5])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[20])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[23])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2126[1];
resetMv mv2127[1];
setVector ve2128 = nen[1,2,3];
setVector ve2129 = nen[1,2,3];
dotVectors mv2127[0] = <ve2128,ve2129>;
resetMv mv2130[1];
setMv mv2130[0] = nen[3];
resetMv mv2131[1];
setMv mv2131[0] = mv2127[0];
calculateMvCoeff mv2126[0] = DIVISION(mv2130,mv2131);
resetMv mv2132[1];
resetMv mv2133[1];
setVector ve2134 = nen[1,2,3];
setVector ve2135 = nen[1,2,3];
dotVectors mv2133[0] = <ve2134,ve2135>;
resetMv mv2136[1];
setMv mv2136[0] = nen[1];
resetMv mv2137[1];
setMv mv2137[0] = mv2133[0];
calculateMvCoeff mv2132[0] = DIVISION(mv2136,mv2137);
resetMv mv2138[1];
resetMv mv2139[1];
setVector ve2140 = nen[1,2,3];
setVector ve2141 = nen[1,2,3];
dotVectors mv2139[0] = <ve2140,ve2141>;
resetMv mv2142[1];
setMv mv2142[0] = nen[2];
resetMv mv2143[1];
setMv mv2143[0] = mv2139[0];
calculateMvCoeff mv2138[0] = DIVISION(mv2142,mv2143);
setVector ve2144 = len[5,-20,-23];
resetMv mv2146[3];
setMv mv2146[2] = mv2138[0];
setMv mv2146[0] = mv2126[0];
setMv mv2146[1] = mv2132[0];
setVector ve2145 = mv2146[0,1,2];
dotVectors rc2[14] = <ve2144,ve2145>;

//rc2[15] = (((-((-(len[5])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[21])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[24])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[25])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2147[1];
resetMv mv2148[1];
setVector ve2149 = nen[1,2,3];
setVector ve2150 = nen[1,2,3];
dotVectors mv2148[0] = <ve2149,ve2150>;
resetMv mv2151[1];
setMv mv2151[0] = nen[4];
resetMv mv2152[1];
setMv mv2152[0] = mv2148[0];
calculateMvCoeff mv2147[0] = DIVISION(mv2151,mv2152);
resetMv mv2153[1];
resetMv mv2154[1];
setVector ve2155 = nen[1,2,3];
setVector ve2156 = nen[1,2,3];
dotVectors mv2154[0] = <ve2155,ve2156>;
resetMv mv2157[1];
setMv mv2157[0] = nen[1];
resetMv mv2158[1];
setMv mv2158[0] = mv2154[0];
calculateMvCoeff mv2153[0] = DIVISION(mv2157,mv2158);
resetMv mv2159[1];
resetMv mv2160[1];
setVector ve2161 = nen[1,2,3];
setVector ve2162 = nen[1,2,3];
dotVectors mv2160[0] = <ve2161,ve2162>;
resetMv mv2163[1];
setMv mv2163[0] = nen[2];
resetMv mv2164[1];
setMv mv2164[0] = mv2160[0];
calculateMvCoeff mv2159[0] = DIVISION(mv2163,mv2164);
resetMv mv2165[1];
resetMv mv2166[1];
setVector ve2167 = nen[1,2,3];
setVector ve2168 = nen[1,2,3];
dotVectors mv2166[0] = <ve2167,ve2168>;
resetMv mv2169[1];
setMv mv2169[0] = nen[3];
resetMv mv2170[1];
setMv mv2170[0] = mv2166[0];
calculateMvCoeff mv2165[0] = DIVISION(mv2169,mv2170);
setVector ve2171 = len[5,-21,-24,-25];
resetMv mv2173[4];
setMv mv2173[0] = mv2147[0];
setMv mv2173[2] = mv2159[0];
setMv mv2173[3] = mv2165[0];
setMv mv2173[1] = mv2153[0];
setVector ve2172 = mv2173[0,1,2,3];
dotVectors rc2[15] = <ve2171,ve2172>;

//rc2[16] = ((((rcPpDual[6] - len[6]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[7] - len[7]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[10] - len[10]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[27])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2174[1];
resetMv mv2176[2];
setMv mv2176[1] = len[-6];
setMv mv2176[0] = rcPpDual[6];
setVector ve2175 = mv2176[0,1];
dotVectors mv2174[0] = <ve2175>;
resetMv mv2177[1];
resetMv mv2178[1];
setVector ve2179 = nen[1,2,3];
setVector ve2180 = nen[1,2,3];
dotVectors mv2178[0] = <ve2179,ve2180>;
resetMv mv2181[1];
setMv mv2181[0] = nen[3];
resetMv mv2182[1];
setMv mv2182[0] = mv2178[0];
calculateMvCoeff mv2177[0] = DIVISION(mv2181,mv2182);
resetMv mv2183[1];
resetMv mv2184[1];
resetMv mv2186[2];
setMv mv2186[1] = len[-7];
setMv mv2186[0] = rcPpDual[7];
setVector ve2185 = mv2186[0,1];
dotVectors mv2184[0] = <ve2185>;
setMv mv2183[0] = mv2184[-0];
resetMv mv2187[1];
resetMv mv2188[1];
setVector ve2189 = nen[1,2,3];
setVector ve2190 = nen[1,2,3];
dotVectors mv2188[0] = <ve2189,ve2190>;
resetMv mv2191[1];
setMv mv2191[0] = nen[2];
resetMv mv2192[1];
setMv mv2192[0] = mv2188[0];
calculateMvCoeff mv2187[0] = DIVISION(mv2191,mv2192);
resetMv mv2193[1];
resetMv mv2195[2];
setMv mv2195[1] = len[-10];
setMv mv2195[0] = rcPpDual[10];
setVector ve2194 = mv2195[0,1];
dotVectors mv2193[0] = <ve2194>;
resetMv mv2196[1];
resetMv mv2197[1];
setVector ve2198 = nen[1,2,3];
setVector ve2199 = nen[1,2,3];
dotVectors mv2197[0] = <ve2198,ve2199>;
resetMv mv2200[1];
setMv mv2200[0] = nen[1];
resetMv mv2201[1];
setMv mv2201[0] = mv2197[0];
calculateMvCoeff mv2196[0] = DIVISION(mv2200,mv2201);
resetMv mv2202[1];
resetMv mv2203[1];
setVector ve2204 = nen[1,2,3];
setVector ve2205 = nen[1,2,3];
dotVectors mv2203[0] = <ve2204,ve2205>;
resetMv mv2206[1];
setMv mv2206[0] = nen[4];
resetMv mv2207[1];
setMv mv2207[0] = mv2203[0];
calculateMvCoeff mv2202[0] = DIVISION(mv2206,mv2207);
resetMv mv2209[4];
setMv mv2209[1] = mv2183[0];
setMv mv2209[0] = mv2174[0];
setMv mv2209[2] = mv2193[0];
setMv mv2209[3] = len[27];
setVector ve2208 = mv2209[0,1,2,3];
resetMv mv2211[4];
setMv mv2211[2] = mv2196[0];
setMv mv2211[1] = mv2187[0];
setMv mv2211[0] = mv2177[0];
setMv mv2211[3] = mv2202[0];
setVector ve2210 = mv2211[0,1,2,3];
dotVectors rc2[16] = <ve2208,ve2210>;

//rc2[17] = (((((rcPpDual[6] - len[6]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] - len[8]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[11] - len[11]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[26])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[28])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2212[1];
resetMv mv2214[2];
setMv mv2214[1] = len[-6];
setMv mv2214[0] = rcPpDual[6];
setVector ve2213 = mv2214[0,1];
dotVectors mv2212[0] = <ve2213>;
resetMv mv2215[1];
resetMv mv2216[1];
setVector ve2217 = nen[1,2,3];
setVector ve2218 = nen[1,2,3];
dotVectors mv2216[0] = <ve2217,ve2218>;
resetMv mv2219[1];
setMv mv2219[0] = nen[4];
resetMv mv2220[1];
setMv mv2220[0] = mv2216[0];
calculateMvCoeff mv2215[0] = DIVISION(mv2219,mv2220);
resetMv mv2221[1];
resetMv mv2222[1];
resetMv mv2224[2];
setMv mv2224[1] = len[-8];
setMv mv2224[0] = rcPpDual[8];
setVector ve2223 = mv2224[0,1];
dotVectors mv2222[0] = <ve2223>;
setMv mv2221[0] = mv2222[-0];
resetMv mv2225[1];
resetMv mv2226[1];
setVector ve2227 = nen[1,2,3];
setVector ve2228 = nen[1,2,3];
dotVectors mv2226[0] = <ve2227,ve2228>;
resetMv mv2229[1];
setMv mv2229[0] = nen[2];
resetMv mv2230[1];
setMv mv2230[0] = mv2226[0];
calculateMvCoeff mv2225[0] = DIVISION(mv2229,mv2230);
resetMv mv2231[1];
resetMv mv2233[2];
setMv mv2233[1] = len[-11];
setMv mv2233[0] = rcPpDual[11];
setVector ve2232 = mv2233[0,1];
dotVectors mv2231[0] = <ve2232>;
resetMv mv2234[1];
resetMv mv2235[1];
setVector ve2236 = nen[1,2,3];
setVector ve2237 = nen[1,2,3];
dotVectors mv2235[0] = <ve2236,ve2237>;
resetMv mv2238[1];
setMv mv2238[0] = nen[1];
resetMv mv2239[1];
setMv mv2239[0] = mv2235[0];
calculateMvCoeff mv2234[0] = DIVISION(mv2238,mv2239);
resetMv mv2240[1];
resetMv mv2241[1];
setVector ve2242 = nen[1,2,3];
setVector ve2243 = nen[1,2,3];
dotVectors mv2241[0] = <ve2242,ve2243>;
resetMv mv2244[1];
setMv mv2244[0] = nen[3];
resetMv mv2245[1];
setMv mv2245[0] = mv2241[0];
calculateMvCoeff mv2240[0] = DIVISION(mv2244,mv2245);
resetMv mv2246[1];
resetMv mv2247[1];
setVector ve2248 = nen[1,2,3];
setVector ve2249 = nen[1,2,3];
dotVectors mv2247[0] = <ve2248,ve2249>;
resetMv mv2250[1];
setMv mv2250[0] = nen[4];
resetMv mv2251[1];
setMv mv2251[0] = mv2247[0];
calculateMvCoeff mv2246[0] = DIVISION(mv2250,mv2251);
resetMv mv2253[5];
setMv mv2253[1] = mv2221[0];
setMv mv2253[0] = mv2212[0];
setMv mv2253[3,4] = len[26,28];
setMv mv2253[2] = mv2231[0];
setVector ve2252 = mv2253[0,1,2,3,4];
resetMv mv2255[5];
setMv mv2255[2] = mv2234[0];
setMv mv2255[1] = mv2225[0];
setMv mv2255[4] = mv2246[0];
setMv mv2255[0] = mv2215[0];
setMv mv2255[3] = mv2240[0];
setVector ve2254 = mv2255[0,1,2,3,4];
dotVectors rc2[17] = <ve2252,ve2254>;

//rc2[18] = ((-((rcPpDual[9] - len[9]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[12] - len[12]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[27])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2256[1];
resetMv mv2257[1];
resetMv mv2259[2];
setMv mv2259[1] = len[-9];
setMv mv2259[0] = rcPpDual[9];
setVector ve2258 = mv2259[0,1];
dotVectors mv2257[0] = <ve2258>;
setMv mv2256[0] = mv2257[-0];
resetMv mv2260[1];
resetMv mv2261[1];
setVector ve2262 = nen[1,2,3];
setVector ve2263 = nen[1,2,3];
dotVectors mv2261[0] = <ve2262,ve2263>;
resetMv mv2264[1];
setMv mv2264[0] = nen[2];
resetMv mv2265[1];
setMv mv2265[0] = mv2261[0];
calculateMvCoeff mv2260[0] = DIVISION(mv2264,mv2265);
resetMv mv2266[1];
resetMv mv2268[2];
setMv mv2268[1] = len[-12];
setMv mv2268[0] = rcPpDual[12];
setVector ve2267 = mv2268[0,1];
dotVectors mv2266[0] = <ve2267>;
resetMv mv2269[1];
resetMv mv2270[1];
setVector ve2271 = nen[1,2,3];
setVector ve2272 = nen[1,2,3];
dotVectors mv2270[0] = <ve2271,ve2272>;
resetMv mv2273[1];
setMv mv2273[0] = nen[1];
resetMv mv2274[1];
setMv mv2274[0] = mv2270[0];
calculateMvCoeff mv2269[0] = DIVISION(mv2273,mv2274);
resetMv mv2275[1];
resetMv mv2276[1];
setVector ve2277 = nen[1,2,3];
setVector ve2278 = nen[1,2,3];
dotVectors mv2276[0] = <ve2277,ve2278>;
resetMv mv2279[1];
setMv mv2279[0] = nen[3];
resetMv mv2280[1];
setMv mv2280[0] = mv2276[0];
calculateMvCoeff mv2275[0] = DIVISION(mv2279,mv2280);
resetMv mv2282[3];
setMv mv2282[1] = mv2266[0];
setMv mv2282[2] = len[27];
setMv mv2282[0] = mv2256[0];
setVector ve2281 = mv2282[0,1,2];
resetMv mv2284[3];
setMv mv2284[0] = mv2260[0];
setMv mv2284[2] = mv2275[0];
setMv mv2284[1] = mv2269[0];
setVector ve2283 = mv2284[0,1,2];
dotVectors rc2[18] = <ve2281,ve2283>;

//rc2[19] = (((((rcPpDual[7] - len[7]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[8] - len[8]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[13] - len[13]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[26])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[29])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2285[1];
resetMv mv2287[2];
setMv mv2287[1] = len[-7];
setMv mv2287[0] = rcPpDual[7];
setVector ve2286 = mv2287[0,1];
dotVectors mv2285[0] = <ve2286>;
resetMv mv2288[1];
resetMv mv2289[1];
setVector ve2290 = nen[1,2,3];
setVector ve2291 = nen[1,2,3];
dotVectors mv2289[0] = <ve2290,ve2291>;
resetMv mv2292[1];
setMv mv2292[0] = nen[4];
resetMv mv2293[1];
setMv mv2293[0] = mv2289[0];
calculateMvCoeff mv2288[0] = DIVISION(mv2292,mv2293);
resetMv mv2294[1];
resetMv mv2295[1];
resetMv mv2297[2];
setMv mv2297[1] = len[-8];
setMv mv2297[0] = rcPpDual[8];
setVector ve2296 = mv2297[0,1];
dotVectors mv2295[0] = <ve2296>;
setMv mv2294[0] = mv2295[-0];
resetMv mv2298[1];
resetMv mv2299[1];
setVector ve2300 = nen[1,2,3];
setVector ve2301 = nen[1,2,3];
dotVectors mv2299[0] = <ve2300,ve2301>;
resetMv mv2302[1];
setMv mv2302[0] = nen[3];
resetMv mv2303[1];
setMv mv2303[0] = mv2299[0];
calculateMvCoeff mv2298[0] = DIVISION(mv2302,mv2303);
resetMv mv2304[1];
resetMv mv2306[2];
setMv mv2306[1] = len[-13];
setMv mv2306[0] = rcPpDual[13];
setVector ve2305 = mv2306[0,1];
dotVectors mv2304[0] = <ve2305>;
resetMv mv2307[1];
resetMv mv2308[1];
setVector ve2309 = nen[1,2,3];
setVector ve2310 = nen[1,2,3];
dotVectors mv2308[0] = <ve2309,ve2310>;
resetMv mv2311[1];
setMv mv2311[0] = nen[1];
resetMv mv2312[1];
setMv mv2312[0] = mv2308[0];
calculateMvCoeff mv2307[0] = DIVISION(mv2311,mv2312);
resetMv mv2313[1];
resetMv mv2314[1];
setVector ve2315 = nen[1,2,3];
setVector ve2316 = nen[1,2,3];
dotVectors mv2314[0] = <ve2315,ve2316>;
resetMv mv2317[1];
setMv mv2317[0] = nen[2];
resetMv mv2318[1];
setMv mv2318[0] = mv2314[0];
calculateMvCoeff mv2313[0] = DIVISION(mv2317,mv2318);
resetMv mv2319[1];
resetMv mv2320[1];
setVector ve2321 = nen[1,2,3];
setVector ve2322 = nen[1,2,3];
dotVectors mv2320[0] = <ve2321,ve2322>;
resetMv mv2323[1];
setMv mv2323[0] = nen[4];
resetMv mv2324[1];
setMv mv2324[0] = mv2320[0];
calculateMvCoeff mv2319[0] = DIVISION(mv2323,mv2324);
resetMv mv2326[5];
setMv mv2326[0] = mv2285[0];
setMv mv2326[2] = mv2304[0];
setMv mv2326[3,4] = len[-26,29];
setMv mv2326[1] = mv2294[0];
setVector ve2325 = mv2326[0,1,2,3,4];
resetMv mv2328[5];
setMv mv2328[1] = mv2298[0];
setMv mv2328[3] = mv2313[0];
setMv mv2328[4] = mv2319[0];
setMv mv2328[2] = mv2307[0];
setMv mv2328[0] = mv2288[0];
setVector ve2327 = mv2328[0,1,2,3,4];
dotVectors rc2[19] = <ve2325,ve2327>;

//rc2[20] = ((-((rcPpDual[9] - len[9]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[14] - len[14]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[27])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2329[1];
resetMv mv2330[1];
resetMv mv2332[2];
setMv mv2332[1] = len[-9];
setMv mv2332[0] = rcPpDual[9];
setVector ve2331 = mv2332[0,1];
dotVectors mv2330[0] = <ve2331>;
setMv mv2329[0] = mv2330[-0];
resetMv mv2333[1];
resetMv mv2334[1];
setVector ve2335 = nen[1,2,3];
setVector ve2336 = nen[1,2,3];
dotVectors mv2334[0] = <ve2335,ve2336>;
resetMv mv2337[1];
setMv mv2337[0] = nen[3];
resetMv mv2338[1];
setMv mv2338[0] = mv2334[0];
calculateMvCoeff mv2333[0] = DIVISION(mv2337,mv2338);
resetMv mv2339[1];
resetMv mv2341[2];
setMv mv2341[1] = len[-14];
setMv mv2341[0] = rcPpDual[14];
setVector ve2340 = mv2341[0,1];
dotVectors mv2339[0] = <ve2340>;
resetMv mv2342[1];
resetMv mv2343[1];
setVector ve2344 = nen[1,2,3];
setVector ve2345 = nen[1,2,3];
dotVectors mv2343[0] = <ve2344,ve2345>;
resetMv mv2346[1];
setMv mv2346[0] = nen[1];
resetMv mv2347[1];
setMv mv2347[0] = mv2343[0];
calculateMvCoeff mv2342[0] = DIVISION(mv2346,mv2347);
resetMv mv2348[1];
resetMv mv2349[1];
setVector ve2350 = nen[1,2,3];
setVector ve2351 = nen[1,2,3];
dotVectors mv2349[0] = <ve2350,ve2351>;
resetMv mv2352[1];
setMv mv2352[0] = nen[2];
resetMv mv2353[1];
setMv mv2353[0] = mv2349[0];
calculateMvCoeff mv2348[0] = DIVISION(mv2352,mv2353);
resetMv mv2355[3];
setMv mv2355[1] = mv2339[0];
setMv mv2355[0] = mv2329[0];
setMv mv2355[2] = len[-27];
setVector ve2354 = mv2355[0,1,2];
resetMv mv2357[3];
setMv mv2357[2] = mv2348[0];
setMv mv2357[1] = mv2342[0];
setMv mv2357[0] = mv2333[0];
setVector ve2356 = mv2357[0,1,2];
dotVectors rc2[20] = <ve2354,ve2356>;

//rc2[21] = (((-((rcPpDual[9] - len[9]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] - len[15]) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[28])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[29])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2358[1];
resetMv mv2359[1];
resetMv mv2361[2];
setMv mv2361[1] = len[-9];
setMv mv2361[0] = rcPpDual[9];
setVector ve2360 = mv2361[0,1];
dotVectors mv2359[0] = <ve2360>;
setMv mv2358[0] = mv2359[-0];
resetMv mv2362[1];
resetMv mv2363[1];
setVector ve2364 = nen[1,2,3];
setVector ve2365 = nen[1,2,3];
dotVectors mv2363[0] = <ve2364,ve2365>;
resetMv mv2366[1];
setMv mv2366[0] = nen[4];
resetMv mv2367[1];
setMv mv2367[0] = mv2363[0];
calculateMvCoeff mv2362[0] = DIVISION(mv2366,mv2367);
resetMv mv2368[1];
resetMv mv2370[2];
setMv mv2370[1] = len[-15];
setMv mv2370[0] = rcPpDual[15];
setVector ve2369 = mv2370[0,1];
dotVectors mv2368[0] = <ve2369>;
resetMv mv2371[1];
resetMv mv2372[1];
setVector ve2373 = nen[1,2,3];
setVector ve2374 = nen[1,2,3];
dotVectors mv2372[0] = <ve2373,ve2374>;
resetMv mv2375[1];
setMv mv2375[0] = nen[1];
resetMv mv2376[1];
setMv mv2376[0] = mv2372[0];
calculateMvCoeff mv2371[0] = DIVISION(mv2375,mv2376);
resetMv mv2377[1];
resetMv mv2378[1];
setVector ve2379 = nen[1,2,3];
setVector ve2380 = nen[1,2,3];
dotVectors mv2378[0] = <ve2379,ve2380>;
resetMv mv2381[1];
setMv mv2381[0] = nen[2];
resetMv mv2382[1];
setMv mv2382[0] = mv2378[0];
calculateMvCoeff mv2377[0] = DIVISION(mv2381,mv2382);
resetMv mv2383[1];
resetMv mv2384[1];
setVector ve2385 = nen[1,2,3];
setVector ve2386 = nen[1,2,3];
dotVectors mv2384[0] = <ve2385,ve2386>;
resetMv mv2387[1];
setMv mv2387[0] = nen[3];
resetMv mv2388[1];
setMv mv2388[0] = mv2384[0];
calculateMvCoeff mv2383[0] = DIVISION(mv2387,mv2388);
resetMv mv2390[4];
setMv mv2390[2,3] = len[-28,-29];
setMv mv2390[1] = mv2368[0];
setMv mv2390[0] = mv2358[0];
setVector ve2389 = mv2390[0,1,2,3];
resetMv mv2392[4];
setMv mv2392[2] = mv2377[0];
setMv mv2392[0] = mv2362[0];
setMv mv2392[1] = mv2371[0];
setMv mv2392[3] = mv2383[0];
setVector ve2391 = mv2392[0,1,2,3];
dotVectors rc2[21] = <ve2389,ve2391>;

//rc2[22] = (((((rcPpDual[10] - len[10]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((rcPpDual[11] - len[11]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((rcPpDual[13] - len[13]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[26])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[30])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2393[1];
resetMv mv2395[2];
setMv mv2395[1] = len[-10];
setMv mv2395[0] = rcPpDual[10];
setVector ve2394 = mv2395[0,1];
dotVectors mv2393[0] = <ve2394>;
resetMv mv2396[1];
resetMv mv2397[1];
setVector ve2398 = nen[1,2,3];
setVector ve2399 = nen[1,2,3];
dotVectors mv2397[0] = <ve2398,ve2399>;
resetMv mv2400[1];
setMv mv2400[0] = nen[4];
resetMv mv2401[1];
setMv mv2401[0] = mv2397[0];
calculateMvCoeff mv2396[0] = DIVISION(mv2400,mv2401);
resetMv mv2402[1];
resetMv mv2403[1];
resetMv mv2405[2];
setMv mv2405[1] = len[-11];
setMv mv2405[0] = rcPpDual[11];
setVector ve2404 = mv2405[0,1];
dotVectors mv2403[0] = <ve2404>;
setMv mv2402[0] = mv2403[-0];
resetMv mv2406[1];
resetMv mv2407[1];
setVector ve2408 = nen[1,2,3];
setVector ve2409 = nen[1,2,3];
dotVectors mv2407[0] = <ve2408,ve2409>;
resetMv mv2410[1];
setMv mv2410[0] = nen[3];
resetMv mv2411[1];
setMv mv2411[0] = mv2407[0];
calculateMvCoeff mv2406[0] = DIVISION(mv2410,mv2411);
resetMv mv2412[1];
resetMv mv2414[2];
setMv mv2414[1] = len[-13];
setMv mv2414[0] = rcPpDual[13];
setVector ve2413 = mv2414[0,1];
dotVectors mv2412[0] = <ve2413>;
resetMv mv2415[1];
resetMv mv2416[1];
setVector ve2417 = nen[1,2,3];
setVector ve2418 = nen[1,2,3];
dotVectors mv2416[0] = <ve2417,ve2418>;
resetMv mv2419[1];
setMv mv2419[0] = nen[2];
resetMv mv2420[1];
setMv mv2420[0] = mv2416[0];
calculateMvCoeff mv2415[0] = DIVISION(mv2419,mv2420);
resetMv mv2421[1];
resetMv mv2422[1];
setVector ve2423 = nen[1,2,3];
setVector ve2424 = nen[1,2,3];
dotVectors mv2422[0] = <ve2423,ve2424>;
resetMv mv2425[1];
setMv mv2425[0] = nen[1];
resetMv mv2426[1];
setMv mv2426[0] = mv2422[0];
calculateMvCoeff mv2421[0] = DIVISION(mv2425,mv2426);
resetMv mv2427[1];
resetMv mv2428[1];
setVector ve2429 = nen[1,2,3];
setVector ve2430 = nen[1,2,3];
dotVectors mv2428[0] = <ve2429,ve2430>;
resetMv mv2431[1];
setMv mv2431[0] = nen[4];
resetMv mv2432[1];
setMv mv2432[0] = mv2428[0];
calculateMvCoeff mv2427[0] = DIVISION(mv2431,mv2432);
resetMv mv2434[5];
setMv mv2434[1] = mv2402[0];
setMv mv2434[0] = mv2393[0];
setMv mv2434[2] = mv2412[0];
setMv mv2434[3,4] = len[26,30];
setVector ve2433 = mv2434[0,1,2,3,4];
resetMv mv2436[5];
setMv mv2436[4] = mv2427[0];
setMv mv2436[2] = mv2415[0];
setMv mv2436[1] = mv2406[0];
setMv mv2436[0] = mv2396[0];
setMv mv2436[3] = mv2421[0];
setVector ve2435 = mv2436[0,1,2,3,4];
dotVectors rc2[22] = <ve2433,ve2435>;

//rc2[23] = ((-((rcPpDual[12] - len[12]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[14] - len[14]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[27])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2437[1];
resetMv mv2438[1];
resetMv mv2440[2];
setMv mv2440[1] = len[-12];
setMv mv2440[0] = rcPpDual[12];
setVector ve2439 = mv2440[0,1];
dotVectors mv2438[0] = <ve2439>;
setMv mv2437[0] = mv2438[-0];
resetMv mv2441[1];
resetMv mv2442[1];
setVector ve2443 = nen[1,2,3];
setVector ve2444 = nen[1,2,3];
dotVectors mv2442[0] = <ve2443,ve2444>;
resetMv mv2445[1];
setMv mv2445[0] = nen[3];
resetMv mv2446[1];
setMv mv2446[0] = mv2442[0];
calculateMvCoeff mv2441[0] = DIVISION(mv2445,mv2446);
resetMv mv2447[1];
resetMv mv2449[2];
setMv mv2449[1] = len[-14];
setMv mv2449[0] = rcPpDual[14];
setVector ve2448 = mv2449[0,1];
dotVectors mv2447[0] = <ve2448>;
resetMv mv2450[1];
resetMv mv2451[1];
setVector ve2452 = nen[1,2,3];
setVector ve2453 = nen[1,2,3];
dotVectors mv2451[0] = <ve2452,ve2453>;
resetMv mv2454[1];
setMv mv2454[0] = nen[2];
resetMv mv2455[1];
setMv mv2455[0] = mv2451[0];
calculateMvCoeff mv2450[0] = DIVISION(mv2454,mv2455);
resetMv mv2456[1];
resetMv mv2457[1];
setVector ve2458 = nen[1,2,3];
setVector ve2459 = nen[1,2,3];
dotVectors mv2457[0] = <ve2458,ve2459>;
resetMv mv2460[1];
setMv mv2460[0] = nen[1];
resetMv mv2461[1];
setMv mv2461[0] = mv2457[0];
calculateMvCoeff mv2456[0] = DIVISION(mv2460,mv2461);
resetMv mv2463[3];
setMv mv2463[2] = len[27];
setMv mv2463[0] = mv2437[0];
setMv mv2463[1] = mv2447[0];
setVector ve2462 = mv2463[0,1,2];
resetMv mv2465[3];
setMv mv2465[2] = mv2456[0];
setMv mv2465[0] = mv2441[0];
setMv mv2465[1] = mv2450[0];
setVector ve2464 = mv2465[0,1,2];
dotVectors rc2[23] = <ve2462,ve2464>;

//rc2[24] = (((-((rcPpDual[12] - len[12]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] - len[15]) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[28])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[30])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2466[1];
resetMv mv2467[1];
resetMv mv2469[2];
setMv mv2469[1] = len[-12];
setMv mv2469[0] = rcPpDual[12];
setVector ve2468 = mv2469[0,1];
dotVectors mv2467[0] = <ve2468>;
setMv mv2466[0] = mv2467[-0];
resetMv mv2470[1];
resetMv mv2471[1];
setVector ve2472 = nen[1,2,3];
setVector ve2473 = nen[1,2,3];
dotVectors mv2471[0] = <ve2472,ve2473>;
resetMv mv2474[1];
setMv mv2474[0] = nen[4];
resetMv mv2475[1];
setMv mv2475[0] = mv2471[0];
calculateMvCoeff mv2470[0] = DIVISION(mv2474,mv2475);
resetMv mv2476[1];
resetMv mv2478[2];
setMv mv2478[1] = len[-15];
setMv mv2478[0] = rcPpDual[15];
setVector ve2477 = mv2478[0,1];
dotVectors mv2476[0] = <ve2477>;
resetMv mv2479[1];
resetMv mv2480[1];
setVector ve2481 = nen[1,2,3];
setVector ve2482 = nen[1,2,3];
dotVectors mv2480[0] = <ve2481,ve2482>;
resetMv mv2483[1];
setMv mv2483[0] = nen[2];
resetMv mv2484[1];
setMv mv2484[0] = mv2480[0];
calculateMvCoeff mv2479[0] = DIVISION(mv2483,mv2484);
resetMv mv2485[1];
resetMv mv2486[1];
setVector ve2487 = nen[1,2,3];
setVector ve2488 = nen[1,2,3];
dotVectors mv2486[0] = <ve2487,ve2488>;
resetMv mv2489[1];
setMv mv2489[0] = nen[1];
resetMv mv2490[1];
setMv mv2490[0] = mv2486[0];
calculateMvCoeff mv2485[0] = DIVISION(mv2489,mv2490);
resetMv mv2491[1];
resetMv mv2492[1];
setVector ve2493 = nen[1,2,3];
setVector ve2494 = nen[1,2,3];
dotVectors mv2492[0] = <ve2493,ve2494>;
resetMv mv2495[1];
setMv mv2495[0] = nen[3];
resetMv mv2496[1];
setMv mv2496[0] = mv2492[0];
calculateMvCoeff mv2491[0] = DIVISION(mv2495,mv2496);
resetMv mv2498[4];
setMv mv2498[1] = mv2476[0];
setMv mv2498[0] = mv2466[0];
setMv mv2498[2,3] = len[28,-30];
setVector ve2497 = mv2498[0,1,2,3];
resetMv mv2500[4];
setMv mv2500[2] = mv2485[0];
setMv mv2500[3] = mv2491[0];
setMv mv2500[1] = mv2479[0];
setMv mv2500[0] = mv2470[0];
setVector ve2499 = mv2500[0,1,2,3];
dotVectors rc2[24] = <ve2497,ve2499>;

//rc2[25] = (((-((rcPpDual[14] - len[14]) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((rcPpDual[15] - len[15]) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[29])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[30])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2501[1];
resetMv mv2502[1];
resetMv mv2504[2];
setMv mv2504[1] = len[-14];
setMv mv2504[0] = rcPpDual[14];
setVector ve2503 = mv2504[0,1];
dotVectors mv2502[0] = <ve2503>;
setMv mv2501[0] = mv2502[-0];
resetMv mv2505[1];
resetMv mv2506[1];
setVector ve2507 = nen[1,2,3];
setVector ve2508 = nen[1,2,3];
dotVectors mv2506[0] = <ve2507,ve2508>;
resetMv mv2509[1];
setMv mv2509[0] = nen[4];
resetMv mv2510[1];
setMv mv2510[0] = mv2506[0];
calculateMvCoeff mv2505[0] = DIVISION(mv2509,mv2510);
resetMv mv2511[1];
resetMv mv2513[2];
setMv mv2513[1] = len[-15];
setMv mv2513[0] = rcPpDual[15];
setVector ve2512 = mv2513[0,1];
dotVectors mv2511[0] = <ve2512>;
resetMv mv2514[1];
resetMv mv2515[1];
setVector ve2516 = nen[1,2,3];
setVector ve2517 = nen[1,2,3];
dotVectors mv2515[0] = <ve2516,ve2517>;
resetMv mv2518[1];
setMv mv2518[0] = nen[3];
resetMv mv2519[1];
setMv mv2519[0] = mv2515[0];
calculateMvCoeff mv2514[0] = DIVISION(mv2518,mv2519);
resetMv mv2520[1];
resetMv mv2521[1];
setVector ve2522 = nen[1,2,3];
setVector ve2523 = nen[1,2,3];
dotVectors mv2521[0] = <ve2522,ve2523>;
resetMv mv2524[1];
setMv mv2524[0] = nen[1];
resetMv mv2525[1];
setMv mv2525[0] = mv2521[0];
calculateMvCoeff mv2520[0] = DIVISION(mv2524,mv2525);
resetMv mv2526[1];
resetMv mv2527[1];
setVector ve2528 = nen[1,2,3];
setVector ve2529 = nen[1,2,3];
dotVectors mv2527[0] = <ve2528,ve2529>;
resetMv mv2530[1];
setMv mv2530[0] = nen[2];
resetMv mv2531[1];
setMv mv2531[0] = mv2527[0];
calculateMvCoeff mv2526[0] = DIVISION(mv2530,mv2531);
resetMv mv2533[4];
setMv mv2533[0] = mv2501[0];
setMv mv2533[2,3] = len[29,30];
setMv mv2533[1] = mv2511[0];
setVector ve2532 = mv2533[0,1,2,3];
resetMv mv2535[4];
setMv mv2535[3] = mv2526[0];
setMv mv2535[0] = mv2505[0];
setMv mv2535[2] = mv2520[0];
setMv mv2535[1] = mv2514[0];
setVector ve2534 = mv2535[0,1,2,3];
dotVectors rc2[25] = <ve2532,ve2534>;

//rc2[26] = (((((-(len[16])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))) + (-((-(len[17])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[19])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[22])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[31])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2536[1];
resetMv mv2537[1];
setVector ve2538 = nen[1,2,3];
setVector ve2539 = nen[1,2,3];
dotVectors mv2537[0] = <ve2538,ve2539>;
resetMv mv2540[1];
setMv mv2540[0] = nen[4];
resetMv mv2541[1];
setMv mv2541[0] = mv2537[0];
calculateMvCoeff mv2536[0] = DIVISION(mv2540,mv2541);
resetMv mv2542[1];
resetMv mv2543[1];
setVector ve2544 = nen[1,2,3];
setVector ve2545 = nen[1,2,3];
dotVectors mv2543[0] = <ve2544,ve2545>;
resetMv mv2546[1];
setMv mv2546[0] = nen[3];
resetMv mv2547[1];
setMv mv2547[0] = mv2543[0];
calculateMvCoeff mv2542[0] = DIVISION(mv2546,mv2547);
resetMv mv2548[1];
resetMv mv2549[1];
setVector ve2550 = nen[1,2,3];
setVector ve2551 = nen[1,2,3];
dotVectors mv2549[0] = <ve2550,ve2551>;
resetMv mv2552[1];
setMv mv2552[0] = nen[2];
resetMv mv2553[1];
setMv mv2553[0] = mv2549[0];
calculateMvCoeff mv2548[0] = DIVISION(mv2552,mv2553);
resetMv mv2554[1];
resetMv mv2555[1];
setVector ve2556 = nen[1,2,3];
setVector ve2557 = nen[1,2,3];
dotVectors mv2555[0] = <ve2556,ve2557>;
resetMv mv2558[1];
setMv mv2558[0] = nen[1];
resetMv mv2559[1];
setMv mv2559[0] = mv2555[0];
calculateMvCoeff mv2554[0] = DIVISION(mv2558,mv2559);
resetMv mv2560[1];
resetMv mv2561[1];
setVector ve2562 = nen[1,2,3];
setVector ve2563 = nen[1,2,3];
dotVectors mv2561[0] = <ve2562,ve2563>;
resetMv mv2564[1];
setMv mv2564[0] = nen[4];
resetMv mv2565[1];
setMv mv2565[0] = mv2561[0];
calculateMvCoeff mv2560[0] = DIVISION(mv2564,mv2565);
setVector ve2566 = len[-16,17,-19,22,31];
resetMv mv2568[5];
setMv mv2568[3] = mv2554[0];
setMv mv2568[0] = mv2536[0];
setMv mv2568[1] = mv2542[0];
setMv mv2568[2] = mv2548[0];
setMv mv2568[4] = mv2560[0];
setVector ve2567 = mv2568[0,1,2,3,4];
dotVectors rc2[26] = <ve2566,ve2567>;

//rc2[27] = ((-((-(len[18])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[20])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[23])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2569[1];
resetMv mv2570[1];
setVector ve2571 = nen[1,2,3];
setVector ve2572 = nen[1,2,3];
dotVectors mv2570[0] = <ve2571,ve2572>;
resetMv mv2573[1];
setMv mv2573[0] = nen[3];
resetMv mv2574[1];
setMv mv2574[0] = mv2570[0];
calculateMvCoeff mv2569[0] = DIVISION(mv2573,mv2574);
resetMv mv2575[1];
resetMv mv2576[1];
setVector ve2577 = nen[1,2,3];
setVector ve2578 = nen[1,2,3];
dotVectors mv2576[0] = <ve2577,ve2578>;
resetMv mv2579[1];
setMv mv2579[0] = nen[2];
resetMv mv2580[1];
setMv mv2580[0] = mv2576[0];
calculateMvCoeff mv2575[0] = DIVISION(mv2579,mv2580);
resetMv mv2581[1];
resetMv mv2582[1];
setVector ve2583 = nen[1,2,3];
setVector ve2584 = nen[1,2,3];
dotVectors mv2582[0] = <ve2583,ve2584>;
resetMv mv2585[1];
setMv mv2585[0] = nen[1];
resetMv mv2586[1];
setMv mv2586[0] = mv2582[0];
calculateMvCoeff mv2581[0] = DIVISION(mv2585,mv2586);
setVector ve2587 = len[18,-20,23];
resetMv mv2589[3];
setMv mv2589[2] = mv2581[0];
setMv mv2589[0] = mv2569[0];
setMv mv2589[1] = mv2575[0];
setVector ve2588 = mv2589[0,1,2];
dotVectors rc2[27] = <ve2587,ve2588>;

//rc2[28] = (((-((-(len[18])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[21])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[24])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[31])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2590[1];
resetMv mv2591[1];
setVector ve2592 = nen[1,2,3];
setVector ve2593 = nen[1,2,3];
dotVectors mv2591[0] = <ve2592,ve2593>;
resetMv mv2594[1];
setMv mv2594[0] = nen[4];
resetMv mv2595[1];
setMv mv2595[0] = mv2591[0];
calculateMvCoeff mv2590[0] = DIVISION(mv2594,mv2595);
resetMv mv2596[1];
resetMv mv2597[1];
setVector ve2598 = nen[1,2,3];
setVector ve2599 = nen[1,2,3];
dotVectors mv2597[0] = <ve2598,ve2599>;
resetMv mv2600[1];
setMv mv2600[0] = nen[2];
resetMv mv2601[1];
setMv mv2601[0] = mv2597[0];
calculateMvCoeff mv2596[0] = DIVISION(mv2600,mv2601);
resetMv mv2602[1];
resetMv mv2603[1];
setVector ve2604 = nen[1,2,3];
setVector ve2605 = nen[1,2,3];
dotVectors mv2603[0] = <ve2604,ve2605>;
resetMv mv2606[1];
setMv mv2606[0] = nen[1];
resetMv mv2607[1];
setMv mv2607[0] = mv2603[0];
calculateMvCoeff mv2602[0] = DIVISION(mv2606,mv2607);
resetMv mv2608[1];
resetMv mv2609[1];
setVector ve2610 = nen[1,2,3];
setVector ve2611 = nen[1,2,3];
dotVectors mv2609[0] = <ve2610,ve2611>;
resetMv mv2612[1];
setMv mv2612[0] = nen[3];
resetMv mv2613[1];
setMv mv2613[0] = mv2609[0];
calculateMvCoeff mv2608[0] = DIVISION(mv2612,mv2613);
setVector ve2614 = len[18,-21,24,-31];
resetMv mv2616[4];
setMv mv2616[0] = mv2590[0];
setMv mv2616[3] = mv2608[0];
setMv mv2616[1] = mv2596[0];
setMv mv2616[2] = mv2602[0];
setVector ve2615 = mv2616[0,1,2,3];
dotVectors rc2[28] = <ve2614,ve2615>;

//rc2[29] = (((-((-(len[20])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[21])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[25])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + (-((-(len[31])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))
resetMv mv2617[1];
resetMv mv2618[1];
setVector ve2619 = nen[1,2,3];
setVector ve2620 = nen[1,2,3];
dotVectors mv2618[0] = <ve2619,ve2620>;
resetMv mv2621[1];
setMv mv2621[0] = nen[4];
resetMv mv2622[1];
setMv mv2622[0] = mv2618[0];
calculateMvCoeff mv2617[0] = DIVISION(mv2621,mv2622);
resetMv mv2623[1];
resetMv mv2624[1];
setVector ve2625 = nen[1,2,3];
setVector ve2626 = nen[1,2,3];
dotVectors mv2624[0] = <ve2625,ve2626>;
resetMv mv2627[1];
setMv mv2627[0] = nen[3];
resetMv mv2628[1];
setMv mv2628[0] = mv2624[0];
calculateMvCoeff mv2623[0] = DIVISION(mv2627,mv2628);
resetMv mv2629[1];
resetMv mv2630[1];
setVector ve2631 = nen[1,2,3];
setVector ve2632 = nen[1,2,3];
dotVectors mv2630[0] = <ve2631,ve2632>;
resetMv mv2633[1];
setMv mv2633[0] = nen[1];
resetMv mv2634[1];
setMv mv2634[0] = mv2630[0];
calculateMvCoeff mv2629[0] = DIVISION(mv2633,mv2634);
resetMv mv2635[1];
resetMv mv2636[1];
setVector ve2637 = nen[1,2,3];
setVector ve2638 = nen[1,2,3];
dotVectors mv2636[0] = <ve2637,ve2638>;
resetMv mv2639[1];
setMv mv2639[0] = nen[2];
resetMv mv2640[1];
setMv mv2640[0] = mv2636[0];
calculateMvCoeff mv2635[0] = DIVISION(mv2639,mv2640);
setVector ve2641 = len[20,-21,25,31];
resetMv mv2643[4];
setMv mv2643[1] = mv2623[0];
setMv mv2643[3] = mv2635[0];
setMv mv2643[2] = mv2629[0];
setMv mv2643[0] = mv2617[0];
setVector ve2642 = mv2643[0,1,2,3];
dotVectors rc2[29] = <ve2641,ve2642>;

//rc2[30] = (((-((-(len[23])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[24])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[25])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[31])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2644[1];
resetMv mv2645[1];
setVector ve2646 = nen[1,2,3];
setVector ve2647 = nen[1,2,3];
dotVectors mv2645[0] = <ve2646,ve2647>;
resetMv mv2648[1];
setMv mv2648[0] = nen[4];
resetMv mv2649[1];
setMv mv2649[0] = mv2645[0];
calculateMvCoeff mv2644[0] = DIVISION(mv2648,mv2649);
resetMv mv2650[1];
resetMv mv2651[1];
setVector ve2652 = nen[1,2,3];
setVector ve2653 = nen[1,2,3];
dotVectors mv2651[0] = <ve2652,ve2653>;
resetMv mv2654[1];
setMv mv2654[0] = nen[3];
resetMv mv2655[1];
setMv mv2655[0] = mv2651[0];
calculateMvCoeff mv2650[0] = DIVISION(mv2654,mv2655);
resetMv mv2656[1];
resetMv mv2657[1];
setVector ve2658 = nen[1,2,3];
setVector ve2659 = nen[1,2,3];
dotVectors mv2657[0] = <ve2658,ve2659>;
resetMv mv2660[1];
setMv mv2660[0] = nen[2];
resetMv mv2661[1];
setMv mv2661[0] = mv2657[0];
calculateMvCoeff mv2656[0] = DIVISION(mv2660,mv2661);
resetMv mv2662[1];
resetMv mv2663[1];
setVector ve2664 = nen[1,2,3];
setVector ve2665 = nen[1,2,3];
dotVectors mv2663[0] = <ve2664,ve2665>;
resetMv mv2666[1];
setMv mv2666[0] = nen[1];
resetMv mv2667[1];
setMv mv2667[0] = mv2663[0];
calculateMvCoeff mv2662[0] = DIVISION(mv2666,mv2667);
setVector ve2668 = len[23,-24,25,-31];
resetMv mv2670[4];
setMv mv2670[0] = mv2644[0];
setMv mv2670[2] = mv2656[0];
setMv mv2670[3] = mv2662[0];
setMv mv2670[1] = mv2650[0];
setVector ve2669 = mv2670[0,1,2,3];
dotVectors rc2[30] = <ve2668,ve2669>;

//rc2[31] = (((-((-(len[27])) * (nen[4] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + ((-(len[28])) * (nen[3] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))) + (-((-(len[29])) * (nen[2] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3])))))) + ((-(len[30])) * (nen[1] / (((nen[1] * nen[1]) + (nen[2] * nen[2])) + (nen[3] * nen[3]))))
resetMv mv2671[1];
resetMv mv2672[1];
setVector ve2673 = nen[1,2,3];
setVector ve2674 = nen[1,2,3];
dotVectors mv2672[0] = <ve2673,ve2674>;
resetMv mv2675[1];
setMv mv2675[0] = nen[4];
resetMv mv2676[1];
setMv mv2676[0] = mv2672[0];
calculateMvCoeff mv2671[0] = DIVISION(mv2675,mv2676);
resetMv mv2677[1];
resetMv mv2678[1];
setVector ve2679 = nen[1,2,3];
setVector ve2680 = nen[1,2,3];
dotVectors mv2678[0] = <ve2679,ve2680>;
resetMv mv2681[1];
setMv mv2681[0] = nen[3];
resetMv mv2682[1];
setMv mv2682[0] = mv2678[0];
calculateMvCoeff mv2677[0] = DIVISION(mv2681,mv2682);
resetMv mv2683[1];
resetMv mv2684[1];
setVector ve2685 = nen[1,2,3];
setVector ve2686 = nen[1,2,3];
dotVectors mv2684[0] = <ve2685,ve2686>;
resetMv mv2687[1];
setMv mv2687[0] = nen[2];
resetMv mv2688[1];
setMv mv2688[0] = mv2684[0];
calculateMvCoeff mv2683[0] = DIVISION(mv2687,mv2688);
resetMv mv2689[1];
resetMv mv2690[1];
setVector ve2691 = nen[1,2,3];
setVector ve2692 = nen[1,2,3];
dotVectors mv2690[0] = <ve2691,ve2692>;
resetMv mv2693[1];
setMv mv2693[0] = nen[1];
resetMv mv2694[1];
setMv mv2694[0] = mv2690[0];
calculateMvCoeff mv2689[0] = DIVISION(mv2693,mv2694);
setVector ve2695 = len[27,-28,29,-30];
resetMv mv2697[4];
setMv mv2697[0] = mv2671[0];
setMv mv2697[2] = mv2683[0];
setMv mv2697[3] = mv2689[0];
setMv mv2697[1] = mv2677[0];
setVector ve2696 = mv2697[0,1,2,3];
dotVectors rc2[31] = <ve2695,ve2696>;

//rc2N[1] = ((((((((((((((((-(rc2[0])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[2])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[3])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[5])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[6])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[7])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[9])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[10])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[12])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[14])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[16])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[18])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[20])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[23])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[27])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv rc2N[32];
resetMv mv2698[1];
resetMv mv2699[1];
setVector ve2700 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2701 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2699[0] = <ve2700,ve2701>;
resetMv mv2702[1];
setMv mv2702[0] = rc2[-9];
resetMv mv2703[1];
setMv mv2703[0] = mv2699[0];
calculateMvCoeff mv2698[0] = DIVISION(mv2702,mv2703);
resetMv mv2704[1];
resetMv mv2705[1];
setVector ve2706 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2707 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2705[0] = <ve2706,ve2707>;
resetMv mv2708[1];
setMv mv2708[0] = rc2[-5];
resetMv mv2709[1];
setMv mv2709[0] = mv2705[0];
calculateMvCoeff mv2704[0] = DIVISION(mv2708,mv2709);
resetMv mv2710[1];
resetMv mv2711[1];
setVector ve2712 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2713 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2711[0] = <ve2712,ve2713>;
resetMv mv2714[1];
setMv mv2714[0] = rc2[18];
resetMv mv2715[1];
setMv mv2715[0] = mv2711[0];
calculateMvCoeff mv2710[0] = DIVISION(mv2714,mv2715);
resetMv mv2716[1];
resetMv mv2717[1];
setVector ve2718 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2719 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2717[0] = <ve2718,ve2719>;
resetMv mv2720[1];
setMv mv2720[0] = rc2[20];
resetMv mv2721[1];
setMv mv2721[0] = mv2717[0];
calculateMvCoeff mv2716[0] = DIVISION(mv2720,mv2721);
resetMv mv2722[1];
resetMv mv2723[1];
setVector ve2724 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2725 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2723[0] = <ve2724,ve2725>;
resetMv mv2726[1];
setMv mv2726[0] = rc2[21];
resetMv mv2727[1];
setMv mv2727[0] = mv2723[0];
calculateMvCoeff mv2722[0] = DIVISION(mv2726,mv2727);
resetMv mv2728[1];
resetMv mv2729[1];
setVector ve2730 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2731 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2729[0] = <ve2730,ve2731>;
resetMv mv2732[1];
setMv mv2732[0] = rc2[-12];
resetMv mv2733[1];
setMv mv2733[0] = mv2729[0];
calculateMvCoeff mv2728[0] = DIVISION(mv2732,mv2733);
resetMv mv2734[1];
resetMv mv2735[1];
setVector ve2736 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2737 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2735[0] = <ve2736,ve2737>;
resetMv mv2738[1];
setMv mv2738[0] = rc2[-14];
resetMv mv2739[1];
setMv mv2739[0] = mv2735[0];
calculateMvCoeff mv2734[0] = DIVISION(mv2738,mv2739);
resetMv mv2740[1];
resetMv mv2741[1];
setVector ve2742 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2743 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2741[0] = <ve2742,ve2743>;
resetMv mv2744[1];
setMv mv2744[0] = rc2[-15];
resetMv mv2745[1];
setMv mv2745[0] = mv2741[0];
calculateMvCoeff mv2740[0] = DIVISION(mv2744,mv2745);
resetMv mv2746[1];
resetMv mv2747[1];
setVector ve2748 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2749 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2747[0] = <ve2748,ve2749>;
resetMv mv2750[1];
setMv mv2750[0] = rc2[27];
resetMv mv2751[1];
setMv mv2751[0] = mv2747[0];
calculateMvCoeff mv2746[0] = DIVISION(mv2750,mv2751);
resetMv mv2752[1];
resetMv mv2753[1];
setVector ve2754 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2755 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2753[0] = <ve2754,ve2755>;
resetMv mv2756[1];
setMv mv2756[0] = rc2[28];
resetMv mv2757[1];
setMv mv2757[0] = mv2753[0];
calculateMvCoeff mv2752[0] = DIVISION(mv2756,mv2757);
resetMv mv2758[1];
resetMv mv2759[1];
setVector ve2760 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2761 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2759[0] = <ve2760,ve2761>;
resetMv mv2762[1];
setMv mv2762[0] = rc2[29];
resetMv mv2763[1];
setMv mv2763[0] = mv2759[0];
calculateMvCoeff mv2758[0] = DIVISION(mv2762,mv2763);
resetMv mv2764[1];
resetMv mv2765[1];
setVector ve2766 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2767 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2765[0] = <ve2766,ve2767>;
resetMv mv2768[1];
setMv mv2768[0] = rc2[23];
resetMv mv2769[1];
setMv mv2769[0] = mv2765[0];
calculateMvCoeff mv2764[0] = DIVISION(mv2768,mv2769);
resetMv mv2770[1];
resetMv mv2771[1];
setVector ve2772 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2773 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2771[0] = <ve2772,ve2773>;
resetMv mv2774[1];
setMv mv2774[0] = rc2[24];
resetMv mv2775[1];
setMv mv2775[0] = mv2771[0];
calculateMvCoeff mv2770[0] = DIVISION(mv2774,mv2775);
resetMv mv2776[1];
resetMv mv2777[1];
setVector ve2778 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2779 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2777[0] = <ve2778,ve2779>;
resetMv mv2780[1];
setMv mv2780[0] = rc2[25];
resetMv mv2781[1];
setMv mv2781[0] = mv2777[0];
calculateMvCoeff mv2776[0] = DIVISION(mv2780,mv2781);
resetMv mv2782[1];
resetMv mv2783[1];
setVector ve2784 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2785 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2783[0] = <ve2784,ve2785>;
resetMv mv2786[1];
setMv mv2786[0] = rc2[-31];
resetMv mv2787[1];
setMv mv2787[0] = mv2783[0];
calculateMvCoeff mv2782[0] = DIVISION(mv2786,mv2787);
resetMv mv2788[1];
resetMv mv2789[1];
setVector ve2790 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2791 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2789[0] = <ve2790,ve2791>;
resetMv mv2792[1];
setMv mv2792[0] = rc2[30];
resetMv mv2793[1];
setMv mv2793[0] = mv2789[0];
calculateMvCoeff mv2788[0] = DIVISION(mv2792,mv2793);
setVector ve2794 = rc2[-0,-1,2,3,-5,-6,-7,9,10,-12,-14,16,-18,-20,23,-27];
resetMv mv2796[16];
setMv mv2796[13] = mv2776[0];
setMv mv2796[15] = mv2788[0];
setMv mv2796[10] = mv2758[0];
setMv mv2796[8] = mv2746[0];
setMv mv2796[14] = mv2782[0];
setMv mv2796[3] = mv2716[0];
setMv mv2796[12] = mv2770[0];
setMv mv2796[5] = mv2728[0];
setMv mv2796[1] = mv2704[0];
setMv mv2796[0] = mv2698[0];
setMv mv2796[2] = mv2710[0];
setMv mv2796[4] = mv2722[0];
setMv mv2796[6] = mv2734[0];
setMv mv2796[9] = mv2752[0];
setMv mv2796[11] = mv2764[0];
setMv mv2796[7] = mv2740[0];
setVector ve2795 = mv2796[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
dotVectors rc2N[1] = <ve2794,ve2795>;

//rc2N[2] = ((((((((((((((((-(rc2[0])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[2])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[3])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[5])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[6])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[7])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[9])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[10])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[12])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[14])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[16])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[18])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[20])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[23])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[27])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))
resetMv mv2797[1];
resetMv mv2798[1];
setVector ve2799 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2800 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2798[0] = <ve2799,ve2800>;
resetMv mv2801[1];
setMv mv2801[0] = rc2[-12];
resetMv mv2802[1];
setMv mv2802[0] = mv2798[0];
calculateMvCoeff mv2797[0] = DIVISION(mv2801,mv2802);
resetMv mv2803[1];
resetMv mv2804[1];
setVector ve2805 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2806 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2804[0] = <ve2805,ve2806>;
resetMv mv2807[1];
setMv mv2807[0] = rc2[18];
resetMv mv2808[1];
setMv mv2808[0] = mv2804[0];
calculateMvCoeff mv2803[0] = DIVISION(mv2807,mv2808);
resetMv mv2809[1];
resetMv mv2810[1];
setVector ve2811 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2812 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2810[0] = <ve2811,ve2812>;
resetMv mv2813[1];
setMv mv2813[0] = rc2[-5];
resetMv mv2814[1];
setMv mv2814[0] = mv2810[0];
calculateMvCoeff mv2809[0] = DIVISION(mv2813,mv2814);
resetMv mv2815[1];
resetMv mv2816[1];
setVector ve2817 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2818 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2816[0] = <ve2817,ve2818>;
resetMv mv2819[1];
setMv mv2819[0] = rc2[23];
resetMv mv2820[1];
setMv mv2820[0] = mv2816[0];
calculateMvCoeff mv2815[0] = DIVISION(mv2819,mv2820);
resetMv mv2821[1];
resetMv mv2822[1];
setVector ve2823 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2824 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2822[0] = <ve2823,ve2824>;
resetMv mv2825[1];
setMv mv2825[0] = rc2[24];
resetMv mv2826[1];
setMv mv2826[0] = mv2822[0];
calculateMvCoeff mv2821[0] = DIVISION(mv2825,mv2826);
resetMv mv2827[1];
resetMv mv2828[1];
setVector ve2829 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2830 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2828[0] = <ve2829,ve2830>;
resetMv mv2831[1];
setMv mv2831[0] = rc2[-9];
resetMv mv2832[1];
setMv mv2832[0] = mv2828[0];
calculateMvCoeff mv2827[0] = DIVISION(mv2831,mv2832);
resetMv mv2833[1];
resetMv mv2834[1];
setVector ve2835 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2836 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2834[0] = <ve2835,ve2836>;
resetMv mv2837[1];
setMv mv2837[0] = rc2[27];
resetMv mv2838[1];
setMv mv2838[0] = mv2834[0];
calculateMvCoeff mv2833[0] = DIVISION(mv2837,mv2838);
resetMv mv2839[1];
resetMv mv2840[1];
setVector ve2841 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2842 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2840[0] = <ve2841,ve2842>;
resetMv mv2843[1];
setMv mv2843[0] = rc2[28];
resetMv mv2844[1];
setMv mv2844[0] = mv2840[0];
calculateMvCoeff mv2839[0] = DIVISION(mv2843,mv2844);
resetMv mv2845[1];
resetMv mv2846[1];
setVector ve2847 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2848 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2846[0] = <ve2847,ve2848>;
resetMv mv2849[1];
setMv mv2849[0] = rc2[-14];
resetMv mv2850[1];
setMv mv2850[0] = mv2846[0];
calculateMvCoeff mv2845[0] = DIVISION(mv2849,mv2850);
resetMv mv2851[1];
resetMv mv2852[1];
setVector ve2853 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2854 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2852[0] = <ve2853,ve2854>;
resetMv mv2855[1];
setMv mv2855[0] = rc2[-15];
resetMv mv2856[1];
setMv mv2856[0] = mv2852[0];
calculateMvCoeff mv2851[0] = DIVISION(mv2855,mv2856);
resetMv mv2857[1];
resetMv mv2858[1];
setVector ve2859 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2860 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2858[0] = <ve2859,ve2860>;
resetMv mv2861[1];
setMv mv2861[0] = rc2[30];
resetMv mv2862[1];
setMv mv2862[0] = mv2858[0];
calculateMvCoeff mv2857[0] = DIVISION(mv2861,mv2862);
resetMv mv2863[1];
resetMv mv2864[1];
setVector ve2865 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2866 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2864[0] = <ve2865,ve2866>;
resetMv mv2867[1];
setMv mv2867[0] = rc2[20];
resetMv mv2868[1];
setMv mv2868[0] = mv2864[0];
calculateMvCoeff mv2863[0] = DIVISION(mv2867,mv2868);
resetMv mv2869[1];
resetMv mv2870[1];
setVector ve2871 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2872 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2870[0] = <ve2871,ve2872>;
resetMv mv2873[1];
setMv mv2873[0] = rc2[21];
resetMv mv2874[1];
setMv mv2874[0] = mv2870[0];
calculateMvCoeff mv2869[0] = DIVISION(mv2873,mv2874);
resetMv mv2875[1];
resetMv mv2876[1];
setVector ve2877 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2878 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2876[0] = <ve2877,ve2878>;
resetMv mv2879[1];
setMv mv2879[0] = rc2[-31];
resetMv mv2880[1];
setMv mv2880[0] = mv2876[0];
calculateMvCoeff mv2875[0] = DIVISION(mv2879,mv2880);
resetMv mv2881[1];
resetMv mv2882[1];
setVector ve2883 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2884 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2882[0] = <ve2883,ve2884>;
resetMv mv2885[1];
setMv mv2885[0] = rc2[25];
resetMv mv2886[1];
setMv mv2886[0] = mv2882[0];
calculateMvCoeff mv2881[0] = DIVISION(mv2885,mv2886);
resetMv mv2887[1];
resetMv mv2888[1];
setVector ve2889 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2890 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2888[0] = <ve2889,ve2890>;
resetMv mv2891[1];
setMv mv2891[0] = rc2[29];
resetMv mv2892[1];
setMv mv2892[0] = mv2888[0];
calculateMvCoeff mv2887[0] = DIVISION(mv2891,mv2892);
setVector ve2893 = rc2[-0,-1,-2,3,-5,6,-7,9,-10,12,-14,-16,18,-20,-23,27];
resetMv mv2895[16];
setMv mv2895[5] = mv2827[0];
setMv mv2895[8] = mv2845[0];
setMv mv2895[0] = mv2797[0];
setMv mv2895[3] = mv2815[0];
setMv mv2895[7] = mv2839[0];
setMv mv2895[10] = mv2857[0];
setMv mv2895[12] = mv2869[0];
setMv mv2895[14] = mv2881[0];
setMv mv2895[11] = mv2863[0];
setMv mv2895[1] = mv2803[0];
setMv mv2895[9] = mv2851[0];
setMv mv2895[15] = mv2887[0];
setMv mv2895[13] = mv2875[0];
setMv mv2895[4] = mv2821[0];
setMv mv2895[6] = mv2833[0];
setMv mv2895[2] = mv2809[0];
setVector ve2894 = mv2895[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
dotVectors rc2N[2] = <ve2893,ve2894>;

//rc2N[3] = ((((((((((((((((-(rc2[0])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[2])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[3])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[5])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[6])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[7])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[9])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[10])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[12])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[14])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[16])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[18])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[20])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[23])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[27])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv mv2896[1];
resetMv mv2897[1];
setVector ve2898 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2899 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2897[0] = <ve2898,ve2899>;
resetMv mv2900[1];
setMv mv2900[0] = rc2[-14];
resetMv mv2901[1];
setMv mv2901[0] = mv2897[0];
calculateMvCoeff mv2896[0] = DIVISION(mv2900,mv2901);
resetMv mv2902[1];
resetMv mv2903[1];
setVector ve2904 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2905 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2903[0] = <ve2904,ve2905>;
resetMv mv2906[1];
setMv mv2906[0] = rc2[20];
resetMv mv2907[1];
setMv mv2907[0] = mv2903[0];
calculateMvCoeff mv2902[0] = DIVISION(mv2906,mv2907);
resetMv mv2908[1];
resetMv mv2909[1];
setVector ve2910 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2911 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2909[0] = <ve2910,ve2911>;
resetMv mv2912[1];
setMv mv2912[0] = rc2[23];
resetMv mv2913[1];
setMv mv2913[0] = mv2909[0];
calculateMvCoeff mv2908[0] = DIVISION(mv2912,mv2913);
resetMv mv2914[1];
resetMv mv2915[1];
setVector ve2916 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2917 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2915[0] = <ve2916,ve2917>;
resetMv mv2918[1];
setMv mv2918[0] = rc2[-5];
resetMv mv2919[1];
setMv mv2919[0] = mv2915[0];
calculateMvCoeff mv2914[0] = DIVISION(mv2918,mv2919);
resetMv mv2920[1];
resetMv mv2921[1];
setVector ve2922 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2923 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2921[0] = <ve2922,ve2923>;
resetMv mv2924[1];
setMv mv2924[0] = rc2[25];
resetMv mv2925[1];
setMv mv2925[0] = mv2921[0];
calculateMvCoeff mv2920[0] = DIVISION(mv2924,mv2925);
resetMv mv2926[1];
resetMv mv2927[1];
setVector ve2928 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2929 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2927[0] = <ve2928,ve2929>;
resetMv mv2930[1];
setMv mv2930[0] = rc2[27];
resetMv mv2931[1];
setMv mv2931[0] = mv2927[0];
calculateMvCoeff mv2926[0] = DIVISION(mv2930,mv2931);
resetMv mv2932[1];
resetMv mv2933[1];
setVector ve2934 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2935 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2933[0] = <ve2934,ve2935>;
resetMv mv2936[1];
setMv mv2936[0] = rc2[-9];
resetMv mv2937[1];
setMv mv2937[0] = mv2933[0];
calculateMvCoeff mv2932[0] = DIVISION(mv2936,mv2937);
resetMv mv2938[1];
resetMv mv2939[1];
setVector ve2940 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2941 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2939[0] = <ve2940,ve2941>;
resetMv mv2942[1];
setMv mv2942[0] = rc2[29];
resetMv mv2943[1];
setMv mv2943[0] = mv2939[0];
calculateMvCoeff mv2938[0] = DIVISION(mv2942,mv2943);
resetMv mv2944[1];
resetMv mv2945[1];
setVector ve2946 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2947 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2945[0] = <ve2946,ve2947>;
resetMv mv2948[1];
setMv mv2948[0] = rc2[-12];
resetMv mv2949[1];
setMv mv2949[0] = mv2945[0];
calculateMvCoeff mv2944[0] = DIVISION(mv2948,mv2949);
resetMv mv2950[1];
resetMv mv2951[1];
setVector ve2952 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2953 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2951[0] = <ve2952,ve2953>;
resetMv mv2954[1];
setMv mv2954[0] = rc2[30];
resetMv mv2955[1];
setMv mv2955[0] = mv2951[0];
calculateMvCoeff mv2950[0] = DIVISION(mv2954,mv2955);
resetMv mv2956[1];
resetMv mv2957[1];
setVector ve2958 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2959 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2957[0] = <ve2958,ve2959>;
resetMv mv2960[1];
setMv mv2960[0] = rc2[-15];
resetMv mv2961[1];
setMv mv2961[0] = mv2957[0];
calculateMvCoeff mv2956[0] = DIVISION(mv2960,mv2961);
resetMv mv2962[1];
resetMv mv2963[1];
setVector ve2964 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2965 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2963[0] = <ve2964,ve2965>;
resetMv mv2966[1];
setMv mv2966[0] = rc2[18];
resetMv mv2967[1];
setMv mv2967[0] = mv2963[0];
calculateMvCoeff mv2962[0] = DIVISION(mv2966,mv2967);
resetMv mv2968[1];
resetMv mv2969[1];
setVector ve2970 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2971 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2969[0] = <ve2970,ve2971>;
resetMv mv2972[1];
setMv mv2972[0] = rc2[-31];
resetMv mv2973[1];
setMv mv2973[0] = mv2969[0];
calculateMvCoeff mv2968[0] = DIVISION(mv2972,mv2973);
resetMv mv2974[1];
resetMv mv2975[1];
setVector ve2976 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2977 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2975[0] = <ve2976,ve2977>;
resetMv mv2978[1];
setMv mv2978[0] = rc2[21];
resetMv mv2979[1];
setMv mv2979[0] = mv2975[0];
calculateMvCoeff mv2974[0] = DIVISION(mv2978,mv2979);
resetMv mv2980[1];
resetMv mv2981[1];
setVector ve2982 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2983 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2981[0] = <ve2982,ve2983>;
resetMv mv2984[1];
setMv mv2984[0] = rc2[24];
resetMv mv2985[1];
setMv mv2985[0] = mv2981[0];
calculateMvCoeff mv2980[0] = DIVISION(mv2984,mv2985);
resetMv mv2986[1];
resetMv mv2987[1];
setVector ve2988 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2989 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2987[0] = <ve2988,ve2989>;
resetMv mv2990[1];
setMv mv2990[0] = rc2[28];
resetMv mv2991[1];
setMv mv2991[0] = mv2987[0];
calculateMvCoeff mv2986[0] = DIVISION(mv2990,mv2991);
setVector ve2992 = rc2[-0,-1,-2,-3,-5,6,7,9,10,12,14,16,18,20,23,-27];
resetMv mv2994[16];
setMv mv2994[4] = mv2920[0];
setMv mv2994[6] = mv2932[0];
setMv mv2994[9] = mv2950[0];
setMv mv2994[11] = mv2962[0];
setMv mv2994[0] = mv2896[0];
setMv mv2994[15] = mv2986[0];
setMv mv2994[13] = mv2974[0];
setMv mv2994[14] = mv2980[0];
setMv mv2994[2] = mv2908[0];
setMv mv2994[1] = mv2902[0];
setMv mv2994[12] = mv2968[0];
setMv mv2994[5] = mv2926[0];
setMv mv2994[7] = mv2938[0];
setMv mv2994[10] = mv2956[0];
setMv mv2994[8] = mv2944[0];
setMv mv2994[3] = mv2914[0];
setVector ve2993 = mv2994[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
dotVectors rc2N[3] = <ve2992,ve2993>;

//rc2N[4] = ((((((((((((((((((((((((-(rc2[0])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + ((-(rc2[1])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[2])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[3])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[4])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + (-((-(rc2[6])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[7])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[8])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[10])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[11])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[13])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[15])) * ((-(rc2[15])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[16])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[17])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[19])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[21])) * (rc2[21] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[22])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[24])) * (rc2[24] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[25])) * (rc2[25] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[26])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[28])) * (rc2[28] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[29])) * (rc2[29] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[30])) * (rc2[30] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))) + ((-(rc2[31])) * ((-(rc2[31])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv mv2995[1];
resetMv mv2996[1];
setVector ve2997 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve2998 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv2996[0] = <ve2997,ve2998>;
resetMv mv2999[1];
setMv mv2999[0] = rc2[-15];
resetMv mv3000[1];
setMv mv3000[0] = mv2996[0];
calculateMvCoeff mv2995[0] = DIVISION(mv2999,mv3000);
resetMv mv3001[1];
resetMv mv3002[1];
setVector ve3003 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3004 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3002[0] = <ve3003,ve3004>;
resetMv mv3005[1];
setMv mv3005[0] = rc2[21];
resetMv mv3006[1];
setMv mv3006[0] = mv3002[0];
calculateMvCoeff mv3001[0] = DIVISION(mv3005,mv3006);
resetMv mv3007[1];
resetMv mv3008[1];
setVector ve3009 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3010 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3008[0] = <ve3009,ve3010>;
resetMv mv3011[1];
setMv mv3011[0] = rc2[24];
resetMv mv3012[1];
setMv mv3012[0] = mv3008[0];
calculateMvCoeff mv3007[0] = DIVISION(mv3011,mv3012);
resetMv mv3013[1];
resetMv mv3014[1];
setVector ve3015 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3016 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3014[0] = <ve3015,ve3016>;
resetMv mv3017[1];
setMv mv3017[0] = rc2[25];
resetMv mv3018[1];
setMv mv3018[0] = mv3014[0];
calculateMvCoeff mv3013[0] = DIVISION(mv3017,mv3018);
resetMv mv3019[1];
resetMv mv3020[1];
setVector ve3021 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3022 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3020[0] = <ve3021,ve3022>;
resetMv mv3023[1];
setMv mv3023[0] = rc2[-5];
resetMv mv3024[1];
setMv mv3024[0] = mv3020[0];
calculateMvCoeff mv3019[0] = DIVISION(mv3023,mv3024);
resetMv mv3025[1];
resetMv mv3026[1];
setVector ve3027 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3028 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3026[0] = <ve3027,ve3028>;
resetMv mv3029[1];
setMv mv3029[0] = rc2[28];
resetMv mv3030[1];
setMv mv3030[0] = mv3026[0];
calculateMvCoeff mv3025[0] = DIVISION(mv3029,mv3030);
resetMv mv3031[1];
resetMv mv3032[1];
setVector ve3033 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3034 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3032[0] = <ve3033,ve3034>;
resetMv mv3035[1];
setMv mv3035[0] = rc2[29];
resetMv mv3036[1];
setMv mv3036[0] = mv3032[0];
calculateMvCoeff mv3031[0] = DIVISION(mv3035,mv3036);
resetMv mv3037[1];
resetMv mv3038[1];
setVector ve3039 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3040 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3038[0] = <ve3039,ve3040>;
resetMv mv3041[1];
setMv mv3041[0] = rc2[-9];
resetMv mv3042[1];
setMv mv3042[0] = mv3038[0];
calculateMvCoeff mv3037[0] = DIVISION(mv3041,mv3042);
resetMv mv3043[1];
resetMv mv3044[1];
setVector ve3045 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3046 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3044[0] = <ve3045,ve3046>;
resetMv mv3047[1];
setMv mv3047[0] = rc2[30];
resetMv mv3048[1];
setMv mv3048[0] = mv3044[0];
calculateMvCoeff mv3043[0] = DIVISION(mv3047,mv3048);
resetMv mv3049[1];
resetMv mv3050[1];
setVector ve3051 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3052 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3050[0] = <ve3051,ve3052>;
resetMv mv3053[1];
setMv mv3053[0] = rc2[-12];
resetMv mv3054[1];
setMv mv3054[0] = mv3050[0];
calculateMvCoeff mv3049[0] = DIVISION(mv3053,mv3054);
resetMv mv3055[1];
resetMv mv3056[1];
setVector ve3057 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3058 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3056[0] = <ve3057,ve3058>;
resetMv mv3059[1];
setMv mv3059[0] = rc2[-14];
resetMv mv3060[1];
setMv mv3060[0] = mv3056[0];
calculateMvCoeff mv3055[0] = DIVISION(mv3059,mv3060);
resetMv mv3061[1];
resetMv mv3062[1];
setVector ve3063 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3064 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3062[0] = <ve3063,ve3064>;
resetMv mv3065[1];
setMv mv3065[0] = rc2[-15];
resetMv mv3066[1];
setMv mv3066[0] = mv3062[0];
calculateMvCoeff mv3061[0] = DIVISION(mv3065,mv3066);
resetMv mv3067[1];
resetMv mv3068[1];
setVector ve3069 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3070 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3068[0] = <ve3069,ve3070>;
resetMv mv3071[1];
setMv mv3071[0] = rc2[-31];
resetMv mv3072[1];
setMv mv3072[0] = mv3068[0];
calculateMvCoeff mv3067[0] = DIVISION(mv3071,mv3072);
resetMv mv3073[1];
resetMv mv3074[1];
setVector ve3075 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3076 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3074[0] = <ve3075,ve3076>;
resetMv mv3077[1];
setMv mv3077[0] = rc2[18];
resetMv mv3078[1];
setMv mv3078[0] = mv3074[0];
calculateMvCoeff mv3073[0] = DIVISION(mv3077,mv3078);
resetMv mv3079[1];
resetMv mv3080[1];
setVector ve3081 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3082 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3080[0] = <ve3081,ve3082>;
resetMv mv3083[1];
setMv mv3083[0] = rc2[20];
resetMv mv3084[1];
setMv mv3084[0] = mv3080[0];
calculateMvCoeff mv3079[0] = DIVISION(mv3083,mv3084);
resetMv mv3085[1];
resetMv mv3086[1];
setVector ve3087 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3088 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3086[0] = <ve3087,ve3088>;
resetMv mv3089[1];
setMv mv3089[0] = rc2[21];
resetMv mv3090[1];
setMv mv3090[0] = mv3086[0];
calculateMvCoeff mv3085[0] = DIVISION(mv3089,mv3090);
resetMv mv3091[1];
resetMv mv3092[1];
setVector ve3093 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3094 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3092[0] = <ve3093,ve3094>;
resetMv mv3095[1];
setMv mv3095[0] = rc2[23];
resetMv mv3096[1];
setMv mv3096[0] = mv3092[0];
calculateMvCoeff mv3091[0] = DIVISION(mv3095,mv3096);
resetMv mv3097[1];
resetMv mv3098[1];
setVector ve3099 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3100 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3098[0] = <ve3099,ve3100>;
resetMv mv3101[1];
setMv mv3101[0] = rc2[24];
resetMv mv3102[1];
setMv mv3102[0] = mv3098[0];
calculateMvCoeff mv3097[0] = DIVISION(mv3101,mv3102);
resetMv mv3103[1];
resetMv mv3104[1];
setVector ve3105 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3106 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3104[0] = <ve3105,ve3106>;
resetMv mv3107[1];
setMv mv3107[0] = rc2[25];
resetMv mv3108[1];
setMv mv3108[0] = mv3104[0];
calculateMvCoeff mv3103[0] = DIVISION(mv3107,mv3108);
resetMv mv3109[1];
resetMv mv3110[1];
setVector ve3111 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3112 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3110[0] = <ve3111,ve3112>;
resetMv mv3113[1];
setMv mv3113[0] = rc2[27];
resetMv mv3114[1];
setMv mv3114[0] = mv3110[0];
calculateMvCoeff mv3109[0] = DIVISION(mv3113,mv3114);
resetMv mv3115[1];
resetMv mv3116[1];
setVector ve3117 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3118 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3116[0] = <ve3117,ve3118>;
resetMv mv3119[1];
setMv mv3119[0] = rc2[28];
resetMv mv3120[1];
setMv mv3120[0] = mv3116[0];
calculateMvCoeff mv3115[0] = DIVISION(mv3119,mv3120);
resetMv mv3121[1];
resetMv mv3122[1];
setVector ve3123 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3124 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3122[0] = <ve3123,ve3124>;
resetMv mv3125[1];
setMv mv3125[0] = rc2[29];
resetMv mv3126[1];
setMv mv3126[0] = mv3122[0];
calculateMvCoeff mv3121[0] = DIVISION(mv3125,mv3126);
resetMv mv3127[1];
resetMv mv3128[1];
setVector ve3129 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3130 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3128[0] = <ve3129,ve3130>;
resetMv mv3131[1];
setMv mv3131[0] = rc2[30];
resetMv mv3132[1];
setMv mv3132[0] = mv3128[0];
calculateMvCoeff mv3127[0] = DIVISION(mv3131,mv3132);
resetMv mv3133[1];
resetMv mv3134[1];
setVector ve3135 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3136 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3134[0] = <ve3135,ve3136>;
resetMv mv3137[1];
setMv mv3137[0] = rc2[-31];
resetMv mv3138[1];
setMv mv3138[0] = mv3134[0];
calculateMvCoeff mv3133[0] = DIVISION(mv3137,mv3138);
setVector ve3139 = rc2[-0,-1,-2,-3,-4,6,7,8,10,11,13,15,16,17,19,21,22,24,25,-26,-28,-29,-30,-31];
resetMv mv3141[24];
setMv mv3141[3] = mv3013[0];
setMv mv3141[6] = mv3031[0];
setMv mv3141[21] = mv3121[0];
setMv mv3141[4] = mv3019[0];
setMv mv3141[8] = mv3043[0];
setMv mv3141[23] = mv3133[0];
setMv mv3141[16] = mv3091[0];
setMv mv3141[2] = mv3007[0];
setMv mv3141[10] = mv3055[0];
setMv mv3141[9] = mv3049[0];
setMv mv3141[18] = mv3103[0];
setMv mv3141[1] = mv3001[0];
setMv mv3141[22] = mv3127[0];
setMv mv3141[0] = mv2995[0];
setMv mv3141[5] = mv3025[0];
setMv mv3141[20] = mv3115[0];
setMv mv3141[7] = mv3037[0];
setMv mv3141[14] = mv3079[0];
setMv mv3141[19] = mv3109[0];
setMv mv3141[15] = mv3085[0];
setMv mv3141[12] = mv3067[0];
setMv mv3141[13] = mv3073[0];
setMv mv3141[11] = mv3061[0];
setMv mv3141[17] = mv3097[0];
setVector ve3140 = mv3141[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23];
dotVectors rc2N[4] = <ve3139,ve3140>;

//rc2N[5] = ((((((((-(rc2[5])) * ((-(rc2[5])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))) + (-((-(rc2[9])) * ((-(rc2[9])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[12])) * ((-(rc2[12])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[14])) * ((-(rc2[14])) / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[18])) * (rc2[18] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[20])) * (rc2[20] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + (-((-(rc2[23])) * (rc2[23] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27]))))))) + ((-(rc2[27])) * (rc2[27] / (((((((((-(rc2[5])) * (-(rc2[5]))) + ((-(rc2[9])) * (-(rc2[9])))) + ((-(rc2[12])) * (-(rc2[12])))) + ((-(rc2[14])) * (-(rc2[14])))) + (-((-(rc2[18])) * rc2[18]))) + (-((-(rc2[20])) * rc2[20]))) + (-((-(rc2[23])) * rc2[23]))) + (-((-(rc2[27])) * rc2[27])))))
resetMv mv3142[1];
resetMv mv3143[1];
setVector ve3144 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3145 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3143[0] = <ve3144,ve3145>;
resetMv mv3146[1];
setMv mv3146[0] = rc2[-5];
resetMv mv3147[1];
setMv mv3147[0] = mv3143[0];
calculateMvCoeff mv3142[0] = DIVISION(mv3146,mv3147);
resetMv mv3148[1];
resetMv mv3149[1];
setVector ve3150 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3151 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3149[0] = <ve3150,ve3151>;
resetMv mv3152[1];
setMv mv3152[0] = rc2[-9];
resetMv mv3153[1];
setMv mv3153[0] = mv3149[0];
calculateMvCoeff mv3148[0] = DIVISION(mv3152,mv3153);
resetMv mv3154[1];
resetMv mv3155[1];
setVector ve3156 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3157 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3155[0] = <ve3156,ve3157>;
resetMv mv3158[1];
setMv mv3158[0] = rc2[-12];
resetMv mv3159[1];
setMv mv3159[0] = mv3155[0];
calculateMvCoeff mv3154[0] = DIVISION(mv3158,mv3159);
resetMv mv3160[1];
resetMv mv3161[1];
setVector ve3162 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3163 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3161[0] = <ve3162,ve3163>;
resetMv mv3164[1];
setMv mv3164[0] = rc2[-14];
resetMv mv3165[1];
setMv mv3165[0] = mv3161[0];
calculateMvCoeff mv3160[0] = DIVISION(mv3164,mv3165);
resetMv mv3166[1];
resetMv mv3167[1];
setVector ve3168 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3169 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3167[0] = <ve3168,ve3169>;
resetMv mv3170[1];
setMv mv3170[0] = rc2[18];
resetMv mv3171[1];
setMv mv3171[0] = mv3167[0];
calculateMvCoeff mv3166[0] = DIVISION(mv3170,mv3171);
resetMv mv3172[1];
resetMv mv3173[1];
setVector ve3174 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3175 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3173[0] = <ve3174,ve3175>;
resetMv mv3176[1];
setMv mv3176[0] = rc2[20];
resetMv mv3177[1];
setMv mv3177[0] = mv3173[0];
calculateMvCoeff mv3172[0] = DIVISION(mv3176,mv3177);
resetMv mv3178[1];
resetMv mv3179[1];
setVector ve3180 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3181 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3179[0] = <ve3180,ve3181>;
resetMv mv3182[1];
setMv mv3182[0] = rc2[23];
resetMv mv3183[1];
setMv mv3183[0] = mv3179[0];
calculateMvCoeff mv3178[0] = DIVISION(mv3182,mv3183);
resetMv mv3184[1];
resetMv mv3185[1];
setVector ve3186 = rc2[-5,-9,-12,-14,18,20,23,27];
setVector ve3187 = rc2[-5,-9,-12,-14,18,20,23,27];
dotVectors mv3185[0] = <ve3186,ve3187>;
resetMv mv3188[1];
setMv mv3188[0] = rc2[27];
resetMv mv3189[1];
setMv mv3189[0] = mv3185[0];
calculateMvCoeff mv3184[0] = DIVISION(mv3188,mv3189);
setVector ve3190 = rc2[-5,9,12,14,18,20,23,-27];
resetMv mv3192[8];
setMv mv3192[6] = mv3178[0];
setMv mv3192[1] = mv3148[0];
setMv mv3192[7] = mv3184[0];
setMv mv3192[3] = mv3160[0];
setMv mv3192[0] = mv3142[0];
setMv mv3192[5] = mv3172[0];
setMv mv3192[2] = mv3154[0];
setMv mv3192[4] = mv3166[0];
setVector ve3191 = mv3192[0,1,2,3,4,5,6,7];
dotVectors rc2N[5] = <ve3190,ve3191>;

//temp3[0] = -2.0 * (((((rc1N[1] * sat1[1]) + (rc1N[2] * sat1[2])) + (rc1N[3] * sat1[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat1[4])))
resetMv temp3[32];
resetMv mv3193[1];
setVector ve3194 = rc1N[1,2,3,-4,-5];
resetMv mv3196[5];
setMv mv3196[0,1,2,4] = sat1[1,2,3,4];
assignMv mv3196[3] = [1.0];
setVector ve3195 = mv3196[0,1,2,3,4];
dotVectors mv3193[0] = <ve3194,ve3195>;
resetMv mv3198[1];
assignMv mv3198[0] = [-2.0];
setVector ve3197 = mv3198[0];
setVector ve3199 = mv3193[0];
dotVectors temp3[0] = <ve3197,ve3199>;

//temp4 = sqrt(temp3)
resetMv temp4[32];
calculateMv temp4 = SQRT(temp3);

//z11[0] = temp4[0] - inputsVector[0]
resetMv z11[32];
resetMv mv3201[2];
setMv mv3201[1] = inputsVector[-0];
setMv mv3201[0] = temp4[0];
setVector ve3200 = mv3201[0,1];
dotVectors z11[0] = <ve3200>;

//temp5[0] = -2.0 * (((((rc2N[1] * sat1[1]) + (rc2N[2] * sat1[2])) + (rc2N[3] * sat1[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat1[4])))
resetMv temp5[32];
resetMv mv3202[1];
setVector ve3203 = rc2N[1,2,3,-4,-5];
resetMv mv3205[5];
setMv mv3205[0,1,2,4] = sat1[1,2,3,4];
assignMv mv3205[3] = [1.0];
setVector ve3204 = mv3205[0,1,2,3,4];
dotVectors mv3202[0] = <ve3203,ve3204>;
resetMv mv3207[1];
assignMv mv3207[0] = [-2.0];
setVector ve3206 = mv3207[0];
setVector ve3208 = mv3202[0];
dotVectors temp5[0] = <ve3206,ve3208>;

//temp6 = sqrt(temp5)
resetMv temp6[32];
calculateMv temp6 = SQRT(temp5);

//z12[0] = temp6[0] - inputsVector[0]
resetMv z12[32];
resetMv mv3210[2];
setMv mv3210[1] = inputsVector[-0];
setMv mv3210[0] = temp6[0];
setVector ve3209 = mv3210[0,1];
dotVectors z12[0] = <ve3209>;

//temp7[0] = -2.0 * (((((rc1N[1] * sat2[1]) + (rc1N[2] * sat2[2])) + (rc1N[3] * sat2[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat2[4])))
resetMv temp7[32];
resetMv mv3211[1];
setVector ve3212 = rc1N[1,2,3,-4,-5];
resetMv mv3214[5];
setMv mv3214[0,1,2,4] = sat2[1,2,3,4];
assignMv mv3214[3] = [1.0];
setVector ve3213 = mv3214[0,1,2,3,4];
dotVectors mv3211[0] = <ve3212,ve3213>;
resetMv mv3216[1];
assignMv mv3216[0] = [-2.0];
setVector ve3215 = mv3216[0];
setVector ve3217 = mv3211[0];
dotVectors temp7[0] = <ve3215,ve3217>;

//temp8 = sqrt(temp7)
resetMv temp8[32];
calculateMv temp8 = SQRT(temp7);

//z21[0] = temp8[0] - inputsVector[1]
resetMv z21[32];
resetMv mv3219[2];
setMv mv3219[1] = inputsVector[-1];
setMv mv3219[0] = temp8[0];
setVector ve3218 = mv3219[0,1];
dotVectors z21[0] = <ve3218>;

//temp9[0] = -2.0 * (((((rc2N[1] * sat2[1]) + (rc2N[2] * sat2[2])) + (rc2N[3] * sat2[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat2[4])))
resetMv temp9[32];
resetMv mv3220[1];
setVector ve3221 = rc2N[1,2,3,-4,-5];
resetMv mv3223[5];
setMv mv3223[0,1,2,4] = sat2[1,2,3,4];
assignMv mv3223[3] = [1.0];
setVector ve3222 = mv3223[0,1,2,3,4];
dotVectors mv3220[0] = <ve3221,ve3222>;
resetMv mv3225[1];
assignMv mv3225[0] = [-2.0];
setVector ve3224 = mv3225[0];
setVector ve3226 = mv3220[0];
dotVectors temp9[0] = <ve3224,ve3226>;

//temp10 = sqrt(temp9)
resetMv temp10[32];
calculateMv temp10 = SQRT(temp9);

//z22[0] = temp10[0] - inputsVector[1]
resetMv z22[32];
resetMv mv3228[2];
setMv mv3228[1] = inputsVector[-1];
setMv mv3228[0] = temp10[0];
setVector ve3227 = mv3228[0,1];
dotVectors z22[0] = <ve3227>;

//temp11[0] = -2.0 * (((((rc1N[1] * sat3[1]) + (rc1N[2] * sat3[2])) + (rc1N[3] * sat3[3])) + (-(rc1N[4]))) + (-(rc1N[5] * sat3[4])))
resetMv temp11[32];
resetMv mv3229[1];
setVector ve3230 = rc1N[1,2,3,-4,-5];
resetMv mv3232[5];
setMv mv3232[0,1,2,4] = sat3[1,2,3,4];
assignMv mv3232[3] = [1.0];
setVector ve3231 = mv3232[0,1,2,3,4];
dotVectors mv3229[0] = <ve3230,ve3231>;
resetMv mv3234[1];
assignMv mv3234[0] = [-2.0];
setVector ve3233 = mv3234[0];
setVector ve3235 = mv3229[0];
dotVectors temp11[0] = <ve3233,ve3235>;

//temp12 = sqrt(temp11)
resetMv temp12[32];
calculateMv temp12 = SQRT(temp11);

//z31[0] = temp12[0] - inputsVector[2]
resetMv z31[32];
resetMv mv3237[2];
setMv mv3237[0] = temp12[0];
setMv mv3237[1] = inputsVector[-2];
setVector ve3236 = mv3237[0,1];
dotVectors z31[0] = <ve3236>;

//temp13[0] = -2.0 * (((((rc2N[1] * sat3[1]) + (rc2N[2] * sat3[2])) + (rc2N[3] * sat3[3])) + (-(rc2N[4]))) + (-(rc2N[5] * sat3[4])))
resetMv temp13[32];
resetMv mv3238[1];
setVector ve3239 = rc2N[1,2,3,-4,-5];
resetMv mv3241[5];
setMv mv3241[0,1,2,4] = sat3[1,2,3,4];
assignMv mv3241[3] = [1.0];
setVector ve3240 = mv3241[0,1,2,3,4];
dotVectors mv3238[0] = <ve3239,ve3240>;
resetMv mv3243[1];
assignMv mv3243[0] = [-2.0];
setVector ve3242 = mv3243[0];
setVector ve3244 = mv3238[0];
dotVectors temp13[0] = <ve3242,ve3244>;

//temp14 = sqrt(temp13)
resetMv temp14[32];
calculateMv temp14 = SQRT(temp13);

//z32[0] = temp14[0] - inputsVector[2]
resetMv z32[32];
resetMv mv3246[2];
setMv mv3246[0] = temp14[0];
setMv mv3246[1] = inputsVector[-2];
setVector ve3245 = mv3246[0,1];
dotVectors z32[0] = <ve3245>;

